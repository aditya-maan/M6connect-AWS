<?php


//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Hooks and Setup Functions
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

  //-------------------------------------------------------------------------------------------|
  //  Implementation of hook_menu, this provides a front-end for the importer
  //-------------------------------------------------------------------------------------------|
    function csvImporter_menu() {
      $items['csvImporter'] = array(
        'title' => 'Import Data from CSV File',
        'description' => 'Import content from a <abbr title="Comma Separated Values">CSV</abbr> file.',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'page callback' => 'csvImporter_pagecallback',
        'type' => MENU_NORMAL_ITEM,
      );
      return $items ;
    }
  //-------------------------------------------------------------------------------------------|
  //  End hook_menu
  //-------------------------------------------------------------------------------------------|
  
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End hooks and setup functions
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

//-------------------------------------------------------------------------------------------|
//  Page callback function for the menu item
//  This just returns our $form
//-------------------------------------------------------------------------------------------|

  function csvImporter_pagecallback(){
    $module_path = drupal_get_path('module', 'csvImporter');
    
    $form = drupal_get_form('csvImporter_form');
    
    $output = "<p>This tool will attempt to import CSV data";
    $output .= drupal_render($form);
    
    return $output;
  }

//-------------------------------------------------------------------------------------------|
//  End page callback function for the menu item
//-------------------------------------------------------------------------------------------|


//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Form builder, validate, and submit functions for the importer form
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
  function csvImporter_form() {
    $form['#attributes'] = array(
      'enctype' => 'multipart/form-data'
    );
  
    $form['csvfile'] = array( 
      '#title' => t('CSV File'),
      '#type'  => 'file',
      '#description' => ($max_size = parse_size(ini_get('upload_max_filesize'))) ? t('Due to server restrictions, the <strong>maximum upload file size is !max_size</strong>. Files that exceed this size will be disregarded.', array('!max_size' => format_size($max_size))) : '',    
    ) ;
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Commence Import'),
    ) ;
    $form['#validate'] = array(
      'csvImporter_validate_fileupload',
      'csvImporter_form_validate',
    ) ;
    return $form ;
  }


  function csvImporter_validate_fileupload(&$form, &$form_state) {
    $validators = array(
      'file_validate_extensions' => array( 'csv' ),
    );
    if ( $file = file_save_upload('csvfile', $validators, "public://", FILE_EXISTS_REPLACE) ) {
      $form_state['values']['csvupload'] = $file->destination;       
    }
    else {
      form_set_error('csvImporter', t('Unable to copy upload file to !dest', array('!dest' => $destination)));
    }      
  }


  function csvImporter_form_validate(&$form, &$form_state) {
    // if ( isset( $form_state['values']['csvupload'] ) ) {
    //   if ( $handle = fopen($form_state['values']['csvupload'], 'r') ) {
    //     $line_count = 1 ;
    //     $first = TRUE ;
    //     if ( $line = fgetcsv($handle, 4096) ) {
  
    //       //-------------------------------------------------------------------------------------------|
    //       //  This is where you can validate aspects of the file itself, like the number of columns
    //       //-------------------------------------------------------------------------------------------|
    //         if(count($line) != 3){
    //           //form_set_error('csvfile', t('This file has the incorrect number of columns. Expecting 3'));
    //         }
    //       //-------------------------------------------------------------------------------------------|
    //       //  End validating aspects of the CSV file
    //       //-------------------------------------------------------------------------------------------|
          
          
          
    //     }
    //     fclose($handle);
    //   }
    //   else {
    //     form_set_error('csvfile', t('Unable to read uploaded file !filepath', array('!filepath' => $form_state['values']['csvupload'])));
    //   }
    // }
  }


  function csvImporter_form_submit(&$form, &$form_state) {
    $batch = array(
      'title' => t('Importing CSV ...'),
      'operations' => array(),
      'init_message' => t('Commencing'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('An error occurred during processing'),
      'finished' => 'csvImporter_import_finished',
    );
    if ( isset( $form_state['values']['csvupload'] ) ) {
      if ( $handle = fopen($form_state['values']['csvupload'], 'r') ) {
        // $batch['operations'][] = array('_csvImporter_remember_filename', array( $form_state['values']['csvupload'] ) ) ;
        $line_count = 1 ;
        $first = TRUE ;
        // $line = fgetcsv($handle);
        // dpm($line, 'line');
        while ( $line = fgetcsv($handle) ) {
          // dpm($line, 'line');
          if (!$first) {
            $batch['operations'][] = array('_import_vendors', array($line));
          }
          $first = FALSE;
        }
        fclose($handle);
      } // we caught this in csvImporter_form_validate()
    } // we caught this in csvImporter_form_validate()
    batch_set($batch);
  }

//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End Form builder, validate, and submit functions for the importer form
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|


//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Batch API helpers
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

  function csvImporter_import_finished($success, $results, $operations) {
    if ( !empty($results['failed_rows']) ) {
      $dir  = file_directory_path() . '/csvImporter/' ;
      if ( file_check_directory( $dir, FILE_CREATE_DIRECTORY ) ) {
        $csv_filename = 'failed_rows-'. basename($results['uploaded_filename']); // we validated extension on upload
        $csv_filepath = $dir .'/'. $csv_filename;
        $targs = array(
          '!csv_url' => l(check_plain($csv_filename), $csv_filepath),
          '%csv_filename' => $csv_filename,
          '%csv_filepath' => $csv_filepath,
        ) ;
        if ( $handle = fopen($csv_filepath, 'w+') ) {
          foreach( $results['failed_rows'] as $failed_row ) {
            fputcsv($handle, $failed_row);
          }
          fclose($handle);
          drupal_set_message(t('Some rows failed to import. You may download a CSV of these rows: !csv_url', $targs), 'error');
        }
        else {
          drupal_set_message(t('Some rows failed to import, but unable to write error CSV to %csv_filepath', $targs), 'error');
        }
      }
      else {
        drupal_set_message(t('Some rows failed to import, but unable to create directory for error CSV at %csv_directory', $targs), 'error');
      }
    }
    return t('The CSV import has completed.');
  }
  
  
  function _csvImporter_remember_filename($filename, &$context) {
    $context['results']['uploaded_filename'] = $filename;
  }

//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End batch API helpers
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

//-------------------------------------------------------------------------------------------|
//  The important part, this is where we "do something" with an individual CSV line
//-------------------------------------------------------------------------------------------|

function _csvImporter_import_line($line, $session_nid, &$context) {
      
    $context['results']['rows_imported']++;
    $line = $cleaned_line = array_map('base64_decode', $line);
    
    //drup_msg($line);
	
	if($line[0]){
		if(isset($line[1]) && !empty($line[1])){
	  $node = node_load($line[0]);	
	  
	 /* 
      $d1= strtotime($line[1]);
	  $d2 = date("Y-m-d h:i:s", $d1);
	  
	  //drup_msg($d1);
	  //drup_msg($d2);
	  
	    $node->field_asset_date_purchased['und'][0]['value'] = $d2;*/
	  $node->field_wo_type['und'][0]['target_id'] = 52921;
	  node_save($node);
	  }
	}
    //-------------------------------------------------------------------------------------------|
    //  Give feedback to the importer about which operation we're preforming
    //-------------------------------------------------------------------------------------------|
      //Show the row count by default
      $context['message'] = t('Importing row !c', array( '!c' => $context['results']['rows_imported'] ));
    
      //Or, Provide some feedback about the row currently being processed
      $context['message'] = t('Importing %title', array('%title' => $line[0]));
    //-------------------------------------------------------------------------------------------|
    //  End giving feedback to the importer
    //-------------------------------------------------------------------------------------------|
  
    //-------------------------------------------------------------------------------------------|
    //  This is where you would convert the line of the CSV file into a new object, be it a node, user, etc.
    //-------------------------------------------------------------------------------------------|
  
      //drupal_set_message("Parsed line {$line[0]}");
  
    //-------------------------------------------------------------------------------------------|
    //  End converting the line to a drupal object
    //-------------------------------------------------------------------------------------------|
    
    //-------------------------------------------------------------------------------------------|
    //  You can capture and report on failed lines by doing something like this
    //-------------------------------------------------------------------------------------------|
      if ( $line[1] == 'ROW' && $line[2] == 'FAILS' ) {
        $context['results']['failed_rows'][] = $line ;
      }
    //-------------------------------------------------------------------------------------------|
    //  End capturing and reporting on failed lines
    //-------------------------------------------------------------------------------------------|
  }

//-------------------------------------------------------------------------------------------|
//  End converting an individual line of the CSV into something new
//-------------------------------------------------------------------------------------------|