<?php

/**
 * Implements hook_init().
 */
// function m6connect_company_init() {
//   $path = $_GET['q'];
//   $arguments = explode('/', $path);
//   if ($arguments[0] == 'company' && empty($arguments[2])) {
//     // When viewing a company profile.
//     drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/cropit-master/dist/m6connect_dash.js');
//   }
//   if ($arguments[0] == 'update-company-logo-photo') {
//     drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/cropit-master/dist/m6connect_dash.js');
//   }
// }
function m6connect_company_theme() {
  return array(
    'proposal_comment_display' => array(
      'variables' => array('comment_id' => NULL,'pro_id' =>NULL, 'use_id' => NULL),
    'path' => drupal_get_path('theme', 'm6connect').'/templates',
    'template' => 'view-proposal-comment',
    ),
  'proposal_test_options' => array(
    'render element' => 'form',
  ),
  'messenger_new_message_notify' => array(
    'variables' => array('data' => array()),
    'path' => drupal_get_path('module', 'm6connect_company').'/includes',
      'template' => 'messenger_new_message_notify',
  ),
  );
  return $items;
} 

function m6connect_company_menu() {
  $items['companies'] = array(
    'title'              => t('Companies'),
    'page callback'      => 'companies_view',
    //'access arguments' => array('access content'),
    'access arguments'   => array('m6connect_authenticate_user'),
    //'type'             => MENU_LOCAL_TASK,
    'type'               => MENU_CALLBACK,
    'weight'             => '1',
  );

  $items['drag_drop_company/%/%node'] = array(
    'title'            => t('Drag Drop Company Callback'),
    'page callback'    => 'drag_drop_company_callback',
    'page arguments'   => array(1, 2),
    'access arguments' => array('m6connect_authenticate_user'),
    'type'             => MENU_CALLBACK,
  );

  $items['sort_drag_drop_company/%/%'] = array(
    'title'            => t('Sort Drag Drop Company Callback'),
    'page callback'    => 'sort_drag_drop_company_callback',
    'page arguments'   => array(1, 2),
    'access arguments' => array('m6connect_authenticate_user'),
    'type'             => MENU_CALLBACK,
  );

  $items['favorite-content'] = array(
    'title'            => t('Company  Favorite Content Callback'),
    'page callback'    => '_generate_bookmark_fav_block_content_ajax',
    'page arguments'   => array(),
    'access arguments' => array('m6connect_authenticate_user'),
    'type'             => MENU_CALLBACK,
  );

  $items['change-company-view/%'] = array(
    'title'            => t('Company view Callback'),
    'page callback'    => '_generate_company_view_by_ajax',
    'page arguments'   => array(1),
    'access arguments' => array('m6connect_authenticate_user'),
    'type'             => MENU_CALLBACK,
  );

  $items['change-share-company-fav/%node'] = array(
    'title'            => t('Change Company Favorite Share Option'),
    'page callback'    => 'change_company_fav_share',
    'page arguments'   => array(1),
    'access arguments' => array('m6connect_authenticate_user'),
    'type'             => MENU_CALLBACK,
  );

  // Proposal Ajax Menu Item
  $items['my-proposal/ajax/action/%'] = array(
    'title'            => 'Proposal Callback',
    'page callback'    => 'my_proposal_ajax_action_callback',
    'page arguments'   => array(3),
    'access arguments' => array('m6connect_authenticate_user'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['proposal_comment_view/%/%'] = array(
    'page callback'    => 'my_proposal_comment_view_callback',
    'page arguments'   => array(1,2),
    'access arguments' => array('m6connect_authenticate_user'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['switch/%'] = array(
    'title'            => 'switch user',
    'page callback'    => 'm6connect_company_switch_current_company',
    'page arguments'   => array(1),
    'access arguments' => array('m6connect_authenticate_user'),
    'type'             => MENU_CALLBACK,
  );
  $items['customJoinCompany/%'] = array(
    'title'            => 'Join company',
    'page callback'    => 'custom_join_company',
    'page arguments'   => array(1),
    'access arguments' => array('m6connect_authenticate_user'),
    'type'             => MENU_CALLBACK,
  );
  $items['sendinvite-users/%ctools_js'] = array(
    'title'           => 'Invite People to Join M6Connect',
    'page callback'   => 'm6connect_company_sendinvite_users_form',
    'page arguments'  => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'modal'           => TRUE,    
  );
  
  $items['reassign/%node/proposal'] = array(
    'title'             => 'Reassign Proposal',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('proposal_reassign_form',1),
    'access callback'   => 'proposal_reassign_proposal_access_callback',
    'access arguments'  => array(1),
  );
  
  $items['m6message/connect/%user'] = array(
    'title'           => 'M6 Message',
    'page callback'   => 'm6message_connect_callback',
    'page arguments'  => array(2),
    'access callback' => 'user_is_logged_in',
  );
  
  $items['user-messaging'] = array(
    'title'           => 'Messenger',
    'page callback'   => 'user_messaging_callback',
    'access callback' => 'user_is_logged_in',
  );
  
  $items['m6message-attachment'] = array(
    'title'           => 'M6 Message Attachment',
    'page callback'   => 'user_messaging_attachment_callback',
    'access callback' => 'custom_check_user_is_logged_in',
  );
  
  $items['m6messaging-user-search-ajax'] = array(
    'page callback'   => 'get_m6messaging_user_detail_ajax', 
    'access callback' => TRUE,
  );
  
  $items['m6message-insert-message'] = array(
    'page callback'   => 'm6message_insert_message_ajax_callback', 
    'access callback' => 'custom_check_user_is_logged_in',
  );
  
  $items['m6message-refresh-message'] = array(
    'page callback'   => 'm6message_refresh_message_ajax_callback', 
    'access callback' => 'custom_check_user_is_logged_in',
  );
  
  $items['messenger-forword-message'] = array(
    'page callback'   => 'm6message_forword_message_ajax_callback', 
    'access callback' => 'user_is_logged_in',
  );
  
  $items['messenger-delete-message'] = array(
    'page callback'   => 'm6message_delete_message_ajax_callback', 
    'access callback' => 'user_is_logged_in',
  );

  $items['m6message-update-seenby'] = array(
    'page callback'   => 'm6message_update_seenby_ajax_callback', 
    'access callback' => '_is_m6_user_logged_in_for_request',
  );
  
  $items['messenger-goto/%'] = array(
    'page callback'   => 'm6message_goto_mapping_callback', 
    'page arguments'  => array(1),
    'access callback' => 'user_is_logged_in',
  );
  
  $items['m6message-exit-group'] = array(
    'page callback'   => 'm6message_exit_group_ajax_callback', 
    'access callback' => 'user_is_logged_in',
  );
  
  $items['m6message-clear-conversation'] = array(
    'page callback'   => 'm6message_clear_conversation_ajax_callback', 
    'access callback' => 'user_is_logged_in',
  );
  
  $items['m6message-cron-mail'] = array(
    'page callback'   => 'messenger_cron_mail_handler', 
    'access callback' => TRUE,
  );
  
  $items['proposal-moved-archive-cron'] = array(
    'page callback'   => '_cron_proposal_moved_archived_bid_date_passed',
    'access callback' => TRUE,
  );
  
  $items['access-proposal-amount/%node'] = array(
    'title'            => 'Proposal Amount Access',
    'page callback'    => 'access_proposal_amount_callback',
    'page arguments'   => array(1),
    'access arguments' => array('m6connect_authenticate_user'),
    'type'             => MENU_CALLBACK,
  );
  
  /*$items['access-proposal-content/%node/%ctools_js'] = array(
        'title'            => 'Proposal Callback',
        'page callback'    => 'my_proposal_ajax_action_callback',
        'page arguments'   => array(3),
        'access arguments' => array('m6connect_authenticate_user'),
        'type'             => MENU_CALLBACK,
    );*/
  
  $items['opt-out-email'] = array(
    'page callback'   => 'user_opt_out_email_redirect',
    'access callback' => 'user_is_logged_in',
  );
  $items['update-company-logo-photo/%/%ctools_js'] = array(
    //'title' => 'Upload File',
    'page callback'   => 'update_company_logo_callback',
    'page arguments'  => array(1, 2),
    'access callback' => 'user_is_logged_in', 
  );
  $items['update-company-banner-photo/%/%ctools_js'] = array(
    //'title' => 'Upload File',
    'page callback'   => 'update_company_banner_callback',
    'page arguments'  => array(1, 2),
    'access callback' => 'user_is_logged_in', 
  );
  
  $items['remove-img-from-node-ajax'] = array(
    'title'           => t('Remove Image From Node - Drupal'),
    'page callback'   => 'remove_img_from_node_ajax',
    'access callback' => TRUE,
  );
  $items['remove-banner-from-node-ajax'] = array(
    'title'           => t('Remove Banner From Node - Drupal'),
    'page callback'   => 'remove_banner_from_node_ajax',
    'access callback' => TRUE,
  );

  $items['email-chat/%/%ctools_js'] = array(
    'page callback'   => 'email_chat_user_messaging',
    'page arguments'  => array(1,2),
    'access callback' => TRUE,
  );
    return $items;
}

/**
 * Access callback for some menu items.
 */
function custom_check_user_is_logged_in() {
  if (user_is_logged_in() || !empty($_SESSION['login-mail'])) {
    return TRUE;
  }
  return FALSE;
}
/**
 * Menu callback for removing image from node via ajax.
 */
function remove_img_from_node_ajax() {
  if (!empty($_POST['nid'])) {
    $nid = $_POST['nid'];
    if ($node = node_load($nid)) {
      if (!empty($node->field_logo['und'])) {
        unset($node->field_logo['und']);
        field_attach_presave('node', $node);
        field_attach_update('node', $node);
        entity_get_controller('node')->resetCache(array($node->nid));
        print '1';
      }
      else {
        print '2';
      }
    }
    else {
      print '3';
    }
  }
  else {
    print '4';
  }
  drupal_exit();
}

/**
 * Menu callback for removing banner image from node via ajax.
 */
function remove_banner_from_node_ajax() {
  if (!empty($_POST['nid'])) {
    $nid = $_POST['nid'];
    if ($node = node_load($nid)) {
      if (!empty($node->field_company_profile_cover_img['und'])) {
        unset($node->field_company_profile_cover_img['und']);
        field_attach_presave('node', $node);
        field_attach_update('node', $node);
        entity_get_controller('node')->resetCache(array($node->nid));
        print '1';
      }
      else {
        print '2';
      }
    }
    else {
      print '3';
    }
  }
  else {
    print '4';
  }
  drupal_exit();
}

function proposal_reassign_proposal_access_callback($proposalNode,$fromCallback=TRUE){
  global $user;
  $currCompNid = $_SESSION['company'];
  $submitted_for = (isset($proposalNode->field_choose_from_the_options_li['und']) && !empty($proposalNode->field_choose_from_the_options_li['und'][0]['value']))?$proposalNode->field_choose_from_the_options_li['und'][0]['value']:'';
  $subbmittedPossible = array(
    'Submit Proposal in Response to a RFP' => 'field_submit_proposal_in_respons',
    'Submit Proposal in Response to a Project' => 'field_field_sub_proposal_pjt', 
 //'Submit Proposal to a company' => 'field_submit_proposal_to_company',
  );
  if($currCompNid == _get_company_nid_by_group_content($proposalNode) && $proposalNode->uid == $user->uid){
    if($fromCallback){
      return TRUE; 
    }else{
      return 'submitter';
    }
  }else if($submitted_for == 'Submit Proposal to a company' && isset($proposalNode->field_submit_proposal_to_company['und']) && $proposalNode->field_submit_proposal_to_company['und'][0]['target_id'] == $currCompNid){
    if($fromCallback){
      return TRUE; 
    }else{
      return 'receiver';
    }
  }else if (array_key_exists($submitted_for,$subbmittedPossible) && (isset($proposalNode->{$subbmittedPossible[$submitted_for]}['und']) && !empty($proposalNode->{$subbmittedPossible[$submitted_for]}['und'][0]['target_id']))){
    $targetNode = node_load($proposalNode->{$subbmittedPossible[$submitted_for]}['und'][0]['target_id']);
    if(in_array($currCompNid,_get_company_nids_by_proposal_target_node($targetNode)) && (($targetNode->uid == $user->uid) || (is_proposal_project_collabarated($proposalNode)))){
      if($fromCallback){
        return TRUE; 
      }else{
        return 'receiver';
      } 
    }
  }
  return FALSE; 
}

function m6connect_company_views_query_alter(&$view, &$query) {  
  global $user, $company;
  if($view->name == 'receiver_propsosal_to_submit') {
  if(isset($query->where[0])){
    $group = 0;
    if($view->current_display == 'entityreference_view_widget_1'){
      $collabaratedrfps = get_proposal_received_collaborate_rfps();
      if(!empty($collabaratedrfps)){
        $query->set_where_group('OR', $group);
      $query->where[$group]['conditions'][] = array(
        'field' => 'node.nid IN(:node_nid)',
        'value' => array(':node_nid'=>$collabaratedrfps),
        'operator' => 'formula',
      );
      }
    }else if($view->current_display == 'entityreference_view_widget_2'){
       $collabaratedprojects = get_proposal_received_collaborate_projects();  
     if(!empty($collabaratedprojects)){
        $query->set_where_group('OR', $group);
      $query->where[$group]['conditions'][] = array(
        'field' => 'node.nid IN(:node_nid)',
        'value' => array(':node_nid'=>$collabaratedprojects),
        'operator' => 'formula',
      );
      }
    }
  }
  }
}

function get_proposal_received_collaborate_rfps(){
  global $user, $company; 
  $query= db_select('field_data_field_project','fp');
  $query->join('node', 'n', 'fp.field_project_target_id=n.nid');
  $query->join('og_membership','om','om.etid=fp.entity_id AND om.entity_type=:EntityType AND om.group_type=:GroupType', array(':EntityType'=>'node',':GroupType'=>'node'));
  $query->leftjoin('field_data_field_project_invite_comapnies', 'pic', 'pic.entity_id=n.nid');
  $query->leftjoin('field_data_field_company_nid_mail', 'pcne', 'pcne.entity_id = pic.field_project_invite_comapnies_value');
  $query->leftjoin('field_data_field_comapny_manager', 'pcimu', 'pcimu.entity_id = pic.field_project_invite_comapnies_value');
  $query->fields('fp',array('entity_id'));
  $query->condition('n.type','project');
  $query->condition('n.status',1);
  $query->where('(((pcimu.field_comapny_manager_value IS NOT NULL) AND (pcne.field_company_nid_mail_value=:companyNid) AND 
     (FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)) OR (n.uid=:UserUid AND om.gid!=:companyNid))', array(':UserUid' => $user->uid, ':companyNid' => $company->nid));
  $collabaratedrfps = $query->execute()->fetchCol();
  return $collabaratedrfps;
}

function get_proposal_received_collaborate_projects(){
  global $user, $company; 
  $query= db_select('node','n');
  $query->leftjoin('field_data_field_project_invite_comapnies', 'pic', 'pic.entity_id=n.nid');
  $query->leftjoin('field_data_field_company_nid_mail', 'pcne', 'pcne.entity_id = pic.field_project_invite_comapnies_value');
  $query->leftjoin('field_data_field_comapny_manager', 'pcimu', 'pcimu.entity_id = pic.field_project_invite_comapnies_value');
  $query->fields('n',array('nid'));
  $query->condition('n.type','project');
  $query->condition('n.status',1);
  $query->where('(((pcimu.field_comapny_manager_value IS NOT NULL) AND (pcne.field_company_nid_mail_value=:companyNid) AND (FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)))', array(':UserUid' => $user->uid, ':companyNid' => $company->nid));
  $collabaratedprojects = $query->execute()->fetchCol();
  return $collabaratedprojects;
}

function m6connect_company_validate_user_license() {
    global $user, $company;
    $uid = $user->uid;
    $cid = $company->nid;
    $query = db_select('license_assign', 'la');
    $query->fields('la');
    $query->condition('assign_to', $uid, '=');
    $query->condition('cid', $cid, '=');
    $query->condition('is_active', 1, '=');
    $result = $query->execute()->fetchAll();
    if (count($result) > 0) {
        return true;
    } else {
        return false;
    }
}

function m6connect_company_sendinvite_users_form($ajax = null) {
    module_load_include('inc', 'invite', 'includes/invite.admin');
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $form_state['ajax'] = true;
        $output = ctools_modal_form_wrapper('invite_add_multiple', $form_state);
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        print ajax_render($output);
        drupal_exit();
    }
    return drupal_get_form('invite_add_multiple');
}

function drag_drop_company_callback($parent, $node) {
    global $user;
    if ($node->type == 'organization') {
        $flag = flag_get_flag('bookmarks');
        if ($flag && !$flag->is_flagged($node->nid)) {
            $flag->flag('flag', $node->nid, $user, TRUE);
        }
    }
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    $bookmarkItem = bookmarkorganizer_get_item_by_content($node->nid, $user->uid, $type = 'node');
    if ($bookmarkItem) {
        $fields = array('parent' => $parent, 'updated' => time('YYYY-MM-DD HH:MM:SS'));
        $query = db_update('bookmarkorganizer_item');
        $query->fields($fields);
        $query->condition('id', $bookmarkItem->id);
        $query->execute();
    }

    //$bookmarkElements = bookmarkorganizer_main_view($user);
    //$bookmarkblock = drupal_render($bookmarkElements);
    drupal_json_output(array(
        //'html'=> $bookmarkblock,
        'html' => _generate_bookmark_fav_block_content(),
        'parent' => $parent,
        'nid' => $node->nid,
    ));
}

function sort_drag_drop_company_callback($item1, $item2) {
    global $user;
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    if (isset($_REQUEST['drag']) && !empty($_REQUEST['drag']) && isset($_REQUEST['drop']) && !empty($_REQUEST['drop'])) {
        $dragType = trim($_REQUEST['drag']);
        $droptype = trim($_REQUEST['drop']);
        $bookmarkItem1 = bookmarkorganizer_get_item_by_content($item1, $user->uid, $type = $dragType);
        $bookmarkItem2Parent = 0;
        if ($droptype != 'root') {
            $bookmarkItem2 = bookmarkorganizer_get_item_by_content($item2, $user->uid, $type = $droptype);
            $bookmarkItem2Parent = $bookmarkItem2->id;
        }
        if ($bookmarkItem1 && is_numeric($bookmarkItem2Parent)) {
            $parent = $bookmarkItem2Parent;
            if ($droptype == 'node') {
                $parent = $bookmarkItem2->parent;
            }
            $fields = array('parent' => $parent, 'updated' => time('YYYY-MM-DD HH:MM:SS'));
            $query = db_update('bookmarkorganizer_item');
            $query->fields($fields);
            $query->condition('id', $bookmarkItem1->id);
            $query->execute();
        }
    }
    drupal_json_output(array(
        'html' => _generate_bookmark_fav_block_content(),
    ));
}

function company_query($details = '', $starts = 0) {
    if(isset($_REQUEST['start_range']) && !empty($_REQUEST['start_range'])){
      $starts = $_REQUEST['start_range'];
    }
    $co_name = isset($_REQUEST ['co_name']) ? $_REQUEST ['co_name'] : '';
    $co_filter = isset($_REQUEST ['co_filter']) ? $_REQUEST ['co_filter'] : '';
    $co_facilities = isset($_REQUEST ['co_facilities']) ? $_REQUEST ['co_facilities'] : '';
    $co_region = isset($_REQUEST ['co_region']) ? $_REQUEST ['co_region'] : '';
    $co_industries = isset($_REQUEST ['co_industries']) ? $_REQUEST ['co_industries'] : '';
    $co_pservices = isset($_REQUEST ['co_pservices']) ? $_REQUEST ['co_pservices'] : '';
    //$co_economic = isset($_REQUEST ['co_economic'] ) ? $_REQUEST ['co_economic'] : '';
    $co_diversity = isset($_REQUEST ['co_diversity']) ? $_REQUEST ['co_diversity'] : ''; //pre($pro_diversity);
    $co_div_arr = array(0);
    if (!empty($co_diversity)) {
        $co_div_arr = explode(',', $co_diversity); //pre($co_div_arr);
    }
    $co_div_arr = array_filter($co_div_arr);

    $type = array('organization');
    $counter = 0;
    $or = db_or();
    if ($details == 'list') {
        $query = db_select('node', 'n');
    } else {
        $query = db_select('node', 'n')->extend('PagerDefault');
    }
    $query->fields('n', array('nid'));
    if ($details == 'list') {
        $query->fields('n', array('title'));
    }
    $query->condition('type', $type, 'IN');

    //************************** Start (Not Show Company When they are Inctive) **************************/
    $ic_or = db_or();
    $query->leftJoin('field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid');
    $ic_or->condition('ic.field_company_inactive_value', 1, '!=')->condition('ic.field_company_inactive_value', NULL);
    $query->condition($ic_or);
    //*************************** End (Not Show Company When they are Inctive) ***************************/
    //************************** Start (Show Company When show company active) **************************/
    $query->leftJoin('field_data_field_show_company_in_search', 'isa', 'isa.entity_id = n.nid');
    $is_or = db_or();
    //$is_or->condition('isa.field_show_company_in_search_value', 1, '=')->condition();
    $query->condition('isa.field_show_company_in_search_value', 1, '=');
    //*************************** End (Show Company When show company active) ***************************/
    //************************** Start (Not Show Company When they are not company type) **************************/
    $query->leftJoin('field_data_field_type_of_company', 'tc', 'tc.entity_id = n.nid');
    $query->condition('tc.field_type_of_company_value', 'company', '=');
    //*************************** End (Not Show Company When they are not company type) ***************************/

    if (!empty($co_name)) {
        $query->leftJoin('field_data_field_keywords', 'k', 'k.entity_id = n.nid');
        $query->leftJoin('field_data_field_description', 'd', 'd.entity_id = n.nid');
        $query->fields('k');
        $query->fields('d');

        $or->condition('n.title', '%' . db_like($co_name) . '%', 'LIKE');
        $or->condition('k.field_keywords_value', '%' . db_like($co_name) . '%', 'LIKE');
        $or->condition('d.field_description_value', '%' . db_like($co_name) . '%', 'LIKE');
        $query->condition($or);
    }
    if (!empty($co_facilities)) {
        $query->Join('field_data_field_facilities_construction', 'cf', 'cf.entity_id = n.nid');
        $query->fields('cf');
        //$query->condition('cf.field_facilities_construction_tid', $co_facilities, '=');
        //$co_facilities_tids = taxonomy_get_children($co_facilities);
        $co_facilities_tids = taxonomy_get_children_all($co_facilities);
        $fctids = array();
        if (!empty($co_facilities_tids)) {
            $rctids[] = $co_facilities;
            foreach ($co_facilities_tids as $fk => $fv) {
                $fctids[] = $fv->tid;
            }
        } else {
            $fctids[] = $co_facilities;
        }
        $query->condition('cf.field_facilities_construction_tid', $fctids, 'IN');
    }
    if (!empty($co_region)) {
        $query->Join('field_data_field_regions', 'cr', 'cr.entity_id = n.nid');
        $query->fields('cr');
        //$co_region_tids = taxonomy_get_children($co_region);
        $query->leftjoin('field_data_field_org_address', 'oa', 'oa.entity_id = n.nid');
        $region_or = db_or();
        $region_term = taxonomy_term_load($co_region);
        $region_or->condition('oa.field_org_address_locality', db_like($region_term->name), 'LIKE');
        $co_region_tids = taxonomy_get_children_all($co_region);
        //kpr($co_region_tids);
        $rctids = array();
        if (!empty($co_region_tids)) {
            $rctids[] = $co_region;
            foreach ($co_region_tids as $rk => $rv) {
                $rctids[] = $rv->tid;
                $region_or->condition('oa.field_org_address_locality', db_like($rv->name), 'LIKE');
            }
        } else {
            $rctids[] = $co_region;
        }
        $region_or->condition('cr.field_regions_tid', $rctids, 'IN');
        $query->condition($region_or);
    }
    if (!empty($co_industries)) {
        $query->Join('field_data_field_industry_naicss', 'ci', 'ci.entity_id = n.nid');
        $query->fields('ci');
        //$co_industries_tids = taxonomy_get_children($co_industries);
        $co_industries_tids = taxonomy_get_children_all($co_industries);
        $ictids = array();
        if (!empty($co_industries_tids)) {
            $ictids[] = $co_industries;
            foreach ($co_industries_tids as $ik => $iv) {
                $ictids[] = $iv->tid;
            }
        } else {
            $ictids[] = $co_industries;
        }
        $query->condition('ci.field_industry_naicss_tid', $ictids, 'IN');
    }
    if (!empty($co_pservices)) {
        $query->Join('field_data_field_products_service_unspsc', 'cp', 'cp.entity_id = n.nid');
        $query->fields('cp');
        //$co_pservices_tids = taxonomy_get_children($co_pservices);
        $co_pservices_tids = taxonomy_get_children_all($co_pservices);
        $sctids = array();
        if (!empty($co_pservices_tids)) {
            $sctids[] = $co_pservices;
            foreach ($co_pservices_tids as $sk => $sv) {
                $sctids[] = $sv->tid;
            }
        } else {
            $sctids[] = $co_pservices;
        }
        $query->condition('cp.field_products_service_unspsc_tid', $sctids, 'IN');
    }
    /* if(!empty($co_economic)){
      $query->Join('field_data_field_products_service_unspsc', 'cp', 'cp.entity_id = n.nid');
      $query->fields('cp');
      $query->condition('cp.field_products_service_unspsc_tid', $co_economic, '=');
      } */
    if ($co_div_arr) { //pre($pro_div_arr,1);
        $query->Join('field_data_field_diversity_credentials', 'dt', 'dt.entity_id = n.nid');
        $query->fields('dt');
        $query->condition('dt.field_diversity_credentials_target_id', $co_div_arr, 'IN');
    }
    //Favorites Filter Start
    $favoriteFolderID = '';
    $foldername = '';
    $foldertype = '';

    if (isset($_REQUEST['favorite']) && $_REQUEST['favorite'] != '') {
        $favoriteFolderID = trim($_REQUEST['favorite']);

        $item = bookmarkorganizer_get_item($favoriteFolderID);
        if ($item && is_object($item) && $item->type == 'node') {
            $query->condition('n.nid', array($item->content_id), 'IN');
        } else {
            $foldername = ($item && is_object($item)) ? $item->label : 'My Favorites';
            $companyuid = '';
            if ($_REQUEST['cpmpany_uid'] && !empty($_REQUEST['cpmpany_uid'])) {
                $companyuid = trim($_REQUEST['cpmpany_uid']);
                $foldername = 'Shared Favorites';
            }
            $favnodeIds = get_favorites_nodes_by_folder_id($favoriteFolderID, $companyuid);
            if (is_array($favnodeIds) && count($favnodeIds) > 0) {
                $query->condition('n.nid', $favnodeIds, 'IN');
            } else {
                $query->condition('n.nid', array(0), 'IN');
            }
        }
    }
    /* if($_REQUEST['favorite'] && $_REQUEST['favorite']==1){
      $favnids= array();
      $favnodeIds = get_all_favorites_node_nids();
      if(is_array($favnodeIds)){
      $favnids = $favnodeIds;
      }
      $query->condition('n.nid', $favnodeIds, 'IN');
      } */
    //End Favorites Filter

    $query->orderBy('created', 'DESC');
    $query->groupBy('n.nid');
    if ($details != 'list') {
      if(!empty($starts)){
        $query->range($starts, 10);
      }
      else{
        $query->limit(15);
      }
    }
    else{
      if(!empty($starts)){
        $query->range($starts, 10);
      }
    }
    $result = $query->execute();
    return $result;
}

function companies_view($onlyComanyListing = FALSE) {
    drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery-ias.min.js');
    drupal_add_js("jQuery(document).ready(function(){  if(jQuery('body').hasClass('page-companies')){
  jQuery.ias({
    container : '#cust-company-listings', 
    item: '.company-item',
    pagination: '.nav',
    next: '.nav a',
    loader: '<img src=\'sites/all/themes/m6connect/images/ajax-loader.gif\'>',
    triggerPageThreshold: 0,
    trigger: 'See More', 
  }); } });", 'inline');
    //drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/scroll/m6connect_infinite_scroll.js');
    global $base_url, $user;
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    $output = '';
    if (!$onlyComanyListing) {
        $output .= '<div class="custom-companies-lists">';
        $output .= '<div class="row margin-5">';
        $output .= '<div class="cust-company-search-form col-md-3 col-sm-12 col-xs-12 padding-5">';
        $output .= drupal_render(drupal_get_form('cust_company_search_form'));
        $output .= '</div>';
    }

    $result = company_query();
    /////////////////////////////////////////////////////////////////////////////////
    if (!$onlyComanyListing) {
        $output .= '<div class="col-md-9 col-sm-12 col-xs-12 company-select-filter-list padding-5">';
    }
    $querystring = $_SERVER['QUERY_STRING'];
    if (!empty($co_name) || !empty($co_facilities) || !empty($co_region) || !empty($co_industries) || !empty($co_pservices) || !empty($co_div_arr) || (($favoriteFolderID != '') && $onlyComanyListing === FALSE)) {
        $output .= '<input type="hidden" class="site_base_url" value="' . $base_url . '">';
        $output .= '<label class="select-title">Your Selections:</label>';
        if ($favoriteFolderID != '') {  //$favoriteFolderID     $foldername
            $output .= '<span class="cust-selection-list cust-favorite-filter"><span class="sfilter-label">Favorite: <span class="sfilter-value">' . $foldername . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">favorite</span><span class="sfilter-val">' . $favoriteFolderID . '</span><span class="filter-qstr"></span></span></span>';
        }
        if (!empty($co_name)) {
            //$output .= l('Intersted',$base_url.'/projects'); 
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Name: <span class="sfilter-value">' . $co_name . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_name</span><span class="sfilter-val">' . $co_name . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if ($co_facilities) {
            $term = taxonomy_term_load($co_facilities);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">M6 Company Types: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_facilities</span><span class="sfilter-val">' . $co_facilities . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if (!empty($co_region)) {
            $term = taxonomy_term_load($co_region);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Region: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_region</span><span class="sfilter-val">' . $co_region . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if (!empty($co_industries)) {
            $term = taxonomy_term_load($co_industries);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Industry NAICS: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_industries</span><span class="sfilter-val">' . $co_industries . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if (!empty($co_pservices)) {
            $term = taxonomy_term_load($co_pservices);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Products & Services UNSPSC: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_pservices</span><span class="sfilter-val">' . $co_pservices . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }

        if ($co_div_arr) { //pre($pro_div_arr);
            $output .= '<span class="cust-select-list-dives">Diversity Types:</span>';
            foreach ($co_div_arr as $k => $v) {
                if ($v != '_none') {
                    $dnod = node_load($v);
                    $dname = $dnod->title;
                    $output .= '<span class="cust-selection-list"><span class="sfilter-label"><span class="sfilter-value">' . $dname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_diversity</span><span class="sfilter-val">' . $v . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
                }
            }
        }
    }
    if (!$onlyComanyListing) {
        $output .= '</div>';
    }
    /////////////////////////////////////////////////////////////////////////////////
    $output .= '<div id="cust-company-listings" class="col-md-9 col-sm-12 col-xs-12 padding-5">';
    $bookmarkflag = flag_get_flag('bookmarks');
    $i = 0;
    while ($record = $result->fetchAssoc()) {
        $node = node_load($nid = $record['nid'], $vid = NULL, $reset = FALSE);
        $cirtificate = m6connect_company_get_circtficat($node);
        $dcredetials = isset($node->field_diversity_credentials['und']) ? $node->field_diversity_credentials['und'] : '';
        if ($i == 0) {
//            dsm($node);
        }
        $i++;
        $desc = isset($node->field_description['und']['0']['value']) ? $node->field_description['und']['0']['value'] : '';
        $desc = strip_tags($desc);
        $length_body = strlen($desc);
        if ($length_body > 50) {
            $body = substr($desc, 0, 50) . '...';
        } else {
            $body = $desc;
        }
    
    if(isset($node->field_company_tagline['und']['0']) && !empty($node->field_company_tagline['und']['0']['value'])){
    $companytag = $node->field_company_tagline['und']['0']['value'];
    }
    
        $pimagepath = '';
        $pimgpath = (isset($node->field_logo['und']) && !empty($node->field_logo['und'][0]['uri'])) ? $node->field_logo['und'][0]['uri'] : 0; //pre($pimgpath);
        if ($pimgpath) {
            $pimagepath = image_style_url('thumbnail', $pimgpath);
            //$pimagepath = image_style_url('user_pic_32x32', $pimgpath); 
        }
        //pre($pimagepath);
        //$fa = _get_company_region_address($node);
        //$fa = (!empty($est)) ? '<i class="fa fa-map-marker"></i> ' . $fa : '';
        if(isset($node->field_org_address['und'][0])) {
          if(!empty($node->field_org_address['und'][0]['locality'])) {
          $facity = $node->field_org_address['und'][0]['locality'];
          }
          if(!empty($node->field_org_address['und'][0]['administrative_area'])) {
          $fastate = ', '.$node->field_org_address['und'][0]['administrative_area'];
          }

          }
        $est = '';
        if (isset($node->field_year_founded['und'])) {
            $est = $node->field_year_founded['und'][0]['value'];
        }
        $est = (!empty($est)) ? '<i class="fa fa-calendar"></i> Est. ' . $est : '';
        $arev = '';
        if (isset($node->field_annual_revenue['und'])) {
            $arev = $node->field_annual_revenue['und'][0]['value'];
        }

        if ($counter % 2 == 0) {
            $cls = 'even';
        } else {
            $cls = 'odd';
        }
        //$projectClass='project-dragable';
        //pre($node);
        $output .='<div class="company-item project-box odd project-dragable">';
        $output .='<div class="clearfix row">';
        if ($pimgpath) {
            $output .='<div class="col-md-2 col-sm-2 col-xs-12 company-image"><img src="' . $pimagepath . '" alt="' . $node->title . '" title="' . $node->title . '" /></div>';
        } else {
            $output .='<div class="col-md-2 col-sm-2 col-xs-12 company-image"><img src="sites/all/themes/m6connect/images/default_company_profile.jpg" style="height:100px; width:100px" /></div>';
        }
        $output .= '<div class="col-md-6 col-sm-5 col-xs-12 company-summary">';
        $output .='<h2>' . l($node->title, 'node/' . $node->nid, array('attributes' => array('class' => array('cust-proj-title')))) . '</h2>';
        $output .='<span class="company-nid" style="display:none;">' . $node->nid . '</span>';
    $output .='<div class="company-about">' . $body . '</div>';
        $output .='<div class="company-about">'.$companytag.'</div>';
        $output .= '<div class="company-meta"> <span>'. $facity.$fastate .'</span></span></div>';
    $output .= '<div class="company-meta"><span>'.$est.'</span> <span></i>'.$arev.'</span></div>'; 
        $output .='</div>';
        $output .= '<div class="col-md-1 col-sm-1 col-xs-12 company-summary">';
        $diversityImage ='';
      if($node->nid && is_numeric($node->nid)){
       
            $diversityImage = get_diversity_image_by_comapny_nid($node->nid);
            $output .='<div class="cmpy-cirtificate">';
            $output .= $diversityImage;
            $output .='</div>';
        }
        $output .='</div>';
        $output .='<div class="col-md-3 col-sm-5 col-xs-12 text-left padding-0 company-connect">';

        $output .='<div class="cmpy-btn-seprator">';


        $companies_detail = m6connect_misc_get_user_all_companies($user->uid);
        $set_follow = TRUE;
        foreach ($companies_detail as $key => $val) {
            if ($val->nid == $node->nid) {
                $set_follow = FALSE;
            }
        }
        if ($set_follow) {
            $output .='<div class="cust-invite-btn custom-favorite">' . flag_create_link('favourite', $node->nid) . '</div>';
            $output .= '<div class="cust-invite-btn custom-follow">' . flag_create_link('follow_company', $node->nid) . '</div>';
            $output .= '<div class="cust-invite-btn custom-bookmark">' . flag_create_link('bookmarks', $node->nid) . '</div>';
        }

        /* $output .= '<button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">Action</button>
          <ul class="dropdown-menu dropdown-menu-right">
          <li>' . l('Join', 'customJoinCompany/' . $node->nid) . '</li>
          </ul>
         */
        $output .= '</div>
 </div>';
        //<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">Favorite</button>
        //$output .='<div class="cust-invite-btn col-sm-2 text-right">'.flag_create_link('company_favorite', $node->nid).'</div>';
        /* $output .='<div class="col-sm-3 text-right">
          <div class="btn-group">
          <i class="fa fa-plus"></i> Invite Companies
          </div>
          </div>'; */


        $output .='</div>';
        $output .='</div>';
        $counter++;
    }
    $output .='<div class="clear"></div>';
    // $output .= theme('pager', array('tags' => NULL));


    if ($counter < 1)
        $output .='<div Class="messages status">' . t('No Results available. Please try later.') . '</div>';

    $output .='</div>'; //<div class="col-md-8 col-sm-8 col-xs-12">

    if (!$onlyComanyListing) {
        $output .='</div>';
        $output .= '</div>';
    }

    $next_scroll_page = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('next'))));

    if (isset($next_scroll_page)) {
        $output .= '<div class="nav" style="display: none;">' . $next_scroll_page . '</div>';
    }

    return $output;
}

function cust_company_search_form($form, $form_state) {
    global $user;
    //drupal_add_js(drupal_get_path('module','bookmarkorganizer').'/js/bookmarkorganizer.js');
    drupal_add_library('system', 'ui.draggable');
    drupal_add_library('system', 'ui.droppable');
    drupal_add_library('system', 'ui.sortable');
    drupal_add_library('system', 'ui.dialog');
    drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/m6connect_bookmark.js');
  $companyFlag =0;
  if(user_is_logged_in()){
    $companyFlag=1;
  }
    drupal_add_js(array('m6connect_company' => array('company' => $companyFlag, 'current_path' => current_path())), 'setting');
    drupal_add_css('.bookmarkorganizer-rename-item-form input.form-submit{ display:none; }', 'inline');
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    $co_name = isset($_REQUEST ['co_name']) ? $_REQUEST ['co_name'] : '';
    $co_filter = isset($_REQUEST ['co_filter']) ? $_REQUEST ['co_filter'] : '';
    $co_facilities = isset($_REQUEST ['co_facilities']) ? $_REQUEST ['co_facilities'] : '';
    $co_region = isset($_REQUEST ['co_region']) ? $_REQUEST ['co_region'] : '';
    $co_industries = isset($_REQUEST ['co_industries']) ? $_REQUEST ['co_industries'] : '';
    $co_pservices = isset($_REQUEST ['co_pservices']) ? $_REQUEST ['co_pservices'] : '';
    //$co_economic = isset($_REQUEST ['co_economic'] ) ? $_REQUEST ['co_economic'] : '';
    $co_diversity = isset($_REQUEST ['co_diversity']) ? $_REQUEST ['co_diversity'] : ''; //pre($pro_diversity);
    $co_div_arr = array(0);
    if (!empty($co_diversity)) {
        $co_div_arr = explode(',', $co_diversity); //pre($co_div_arr);
    }


    //if(current_path() == 'companies'){
    //drupal_add_js(drupal_get_path('module', 'm6connect_company').'/m6connect_bookmark.js');
    //drupal_add_js(array('m6connect_company' => array('company'=>$company,)), 'setting');
    $favSpanText = '?favorite=1';
    $favChecked = '';
    $defaultFavorite = '';
    $foldername = '';
    //if(isset($_REQUEST['favorite']) && $_REQUEST['favorite']==1){
    if (isset($_REQUEST['favorite']) && $_REQUEST['favorite'] != '') {
        $favSpanText = '';
        //$foldername = $_REQUEST['foldername'];
        $defaultFavorite = $_REQUEST['favorite'];
        $favChecked = 'checked="checked"';
    }
    // Shared Functionality
    $shareCheckbox = '';
    $companyAdminUid = '';
    $shareContent = '';
    $companyNid = '';
    $showCompanySahre = FALSE;
    $companyStates = get_company_og_user_status();
    $companyUid = $companyStates['company-uid'];
    $companyNid = $companyStates['company-nid'];
    //drupal_set_message('<pre>'.print_r($companyStates,1).'</pre>');

    if ($companyStates['company-admin']) {
        $shareChecked = ($companyStates['shared-checked']) ? 'checked="checked"' : '';
        $shareCheckbox = '<label class="checkbox-inline">
                       <input type="checkbox" value="' . $companyNid . '" name="share-favorite" class="share-favorite-checkbox" ' . $shareChecked . '/>Share
                     </label>';
    } else {
        $companyAdminUid = $companyStates['company-uid'];
        $showCompanySahre = $companyStates['company-share'];
        // Share Start
        if ($companyAdminUid && $showCompanySahre) {
            $shareContent = _generate_share_fav_block_content($companyAdminUid, $companyNid);
        }
        //Share End
    }
    // End Share Functionality
    //style="display:none;"
    $form['bookmark2-fav'] = array(
        '#markup' => '<div class="main-container-favorite companies-page-favorite">
            <label>Company Organizer</label>
            <span class="sahre-company-nid" style="display:none;">' . $companyNid . '</span>
            <span class="sahre-company-uid" style="display:none;">' . $companyUid . '</span>
            <div class="custom-favorite-container">
              <div class="text-right clearfix"><div class="pull-left">' . $shareCheckbox . '
                <label class="checkbox-inline">
                <input type="checkbox" value="1" name="show-favorite" class="show-favorite-checkbox" id="show-favorite-checkbox" ' . $favChecked . '/>Show Favorites</label></div><div class="pull-right">
                <span class="show-favorite-checkbox-link-query" style="display:none;">' . $favSpanText . '</span>
                <a href="/bookmarkorganizer/add/folder/' . $user->uid . '" title="" class="action action-addfolder"><i class="fa fa-plus fa-2"></i> Add Folder</a></div>
              </div>' . _generate_bookmark_fav_block_content() . $shareContent . '
            </div>
          </div>',
    );
    // Dialog
    $form['dialog'] = array(
        '#markup' => t('<div id="dialog"></div>'),
    );
    $form['favorite'] = array(
        '#type' => 'textfield',
        '#title' => 'Favorite Folder Id',
        '#title_display' => 'invisible',
        '#default_value' => $defaultFavorite,
        '#attributes' => array('style' => array('display:none;'), 'class' => array('company-favorite-folder-id')),
    );
    //}
    $form['co_name'] = array(
        '#type' => 'textfield',
        '#title' => 'Search Organizations',
        //'#prefix'=>'<div class="row"><div class="col-md-6 cal-sm-6 col-xs-12">',
        '#default_value' => $co_name,
        '#attributes' => array('placeholder' => t('Name, Keywords, Company description'))
    );
    /*
      $options = array('_none' => '', 'all' => 'All', 'connections' => 'Connections', 'sent' => 'Sent', 'received' => 'Received');
      $form['co_filter'] = array(
      '#type' => 'select',
      '#title' => 'Filter',
      '#options' => $options,
      );
     */
    // Load includes/common.inc from the hierarchical select module.
    module_load_include('inc', 'hierarchical_select', 'includes/common');

    // Load category based in vocabulary machine name
    $fvoc = 'facilities_construction';
    $fvocabulary = taxonomy_vocabulary_machine_name_load($fvoc);
    $form['co_facilities'] = array(
        '#title' => t('M6 Company Types'),
        '#type' => 'hierarchical_select',
        '#config' => array(
            'module' => 'hs_taxonomy',
            'params' => array(
                'vid' => (int) $fvocabulary->vid,
                'exclude_tid' => NULL,
                'root_term' => NULL,
                'entity_count_for_node_type' => NULL,
            ),
        ),
        '#default_value' => $co_facilities,
    );

    hierarchical_select_common_config_apply($form['co_facilities'], "taxonomy-$fvocabulary->vid");

    $element_info = element_info('hierarchical_select');
    $form['co_facilities']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));

    // Load category based in vocabulary machine name
    $voc = 'region';
    $vocabulary = taxonomy_vocabulary_machine_name_load($voc);
    $form['co_region'] = array(
        '#title' => t('Region'),
        '#type' => 'hierarchical_select',
        '#config' => array(
            'module' => 'hs_taxonomy',
            'params' => array(
                'vid' => (int) $vocabulary->vid,
                'exclude_tid' => NULL,
                'root_term' => NULL,
                'entity_count_for_node_type' => NULL,
            ),
        ),
        '#default_value' => $co_region,
            //'#suffix'=>'</div>',
    );

    hierarchical_select_common_config_apply($form['co_region'], "taxonomy-$vocabulary->vid");

    $element_info = element_info('hierarchical_select');
    $form['co_region']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));

    // Load category based in vocabulary machine name
    /* $ivoc = 'industry_naics';
      $ivocabulary = taxonomy_vocabulary_machine_name_load($ivoc); */
    $ivocabulary = taxonomy_vocabulary_load(14);
    $form['co_industries'] = array(
        '#title' => t('Industry NAICS'),
        '#type' => 'hierarchical_select',
        '#config' => array(
            'module' => 'hs_taxonomy',
            'params' => array(
                'vid' => (int) $ivocabulary->vid,
                'exclude_tid' => NULL,
                'root_term' => NULL,
                'entity_count_for_node_type' => NULL,
            ),
        ),
        '#default_value' => $co_industries,
            //'#prefix'=>'<div class="col-md-6 cal-sm-6 col-xs-12">',
    );

    hierarchical_select_common_config_apply($form['co_industries'], "taxonomy-$ivocabulary->vid");

    $element_info = element_info('hierarchical_select');
    $form['co_industries']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));

    // Load category based in vocabulary machine name
    //$pvoc = 'products_services_unspsc';
    //$pvocabulary = taxonomy_vocabulary_machine_name_load($pvoc);
    $pvocabulary = taxonomy_vocabulary_load(13);
    $form['co_pservices'] = array(
        '#title' => t('Products & Services UNSPSC'),
        '#type' => 'hierarchical_select',
        '#config' => array(
            'module' => 'hs_taxonomy',
            'params' => array(
                'vid' => (int) $pvocabulary->vid,
                'exclude_tid' => NULL,
                'root_term' => NULL,
                'entity_count_for_node_type' => NULL,
            ),
        ),
        '#default_value' => $co_pservices,
    );

    hierarchical_select_common_config_apply($form['co_pservices'], "taxonomy-$pvocabulary->vid");

    $element_info = element_info('hierarchical_select');
    $form['co_pservices']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));

    /* // Load category based in vocabulary machine name
      $evoc = 'economic_inclusion';
      $evocabulary = taxonomy_vocabulary_machine_name_load($evoc);
      $form['co_economic'] =  array(
      '#title' => t('Economic Inclusion'),
      '#type'          => 'hierarchical_select',
      '#config'        => array(
      'module' => 'hs_taxonomy',
      'params' => array(
      'vid'                        => (int) $evocabulary->vid,
      'exclude_tid'                => NULL,
      'root_term'                  => NULL,
      'entity_count_for_node_type' => NULL,
      ),
      ),
      //'#default_value' => $tids,
      //'#suffix'=>'</div>',
      );

      hierarchical_select_common_config_apply( $form['co_economic'], "taxonomy-$evocabulary->vid");

      $element_info = element_info('hierarchical_select');
      $form['co_economic']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));
     */
    $dtype = array('diversity');
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'))
            ->condition('type', $dtype, 'IN')
            ->condition('status', '1');
    $result = $query->execute()->fetchAll();
    $diversityArr['_none'] = 'Select All';
    foreach ($result as $row) {
        $dnode = node_load($dnid = $row->nid, $vid = NULL, $reset = FALSE);
        $diversityArr[$dnid] = $dnode->title;
    } //pre($diversityArr); 

    $form['co_diversitytype'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Diversity Types'),
        '#options' => $diversityArr,
        //'#prefix' => '<div class="col-md-12 cal-sm-12 col-xs-12">',
        //'#suffix'=>'</div>',
        //'#multiple' => 1,
        '#default_value' => $co_div_arr,
    );


    $form['co_reset'] = array(
        '#type' => 'submit',
        '#value' => 'Reset',
        '#prefix' => '<div class="text-right">',
        '#attributes' => array('class' => array('btn', 'btn-primary'))
    );

    $form['co_submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'co-submit'))
    );

    return $form;
}

function cust_company_search_form_validate($form, $form_state) {
    //pre($form_state,1); 
}

function cust_company_search_form_submit($form, $form_state) {
    global $base_url;
    if ($form_state['values']['op'] == 'Reset') {
        drupal_goto($base_url . '/companies');
    } else {
        $values = $form_state['values'];  //pre($values,1);
        //drupal_set_message('<pre>'.print_r($values,1).'</pre>');
        //$fav = ($values['favorite'])?$values['favorite']:'';
        //////////////////////////////////////////////////////////
        $co_name = $values['co_name'];
        $co_filter = ''; //(!empty($values['co_name']))$values['co_name'];
        $co_facilities = isset($values['co_facilities'][0]['tid']) ? $values['co_facilities'][0]['tid'] : '';
        $co_region = isset($values['co_region'][0]['tid']) ? $values['co_region'][0]['tid'] : '';
        $co_industries = isset($values['co_industries'][0]['tid']) ? $values['co_industries'][0]['tid'] : '';
        $co_pservices = isset($values['co_pservices'][0]['tid']) ? $values['co_pservices'][0]['tid'] : '';
        //$co_economic = isset($values['co_economic'][0]['tid'])?$values['co_economic'][0]['tid']:'';
        $co_div = (!empty($values['co_diversitytype'])) ? $values['co_diversitytype'] : ''; //pre($pro_div);
        if (!empty($co_div)) {
            $co_div = array_filter($co_div);
            //$co_div2  = array_shift($co_div); //pre($pro_div,1);
            $co_diversity = implode(',', $co_div); //pre($pro_diversity,1);
        }
        $favoriteFilter = '';
        $co_favorite = trim($values['favorite']);
        if ($co_favorite != '' && is_numeric($co_favorite)) {
            $favoriteFilter = 'favorite=' . $co_favorite . '&';
        }

        /* $path = $base_url."/companies?co_name=".$co_name.'&co_filter='.$co_filter.'&co_facilities='.$co_facilities.'&co_region='.$co_region.'&co_industries='.$co_industries.'&co_pservices='.$co_pservices.'&co_economic='.$co_economic; */
        $path = $base_url . "/companies?" . $favoriteFilter . "co_name=" . $co_name . '&co_filter=' . $co_filter . '&co_facilities=' . $co_facilities . '&co_region=' . $co_region . '&co_industries=' . $co_industries . '&co_pservices=' . $co_pservices . '&co_diversity=' . $co_diversity;
        $_SESSION['last_company_search'] = $path;
        drupal_goto($path);
    }
}

function m6connect_company_form_alter(&$form, &$form_state, $form_id) { //pre($form);
    global $user; 
    if ($form_id == 'credentials_node_form') {
        /* $n = node_load(161);
          pre($n,1); */
    }
    
    if ($form_id == 'organization_node_form') { 
         //drup_msg($form_state,1);

          //drupal_add_js('jQuery(document).ready(function(){ jQuery("#edit-field-legal-name").before(`<div><span style="color:#F00;">*Denotes a Required Field</span></div>`); });', 'inline');
        $form['field_diversity_needs_comment']['#after_build'][] = 'description_field_remove_format_filter_after_build';
    $form['field_diversity_program']['#after_build'][] = 'description_field_remove_format_filter_after_build';
    
        if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
            $dnid = arg(1);
            $node = node_load($dnid);
             //drup_msg($node,1);
            //Remove access from Staff role jQuery("#edit-field-website-und-0-value").attr("placeholder","http://");
            /*if (in_array($user->uid, _get_current_company_users($node->uid)) && (isset($user->roles[12]) && $node->uid != $user->uid)) {
                drupal_access_denied();
                drupal_exit();
            }*/
            if ($user->uid == $node->uid) {
                drupal_set_message('You are logged in as the administrator of ' . $node->title);
            }
            //pre($node);
            /* if(isset($node->field_logo['und']) && !empty($node->field_logo['und'][0]['fid'])) { //pre('dsfsf',1);
              $fid =  $node->field_logo['und'][0]['fid'];
              $lnk = 'all-document-download?fids[]='.$fid;
              $form['field_logo']['#prefix'] = '<a href="/all-document-download?fids[]='.$fid.'"><input type="button" value="Download" class="btn btn-default form-submit"></a>';
              } */
              $form['#validate'][] = 'unique_company_name_form_validate';


              
              
              if(isset($user) && !empty($user->roles) &&  !in_array('administrator', $user->roles)){
                unset($form['field_allow_vendor_manager']['und']);
                unset($form['field_allow_construction_manager']['und']);
              }
        } else {
            if (!((isset($form_state['build_info']['args'][0]->nid)) && !empty($form_state['build_info']['args'][0]->nid))) {
                $form['field_comp_locations']['#access'] = FALSE;
            }
            $cmpUid = _get_user_company_nid();
            if ($cmpUid == '') {
                $currUser = user_load($user->uid);
                $currUser->field_incomplete_company_profile['und'][0]['value'] = 1;
                user_save($currUser);
            }
        }
        
        $form['#validate'][] = 'cust_company_form_validate';
    //location tab
    
    
    }
    if ($form_id == 'user_register_form') {
        if (isset($form['field_user_company']['und']['#options']) && !empty($form['field_user_company']['und']['#options'])) {
            foreach ($form['field_user_company']['und']['#options'] as $delta => $option) {
                if ($key == '_none') {
                    continue;
                }
                $form['field_user_company']['und']['#options'][$delta] = html_entity_decode($option, ENT_QUOTES);
            }
        }
    }

    if ($form_id == 'invite_add_multiple') {
        $form['#submit'][] = 'm6connect_company_invite_custom_submit';
    }
    
  if ($form_id == 'my_proposal_node_form') {    
    $form['field_proposal_job_location']['und'][0]['street_block']['thoroughfare']['#required'] = FALSE;
    $form['field_proposal_job_location']['und'][0]['locality_block']['postal_code']['#required'] = FALSE; 
    proposal_er_view_widget_user_ctools_popup_style();
    $form['#after_build'][] = 'proposal_form_after_build_handler';
    $form['#submit'][] = 'custom_my_proposal_form_submit';
  }
  
  $proposal_add_cancel_btn = array(
    'views_form_m6rfp_for_proposal_entityreference_view_widget_2',
    'views_form_m6project_for_proposal_entityreference_view_widget_2',
    'views_form_m6companies_entityreference_view_widget_1',
    'views_form_receiver_propsosal_to_submit_entityreference_view_widget_1',
    'views_form_receiver_propsosal_to_submit_entityreference_view_widget_2',
    'views_form_receiver_propsosal_to_submit_entityreference_view_widget_3',
  );
  if(in_array($form_id, $proposal_add_cancel_btn)){
  $form['output']['#prefix'] = '<div class="proposal-poup-table-section margin-bottom-10">';
  $form['output']['#suffix'] = '</div><div class="proposal-poup-seemore-section"></div>';
  if(isset($form['actions_ervw']['ervw_submit'])){
     $form['actions_ervw']['ervw_submit']['#value'] = 'Submit';
     $form['actions_ervw']['ervw_submit']['#ajax']['callback'] = 'm6_entityreference_view_widget_ajax';    
     $form['actions_ervw']['#attributes']['class'][] = 'text-right';
     $form['actions_ervw']['#attributes']['class'][] = 'clearfix';
     $form['actions_ervw']['ervw_submit']['#prefix'] = '<div class="proposal-submit-section pull-right">';
     $form['actions_ervw']['ervw_submit']['#suffix'] = l('<input type="button" class="cancel-button" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('proposal-select-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))).'</div>';
  }
  
  if(isset($form['actions']['submit'])){
    $form['actions']['submit']['#value'] = 'Submit';
    $form['actions']['submit']['#prefix'] = '<div class="proposal-submit-section pull-right">';
    $form['actions']['submit']['#suffix'] = l('<input type="button" class="cancel-button" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('proposal-select-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))).'</div>';
  }
  
  }
}

function proposal_form_after_build_handler($form,&$form_state){
  $form['field_submit_proposal_in_respons']['und']['add_more']['#attributes']['class'][]='ctools-modal-m6-proposal-popup-style';
  $form['field_field_sub_proposal_pjt']['und']['add_more']['#attributes']['class'][]='ctools-modal-m6-proposal-popup-style';
  $form['field_submit_proposal_to_company']['und']['add_more']['#attributes']['class'][]='ctools-modal-m6-proposal-popup-style';
  return $form; 
}

function proposal_er_view_widget_user_ctools_popup_style() {
  static $delegationPropsals = FALSE;
  if ($delegationPropsals == FALSE) {
    $delegationPropsals = TRUE;
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();
  $m6_proposal_popup_style = array(
    'm6-proposal-popup-style' => array(
     'modalSize' => array(
       'type' => 'fixed',
       'width' => 650,
       'height' => 'auto',
     ),
     'modalOptions' => array(
       'opacity' => (float) 0.85, 
       'background-color' => '#000000',
     ),
     'closeText' => '', 
     'loadingText' => '',
     'animation' => 'fadeIn', 
     'modalTheme' => 'M6ProposalPopup',
     'animationSpeed' => 'fast',
     ),
   );
   drupal_add_js($m6_proposal_popup_style, 'setting');
     ctools_add_js('m6connect_delegation_modal', 'm6connect_delegate');
   }  
}

function m6connect_company_invite_custom_submit($form, &$form_state) {
  //drup_msg($form_state);
    if ($form_state['ajax'] === true) {
        $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
        $form_state['ajax_commands'][] = ctools_ajax_command_reload();
    }
    
}

function m6connect_company_node_insert($node) {
//     echo '<pre>';
//      print_r($node);
//      die(); 
    global $user, $base_url;
    if ($node->type == 'organization') {
        $currUser = user_load($user->uid);
        if (isset($currUser->field_incomplete_company_profile['und']) && !empty($currUser->field_incomplete_company_profile['und'][0]['value'])) {
            unset($currUser->field_incomplete_company_profile['und']);
            user_save($currUser);
        }
        if (isset($_SESSION['USER_INCOMPLETE_COMPANY_PROFILE'])) {
            unset($_SESSION['USER_INCOMPLETE_COMPANY_PROFILE']);
        }

        // send email on company create
        if(isset($node->field_type_of_company['und']) && $node->field_type_of_company['und'][0]['value']=='company')
        {            
            $firstname = $currUser->field_first_name['und']['0']['value'];
            $lastname = $currUser->field_last_name['und']['0']['value'];
            $m6id = $currUser->field_m6id['und']['0']['value'];
            $user_name = $currUser->realname;
            $user_mail = $currUser->mail;
            $drupal_user_id = $currUser->uid; 
            $company_name = $node->title;
            $company_email = $node->field_company_email['und']['0']['email'];
            $company_phone = $node->field_org_phone['und']['0']['value'];
            $company_url = drupal_lookup_path('alias',"node/".$node->nid);
            $city = $node->field_org_address['und']['0']['locality'];
            $state = $node->field_org_address['und']['0']['administrative_area'];
            $user_profile_url = $base_url.'/'.drupal_get_path_alias('user/'.$currUser->uid);
            $company_url2 = $base_url.'/'.drupal_get_path_alias('node/'.$node->nid);
                              
            $params = array(
                'subject' => 'Congratulations',
                'body' => '',
                'sender' => $award_giver_user->mail,
                'bcc' => $award_giver_user->mail,
                'language' => language_default(),
                'module' => 'm6connect_company',
                'key' => 'new_user_create_company_email',
                'build' => TRUE,
            );
            $message = ' Hi Admin, <br><br>'.$firstname.' '.$lastname.' has created company on m6connect.com - '.$company_name.' with following details: <br><br>User name: '.l($user_name,$user_profile_url).' <br>Personal Email: '.$user_mail.' <br>Company Email: '.$company_email.' <br>Company Name: '.l($company_name, $company_url2).' <br>Phone Number: '.l($company_phone,'tel:'.$company_phone).' <br>City: '.$city.' <br>State: '.$state.' <br>User Id: '.l($currUser->name,$user_profile_url).' <br>M6ID: '.$m6id.' <br><br>Thanks, <br>Team M6Connect';

            $params['body'] = $message;            
            $return = drupal_mail($params['module'], $params['key'], 'hunny@allegiancesoftwares.com', $params['language'], $params);
            //print_r($return);die;
        }
    
     if($node->nid){
     $ogrolesk = og_roles('node', 'organization');
         $ogroles = array_flip($ogrolesk);
         og_role_grant('node', $node->nid, $currUser->uid, $ogroles['Company Admin Support']);
     }
    }
  
  if($node->type == 'my_proposal'){
    if($node->status==1){
      drupal_register_shutdown_function('send_proposal_confirmation_to_submitter', $node);
    }
  }
}

function m6connect_company_node_update($node) {
  if($node->type == 'my_proposal'){
  if($node->status==1 && $node->original->status==0){
    drupal_register_shutdown_function('send_proposal_confirmation_to_submitter', $node);
  }
  } 
}

/*function m6connect_company_node_update($node) {
  global $user;  
  if (in_array('administrator', $user->roles)  && $node->type="organization") {
  $ogrolesk = og_roles('node', 'organization');
    $ogroles = array_flip($ogrolesk); 
  $InsCertAccess = isset($node->field_allow_ins_certi_access['und'])?$node->field_allow_ins_certi_access['und'][0]['value']:'';
  $M6IDAccess = isset($node->field_allow_onboarding_access['und'])?$node->field_allow_onboarding_access['und'][0]['value']:'';
  $AlertAccess = isset($node->field_allow_m6alert['und'])?$node->field_allow_m6alert['und'][0]['value']:'';
  $CostAccess = isset($node->field_allow_cost_manager['und'])?$node->field_allow_cost_manager['und'][0]['value']:'';
  $rid = '';
  $ComNid = $node->nid;
  if($InsCertAccess ==0){
    $rid = $ogroles['Insurance Certificate Manager'];
    $ComRoleUpdate = 'Insurance Certificate Manager';       
    $OgRoleUser = _get_company_users_by_og_roles($ComNid,$ComRoleUpdate); 
    foreach($OgRoleUser as $keyed=>$userid){ 
    og_role_revoke('node', $ComNid, $userid, $rid);
    }
  }
  if($M6IDAccess ==0){    
    $ComRoleM6ID = array($ogroles['M6ID Manager']=>'M6ID Manager',$ogroles['Site Manager']=>'Site Manager');
    foreach($ComRoleM6ID as $rid=>$ComRoleUpdate){
      $OgRoleUser = _get_company_users_by_og_roles($ComNid,$ComRoleUpdate); 
    foreach($OgRoleUser as $keyed=>$userid){ 
      og_role_revoke('node', $ComNid, $userid, $rid);
    }
    }
  }
  if($AlertAccess ==0){
    $rid = $ogroles['Alert Manager'];
    $ComRoleUpdate = 'Alert Manager'; 
    $OgRoleUser = _get_company_users_by_og_roles($ComNid,$ComRoleUpdate); 
    foreach($OgRoleUser as $keyed=>$userid){ 
    og_role_revoke('node', $ComNid, $userid, $rid);
    }
  }
  if($CostAccess ==0){    
    $ComRoleCost = array($ogroles['Program manager']=>'Program manager',$ogroles['project manager']=>'project manager');
    foreach($ComRoleCost as $rid=>$ComRoleUpdate){
      $OgRoleUser = _get_company_users_by_og_roles($ComNid,$ComRoleUpdate); 
    foreach($OgRoleUser as $keyed=>$userid){ 
      og_role_revoke('node', $ComNid, $userid, $rid);
    }     
    }
  } 
  }
}*/

function m6connect_company_user_login(&$edit, $account) {
    global $user;
    if (isset($account->field_incomplete_company_profile['und']) && !empty($account->field_incomplete_company_profile['und'][0]['value'])) {
        $cmpnid = _get_user_company_nid();
        if (!isset($user->roles[3]) && $cmpnid == '') {
            $_SESSION['USER_INCOMPLETE_COMPANY_PROFILE'] = 1;
        }
    }
}

function m6connect_company_init() {
    global $user, $company;
    if (current_path() == 'dashboard') {
        //assign_bid_package_ctools_popup_style();  
    }
    m6connect_company_set_current_company();
    if (isset($_SESSION['USER_INCOMPLETE_COMPANY_PROFILE']) && $_SESSION['USER_INCOMPLETE_COMPANY_PROFILE'] == 1) {
        drupal_add_js(array('m6connect_company' => array('incomplete_company_profile' => 1)), 'setting');
        unset($_SESSION['USER_INCOMPLETE_COMPANY_PROFILE']);
    }
    if (isset($_SESSION['request_sent']) && $_SESSION['request_sent'] == 1) {
        drupal_add_js(array('m6connect_company' => array('request_sent' => 1)), 'setting');
        unset($_SESSION['request_sent']);
    }
    drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/m6connect_coj.js');
    $currentpath = current_path();
    if (arg(0) == 'node' && is_numeric(arg(1)) && strpos(current_path(), '/edit') === FALSE) {
        $currentpath = drupal_lookup_path('alias', $currentpath);
    }
    drupal_add_js(array('m6connect_company' => array('current_path' => $currentpath)), 'setting');
    //$company = 0;

    if (current_path() == 'companies') {
        //drupal_add_js(drupal_get_path('module', 'm6connect_company').'/m6connect_bookmark.js');
        //drupal_add_css('.bookmarkorganizer-rename-item-form input.form-submit{ display:none; }','inline');
        //$company = 1;  
    }
    //drupal_add_js(drupal_get_path('module', 'm6connect_company').'/m6connect_bookmark.js');
    //drupal_add_js(array('m6connect_company' => array('company'=>$company,)), 'setting');
    //$_SESSION['last_company_search']
    if (arg(0) == 'companies' && !arg(1)) {

        $url = $_SERVER["HTTP_REFERER"];
        $ur = explode('?', $url); //pre($ur);
        $ur1 = explode('/', $ur[0]); //pre($ur1);
        $urpop = array_pop($ur1); //pre($urpop); 
        if ($urpop != 'companies') {
            if (isset($_SESSION['last_company_search']) && !empty($_SESSION['last_company_search'])) { //pre($_SESSION['last_project_search']);
                $path = $_SESSION['last_company_search'];
                unset($_SESSION['last_company_search']);
                drupal_goto($path);
                //$_SESSION['last_company_search'] = $path;   
            }
        }
    }
  
  //Proposal
  if(isset($_SESSION['proposal_need_authorization'])){
    $proposalDetail = $_SESSION['proposal_need_authorization'];
    unset($_SESSION['proposal_need_authorization']);
    if(!empty($proposalDetail['nid'])){
      drupal_add_js(array('m6connect_proposal' => array('need_authorization'=>array(
        'entity_id'=> $proposalDetail['nid'],
      'entity_title' => $proposalDetail['title'],
      'entity_purpose' => 'node_access',
      ))), 'setting');  
    }
  }

  $path = $_GET['q'];
  $arguments = explode('/', $path);
  if ($arguments[0] == 'node' && is_numeric($arguments[1]) && empty($arguments[2])) {
    // When viewing a company profile.
    drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/cropit-master/dist/jquery.cropit.js');
    drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/js/cropit_custom.js');
    drupal_add_css(drupal_get_path('module', 'm6connect_company') . '/css/cropit.css');
  }
  if ($arguments[0] == 'update-company-logo-photo') {
    drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/cropit-master/dist/jquery.cropit.js');
    drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/js/cropit_custom.js');
    // drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/css/cropit.css');
  }

}

function m6connect_company_switch_current_company($cid) {
    global $user;
    if ($user->uid) {
        $currUser = user_load($user->uid);
        $user_groups = og_get_groups_by_user($currUser, 'node');
        if (is_array($user_groups) && count($user_groups) > 0) {
            $companyNids = array_values($user_groups);
        }
        if ($cid != '0' && in_array($cid, $companyNids)) {
            $_SESSION['company'] = $cid;
            $company = node_load($cid);
        }
        $GLOBALS['company'] = $company;
    variable_set('company_set_'.$user->uid, $cid);
    }
    $dastination = drupal_get_destination();
    if ($dastination) {
        $dastination = 'dashboard';
    }
    drupal_goto($dastination);
}

function m6connect_company_set_current_company($cid = 0, $uid = 0) {
    global $user, $company;
    if ($user->uid) {
        $currUser = user_load($user->uid);
        $user_groups = og_get_groups_by_user($currUser, 'node');
        if (is_array($user_groups) && count($user_groups) > 0) {
            $companyNids = array_values($user_groups);
        }
        
        if ($cid != '0' && (in_array($cid, $companyNids))) {
            $_SESSION['company'] = $cid;
            $company = node_load($cid);
            variable_set('company_' . $user->uid, $cid);
        } else if (isset($_SESSION['company']) && $_SESSION['company']) {
            $company = node_load($_SESSION['company']);
            variable_set('company_' . $user->uid, $_SESSION['company']);
        } else if (!empty(variable_get('company_' . $user->uid))) {
            $company = node_load(variable_get('company_' . $user->uid));
            $_SESSION['company'] = variable_get('company_' . $user->uid);
            variable_set('company_' . $user->uid, $_SESSION['company']);
        } else {
//            $companynode = node_load($companyNids[0]);
            $set_company = $companyNids[0];
            if (count($companyNids) > 1) {
                $companynode = node_load($companyNids[0]);
                if ($companynode->field_type_of_company == 'individual') {
                    $set_company = $companyNids[1];
                }
            }

            $_SESSION['company'] = $set_company;
            variable_set('company_' . $user->uid, $set_company);
        }
        $GLOBALS['company'] = $company;
    }
    if ($uid != 0 && $cid == '0') {
        $user_groups = og_get_groups_by_user(user_load($uid), 'node');
        if (is_array($user_groups) && count($user_groups) > 0) {
            $companyNids = array_values($user_groups);
        }
        $company = node_load($companyNids[0]);
        $_SESSION['company'] = $companyNids[0];
        $GLOBALS['company'] = $company;
    }
}

function m6connect_company_node_presave($node) {

    //if($node->type =='organization'){
          /*if(!(isset($node->field_file_system_folder) && isset($node->field_file_system_folder['und']) && !empty($node->field_file_system_folder['und'][0]['value']))){
          if(db_table_exists('field_data_field_file_system_folder')){
          $folderName = check_plain($node->title);
          if(check_comppany_folder_name_exist($folderName)){
          $folderName .= '_'.$node->uid;
          }
          $node->field_file_system_folder['und'][0]['value']=$folderName;
          }
          }*/
      //} 

    // Random value save in Company Id Field 
    /* if($node->type =='organization'){  
      //$company_id_field_info = field_info_field( 'field_company_id');
      //$company_id_length = $company_id_field_info['columns']['value']['length'];
      $company_id_length = 7;
      $random_company_id =  random_company_id($company_id_length);

      if(!(isset($node->field_company_id['und'][0]) && isset($node->field_company_id['und'][0]['value']) && !empty($node->field_company_id['und'][0]['value']))){
      $node->field_company_id['und'][0]['value'] = $random_company_id;
      }
      } */
  //proposal node
  if($node->type == 'my_proposal'){
    if(isset($node->field_choose_from_the_options_li['und']) && $node->field_choose_from_the_options_li['und'][0]['value'] == 'Submit Proposal in Response to a RFP'){
      if(isset($node->field_field_sub_proposal_pjt['und'])){
        unset($node->field_field_sub_proposal_pjt['und']);
      }
      if(isset($node->field_submit_proposal_a_project['und'])){
        unset($node->field_submit_proposal_a_project['und']);
      }
      if(isset($node->field_submit_proposal_to_company['und'])){
        unset($node->field_submit_proposal_to_company['und']);
      }
      if(isset($node->field_submit_proposal_a_company['und'])){
        unset($node->field_submit_proposal_a_company['und']);
      }
    }
    else if(isset($node->field_choose_from_the_options_li['und']) && $node->field_choose_from_the_options_li['und'][0]['value'] == 'Submit Proposal in Response to a Project'){
      if(isset($node->field_submit_proposal_to_company['und'])){
        unset($node->field_submit_proposal_to_company['und']);
      }
      if(isset($node->field_submit_proposal_a_company['und'])){
        unset($node->field_submit_proposal_a_company['und']);
      }
      if(isset($node->field_submit_proposal_in_respons['und'])){
        unset($node->field_submit_proposal_in_respons['und']);
      }
      if(isset($node->field_submit_proposal_a_rfp['und'])){
        unset($node->field_submit_proposal_a_rfp['und']);
      }
    }
    else if(isset($node->field_choose_from_the_options_li['und']) && $node->field_choose_from_the_options_li['und'][0]['value'] == 'Submit Proposal to a company'){
      if(isset($node->field_field_sub_proposal_pjt['und'])){
        unset($node->field_field_sub_proposal_pjt['und']);
      }
      if(isset($node->field_submit_proposal_a_project['und'])){
        unset($node->field_submit_proposal_a_project['und']);
      }
      if(isset($node->field_submit_proposal_in_respons['und'])){
        unset($node->field_submit_proposal_in_respons['und']);
      }
      if(isset($node->field_submit_proposal_a_rfp['und'])){
        unset($node->field_submit_proposal_a_rfp['und']);
      }
    }   
  }
}

function check_comppany_folder_name_exist($folderName) {
    if (db_table_exists('field_data_field_file_system_folder')) {
        $query = db_select('field_data_field_file_system_folder', 'fsf')
                        ->fields('fsf', array('field_file_system_folder_value'))
                        ->condition('fsf.field_file_system_folder_value', $folderName, '=')
                        ->execute()->fetchCol();
        if ($query && !empty($query)) {
            return TRUE;
        }
    }
    return FALSE;
}

function get_company_file_system_folder_name($node) {
    if (isset($node->field_file_system_folder['und']) && !empty($node->field_file_system_folder['und'][0]['value'])) {
        return $node->field_file_system_folder['und'][0]['value'];
    } else {
        $folderName = check_plain($node->title);
        if (check_comppany_folder_name_exist($folderName)) {
            $folderName .= '_' . $node->uid;
        }
        $node->field_file_system_folder['und'][0]['value'] = $folderName;
        node_save($node);
        return $folderName;
    }
}

function get_node_credential_value($node) {
    $dnid = $node->nid;
    $output = '';
    $dcredetials = isset($node->field_diversity_credentials['und']) ? $node->field_diversity_credentials['und'] : '';
    if (!empty($dcredetials)) {
        $output .= '<div class="Diversity_cred_values">';
        $dcredarr = array();
        foreach ($dcredetials as $k => $v) {
            $target_id = $v['target_id'];
            $dCredValueNidfield = 'field_data_' . 'field_dcrednid_' . $target_id; //pre($dCredValueNidfield,1);
            $fieldexists = db_table_exists($dCredValueNidfield);
            if ($fieldexists) {
                //$cred_target = 'field_dcrednid_'.$target_id; pre($cred_target);
                //$dcredarr[$target_id] = isset($node->$cred_target['und'])? $node->$cred_target['und'][0]['target_id']:'';pre($dcredarr[$target_id],1);
                $dCredValueNid = db_select($dCredValueNidfield, 'd')
                                ->fields('d')
                                ->condition('d.entity_id', $dnid, '=')
                                ->execute()->fetchAll();
                if ($dCredValueNid) {
                    foreach ($dCredValueNid as $q => $qval) { //pre($qval);
                        $fn = 'field_dcrednid_' . $target_id . '_target_id';
                        $relatedcredNid[$target_id] = $qval->$fn;
                    }
                }
            }
        }
        $dcredarr = array_filter($relatedcredNid); //pre($dcredarr,1);
        foreach ($dcredarr as $m => $n) {
            $divernode = node_load($m);
            $divertitle = $divernode->title;
            $output .= '<div class="cred_box">';
            $output .= '<div class="diver_cred_name"><label>' . $divertitle . '</label></div>';
            $crednode = node_load($n);
            $credaccby = isset($crednode->field_accredited_by['und']) ? $crednode->field_accredited_by['und'][0]['value'] : '';
            $credsdate = isset($crednode->field_cred_start_date['und']) ? $crednode->field_cred_start_date['und'][0]['value'] : '';
            $crededate = isset($crednode->field_credential_end_date['und']) ? $crednode->field_credential_end_date['und'][0]['value'] : '';
            $creddoc = isset($crednode->field_credential_doc['und']) ? $crednode->field_credential_doc['und'][0]['filename'] : '';
            $credcomm = isset($crednode->field_credential_comments['und']) ? $crednode->field_credential_comments['und'][0]['value'] : '';
            if (!empty($credaccby))
                $output .= '<div class="diver_accby field"><label>Accredited by: </label> <div class="field-items">' . $credaccby . '</div></div>';
            if (!empty($credsdate)) {
                $dtstmp = !empty($credsdate) ? strtotime($credsdate) : '';
                $output .= '<div class="diver_sdate field"><label>Start Date: </label> <div class="field-items">' . date('M d Y', $dtstmp) . '</div></div>';
            }
            if (!empty($crededate)) {
                $dtstmp = !empty($crededate) ? strtotime($crededate) : '';
                $output .= '<div class="diver_edate field"><label>End Date: </label> <div class="field-items">' . date('M d Y', $dtstmp) . '</div></div>';
            }
            if (!empty($creddoc)) {
                $output .= '<div class="diver_doc field"><label>Documents: </label> <div class="field-items">'; //$creddoc.
                //$item = field_get_items('node', $crednode, 'field_credential_doc');//pre($item);
                //$output2 = field_view_value('node', $crednode, 'field_credential_doc', $item[0]['filename']);//pre($output2,1);
                //$output .= render($output2);
                $fid = isset($crednode->field_credential_doc['und']) ? $crednode->field_credential_doc['und'][0]['fid'] : '';
                $output .= theme('file_link', array('file' => file_load($fid)));
                $output .='</div></div>';
            }
            if (!empty($credcomm))
                $output .= '<div class="diver_comm field"><label>comments: </label> <div class="field-items">' . $credcomm . '</div></div>';
            $output .= '</div>';
        }
        $output .= '</div>';
    }

    echo $output;
}

/*
 * 
 */

function get_node_credential_values($node) {
    $dnid = $node->nid;
    $relatedcredNid = array();
    $resnodes = array();
    $dcredetials = isset($node->field_diversity_credentials['und']) ? $node->field_diversity_credentials['und'] : '';
    if (!empty($dcredetials)) {
        foreach ($dcredetials as $k => $v) {
            $target_id = $v['target_id'];
            $dCredValueNidfield = 'field_data_' . 'field_dcrednid_' . $target_id; //pre($dCredValueNidfield,1);
            $fieldexists = db_table_exists($dCredValueNidfield);
            if ($fieldexists) {
                //$cred_target = 'field_dcrednid_'.$target_id; pre($cred_target);
                //$dcredarr[$target_id] = isset($node->$cred_target['und'])? $node->$cred_target['und'][0]['target_id']:'';pre($dcredarr[$target_id],1);
                $dCredValueNid = db_select($dCredValueNidfield, 'd')
                                ->fields('d')
                                ->condition('d.entity_id', $dnid, '=')
                                ->execute()->fetchAll();
                if ($dCredValueNid) {
                    foreach ($dCredValueNid as $q => $qval) { //pre($qval);
                        $fn = 'field_dcrednid_' . $target_id . '_target_id';
                        $relatedcredNid[] = $qval->$fn;
                    }
                }
            }
        }
        $nodes = $relatedcredNid;

        foreach ($nodes as $val) {
            $resnodes[] = node_load($val)->field_accredited_by['und'][0]['value'];
        }
    }
    return $resnodes;
}

/*

 *  */

function m6connect_company_get_circtficat($node = '') {
    if ($node == '') {
        return false;
    }
    $resultArr = get_node_credential_values($node);
    foreach ($resultArr as $val) {
        if ($val == 'Port Authority NY/NJ') {
            return true;
        }
    }
    return false;
}

function m6connect_company_menu_local_tasks_alter(&$data, $router_item, $root_path) {
    global $user;
    if (!array_key_exists(3, $user->roles) && $user->uid != 0 && (arg(0) == 'node' && is_numeric(arg(1)))) {
        $node = menu_get_object();
        if ($node->type == 'organization') { //pre($data,1);
            if ($data['tabs'][0]['output'][1]['#link']['path'] == 'node/%/edit') {
                //$data['tabs'][0]['output'][1]['#link']['title'] = t('');  
                unset($data['tabs'][0]['output'][1]);
            }
        }
    }
}

function _generate_bookmark_fav_block_content() {
    $output = '<div class="fav-all-container"><ul class="list-unstyled favorite-menus favorite-replaceable dropable-favorite-list sortable-favorite-list">
  <li id="bookmark-fav-id-0" class="root-leval root-leval-folder folder-list folder-clickable dropable-favorite-folder"><a class="bookmark-link" href="#collapsecustommenus00" data-toggle="collapse" aria-expanded="true" aria-controls="collapsecustommenus00"><span class="span1"><i class="fa fa-minus"></i></span> <span class="span2"><i class="fa fa-plus"></i></span>My Favorites</a><div id="collapsecustommenus00"><ul class="favorite-root-ul list-unstyled sortable-favorite-list">';
    $output .= favorite_content_generator();
    $output .= '</ul></div></li>';
    $output .= '</ul></div>';
    return $output;
}

function favorite_content_generator($share = FALSE) {
    global $user;
    $send = '';
    $params = drupal_get_query_parameters();
    $current_path = current_path();
    if (arg(0) == 'node' && is_numeric(arg(1))) {
        $current_path = drupal_lookup_path('alias', $current_path);
    }
    //drupal_set_message($current_path);
    //drupal_set_message('<pre>'.print_r( drupal_get_query_parameters(),1).'</pre>');
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    $folders = bookmarkorganizer_get_possible_parents($user->uid);
    $extra = $data = bookmarkorganizer_get_items($user->uid, $index = 0, !variable_get('bookmarkorganizer_enable_folders'));
    $extra = array_reverse($data);
    $output = array();
    $output['last'] = '';
    foreach ($data as $index => $item) {
        if ($item->type == 'folder') {
            $colpClass = '';
            $colpsedspan = '<span>&nbsp;</span>';
            $startLast = '';
            $endLast = '</li>';
            $browseFolder = '';
            $go = 0;
            $nextparent = $data[($index + 1)]->parent;
            $folderClass = 'folder-clickable';
            if (isset($data[($index + 1)]) && $nextparent == $item->id) {
                $folderClass = 'folder-clickable';
                $colpClass = ' collapsed';
                $colpsedspan = '<span class="span1"><i class="fa fa-minus"></i></span> <span class="span2"><i class="fa fa-plus"></i></span>';
                $startLast = '<div class="collapse" id="collapsecustommenus' . $index . '"><ul class="list-unstyled sortable-favorite-list">';
                $endLast = '</ul></div></li>';
                //$browseFolder = '<a href="?favorite='.$item->id.'" class="action action-browse" alt="Browse Favorite" title="Browse Favorite"><i class="fa fa-folder-open"></i></a>&nbsp;';
                $go = 1;
                $gotype = $data[($index + 1)]->type;
            }
            //   /'.$current_path.'
            $output['folder'][$item->id] = array(
                'start' => '<li id="bookmark-fav-id-' . $item->id . '" class="folder-list dropable-favorite-folder dragable-favorite-container-li sortable-favorite-folder ' . $folderClass . '">
           <span class="bookmark-folder-id bookmark-fav-id-' . $item->id . '_folder" style="display:none;">' . $item->id . '</span>
           <span class="bookmark-type bookmark-fav-id-' . $item->id . '_type" style="display:none;">' . $item->type . '</span>
           <span class="bookmark-content-id bookmark-fav-id-' . $item->id . '" style="display:none;">' . $item->content_id . '</span>
           <a style="z-index:99999;" class="drg1 bookmark-link' . $colpClass . '" href="#collapsecustommenus' . $index . '" data-toggle="collapse" aria-expanded="false" aria-controls="collapsecustommenus' . $index . '">' . $colpsedspan . $item->label . '</a>
           <div class="pull-right">' . $browseFolder . '
           
           <a href="/bookmarkorganizer/rename/' . $item->id . '" class="action action-rename" alt="Rename article" title="Rename article"><i class="fa fa-pencil"></i></a>
           &nbsp;
           <a href="/bookmarkorganizer/delete/' . $item->id . '" class="action action-remove" alt="Remove article" title="Remove article"><i class="fa fa-trash-o"></i></a>
           </div>' . $startLast,
                'nodes' => '',
                'end' => $endLast,
                'mid' => '',
                'index' => $index,
                'parent' => $item->parent,
                'go' => $go,
                'gotype' => $gotype,
                'nextparent' => $nextparent,
            );
        } else {
            //$nodePath = '/'.drupal_lookup_path('alias','node/'.$item->content_id); 
            $nodePath = 'javascript:void(0);';
            $output['node'][$item->id] = array(
                'start' => '<li id="bookmark-fav-id-' . $item->id . '" class="folder-node-list dragable-favorite-container-li sortable-favorite-folder dropable-favorite-folder">
                 <span class="bookmark-type bookmark-fav-id-' . $item->id . '_type" style="display:none;">' . $item->type . '</span>
           <span class="bookmark-folder-id bookmark-fav-id-' . $item->id . '_folder" style="display:none;">' . $item->parent . '</span>
                 <span class="bookmark-content-id bookmark-fav-id-' . $item->id . '" style="display:none;">' . $item->content_id . '</span>
           <span class="bookmark-content-id bookmark-fav-id-' . $item->id . '_item" style="display:none;">' . $item->id . '</span>
           <a style="z-index:99999;" class="drg4 bookmark-link" href="' . $nodePath . '"><span>&nbsp;</span>' . $item->label . '</a>
           <div class="pull-right">
           <a href="/bookmarkorganizer/rename/' . $item->id . '" class="action action-rename" alt="Rename article" title="Rename article"><i class="fa fa-pencil"></i></a>
           &nbsp;
           <a href="/bookmarkorganizer/delete/' . $item->id . '" class="action action-remove" alt="Remove article" title="Remove article"><i class="fa fa-trash-o"></i></a>
           </div></li>',
                'end' => '',
                'index' => $index,
                'parent' => $item->parent
            );
        }
    }
    if (isset($output['node']) && count($output['node'])) {
        foreach ($output['node'] as $itemId => $nodeItem) {
            if ($nodeItem['parent'] == 0) {
                $output['last'] .= $nodeItem['start'];
            } else {
                $output['folder'][$nodeItem['parent']]['nodes'] .= $nodeItem['start'];
            }
        }
    }
    if (isset($output['folder']) && count($output['folder'])) {
        /* foreach($output['folder'] as $itemId => $folderItem){
          //if($folderItem['parent']!=0){
          if($folderItem['nextparent'] == $folderItem['parent']){
          $output['folder'][$folderItem['parent']]['start'] .= $folderItem['start'].$folderItem['nodes'].$folderItem['end'];
          $output['folder']['processed']=1;
          }
          else if($folderItem['nextparent']==$folderItem->id){
          $output['folder'][$folderItem['parent']]['start'] .= $folderItem['start'].$folderItem['nodes'];
          $output['folder'][$folderItem['parent']]['end'] = $folderItem['end'].$output['folder'][$folderItem['parent']]['end'];
          $output['folder']['processed']=0;
          }
          //}
          } */
        foreach ($extra as $index => $itemex) {
            if ($itemex->type == 'folder') {
                if ($output['folder'][$itemex->id]['parent'] != 0) {
                    $curritem = $output['folder'][$itemex->id];
                    $output['folder'][$curritem['parent']]['mid'] .= $curritem['start'] . $curritem['mid'] . $curritem['nodes'] . $curritem['end'];
                }
            }
        }
        foreach ($output['folder'] as $itemId => $folderItem) {
            if ($folderItem['parent'] == 0) {
                $send .= $folderItem['start'] . $folderItem['mid'] . $folderItem['nodes'] . $folderItem['end'];
            }
        }
    }
    $send .= $output['last'];
    //$send .= '<li class="root-lavel">root</li>';
    return $send;
}

function _generate_bookmark_fav_block_content_ajax() {
    drupal_json_output(array(
        'html' => _generate_bookmark_fav_block_content(),
    ));
}

function get_favorites_nodes_by_folder_id($folderID, $companyuid) {
    global $user;
    $uid = ($companyuid != '') ? $companyuid : $user->uid;
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    $data = bookmarkorganizer_get_items($uid, $index = 0, !variable_get('bookmarkorganizer_enable_folders'));
    $folderParents = array();
    $folderParents[] = $folderID;
    $inNids = array();
    foreach ($data as $delta => $item) {
        if (in_array($item->parent, $folderParents)) {
            if ($item->type == 'folder') {
                $folderParents[] = $item->id;
            } else {
                $inNids[] = $item->content_id;
            }
        }
    }
    return $inNids;
}

function _generate_company_view_by_ajax($folderId) {
    global $base_url;
    $shareFlag = 0;
    $itemLabel = 'My Favorites';
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    $item = bookmarkorganizer_get_item($folderId);
    if ($item && is_object($item) && isset($item->label)) {
        $itemLabel = $item->label;
    } else {
        if (isset($_REQUEST['cpmpany_uid']) && !empty($_REQUEST['cpmpany_uid'])) {
            $itemLabel = 'Shared Favorites';
        }
    }
    $path = $base_url . "/companies?favorite=" . $folderId;
    $_SESSION['last_company_search'] = $path;
    drupal_json_output(array(
        'html' => companies_view(TRUE),
        'replacewith' => '#cust-company-listings',
        'folder_name' => $itemLabel,
        'filterreplacewith' => '.company-select-filter-list',
        'filterHtml' => '<div class="col-md-9 col-sm-12 col-xs-12 company-select-filter-list"><input type="hidden" class="site_base_url" value="' . $base_url . '"><label class="select-title">Your Selections:</label><span class="cust-selection-list cust-favorite-filter"><span class="sfilter-label">Favorite: <span class="sfilter-value">' . $itemLabel . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">favorite</span><span class="sfilter-val">' . $folderId . '</span><span class="filter-qstr"></span></span></span></div>',
    ));
}

function _generate_share_fav_block_content($companyAdminUid, $companyNid) {

    $output = '<div class="share-fav-all-container">
      <ul class="list-unstyled favorite-menus favorite-share-menus">
    <li id="share-fav-id-0" class="root-leval root-leval-folder folder-clickable folder-list">
    <a class="shared-link" href="#sharecollapsecustommenus00" data-toggle="collapse" aria-expanded="true" aria-controls="sharecollapsecustommenus00"><span class="span1"><i class="fa fa-minus"></i></span> <span class="span2"><i class="fa fa-plus"></i></span> Shared Favorites</a>
   <div id="sharecollapsecustommenus00">
     <ul class="shared-root-ul list-unstyled">';
    $output .= shared_content_generator($companyAdminUid);
    $output .= '</ul></div></li></ul></div>';
    return $output;
}

function shared_content_generator($companyAdminUid) {
    $user = user_load($companyAdminUid);
    $send = '';
    $params = drupal_get_query_parameters();
    $current_path = current_path();
    if (arg(0) == 'node' && is_numeric(arg(1))) {
        $current_path = drupal_lookup_path('alias', $current_path);
    }
    //drupal_set_message($current_path);
    //drupal_set_message('<pre>'.print_r( drupal_get_query_parameters(),1).'</pre>');
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    $folders = bookmarkorganizer_get_possible_parents($user->uid);
    $extra = $data = bookmarkorganizer_get_items($user->uid, $index = 0, !variable_get('bookmarkorganizer_enable_folders'));
    $extra = array_reverse($data);
    $output = array();
    $output['last'] = '';
    foreach ($data as $index => $item) {
        if ($item->type == 'folder') {
            $colpClass = '';
            $colpsedspan = '<span>&nbsp;</span>';
            $startLast = '';
            $endLast = '</li>';
            $browseFolder = '';
            $go = 0;
            $nextparent = $data[($index + 1)]->parent;
            $folderClass = 'folder-clickable';
            if (isset($data[($index + 1)]) && $nextparent == $item->id) {
                $folderClass = 'folder-clickable';
                $colpClass = ' collapsed';
                $colpsedspan = '<span class="span1"><i class="fa fa-minus"></i></span> <span class="span2"><i class="fa fa-plus"></i></span>';
                $startLast = '<div class="collapse" id="sharecollapsecustommenus' . $index . '"><ul class="list-unstyled">';
                $endLast = '</ul></div></li>';
                //$browseFolder = '<a href="?favorite='.$item->id.'" class="action action-browse" alt="Browse Favorite" title="Browse Favorite"><i class="fa fa-folder-open"></i></a>&nbsp;';
                $go = 1;
                $gotype = $data[($index + 1)]->type;
            }
            //   /'.$current_path.'
            $output['folder'][$item->id] = array(
                'start' => '<li id="share-fav-id-' . $item->id . '" class="folder-list ' . $folderClass . ' share-folder-li">
           <span class="share-folder-id share-fav-id-' . $item->id . '_folder" style="display:none;">' . $item->id . '</span>
           <span class="share-type share-fav-id-' . $item->id . '_type" style="display:none;">' . $item->type . '</span>
           <span class="share-content-id share-fav-id-' . $item->id . '" style="display:none;">' . $item->content_id . '</span>
           <a class="bookmark-link share-link' . $colpClass . '" href="#sharecollapsecustommenus' . $index . '" data-toggle="collapse" aria-expanded="false" aria-controls="sharecollapsecustommenus' . $index . '">' . $colpsedspan . $item->label . '</a>
           <div class="pull-right">' . $browseFolder . '
           </div>' . $startLast,
                'nodes' => '',
                'end' => $endLast,
                'mid' => '',
                'index' => $index,
                'parent' => $item->parent,
                'go' => $go,
                'gotype' => $gotype,
                'nextparent' => $nextparent,
            );
        } else {
            //$nodePath = '/'.drupal_lookup_path('alias','node/'.$item->content_id); 
            $nodePath = 'javascript:void(0);';
            $output['node'][$item->id] = array(
                'start' => '<li id="share-fav-id-' . $item->id . '" class="folder-node-list">
                 <span class="share-type bookmark-fav-id-' . $item->id . '_type" style="display:none;">' . $item->type . '</span>
           <span class="share-folder-id share-fav-id-' . $item->id . '_folder" style="display:none;">' . $item->parent . '</span>
                 <span class="share-content-id share-fav-id-' . $item->id . '" style="display:none;">' . $item->content_id . '</span>
           <span class="share-content-id share-fav-id-' . $item->id . '_item" style="display:none;">' . $item->id . '</span>
           <a class="bookmark-link share-link" href="' . $nodePath . '"><span>&nbsp;</span>' . $item->label . '</a>
           <div class="pull-right">
           </div></li>',
                'end' => '',
                'index' => $index,
                'parent' => $item->parent
            );
        }
    }
    if (isset($output['node']) && count($output['node'])) {
        foreach ($output['node'] as $itemId => $nodeItem) {
            if ($nodeItem['parent'] == 0) {
                $output['last'] .= $nodeItem['start'];
            } else {
                $output['folder'][$nodeItem['parent']]['nodes'] .= $nodeItem['start'];
            }
        }
    }
    if (isset($output['folder']) && count($output['folder'])) {
        foreach ($extra as $index => $itemex) {
            if ($itemex->type == 'folder') {
                if ($output['folder'][$itemex->id]['parent'] != 0) {
                    $curritem = $output['folder'][$itemex->id];
                    $output['folder'][$curritem['parent']]['mid'] .= $curritem['start'] . $curritem['mid'] . $curritem['nodes'] . $curritem['end'];
                }
            }
        }
        foreach ($output['folder'] as $itemId => $folderItem) {
            if ($folderItem['parent'] == 0) {
                $send .= $folderItem['start'] . $folderItem['mid'] . $folderItem['nodes'] . $folderItem['end'];
            }
        }
    }
    $send .= $output['last'];
    return $send;
}

function get_company_og_user_status() {
    global $user, $company;
    $cmpyAdminUid = '';
    $cmpyNodeNid = '';
    $shareCheckboxShow = FALSE;
    $shareChecked = FALSE;
    $cmpyShare = FALSE;
    $user_companies_arr = og_get_groups_by_user($user, 'node');
    if (is_array($user_companies_arr) && !empty($user_companies_arr)) {
        $userCmpyNids = array_values($user_companies_arr);
//        $companyNode = node_load($userCmpyNids[0]);
        $companyNode = $company;
        $cmpyNodeNid = $companyNode->nid;
        $cmpyAdminUid = $companyNode->uid;
        if (isset($companyNode->field_share_favorite['und']) && $companyNode->field_share_favorite['und'][0]['value'] == 1) {
            $shareChecked = TRUE;
        }
        if ($user->uid == $cmpyAdminUid) {
            //Check Company Administrator  
            $shareCheckboxShow = TRUE;
        } else if ($shareChecked) {
            //Check Share is Enabled by Company Administrator
            $cmpyUserUids = og_get_group_members_properties($companyNode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
            if (is_array($cmpyUserUids) && !empty($cmpyUserUids) && in_array($user->uid, $cmpyUserUids)) {
                $cmpyShare = TRUE;
            }
        }
    }
    return array(
        'company-nid' => $cmpyNodeNid,
        'company-uid' => $cmpyAdminUid,
        'company-admin' => $shareCheckboxShow,
        'company-share' => $cmpyShare,
        'shared-checked' => $shareChecked,
    );
}

function change_company_fav_share($node) {
    global $user;
    $in = 0;
    if ($node->type == 'organization' && $node->uid == $user->uid && isset($_REQUEST['check'])) {
        $node->field_share_favorite['und'][0]['value'] = $_REQUEST['check'];
        node_save($node);
        $in = 1;
    }
}

/**
 * Remove tabs on company content type
 */
function m6connect_company_node_view($node, $view_mode) {
    global $user, $company;

    if ($node->type == 'organization' && !user_is_logged_in()) {
        drupal_access_denied();
        exit();
    }
    if ($node->type == 'organization' && $view_mode = 'full') {
        //pre($node,1);//$gmlist = og_get_group_members_properties($node, array(), 'members__' . OG_STATE_ACTIVE, 'node'); pre($gmlist,1); //$cusr = user_load($user->uid); pre($cusr,1);
        if ($user->uid == $node->uid) {
            //drupal_set_message('You are logged in as the administrator of ' . $node->title);
        }
        $cmpcall = in_array($user->uid, _get_current_company_users($node->uid));
        if (!isset($user->roles[3]) && !isset($user->roles[6]) && !$cmpcall) {
            //unset($node->content['#fieldgroups']['group_diversity_company_grp_tab']);
            //unset($node->content['#fieldgroups']['group_co_summary_tab']);
            //unset($node->content['#fieldgroups']['group_co_locations']);
            //unset($node->content['#fieldgroups']['group_co_classifications_tab']);
            unset($node->content['#fieldgroups']['group_co_user_tab']);
            unset($node->content['#fieldgroups']['group_co_account_tab']);
        }
        $gmlist = og_get_group_members_properties($node, array(), 'members__' . OG_STATE_ACTIVE, 'node');
        if ($user->uid != $node->uid) {
            $node->content['field_taxpayer_ssn_ein']['#access'] = false;
        }
    }
  if ($node->type == 'my_proposal' && user_is_logged_in()) {
    if(isset($_SESSION['proposal_node_access']) && $_SESSION['proposal_node_access']==$node->nid){
    unset($_SESSION['proposal_node_access']); 
    }else{
    $query = db_select('node','n');
    $query->leftjoin('proposal_award','pa','pa.node_id=n.nid');
    $query->leftjoin('proposal_reject','pr','pr.reject_node=n.nid');
    $query->leftjoin('field_data_field_is_proposal_archived','pip','pip.entity_id=n.nid');
    
    
    $query->leftjoin('field_data_field_submit_proposal_in_respons','ret','ret.entity_id=n.nid');
    $query->leftjoin('node','rnode','rnode.nid=ret.field_submit_proposal_in_respons_target_id');
    $query->leftjoin('field_data_field_create_confidential_bid','rcb','rcb.entity_id=rnode.nid');
    $query->leftjoin('og_membership','rog','rog.etid=rnode.nid AND rog.entity_type=:REntityType',array(':REntityType'=>'node'));
    $query->leftjoin('field_data_field_project','rfp','rfp.entity_id=rnode.nid');
    $query->leftjoin('og_membership','rpog','rpog.etid=rfp.field_project_target_id AND rog.entity_type=:RPEntityType',array(':RPEntityType'=>'node'));
    
    $query->leftjoin('field_data_field_field_sub_proposal_pjt','pet','pet.entity_id=n.nid');
    $query->leftjoin('node','pnode','pnode.nid=pet.field_field_sub_proposal_pjt_target_id');
    $query->leftjoin('field_data_field_create_confidential_bid','pcb','pcb.entity_id=pnode.nid');
    $query->leftjoin('og_membership','pog','pog.etid=pnode.nid AND pog.entity_type=:PEntityType',array(':PEntityType'=>'node'));
    
    $query->leftjoin('field_data_field_submit_proposal_to_company','cet','cet.entity_id=n.nid');
    $query->leftjoin('node','cnode','cnode.nid=cet.field_submit_proposal_to_company_target_id');
    
    $query->addField('n','uid','proposal_owner');
    //$query->addField('pa','award_id','is_awarded');
    //$query->addField('pr','reject_id','is_rejected');
    $query->addField('rnode','nid','rfp_nid');
    $query->addField('pnode','nid','project_nid');
    $query->addField('cnode','nid','company_nid');
    $query->addField('rfp','field_project_target_id','rfp_project_nid');
    $query->addField('rpog','gid','rfp_project_company_nid');
    
    $query->addExpression('IFNULL(rnode.type,IFNULL(pnode.type,cnode.type))', 'target_node_type');
    $query->addExpression('IFNULL(rnode.nid,IFNULL(pnode.nid,cnode.nid))', 'target_node_nid');
    $query->addExpression('IFNULL(rnode.uid,IFNULL(pnode.uid,cnode.uid))', 'target_node_uid');
    $query->addExpression('IFNULL(pnode.nid,rfp.field_project_target_id)', 'target_project_nid');
    $query->addExpression('IFNULL(rog.gid,IFNULL(pog.gid,cnode.nid))', 'target_company_nid');
    $query->addExpression('IFNULL(rcb.field_create_confidential_bid_value,pcb.field_create_confidential_bid_value)','target_confidential_bid_allow');
    $query->isNull('pa.award_id');
    $query->isNull('pr.reject_id');
    $query->isNull('pip.field_is_proposal_archived_value');
    $query->condition('n.nid',$node->nid);
    $query->condition('n.status',1);
    $result = $query->execute()->fetchAssoc();
    if(!empty($result)){
      if(in_array($result['target_node_type'], array('rfp','project')) && $result['target_confidential_bid_allow']){
      $companyToCheck = array($result['target_company_nid'],$result['rfp_project_company_nid']);
      $companyToCheck = array_filter($companyToCheck);
      $companyToCheck = array_unique($companyToCheck);
      if(in_array($company->nid,$companyToCheck)){
        $isCollabarated = 0;
        if($result['target_node_uid'] != $user->uid){
        if(!empty($result['target_project_nid'])){
          $subquery = db_select('node', 'n');
          $subquery->leftJoin('field_data_field_project_invite_comapnies', 'pic','pic.entity_id=n.nid');
          $subquery->leftJoin('field_data_field_company_nid_mail', 'pcne', 'pcne.entity_id = pic.field_project_invite_comapnies_value');
          $subquery->leftJoin('field_data_field_comapny_manager', 'pcimu', 'pcimu.entity_id = pic.field_project_invite_comapnies_value');
          $subquery->fields('pic', array('field_project_invite_comapnies_value'));
          $subquery->condition('n.nid',$result['target_project_nid'],'=');
          $subquery->condition('n.type','project','=');
          $subquery->where('((n.uid=:UserUid) OR ((pcimu.field_comapny_manager_value IS NOT NULL) AND (pcne.field_company_nid_mail_value=:companyNid) AND (FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)))', array(':UserUid' => $user->uid, ':companyNid' => $company->nid));
          $isCollabarated = $subquery->execute()->rowCount();
        }
        }
        if(($result['target_node_uid'] == $user->uid) || $isCollabarated){
        $_SESSION['proposal_need_authorization'] = array('nid'=>$node->nid,'title'=>$node->title);
        drupal_goto('/proposals/received');
        }
      }
      }
    }
    }
  }
}

/* function m6connect_company_node_access($node, $op, $account){
  $type = is_string($node) ? $node : $node->type;
  if($type=='organization' && in_array($account->uid, _get_current_company_users($node->uid)) && isset($user->roles[12]) && $op =='update' ){
  return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
  } */

/* function m6connect_company_node_access($node, $op, $account){ //pre($op);
  if(!(isset($account->roles[3]) || isset($account->roles[6]))){
  $NodeCompNid =  _get_user_company_nid($account->uid);
  if($node && is_object($node) && $node->type=='organization' && in_array($op,array('update')) && $NodeCompNid){
  if($node->nid == $NodeCompNid && (isset($account->roles[5]) || $account->uid == $node->uid)){
  return NODE_ACCESS_ALLOW;
  }else if($node->nid != $NodeCompNid){
  return NODE_ACCESS_DENY;
  }
  }
  }

  if($node && is_object($node) && $node->type=='organization' && $node->nid == $NodeCompNid && in_array($op,array('update')) &&  $NodeCompNid && isset($account->roles[5])){
  //return NODE_ACCESS_ALLOW;
  }
  }
 */

function m6connect_company_node_access($node, $op, $account) {
  if(isset($node->nid) && $node->type=='my_proposal' && !user_is_logged_in()){
    return NODE_ACCESS_DENY;
  }
  
    if ($node->type == 'organization' && ($op == 'update' || $op == 'delete')) {
        $ogroles = og_get_user_roles('node', $node->nid, $account->uid);
        $notInRoles = array_intersect(array('company admin','administrator member'),array_values($ogroles));
        if (count($notInRoles)==0 && in_array('staff', $ogroles)) {
            return NODE_ACCESS_DENY;
        }
    }
  return NODE_ACCESS_IGNORE;
}

function get_node_credential_needs_value($node) {
    $dnid = $node->nid;
    $output = '';

    $dcredetials = isset($node->field_diversity_needs['und']) ? $node->field_diversity_needs['und'] : '';
    if (!empty($dcredetials)) {
        $output .= '<div class="Diversity_cred_values">';
        $dcredarr = array();
        foreach ($dcredetials as $k => $v) {
            $target_id = $v['target_id'];
            $dCredValueNidfield = 'field_data_' . 'field_dneedsnid_' . $target_id; //pre($dCredValueNidfield,1);
            $fieldexists = db_table_exists($dCredValueNidfield);
            if ($fieldexists) {
                //$cred_target = 'field_dcrednid_'.$target_id; pre($cred_target);
                //$dcredarr[$target_id] = isset($node->$cred_target['und'])? $node->$cred_target['und'][0]['target_id']:'';pre($dcredarr[$target_id],1);
                $dCredValueNid = db_select($dCredValueNidfield, 'd')
                                ->fields('d')
                                ->condition('d.entity_id', $dnid, '=')
                                ->execute()->fetchAll();
                if ($dCredValueNid) {
                    foreach ($dCredValueNid as $q => $qval) { //pre($qval);
                        $fn = 'field_dneedsnid_' . $target_id . '_target_id';
                        $relatedcredNid[$target_id] = $qval->$fn;
                    }
                }
            }
        }
        $dcredarr = array_filter($relatedcredNid); //pre($dcredarr,1);
        foreach ($dcredarr as $m => $n) {
            $divernode = node_load($m);
            $divertitle = $divernode->title;
            $output .= '<div class="cred_box">';
            $output .= '<div class="diver_cred_name"><label>' . $divertitle . '</label></div>';
            $crednode = node_load($n);
            $credaccby = isset($crednode->field_accredited_by['und']) ? $crednode->field_accredited_by['und'][0]['value'] : '';
            $credsdate = isset($crednode->field_cred_start_date['und']) ? $crednode->field_cred_start_date['und'][0]['value'] : '';
            $crededate = isset($crednode->field_credential_end_date['und']) ? $crednode->field_credential_end_date['und'][0]['value'] : '';
            $creddoc = isset($crednode->field_credential_doc['und']) ? $crednode->field_credential_doc['und'][0]['filename'] : '';
            $credcomm = isset($crednode->field_credential_comments['und']) ? $crednode->field_credential_comments['und'][0]['value'] : '';
            if (!empty($credaccby))
                $output .= '<div class="diver_accby field"><label>Accredited by: </label> <div class="field-items">' . $credaccby . '</div></div>';
            if (!empty($credsdate)) {
                $dtstmp = !empty($credsdate) ? strtotime($credsdate) : '';
                $output .= '<div class="diver_sdate field"><label>Start Date: </label> <div class="field-items">' . date('M d Y', $dtstmp) . '</div></div>';
            }
            if (!empty($crededate)) {
                $dtstmp = !empty($crededate) ? strtotime($crededate) : '';
                $output .= '<div class="diver_edate field"><label>End Date: </label> <div class="field-items">' . date('M d Y', $dtstmp) . '</div></div>';
            }
            if (!empty($creddoc)) {
                $output .= '<div class="diver_doc field"><label>Documents: </label> <div class="field-items">'; //$creddoc.
                //$item = field_get_items('node', $crednode, 'field_credential_doc');//pre($item);
                //$output2 = field_view_value('node', $crednode, 'field_credential_doc', $item[0]['filename']);//pre($output2,1);
                //$output .= render($output2);
                $fid = isset($crednode->field_credential_doc['und']) ? $crednode->field_credential_doc['und'][0]['fid'] : '';
                $output .= theme('file_link', array('file' => file_load($fid)));
                $output .='</div></div>';
            }
            if (!empty($credcomm))
                $output .= '<div class="diver_comm field"><label>comments: </label> <div class="field-items">' . $credcomm . '</div></div>';
            $output .= '</div>';
        }
        $output .= '</div>';
    }

    echo $output;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////// Start Proposal Work ////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Proposal awarded and Reject callback

function my_proposal_ajax_action_callback($action) {
    global $base_url, $base_path, $user;
    $pdfcontent = array();
    $return = array();
  $proposalArchived = 0;
    include_once(libraries_get_path('mpdf') . '/mpdf.php');
    if ($action == 'award' && isset($_REQUEST['award_data'])) {
        $replace = array();
        $awardData = $_REQUEST['award_data'];
        $explode_data = explode("@@", $awardData);
        $award_taker = $explode_data[0];
        $award_page = $explode_data[1];
        $award_giver = $explode_data[2];
        $award_taker_user = user_load($award_taker);
        $award_giver_user = user_load($award_giver);
        $proposalNode = node_load($award_page);
        //$takerCmpUid = _get_user_company_nid($award_taker->uid);
        $takerCmpUid = _get_company_nid_by_group_content($proposalNode);
        $takerCmpNode = node_load($takerCmpUid);

        $resposseNid = '';
        $resposseTitle = '';
        if (isset($proposalNode->field_submit_proposal_to_company['und']) && !empty($proposalNode->field_submit_proposal_to_company['und'][0]['target_id'])) {
            $resposseNid = $proposalNode->field_submit_proposal_to_company['und'][0]['target_id'];
        } else if (isset($proposalNode->field_field_sub_proposal_pjt['und']) && !empty($proposalNode->field_field_sub_proposal_pjt['und'][0]['target_id'])) {
            $resposseNid = $proposalNode->field_field_sub_proposal_pjt['und'][0]['target_id'];
        } else if (isset($proposalNode->field_submit_proposal_in_respons['und']) && !empty($proposalNode->field_submit_proposal_in_respons['und'][0]['target_id'])) {
            $resposseNid = $proposalNode->field_submit_proposal_in_respons['und'][0]['target_id'];
        }
        if ($resposseNid && is_numeric($resposseNid)) {
            $responseNode = node_load($resposseNid);
            $resposseTitle = $responseNode->title;
        }
        if ($responseNode->type == 'rfp') {
            $params = array(
                'subject' => 'Congratulations',
                'body' => '',
                'sender' => $award_giver_user->mail,
                'bcc' => $award_giver_user->mail,
                'language' => language_default(),
                'module' => 'm6connect_misc',
                'key' => 'proposal_mail___awarded_proposal_membership_notify',
                'build' => TRUE,
            );
            $message = '[Proposal:RFPCompanyLogo]<br/>[Proposal:RFPCompanyName]<br/><br/>Congratulations, [Proposal:RFPCompanyName] has awarded you with a part of the [Proposal:RFPName] RFP.<br/><br/>[Proposal:RFPLink] are details about the RFP.<br/><br/>[Proposal:RFPAgreeedDate] [Proposal:RFPAgreeedTime] [Proposal:SenderName] agreed to purchase an M6Connect Gold Membership. Click [Site:MembershipUpgradeLink] to upgrade your account to a Gold membership. This membership will provide you with many additional features and benefits.<br/><br/>Again, congratulations on winning the RFP.';
            $RFPAgreeedDate = '';
            $RFPAgreeedTime = '';
            $rfpCityState = '';
            $upgradeLink = drupal_lookup_path('alias', 'node/36');
            $upgradeLink = l('<span style="color:#d04437;">Here</span>', $base_url . $base_path . $upgradeLink, array('external' => true, 'html' => true));
            $rfpNodePath = drupal_lookup_path('alias', 'node/' . $responseNode->nid);
            $rfpNodePath = l('<span style="color:#d04437;">Here</span>', $base_url . $base_path . $rfpNodePath, array('external' => true, 'html' => true));
            $rfpNodePath2 = l('<span style="color:#d04437;">' . $responseNode->title . '</span>', $base_url . $base_path . $rfpNodePath, array('external' => true, 'html' => true));
            //$rfpCompanyNid = _get_user_company_nid($responseNode->uid);
            $rfpCompanyNid = _get_company_nid_by_group_content($responseNode);
            if ($rfpCompanyNid && is_numeric($rfpCompanyNid)) {
                $rfpCompanyNode = node_load($rfpCompanyNid);
                $rfpCompanyName = $rfpCompanyNode->title;
                if (isset($rfpCompanyNode->field_logo['und']) && !empty($rfpCompanyNode->field_logo['und'][0][fid])) {
                    $fileArr = $rfpCompanyNode->field_logo['und'][0];
                    $filename = uniqid() . $rfpCompanyNode->field_logo['und'][0]['filename'];
                    $objFile = file_copy((object) $fileArr, 'temporary://' . $filename, FILE_EXISTS_RENAME);
                    $objFile->status = 0;
                    file_save($objFile);
                    $rfpCompanyLogo = theme('image_style', array('style_name' => 'thumbnail', 'path' => $objFile->uri, 'getsize' => TRUE));
                }
                if (isset($rfpCompanyNode->field_org_address['und']) && !empty($rfpCompanyNode->field_org_address['und'][0])) {
                    $rfpCityState = $rfpCompanyNode->field_org_address['und'][0]['locality'] . ', ' . $rfpCompanyNode->field_org_address['und'][0]['administrative_area'];
                }
            }

            //$senderCmpNid = _get_user_company_nid($award_taker_user->uid);
            $senderCmpNid = _get_company_nid_by_group_content($proposalNode);
            $senderCmpTitle = '';
            if ($senderCmpNid && is_numeric($senderCmpNid)) {
                $senderCmpNode = node_load($senderCmpNid);
                $senderCmpTitle = $senderCmpNode->title;
            }

            if (db_table_exists('m6connect_rfp_agreed_membership_payment')) {
                $agreed = db_select('m6connect_rfp_agreed_membership_payment', 'ramp')->fields('ramp', array('timestamp'))->condition('ramp.uid', $award_taker_user->uid, '=')->condition('ramp.entity_id', $responseNode->nid, '=')->execute()->fetchColumn(0);
                if ($agreed) {
                    $RFPAgreeedDate = 'On ' . date('m/d/Y', $agreed);
                    $RFPAgreeedTime = 'at ' . date('H:i A', $agreed);
                }
            }
            $replace = array(
                '[Proposal:RFPCompanyLogo]' => $rfpCompanyLogo,
                '[Proposal:RFPCompanyName]' => $rfpCompanyName,
                '[Proposal:RFPName]' => $responseNode->title,
                '[Proposal:RFPLink]' => $rfpNodePath,
                '[Proposal:RFPAgreeedDate]' => $RFPAgreeedDate,
                '[Proposal:RFPAgreeedTime]' => $RFPAgreeedTime,
                '[Site:MembershipUpgradeLink]' => $upgradeLink,
                '[Proposal:SenderName]' => _get_user_full_name($award_taker_user->uid),
                '[Proposal:SenderCompanyName]' => $senderCmpTitle,
                '[Proposal:RFPCityState]' => $rfpCityState,
                '[Proposal:Name]' => $proposalNode->title,
                '[Proposal:RFPOwnerName]' => _get_user_full_name($award_giver_user->uid),
                '[Proposal:RFPFullLink]' => $rfpNodePath2,
            );
            if (isset($_REQUEST['membership']) && $_REQUEST['membership'] == 1) {
                $params['body'] = str_replace(array_keys($replace), array_values($replace), $message);
                $return[] = drupal_mail($params['module'], $params['key'], $award_taker_user->mail, $params['language'], $params);
            }
        }



        $db_insert = array(
            'award_taker_id' => $award_taker,
            'award_giver_id' => $award_giver,
            'node_id' => $award_page,
            'status' => 1,
        );
        //////////////////////////////////////////////////////
        $ismembership = array();
        $usercmpNid = _get_user_company_nid($award_taker);
        if ($takerCmpUid && is_numeric($takerCmpUid)) {
            $propoalCmpNode = $cmpNode = $takerCmpNode;
            $cmp_owner_obj = '';
            if ($cmpNode->uid != $award_taker) {
                $cmp_owner_obj = user_load($cmpNode->uid);
            } else {
                $cmp_owner_obj = $award_taker_user;
            }
            $ismembership = array_intersect(array_keys($cmp_owner_obj->roles), array(8, 9));
        }
        $db_insert['membership_status'] = (empty($ismembership)) ? 0 : 1;
        $db_insert['membership_award'] = time();
        //////////////////////////////////////////////////////////////////
        $returnedId = db_insert('proposal_award')->fields($db_insert)->execute();
        if ($returnedId) {
            //Proposal Award Mail
            if ($responseNode->type == 'rfp') {
                $imagePath = $base_url . $base_path . drupal_get_path('module', 'm6connect_misc') . '/images/';
                //$bgimgPath = (isset($_REQUEST['membership']) && $_REQUEST['membership'] == 1) ? 'award_preliminary.png' : 'award_membership.png';
                $bgimgPath = 'award_preliminary.png';
                $replace['[Proposal:bgImagePath]'] = $imagePath . $bgimgPath;
                $replace['[Proposal:m6LogoPath]'] = $imagePath . 'proposal_mail_logo.png';
                $replace['[Proposal:Type]'] = 'Proposal';
                $message = 'Congratulations [Proposal:SenderCompanyName],<br/><br/><p>[Proposal:RFPOwnerName], from [Proposal:RFPCompanyName], has changed the status of your Proposal for [Proposal:Name] to Pending Award status. You need to login and navigate to the respective RFP or Proposal, then click the green Action button and in the dropdown select Accept Award. If you do not select Accept Award within 7 days of receiving this notification [Proposal:RFPCompanyName] may award the RFP/Proposal to another company.</p><p>You must login and ensure your company has a current Gold Membership in order to Accept this Notice of Award.</p><p>Access the RFP or Proposal here: "View [Proposal:RFPFullLink]></p><p>Respectfully,<br/>[Proposal:RFPOwnerName]<br/>[Proposal:RFPCompanyName]<br/></p>';
                $params = array(
                    'subject' => 'M6Connect - Notice of Pending Award for ' . $responseNode->title,
                    'body' => str_replace(array_keys($replace), array_values($replace), $message),
                    'sender' => $award_giver_user->mail,
                    'bcc' => $award_giver_user->mail,
                    'language' => language_default(),
                    'module' => 'm6connect_misc',
                    'key' => 'proposal_mail___awarded_proposal_notify',
                    'build' => TRUE,
                );
                $mpdf = new mPDF('c');
                $mpdf->WriteHTML(theme('proposal_awareded_mail_content', array('replace' => $replace)));
                $return[] = $file_content = $mpdf->Output('', 'S');
                $pdfcontent = $params['attachments'][] = array(
                    'filecontent' => $file_content,
                    'filename' => 'Notice of Award.pdf',
                    'filemime' => 'application/pdf',
                );
                $return[] = drupal_mail($params['module'], $params['key'], $award_taker_user->mail, $params['language'], $params);
                //drupal_set_message('<pre>'.print_r($return,1).'</pre>');
            }
            // Notifiction Entry
            if (module_exists('m6connect_common') && db_table_exists('m6connect_notification')) {
                $request_to_cnid = _get_company_nid_by_group_content($award_page);
                $m6connect_notification = array(
                    'type' => 'proposal',
                    'event' => 'awarded',
                    'entity_id' => $award_page,
                    'company_nid' => $request_to_cnid,
                    'message' => NULL,
                    'request_from' => $award_giver,
                    'request_to' => $award_taker,
                    'status' => 1,
                    'timestamp' => time(),
                );
                entity_save('m6connect_notification', (object) $m6connect_notification);
            }
        }
    } else if ($action == 'reject' && isset($_REQUEST['reject_data'])) {
        $rejectData = $_REQUEST['reject_data'];
        $explode_Reject_data = explode("@@", $rejectData);
        $reject_taker = $explode_Reject_data[0];
        $reject_page = $explode_Reject_data[1];
        $reject_giver = $explode_Reject_data[2];
        $db_insert = array(
            'reject_taker_id' => $reject_taker,
            'reject_giver_id' => $reject_giver,
            'reject_node' => $reject_page,
            'status' => 1,
        );
        $returnedId = db_insert('proposal_reject')->fields($db_insert)->execute();
        if ($returnedId && module_exists('m6connect_common') && db_table_exists('m6connect_notification')) {
            $request_to_cnid = _get_company_nid_by_group_content($reject_page);
            $m6connect_notification = array(
                'type' => 'proposal',
                'event' => 'rejected',
                'entity_id' => $reject_page,
                'company_nid' => $request_to_cnid,
                'message' => NULL,
                'request_from' => $reject_giver,
                'request_to' => $reject_taker,
                'status' => 1,
                'timestamp' => time(),
            );
            entity_save('m6connect_notification', (object) $m6connect_notification);
        }
    }else if ($action == 'archive' && isset($_REQUEST['archive_data'])) {
    $archiveData = $_REQUEST['archive_data'];
    $explode_archive_data = explode("@@", $archiveData);
    if(is_numeric($explode_archive_data[1])){
    $proposalNode = node_load($explode_archive_data[1]);
    if($proposalNode && $proposalNode->type=='my_proposal'){
      $proposalNode->field_is_proposal_archived['und'][0]['value']=1;
      node_save($proposalNode);  
      $proposalArchived=1;
    }
    }
  }else if ($action == 'grouparchive' && isset($_REQUEST['grouparchive_data'])) {
    $archiveData = $_REQUEST['grouparchive_data'];
    $explode_archive_data = explode("@@", $archiveData);
    if(is_numeric($explode_archive_data[1])){
    $proposalNode = node_load($explode_archive_data[1]);
    if($proposalNode && $proposalNode->type=='my_proposal'){
      $submitted_for = (isset($proposalNode->field_choose_from_the_options_li['und']) && !empty($proposalNode->field_choose_from_the_options_li['und'][0]['value']))?$proposalNode->field_choose_from_the_options_li['und'][0]['value']:'';
      $submitedRFPProjectMapping = array(
      'Submit Proposal in Response to a RFP' => 'field_submit_proposal_in_respons',
      'Submit Proposal in Response to a Project' => 'field_field_sub_proposal_pjt',
      'Submit Proposal to a company' => 'field_submit_proposal_to_company',
      );
      if(array_key_exists($submitted_for,$submitedRFPProjectMapping) && isset($proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und']) && !empty($proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und'][0]['target_id'])){
      $submittedForNid = $proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und'][0]['target_id']; 
      if(is_numeric($submittedForNid)){
        $query = db_select('node','n');
              $query->leftjoin('field_data_field_is_proposal_archived','pip','pip.entity_id=n.nid');
              $query->fields('n',array('nid'));
        if($submitted_for == 'Submit Proposal in Response to a RFP'){
        $query->leftjoin('field_data_field_submit_proposal_in_respons','ret','ret.entity_id=n.nid');
        $query->condition('ret.field_submit_proposal_in_respons_target_id',$submittedForNid); 
        }else if($submitted_for == 'Submit Proposal in Response to a Project'){
        $query->leftjoin('field_data_field_field_sub_proposal_pjt','pet','pet.entity_id=n.nid'); 
        $query->condition('pet.field_field_sub_proposal_pjt_target_id',$submittedForNid);
        }else{
        $query->leftjoin('field_data_field_submit_proposal_to_company','cet','cet.entity_id=n.nid');
        $query->condition('cet.field_submit_proposal_to_company_target_id',$submittedForNid);  
        }
              $query->isNull('pip.field_is_proposal_archived_value');
              $query->condition('n.type','my_proposal');
              $query->condition('n.status',1);
              $result = $query->execute()->fetchAll();
        if(!empty($result)){
              foreach($result as $delta => $dataObj){
                $proposalTempNode = node_load($dataObj->nid);
                $proposalTempNode->field_is_proposal_archived['und'][0]['value'] = 1;
                node_save($proposalTempNode);
          $proposalArchived=1;
              }
              }
      }
      }
    }
    }
  }
    drupal_json_output(array('return' => $return, 'pdfcontent' => $pdfcontent,'archived'=> $proposalArchived));
    drupal_exit();
}

function my_proposal_comment_view_callback($prop_id, $comment_id){
  global $user;
  $output =  theme('proposal_comment_display', array('comment_id' => $comment_id,'pro_id' =>$prop_id, 'use_id' => $user->uid)); 
  drupal_json_output(array('output'=>$output,'agrs'=>array('comment_id' => $comment_id,'pro_id' =>$prop_id, 'use_id' => $user->uid)));
  drupal_exit(0);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// End Proposal Work /////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * this function create/edit location(company) under Main company
 * */
/*
  function m6connect_company_entity_update($entity, $type){//pre($type);
  global $user;
  if($type=='field_collection_item' && isset($entity->field_name) && $entity->field_name=='field_comp_locations'){ //pre($entity,1);
  $comNode = $entity->hostEntity(); //pre($comNode,1);
  if(!(count($entity->field_location_nid['und'])>0)){ //pre($entity,1);
  if(!empty($entity->field_location_name) && !empty($entity->field_location_type) && !empty($entity->field_location_address) && !empty($entity->field_location_phone_number)){
  $cnode = new stdClass();
  $cnode->type = 'organization';
  $cnode->language = LANGUAGE_NONE;

  $cnode->title = $entity->field_location_name['und'][0]['value'];
  $cnode->uid = $user->uid;
  $cnode->field_main_location_grp['und'][0]['target_id'] = $comNode->nid;
  node_save($cnode);
  $nid = $cnode->nid;
  $entityItemId = $entity->item_id;
  $fc_item = field_collection_item_load($entityItemId);
  $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
  $fc_wrapper->field_location_nid->set($nid);
  $fc_wrapper->save();

  }
  } else { //pre('else',1);
  $cnid = $entity->field_location_nid['und'][0]['value']; //pre($cnid);pre('else',1);
  $cnode = node_load($cnid);
  //$cnode->field_main_location_grp['und'][0]['target_id'] = 87;
  node_save($cnode);
  }
  }
  } */

function m6connect_company_entity_presave($entity, $type) {
    global $user;
    if ($type == 'field_collection_item' && isset($entity->field_name) && $entity->field_name == 'field_comp_locations') { //pre($entity,1);
        $comNode = $entity->hostEntity();
        //if($entity->field_location_name['und'][0]['value'] == 'test location7'){pre($entity,1);}
        if (!(count($entity->field_location_nid['und']) > 0)) { //pre($entity,1);
            /* if((isset($entity->field_location_name['und'][0]) && !empty($entity->field_location_name['und'][0]['value'])) && (isset($entity->field_location_type['und'][0]) && !empty($entity->field_location_type['und'][0]['value'])) && (isset($entity->field_location_address['und'][0]) && !empty($entity->field_location_address['und'][0]['value'])) && (isset($entity->field_location_phone_number['und'][0]) && !empty($entity->field_location_phone_number['und'][0]['value']))){ */
            if ((isset($entity->field_location_name['und'][0]) && !empty($entity->field_location_name['und'][0]['value'])) && (isset($entity->field_location_type_list['und'][0]) && !empty($entity->field_location_type_list['und'][0]['value'])) && (isset($entity->field_location_phone_number['und'][0]) && !empty($entity->field_location_phone_number['und'][0]['value']))) {
                $cnode = new stdClass();
                $cnode->type = 'organization';
                $cnode->language = LANGUAGE_NONE;

                $ComNodeTitle = $comNode->title;
                $cnode->title = $ComNodeTitle . ' - ' . $entity->field_location_name['und'][0]['value'];
                $cnode->uid = $comNode->uid;
                $cnode->field_main_location_grp['und'][0]['target_id'] = $comNode->nid;
                ////////////////////// Additional Field Start //////////////////////////////
                // Parent Location
                if (isset($entity->field_location_parent_locations['und']) && !empty($entity->field_location_parent_locations['und'][0]['value'])) {
                    $cnode->field_co_parent_location['und'][0]['target_id'] = $entity->field_location_parent_locations['und'][0]['value'];
                }
                // Address
                if (isset($entity->field_location_address['und'][0]['country']) && !empty($entity->field_location_address['und'][0]['country'])) {
                    $cnode->field_org_address['und'][0]['country'] = $entity->field_location_address['und'][0]['country'];
                }
                if (isset($entity->field_location_address['und'][0]['administrative_area']) && !empty($entity->field_location_address['und'][0]['administrative_area'])) {
                    $cnode->field_org_address['und'][0]['administrative_area'] = $entity->field_location_address['und'][0]['administrative_area'];
                }
                if (isset($entity->field_location_address['und'][0]['locality']) && !empty($entity->field_location_address['und'][0]['locality'])) {
                    $cnode->field_org_address['und'][0]['locality'] = $entity->field_location_address['und'][0]['locality'];
                }
                if (isset($entity->field_location_address['und'][0]['thoroughfare']) && !empty($entity->field_location_address['und'][0]['thoroughfare'])) {
                    $cnode->field_org_address['und'][0]['thoroughfare'] = $entity->field_location_address['und'][0]['thoroughfare'];
                }
                if (isset($entity->field_location_address['und'][0]['premise']) && !empty($entity->field_location_address['und'][0]['premise'])) {
                    $cnode->field_org_address['und'][0]['premise'] = $entity->field_location_address['und'][0]['premise'];
                }
                if (isset($entity->field_location_address['und'][0]['postal_code']) && !empty($entity->field_location_address['und'][0]['postal_code'])) {
                    $cnode->field_org_address['und'][0]['postal_code'] = $entity->field_location_address['und'][0]['postal_code'];
                }
                // Service Region
                if (isset($entity->field_location_service_regions['und'][0]) && !empty($entity->field_location_service_regions['und'][0])) {
                    foreach ($entity->field_location_service_regions['und'] as $k => $rtid) {
                        $cnode->field_regions['und'][$k]['tid'] = $rtid['tid'];
                    }
                }
                // Bussiness location
                if (isset($entity->field_location_m6_company_types['und'][0]) && !empty($entity->field_location_m6_company_types['und'][0])) {
                    foreach ($entity->field_location_m6_company_types['und'] as $k => $rtid) {
                        $cnode->field_facilities_construction['und'][$k]['tid'] = $rtid['tid'];
                    }
                }
                if (isset($entity->field_location_industry_naics['und'][0]) && !empty($entity->field_location_industry_naics['und'][0])) {
                    foreach ($entity->field_location_industry_naics['und'] as $k => $rtid) {
                        $cnode->field_industry_naicss['und'][$k]['tid'] = $rtid['tid'];
                    }
                }
                if (isset($entity->field_location_products_services['und'][0]) && !empty($entity->field_location_products_services['und'][0])) {
                    foreach ($entity->field_location_products_services['und'] as $k => $rtid) {
                        $cnode->field_products_service_unspsc['und'][$k]['tid'] = $rtid['tid'];
                    }
                }
                // phone number
                if (isset($entity->field_location_phone_number['und']) && !empty($entity->field_location_phone_number['und'][0]['value'])) {
                    $cnode->field_org_phone['und'][0]['value'] = $entity->field_location_phone_number['und'][0]['value'];
                }
                // show company in search
                if (isset($entity->field_location_show_comp_in_srch['und']) && !empty($entity->field_location_show_comp_in_srch['und'][0]['value'])) { //pre('new show in search',1);
                    $cnode->field_show_company_in_search['und'][0]['value'] = $entity->field_location_show_comp_in_srch['und'][0]['value'];
                } else {
                    $cnode->field_show_company_in_search['und'][0]['value'] = 0;
                }
                // Bussiness description
                if (isset($entity->field_location_business_desc['und']) && !empty($entity->field_location_business_desc['und'][0]['value'])) {
                    $cnode->field_description['und'][0]['value'] = $entity->field_location_business_desc['und'][0]['value'];
                    $cnode->field_description['und'][0]['format'] = $entity->field_location_business_desc['und'][0]['format'];
                }

                ////////////////////// Additional Field End //////////////////////////////
                node_save($cnode);
                $nid = $cnode->nid;
                $entity->field_location_nid['und'][0]['value'] = $nid;
            }
        } else { //pre($entity);//pre('else',1);
            $cnid = $entity->field_location_nid['und'][0]['value'];
            $cnode = node_load($cnid);
            // Parent Location
            if (isset($entity->field_location_parent_locations['und']) && !empty($entity->field_location_parent_locations['und'][0]['value'])) {
                $cnode->field_co_parent_location['und'][0]['target_id'] = $entity->field_location_parent_locations['und'][0]['value'];
            }
            // Address
            if (isset($entity->field_location_address['und'][0]['country']) && !empty($entity->field_location_address['und'][0]['country'])) {
                $cnode->field_org_address['und'][0]['country'] = $entity->field_location_address['und'][0]['country'];
            }
            if (isset($entity->field_location_address['und'][0]['administrative_area']) && !empty($entity->field_location_address['und'][0]['administrative_area'])) {
                $cnode->field_org_address['und'][0]['administrative_area'] = $entity->field_location_address['und'][0]['administrative_area'];
            }
            if (isset($entity->field_location_address['und'][0]['locality']) && !empty($entity->field_location_address['und'][0]['locality'])) {
                $cnode->field_org_address['und'][0]['locality'] = $entity->field_location_address['und'][0]['locality'];
            }
            if (isset($entity->field_location_address['und'][0]['thoroughfare']) && !empty($entity->field_location_address['und'][0]['thoroughfare'])) {
                $cnode->field_org_address['und'][0]['thoroughfare'] = $entity->field_location_address['und'][0]['thoroughfare'];
            }
            if (isset($entity->field_location_address['und'][0]['premise']) && !empty($entity->field_location_address['und'][0]['premise'])) {
                $cnode->field_org_address['und'][0]['premise'] = $entity->field_location_address['und'][0]['premise'];
            }
            if (isset($entity->field_location_address['und'][0]['postal_code']) && !empty($entity->field_location_address['und'][0]['postal_code'])) {
                $cnode->field_org_address['und'][0]['postal_code'] = $entity->field_location_address['und'][0]['postal_code'];
            }
            // Service Region
            if (isset($entity->field_location_service_regions['und'][0]) && !empty($entity->field_location_service_regions['und'][0])) {
                foreach ($entity->field_location_service_regions['und'] as $k => $rtid) {
                    $cnode->field_regions['und'][$k]['tid'] = $rtid['tid'];
                }
            }
            // Bussiness location
            if (isset($entity->field_location_m6_company_types['und'][0]) && !empty($entity->field_location_m6_company_types['und'][0])) {
                foreach ($entity->field_location_m6_company_types['und'] as $k => $rtid) {
                    $cnode->field_facilities_construction['und'][$k]['tid'] = $rtid['tid'];
                }
            }
            if (isset($entity->field_location_industry_naics['und'][0]) && !empty($entity->field_location_industry_naics['und'][0])) {
                foreach ($entity->field_location_industry_naics['und'] as $k => $rtid) {
                    $cnode->field_industry_naicss['und'][$k]['tid'] = $rtid['tid'];
                }
            }
            if (isset($entity->field_location_products_services['und'][0]) && !empty($entity->field_location_products_services['und'][0])) {
                foreach ($entity->field_location_products_services['und'] as $k => $rtid) {
                    $cnode->field_products_service_unspsc['und'][$k]['tid'] = $rtid['tid'];
                }
            }
            // phone number
            if (isset($entity->field_location_phone_number['und']) && !empty($entity->field_location_phone_number['und'][0]['value'])) {
                $cnode->field_org_phone['und'][0]['value'] = $entity->field_location_phone_number['und'][0]['value'];
            }
            // show company in search
            if (isset($entity->field_location_show_comp_in_srch['und']) && !empty($entity->field_location_show_comp_in_srch['und'][0]['value'])) {//pre('edit show in search',1);
                $cnode->field_show_company_in_search['und'][0]['value'] = $entity->field_location_show_comp_in_srch['und'][0]['value'];
                //$cnode->field_show_company_in_search['und'][0]['value'] = 0;
            } else {
                $cnode->field_show_company_in_search['und'][0]['value'] = 0;
            }
            // Bussiness description
            if (isset($entity->field_location_business_desc['und']) && !empty($entity->field_location_business_desc['und'][0]['value'])) {
                $cnode->field_description['und'][0]['value'] = $entity->field_location_business_desc['und'][0]['value'];
                $cnode->field_description['und'][0]['format'] = $entity->field_location_business_desc['und'][0]['format'];
            }

            node_save($cnode);
        }
    }
}

/*
 * For validate that all required filed in Location are filled in company node form
 */

function unique_company_name_form_validate($form, &$form_state) {
  $values = $form_state['values'];    
  $legal_structure = $values['field_legal_structure']['und'][0]['value'];
  $state = $values['field_org_address']['und'][0]['administrative_area'];
  $organization_name = $values['title'];
  $companyNid = (!empty($form['nid']['#value']))?$form['nid']['#value']:'';
  $has_count_values = exist_company_state_legal_structure($legal_structure,$state,$organization_name,$companyNid);  
  if(!empty($has_count_values)){
    form_set_error('time', $organization_name.' is already registered with same Legal Structure and State. Please register your company with different name .');
  } 
  //****************************check organization title name*******//
  if(!empty($organization_name)){        
        $query = db_select('node', 'n');
        $query->fields('n',array('nid','title'));
        $query->condition('n.type', 'organization'); 
        $query->condition('n.title',  $organization_name);      
        $chkCompanyTitle = $query->execute()->fetchObject();
               if($organization_name ==  $chkCompanyTitle->title){
            //form_set_error('title', ''. $organization_name.' is already registered. Please register your company with different name.');
              }
  }
      //****************************End check organization title name*****//
}
function cust_company_form_validate($form, &$form_state) {
    global $user;
    $values = $form_state['values'];  
    /*foreach ($values['field_comp_locations']['und'] as $k => $fcitem) { //pre($fcitem,1);
        if (is_location_filled($fcitem)) { //pre('filled',1);
            if (!is_location_filled($fcitem, 'all')) {
                form_set_error('', 'All Location required fields should be filled');
            }
        }
    }*/
}

/*
 * This function check that all reuired filled or not 
 */

function is_location_filled($fcitem, $all = '') {
    if (empty($all)) {
        if (!empty($fcitem['field_location_name']['und'][0]['value']) || !empty($fcitem['field_location_type_list']['und'][0]['value']) || !empty($fcitem['field_location_address']['und'][0]['thoroughfare']) || !empty($fcitem['field_location_address']['und'][0]['premise']) || !empty($fcitem['field_location_address']['und'][0]['locality']) || !empty($fcitem['field_location_address']['und'][0]['administrative_area']) || !empty($fcitem['field_location_address']['und'][0]['postal_code']) || !empty($fcitem['field_location_phone_number']['und'][0]['value']) || !empty($fcitem['field_location_m6_company_types']['und'][0]['tid']) || !empty($fcitem['field_location_industry_naics']['und'][0]['tid']) || !empty($fcitem['field_location_products_services']['und'][0]['tid']) /*|| !empty($fcitem['field_location_psc_codes']['und'][0]['tid'])*/ || !empty($fcitem['field_location_business_desc']['und'][0]['value'])) { //$fcitem['field_location_address']['und'][0]['country'] //|| !empty($fcitem['field_location_parent_locations']['und'][0]['value'])
            return 1;
        } else {
            return 0;
        }
    } else {
        if (!empty($fcitem['field_location_name']['und'][0]['value']) && !empty($fcitem['field_location_type_list']['und'][0]['value']) && !empty($fcitem['field_location_address']['und'][0]['thoroughfare']) && !empty($fcitem['field_location_address']['und'][0]['locality']) && !empty($fcitem['field_location_address']['und'][0]['administrative_area']) && !empty($fcitem['field_location_address']['und'][0]['country']) && !empty($fcitem['field_location_address']['und'][0]['postal_code']) && !empty($fcitem['field_location_phone_number']['und'][0]['value']) && !empty($fcitem['field_location_m6_company_types']['und'][0]['tid']) && !empty($fcitem['field_location_industry_naics']['und'][0]['tid']) && !empty($fcitem['field_location_products_services']['und'][0]['tid']) /*&& !empty($fcitem['field_location_psc_codes']['und'][0]['tid'])*/ && !empty($fcitem['field_location_business_desc']['und'][0]['value'])) { //$fcitem['field_location_address']['und'][0]['premise'] //&& !empty($fcitem['field_location_parent_locations']['und'][0]['value'])
            return 1;
        } else {
            return 0;
        }
    }
}

/*
 * This function return options for Parent location Select box in field collection(field_comp_locations) 
 */

function get_all_location() {
    $all = array();
    if (arg(1) && is_numeric(arg(1))) {
        $nid = arg(1);
        $all = get_all_locations_by_GroupId($nid, 'fieldoption');
    }
    return $all;
}

/**
 * Implements hook_field_widget_form_alter.
 */
function m6connect_company_field_widget_form_alter(&$element, &$form_state, $context) {
    if (isset($element['#entity_type']) && $element['#entity_type'] == 'field_collection_item' && $element['#bundle'] == 'field_comp_locations' && $element['#field_name'] == 'field_location_parent_locations') {
        $all = array();
        if (isset($form_state['build_info']['args'][0]->nid) && !empty($form_state['build_info']['args'][0]->nid)) {
            $nid = $form_state['build_info']['args'][0]->nid;
            $all = get_all_locations_by_GroupId($nid, 'fieldoption');
        }
        $element['#options'] = $all;
    }
}

/**
 * Implement function to get all location's nids by group nid
 * Parameter : Required: gnid(group nid) >> for which all location nid get
 * Parameter : Optional: $fieldOption >> If pass any string for this, then it add two addtional element in returned array(first for 'None' and second for Own($gnid))
 */
function get_all_locations_by_GroupId($gnid, $fieldOption = '') {
    $locnids = $AdditionalOptions = array();
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    $query->leftJoin('field_data_field_main_location_grp', 'l', 'l.entity_id = n.nid');
    $query->condition('l.field_main_location_grp_target_id', $gnid, '=');
    $result = $query->execute()->fetchAll();
    if ($result) {
        foreach ($result as $q => $qval) {
            $locnids[$qval->nid] = $qval->title;
        }
    }
    if (!empty($fieldOption)) {
        $node = node_load($gnid);
        $AdditionalOptions = array('0' => '- None -', $gnid => $node->title);
        $MergedArr = array_merge($AdditionalOptions, $locnids);
        $locnids = $MergedArr;
    }
    return $locnids;
}

/* function random_company_id($length){ 
  $random= "";
  srand((double)microtime()*1000000);

  $data = "abcdefghijklmnopqrstuvwxyz";
  $data .= "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  $data .= "1234567890";

  for($i = 0; $i < $length; $i++){
  $random .= substr($data, (rand()%(strlen($data))), 1);
  }

  return $random;
  } */

//Random Value Ganrate for Company id
/* function random_company_id($length){ 
  $random= "";
  srand((double)microtime()*1000000);

  $capal = $data = "abcdefghijklmnopqrstuvwxyz";
  $data .= "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  $data .= "1234567890";

  for($i = 0; $i < $length; $i++){
  $random .= substr($data, (rand()%(strlen($data))), 1);
  }

  $randomnum = preg_replace( "/[^0-9]/", "", $random );
  $randoalphas = preg_replace( "/[^a-z]/", "", $random );
  $randoalphab = preg_replace( "/[^A-Z]/", "", $random );
  if(($randomnum == '') || (($randoalphas == '') && ($randoalphab == ''))){
  return random_company_id($length);
  }

  $invaluecompanyid = '1';
  $companyid_values = db_select('field_data_field_company_id', 'fcomid')
  ->fields('fcomid')
  ->condition('field_company_id_value', $random,'=')
  ->execute()
  ->fetchAll();

  if ($companyid_values && !empty($companyid_values)) {
  $invaluecompanyid = 2;
  }


  if($invaluecompanyid == 2){
  return random_company_id($length);
  }

  return $random;
  } */


function custom_join_company($nid) {
    global $user;
    //$node->status = 0;
    //node_save($node);
    //$_SESSION['node-pub-upub'] = 1;
    $redirect = (isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '');
    $account = user_load($user->uid);
//  //$group = og_get_group("node", $nid);
//  og_group('node', $nid, array(
//                "entity type"       => "user",
//                "entity"        => $user,
//                "membership type"   => "OG_MEMBERSHIP_TYPE_DEFAULT",
//            ));
    $edit['field_user_company']['und'][]['target_id'] = $nid;
//    user_save($account, $edit);
    //$redirect = 'node/' . $nid;
    $nodeGroup = node_load($nid);
    $GroupAdminUid = _get_company_group_admin($nodeGroup);
    $GroupAdmin = user_load($GroupAdminUid);
    $GroupAdminName = _get_user_full_name($GroupAdminUid);
    $to = $GroupAdmin->mail;
    $subject = 'Pending Request Notification';
    $body = "Hello " . $GroupAdminName . "
    There is a pending Request for company " . $cmpNode->title . "
    
    " . l('Click here to see pending requests', $base_url . '/people/pending') . "
    
    Thanks!";
    $params = array(
        'subject' => $subject,
        'body' => $body,
    );
    $mail = drupal_mail('m6connect_misc', 'location_register', $to, 'en', $params);
    $_SESSION['request_sent'] = 1;
    //drupal_goto('companies');
    drupal_goto($redirect);
}

///////////////////////////////////////////////////////////////////////////////////////////
/* * ************************** Send award mail on membership upgrade start *************** */
///////////////////////////////////////////////////////////////////////////////////////////

/* function m6connect_company_uc_checkout_complete($order, $account) {
  //drupal_set_message('<pre>'.print_r($order).'</pre>');
  if($order->order_status='completed'){
  $product = $order->products[key($order->products)];
  $product = node_load($product->nid);
  if(is_object($product)){
  $term = taxonomy_get_term_by_name($name='GoldPlan', $vocabulary = 'catalog');
  $termid = $term[key($term)]->tid;
  $catlog = isset($product->taxonomy_catalog['und'])?$product->taxonomy_catalog['und'][0]['tid']:'';
  if($catlog && $termid && $termid == $catlog){
  update_proposal_award_merbership($account);
  }
  }
  }
  } */

function update_proposal_award_merbership($account) {
    $query = db_select('proposal_award', 'pa');
    $query->leftjoin('field_data_field_choose_from_the_options_li', 'op', 'op.entity_id=pa.node_id');
    $query->condition('op.field_choose_from_the_options_li_value', 'Submit Proposal in Response to a RFP', '=');
    $query->fields('pa');
    //$query->fields('op');
    $query->condition('pa.membership_status', '0', '=');
    $query->condition('pa.award_taker_id', $account->uid, '=');

    $result = $query->execute()->fetchAll();
    if ($result && !empty($result)) {
        foreach ($result as $index => $dataObj) { //pre($dataObj);
            send_proposal_award_mambership_mail($dataObj, $account);
        }
    }
    return $result;
}

function send_proposal_award_mambership_mail($dataObj, $account) {
    global $base_url, $base_path, $user;
    $pdfcontent = array();
    $return = array();
    include_once(libraries_get_path('mpdf') . '/mpdf.php');

    $replace = array();
    $award_taker = $dataObj->award_taker_id;
    $award_giver = $dataObj->award_giver_id;
    $award_taker_user = user_load($award_taker);
    $award_giver_user = user_load($award_giver);
    $award_page = $dataObj->node_id;
    $proposalNode = node_load($award_page);
    $takerCmpUid = _get_company_nid_by_group_content($proposalNode);
    $takerCmpNode = node_load($takerCmpUid);

    $resposseNid = '';
    $resposseTitle = '';
    if (isset($proposalNode->field_submit_proposal_to_company['und']) && !empty($proposalNode->field_submit_proposal_to_company['und'][0]['target_id'])) {
        $resposseNid = $proposalNode->field_submit_proposal_to_company['und'][0]['target_id'];
    } else if (isset($proposalNode->field_field_sub_proposal_pjt['und']) && !empty($proposalNode->field_field_sub_proposal_pjt['und'][0]['target_id'])) {
        $resposseNid = $proposalNode->field_field_sub_proposal_pjt['und'][0]['target_id'];
    } else if (isset($proposalNode->field_submit_proposal_in_respons['und']) && !empty($proposalNode->field_submit_proposal_in_respons['und'][0]['target_id'])) {
        $resposseNid = $proposalNode->field_submit_proposal_in_respons['und'][0]['target_id'];
    }
    if ($resposseNid && is_numeric($resposseNid)) {
        $responseNode = node_load($resposseNid);
        $resposseTitle = $responseNode->title;
    }
    if ($responseNode->type == 'rfp') {

        $rfpNodePath = drupal_lookup_path('alias', 'node/' . $responseNode->nid);
        $rfpNodePath = l('<span style="color:#d04437;">Here</span>', $base_url . $base_path . $rfpNodePath, array('external' => true, 'html' => true));
        $rfpNodePath2 = l('<span style="color:#d04437;">' . $responseNode->title . '</span>', $base_url . $base_path . $rfpNodePath, array('external' => true, 'html' => true));
        $rfpCompanyNid = _get_company_nid_by_group_content($responseNode);
        if ($rfpCompanyNid && is_numeric($rfpCompanyNid)) {
            $rfpCompanyNode = node_load($rfpCompanyNid);
            $rfpCompanyName = $rfpCompanyNode->title;
            if (isset($rfpCompanyNode->field_logo['und']) && !empty($rfpCompanyNode->field_logo['und'][0]['fid'])) {
                $fileArr = $rfpCompanyNode->field_logo['und'][0];
                $filename = uniqid() . $rfpCompanyNode->field_logo['und'][0]['filename'];
                $objFile = file_copy((object) $fileArr, 'temporary://' . $filename, FILE_EXISTS_RENAME);
                $objFile->status = 0;
                file_save($objFile);
                $rfpCompanyLogo = theme('image_style', array('style_name' => 'thumbnail', 'path' => $objFile->uri, 'getsize' => TRUE));
            }
            if (isset($rfpCompanyNode->field_org_address['und']) && !empty($rfpCompanyNode->field_org_address['und'][0])) {
                $rfpCityState = $rfpCompanyNode->field_org_address['und'][0]['locality'] . ', ' . $rfpCompanyNode->field_org_address['und'][0]['administrative_area'];
            }
        }

        //$senderCmpNid = _get_user_company_nid($award_taker_user->uid);
        $senderCmpNid = _get_company_nid_by_group_content($proposalNode);
        $senderCmpTitle = '';
        if ($senderCmpNid && is_numeric($senderCmpNid)) {
            $senderCmpNode = node_load($senderCmpNid);
            $senderCmpTitle = $senderCmpNode->title;
        }
        $replace = array(
            '[Proposal:SenderCompanyName]' => $senderCmpTitle,
            '[Proposal:RFPOwnerName]' => _get_user_full_name($responseNode->uid),
            '[Proposal:RFPCompanyName]' => $rfpCompanyName,
            '[Proposal:Name]' => $proposalNode->title,
            '[Proposal:RFPFullLink]' => $rfpNodePath2,
        );
        //}
        //if ($responseNode->type == 'rfp') {
        $imagePath = $base_url . $base_path . drupal_get_path('module', 'm6connect_misc') . '/images/';
        $bgimgPath = 'award_membership.png';
        $replace['[Proposal:bgImagePath]'] = $imagePath . $bgimgPath;
        $replace['[Proposal:m6LogoPath]'] = $imagePath . 'proposal_mail_logo.png';
        $replace['[Proposal:Type]'] = 'Proposal';
        $message = 'Congratulations [Proposal:SenderCompanyName],<br/><br/><p>[Proposal:RFPOwnerName], from [Proposal:RFPCompanyName], has changed the status of your Proposal for [Proposal:Name] to Pending Award status. You need to login and navigate to the respective RFP or Proposal, then click the green Action button and in the dropdown select Accept Award. If you do not select Accept Award within 7 days of receiving this notification [Proposal:RFPCompanyName] may award the RFP/Proposal to another company.</p><p>You must login and ensure your company has a current Gold Membership in order to Accept this Notice of Award.</p><p>Access the RFP or Proposal here: "View [Proposal:RFPFullLink]"</p><p>Respectfully,<br/>[Proposal:RFPOwnerName]<br/>[Proposal:RFPCompanyName]<br/></p>';
        $params = array(
            'subject' => 'M6Connect - Notice of Pending Award for ' . $responseNode->title,
            'body' => str_replace(array_keys($replace), array_values($replace), $message),
            'sender' => $award_giver_user->mail,
            'bcc' => $award_giver_user->mail,
            'language' => language_default(),
            'module' => 'm6connect_misc',
            'key' => 'proposal_mail___awarded_proposal_notify',
            'build' => TRUE,
        );
        $mpdf = new mPDF('c');
        $mpdf->WriteHTML(theme('proposal_awareded_mail_content', array('replace' => $replace)));
        $file_content = $mpdf->Output('', 'S');
        $pdfcontent = $params['attachments'][] = array(
            'filecontent' => $file_content,
            'filename' => 'Notice of Award.pdf',
            'filemime' => 'application/pdf',
        );
        $mailResponse = drupal_mail($params['module'], $params['key'], $award_taker_user->mail, $params['language'], $params);
        if ($mailResponse['send'] == 1) {
            $update = array('membership_award' => time(), 'membership_status' => 1);
            db_update('proposal_award')->fields($update)->condition('award_id', $dataObj->award_id, '=')->execute();
        }
        //drupal_set_message('<pre>'.print_r($mailResponse,1).'</pre>');
    }
}

///////////////////////////////////////////////////////////////////////////////////////////
/* * ************************** Send award mail on membership upgrade end ***************** */
///////////////////////////////////////////////////////////////////////////////////////////

function organization_custom_cancel_submit($form, &$form_state) {
    //$form_state['redirect'] = array('');  
    drupal_goto('');
}

function first_company_set_current_company($uid=0){
  global $user;
  $companySet = '';
  $uid = $user->uid;
  $result = m6connect_misc_get_groups_by_ownerid($uid);
  $nids = array();

  foreach($result as $value){

    if($value->field_type_of_company_value=='company'){
      $nids[]= $value->nid;
    }
  }
  if(!empty($nids)){
    $first_com = min($nids);
    //$_SESSION['company'] = $first_com;
  }
  if(isset($uid) && !empty($uid)){
  $companySet = variable_get('company_set_'.$uid);
  if(isset($companySet)  && !empty($companySet)){
    $companySet = $companySet;
  }else{
    $companySet = $first_com;
    variable_set('company_set_'.$uid, $first_com);
  } 
  }
  $_SESSION['company'] = $companySet;
}
function get_diversity_image_by_comapny_nid($cmpNid, $app = null){
  global $base_url;
  $diversityImage='';
  $diversityCount = db_select('field_data_field_diversity_credentials','dc')->fields('dc', array('field_diversity_credentials_target_id'))->condition('dc.entity_id',$cmpNid)->condition('dc.bundle','organization')->execute()->rowCount();
  if($diversityCount){
    $query = db_select('node','n');
    $query->join('field_data_field_dcrednid_22','fd22','fd22.entity_id=n.nid');
    $query->join('node','credentials','credentials.nid=fd22.field_dcrednid_22_target_id');
    $query->join('field_data_field_credential_doc','fcd','fcd.entity_id=credentials.nid');
    $query->fields('credentials',array('nid'));
    $query->condition('n.type','organization');
    $query->condition('n.nid',$cmpNid);
    $count = $query->execute()->rowCount();    
    //return $count;
    $appData = '';
    if($count >0){    
      $diversityImage = '<img src="/sites/all/themes/m6connect/images/certificate2.png" title="Verified Diversity Contractor" alt="cirtificate" style="width:30px; height:30px;" />';
      $appData['image'] = $base_url.'/sites/all/themes/m6connect/images/certificate2.png';
      $appData['title'] = 'Verified Diversity Contractor';
    }else{
      $diversityImage = '<img src="/sites/all/themes/m6connect/images/certificate3.png" title="Unverified Diversity Contractor" alt="cirtificate" style="width:30px; height:30px;" />';
      $appData['image'] = $base_url.'/sites/all/themes/m6connect/images/certificate3.png';
      $appData['title'] = 'Unverified Diversity Contractor';
    }
  }
  if(!empty($app)){
    return $appData;
  }
  else{
    return $diversityImage;
  }  
}

/**
 * Helper function to get medal image by nid.
 */
function _get_medal_image_by_nid($nid = FALSE) {
  if (!$nid) {
    return FALSE;
  }
  $node = node_load($nid);
  if (!$node) {
    return FALSE;
  }
  global $base_url;
  $theme_path = drupal_get_path('theme', 'm6connect');
  $level = 0;
  if (isset($node->field_m6level[LANGUAGE_NONE][0]['value'])) {
    $level = $node->field_m6level[LANGUAGE_NONE][0]['value'];
  }
  switch ($level) {
    case '0':
    case '1':
    case '2':
      return '<img src = "' . $base_url . '/' . $theme_path . '/images/medal_bronze.png" title="Bronze" alt="M6Level">';
      break;
    case '3':
    case '4':
    case '5':
      return '<img src = "' . $base_url . '/' . $theme_path . '/images/medal_silver.png" title="Silver" alt="M6Level">';
      break;
    case '6':
    case '7':
      return '<img src = "' . $base_url . '/' . $theme_path . '/images/medal_gold.png" title="Gold" alt="M6Level">';
      break;
    case '8':
    case '9':
      return '<img src = "' . $base_url . '/' . $theme_path . '/images/medal_platinum.png" title="Platinum" alt="M6Level">';
      break;
    default:
      return '<img src = "' . $base_url . '/' . $theme_path . '/images/medal_bronze.png" title="Bronze" alt="M6Level">';
      break;
  }
}

function proposal_reassign_form($form,&$form_state,$proposalNode){
  $form = array();
  proposal_er_view_widget_user_ctools_popup_style();
  $form['#attributes'] = array('class'=>array('my-proposal-reassign-form')); 
  $form['main-container'] = array(
    '#type' => 'container',
  '#theme' => 'proposal_test_options',
  '#after_build' => array('proposal_test_after_build'),
  '#prefix' => '<div class="proposal-reassign-section"><div class="proposal-reassign-header"><h3><span>Submit Proposal For?</span></h3><span class="indi_red text-right">* Indicates a Required Field</span></div>',
  '#suffix' => '</div>',
  );
  
  $submitted_for = (isset($proposalNode->field_choose_from_the_options_li['und']) && !empty($proposalNode->field_choose_from_the_options_li['und'][0]['value']))?$proposalNode->field_choose_from_the_options_li['und'][0]['value']:'';
  
  $fieldmapping = array(
    'receiver'=> array(
      'rfp'=> 'field_submit_proposal_a_rfp',
      'project'=> 'field_submit_proposal_a_project',
      'company'=> 'field_submit_proposal_a_company',
    ),
    'submitter'=> array(
      'rfp'=> 'field_submit_proposal_in_respons',
      'project'=> 'field_field_sub_proposal_pjt',
      'company'=> 'field_submit_proposal_to_company',
    ),
  );
  
  $form_state['proposal_field_mapping'] = $fieldmapping;
  
  if(empty($form_state['proposal_user_type'])){
    $form_state['proposal_user_type'] = proposal_reassign_proposal_access_callback($proposalNode,FALSE);
  }
  
  //drup_msg($form_state['proposal_user_type']);
  
  $userType = $form_state['proposal_user_type'];
  
  $optionKeymapping = array(
  'Submit Proposal in Response to a RFP'=>array('name'=>'submit_proposal_in_response_to_a_rfp','field'=>$fieldmapping[$userType]['rfp'],'add_more'=>'Click Here to Select the RFP to Submit this eProposal For'),
  'Submit Proposal in Response to a Project'=>array('name'=>'submit_proposal_in_response_to_a_project','field'=>$fieldmapping[$userType]['project'],'add_more'=>'Click Here to Select the Project to Submit this eProposal For'),
  'Submit Proposal to a company'=>array('name'=>'submit_proposal_to_a_company','field'=>$fieldmapping[$userType]['company'],'add_more'=>'Click Here to Select the company to Submit this eProposal For'),
  );
  
  $form['main-container']['choose_option'] = array(
    '#type' => 'radios',
    '#required' => TRUE,
    '#options' => array(
      'Submit Proposal in Response to a RFP'=>'Submit Proposal in Response to a RFP',
      'Submit Proposal in Response to a Project'=>'Submit Proposal in Response to a Project',
      'Submit Proposal to a company'=>'Submit Proposal to a Company',
    ),
    '#default_value'=> $submitted_for,
    '#storage_mapping' => $optionKeymapping, 
  );
  
  foreach($optionKeymapping as $optionKey => $fieldvalues){
    $form['main-container']['select_type'][$fieldvalues['name']] = array();
    $fieldMapping = array('field_name'=>$fieldvalues['field']);
    field_attach_form('node', $proposalNode, $form['main-container']['select_type'][$fieldvalues['name']], $form_state, NULL, $fieldMapping);
  
  $form['main-container']['select_type'][$fieldvalues['name']][$fieldvalues['field']]['und']['add_more']['#value'] = $fieldvalues['add_more'];
  $form['main-container']['select_type'][$fieldvalues['name']][$fieldvalues['field']]['und']['add_more']['#attributes']['class'][] = 'ctools-modal-m6-proposal-popup-style';
  $form['main-container']['select_type'][$fieldvalues['name']][$fieldvalues['field']]['#states'] = array(
    'visible' => array(':input[name="choose_option"]' => array('value' => $optionKey)),
  );
  }
  
  $form['proposal-nid']= array(
    '#type' => 'value',
    '#value' => $proposalNode->nid,
  );
  
  $form['proposal_user_type']= array(
    '#type' => 'value',
    '#value' => $form_state['proposal_user_type'],
  );
  
  $form['action-containetr']= array(
    '#type' => 'actions',
  );
  
  $form['action-containetr']['reassign-submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit', 
    '#submit' => array('reassign_form_submit'),
    '#validate' => array('custom_proposal_reassign_form_validate'),     
  );
  //$form['#validate'][] = 'custom_proposal_reassign_form_validate';
  //kpr($form);
  return $form;   
}

function theme_proposal_test_options($variables){
  $output = '';
  $element = $variables['form'];
  $optionsMapping = $element['choose_option']['#storage_mapping'];
  $output .= '<div class="reassign-option-list"><div class="reassign-option-label margin-bottom-10"><label for="edit-field-choose-from-the-options-li-und">Choose from the Options Listed  <span class="form-required" title="This field is required.">*</span></label></div>';
  foreach($optionsMapping as $optionKey => $fieldValues){
    $output .= drupal_render($element['choose_option'][$optionKey]); 
    $output .= '<div class ="select-in-response-section">';
    $output .= drupal_render($element['select_type'][$fieldValues['name']]); 
    $output .= '</div>';
  }
  $output .= '</div>';
  $output .= drupal_render_children($element);
  //kpr($element);
  return $output; 
}

function custom_proposal_reassign_form_validate($form, &$form_state) {  
  $user_type = $form_state['values']['proposal_user_type'];
  $fieldmapping = $form_state['proposal_field_mapping'][$user_type];
  
  if (isset($form_state['values']['choose_option']) && $form_state['values']['choose_option'] == 'Submit Proposal in Response to a RFP') {  
    if(!(isset($form_state['values'][$fieldmapping['rfp']]['und']) && !empty($form_state['values'][$fieldmapping['rfp']]['und'][0]['target_id']))){
      form_set_error($fieldmapping['rfp'], t('Please Select Rfp'));
    }
    $form_state['values'][$fieldmapping['project']]['und']= '';
    $form_state['values'][$fieldmapping['company']]['und']= '';
  }
  else  if (isset($form_state['values']['choose_option']) && $form_state['values']['choose_option'] == 'Submit Proposal in Response to a Project') {    
    if(!(isset($form_state['values'][$fieldmapping['project']]['und']) && !empty($form_state['values'][$fieldmapping['project']]['und'][0]['target_id']))){
      form_set_error('field_submit_proposal_a_project',t('Please Select Project'));
    }
    $form_state['values'][$fieldmapping['rfp']]['und']= '';
    $form_state['values'][$fieldmapping['company']]['und']= '';
  }
  else  if (isset($form_state['values']['choose_option']) && $form_state['values']['choose_option'] == 'Submit Proposal to a company') {    
    if(!(isset($form_state['values'][$fieldmapping['company']]['und']) && !empty($form_state['values'][$fieldmapping['company']]['und'][0]['target_id']))){
      form_set_error('field_submit_proposal_a_company', t('Please Select Company'));
    }
    $form_state['values'][$fieldmapping['rfp']]['und']= '';
    $form_state['values'][$fieldmapping['project']]['und']= '';
  }
}

function reassign_form_submit(&$form,&$form_state){
  $user_type = $form_state['values']['proposal_user_type'];
  $fieldmapping = $form_state['proposal_field_mapping'][$user_type];  
  $ProposalNode = isset($form_state['values']['proposal-nid'])? node_load($form_state['values']['proposal-nid']):'';  
  if (isset($form_state['values']['choose_option']) && $form_state['values']['choose_option'] == 'Submit Proposal in Response to a RFP') {
    $ProposalNode->field_choose_from_the_options_li['und'][0]['value']= $form_state['values']['choose_option'];
    if(isset($form_state['values'][$fieldmapping['rfp']]['und']) && $form_state['values'][$fieldmapping['rfp']]['und'][0]['target_id']){
      $ProposalNode->field_submit_proposal_in_respons = $form_state['values'][$fieldmapping['rfp']];
      $ProposalNode->field_submit_proposal_a_rfp = $form_state['values'][$fieldmapping['rfp']];
      $ProposalNode->field_field_sub_proposal_pjt = '';
      $ProposalNode->field_submit_proposal_a_project = '';
      $ProposalNode->field_submit_proposal_to_company = '';
      $ProposalNode->field_submit_proposal_a_company = '';
    }
    node_save($ProposalNode);
  }
  if (isset($form_state['values']['choose_option']) && $form_state['values']['choose_option'] == 'Submit Proposal in Response to a Project') {
    $ProposalNode->field_choose_from_the_options_li['und'][0]['value']= $form_state['values']['choose_option'];
    if(isset($form_state['values'][$fieldmapping['project']]['und']) && $form_state['values'][$fieldmapping['project']]['und'][0]['target_id']){
      $ProposalNode->field_field_sub_proposal_pjt = $form_state['values'][$fieldmapping['project']];
      $ProposalNode->field_submit_proposal_a_project = $form_state['values'][$fieldmapping['project']];
      $ProposalNode->field_submit_proposal_in_respons = '';
      $ProposalNode->field_submit_proposal_a_rfp = '';
      $ProposalNode->field_submit_proposal_to_company = '';
      $ProposalNode->field_submit_proposal_a_company = '';
    }
    node_save($ProposalNode);
  }
  if (isset($form_state['values']['choose_option']) && $form_state['values']['choose_option'] == 'Submit Proposal to a company') {
    $ProposalNode->field_choose_from_the_options_li['und'][0]['value']= $form_state['values']['choose_option'];
    if(isset($form_state['values'][$fieldmapping['company']]['und']) && $form_state['values'][$fieldmapping['company']]['und'][0]['target_id']){
      $ProposalNode->field_submit_proposal_to_company = $form_state['values'][$fieldmapping['company']];
      $ProposalNode->field_submit_proposal_a_company = $form_state['values'][$fieldmapping['company']];
      $ProposalNode->field_submit_proposal_in_respons = '';
      $ProposalNode->field_submit_proposal_a_rfp = '';
      $ProposalNode->field_field_sub_proposal_pjt = '';
      $ProposalNode->field_submit_proposal_a_project = '';
    }
    node_save($ProposalNode);
  } 
  $form_state['redirect'] = 'node/'.$ProposalNode->nid;
}


function custom_my_proposal_form_submit(&$form,&$form_state){
  if($form_state['values']['field_choose_from_the_options_li']['und'][0]['value'] == 'Submit Proposal in Response to a RFP'){
    if(isset($form_state['values']['field_submit_proposal_in_respons']['und']) && $form_state['values']['field_submit_proposal_in_respons']['und'][0]['target_id']){
      $form_state['values']['field_submit_proposal_a_rfp'] = $form_state['values']['field_submit_proposal_in_respons'];
    }
  }else if($form_state['values']['field_choose_from_the_options_li']['und'][0]['value'] == 'Submit Proposal in Response to a Project'){
    if(isset($form_state['values']['field_field_sub_proposal_pjt']['und']) && $form_state['values']['field_field_sub_proposal_pjt']['und'][0]['target_id']){
      $form_state['values']['field_submit_proposal_a_project'] = $form_state['values']['field_field_sub_proposal_pjt'];
    }
  }else if($form_state['values']['field_choose_from_the_options_li']['und'][0]['value'] == 'Submit Proposal to a company'){
    if(isset($form_state['values']['field_submit_proposal_to_company']['und']) && $form_state['values']['field_submit_proposal_to_company']['und'][0]['target_id']){
      $form_state['values']['field_submit_proposal_a_company'] = $form_state['values']['field_submit_proposal_to_company'];
    }   
  } 
}

function proposal_test_after_build($element, &$form_state){
  //kpr($element);
  return $element;
}

/*function callback_custom_my_proposal_formm_submit($form, &$form_state){
  drup_msg($form_state['values']);
  $commands = array();
  if($form_state['values']['form_id'] == 'views_form_m6project_for_proposal_entityreference_view_widget_2'){
    $projectNid = $form_state['values']['entityreference_view_widget'];
  $projectNode = isset($projectNid)?node_load($projectNid):'';
  $proPostalCode = isset($projectNode->field_project_address_new['und'][0]['postal_code'])?$projectNode->field_project_address_new['und'][0]['postal_code']:'';
  
   $commands[] = ajax_command_invoke('#edit-field-proposal-job-location-und-0-postal-code','val',array($proPostalCode)); 
    //return array('#type' => 'ajax', '#commands' => $commands);
  
  }
   ajax_render($commands);
}
*/

/**
 * Ajax callback to transform selected entity IDs into table rows.
 */
function m6_entityreference_view_widget_ajax($form, &$form_state) {
  $commands = array();
  $form_state['values']['entityreference_view_widget'] = is_array($form_state['values']['entityreference_view_widget']) ? array_filter($form_state['values']['entityreference_view_widget']) : array($form_state['values']['entityreference_view_widget']);
  if (!empty($form_state['values']['ervw_settings']) && !empty($form_state['values']['entityreference_view_widget'])) {
    // Retrieve the settings array.
    $widget_settings = unserialize($form_state['values']['ervw_settings']);
    $selected_entity_ids = !empty($form_state['values']['selected_entity_ids']) ? explode(';', $form_state['values']['selected_entity_ids']) : array();
    $input_ids = array_merge($selected_entity_ids, $form_state['values']['entityreference_view_widget']);
    $entity_ids = !empty($widget_settings['allow_duplicates']) ? $input_ids : array_unique($input_ids);
    $selected_amount = count($entity_ids);
    $cardinality = (int) $widget_settings['cardinality'];

    // If the user selected too many items...
    if ($cardinality > 0 && $cardinality < $selected_amount && $cardinality !== 1) {
      $error_message = t('Please select no more than @cardinality values', array('@cardinality' => $cardinality));
      $commands[] = ajax_command_prepend('#modal-content', '<div class="messages error">' . $error_message  . '</div>');
    }
    else {
      $rows['#theme'] = 'entityreference_view_widget_rows';
      $rows['#widget_settings'] = $widget_settings;
      // Single selection, replace the old value with the newly selected value.
      if ($cardinality === 1 && count($entity_ids) > 1) {
        $entity_ids = array_slice($entity_ids, -1, 1);
      }
      $rows += entityreference_view_widget_rows($entity_ids, $widget_settings);

      // Replace the whole table with updated values.
      $commands[] = ajax_command_replace('#' . $widget_settings['table_id'] . ' > tbody', '<tbody>' . render($rows) . '</tbody>');
      // Make the table rows draggables.
      if ($widget_settings['cardinality'] != 1) {
        $commands[] = entityreference_view_widget_command_draggable($widget_settings['table_id']);
      }
      // Automatically close the modal if necessary.
      if (!empty($widget_settings['close_modal'])) {
        ctools_include('modal');
        $commands[] = ctools_modal_command_dismiss();
      }
    //proposal project address autofill in job location   
    if($form_state['values']['form_id'] == 'views_form_m6project_for_proposal_entityreference_view_widget_2'){
    if(isset($form_state['values']['entityreference_view_widget']) && $form_state['values']['entityreference_view_widget'][0]){
      $projectNid = $form_state['values']['entityreference_view_widget'][0];
      $projectNode = isset($projectNid)?node_load($projectNid):'';    
      $proThoroughfare = isset($projectNode->field_project_address_new['und'][0]['thoroughfare'])?$projectNode->field_project_address_new['und'][0]['thoroughfare']:'';
      $proPremise = isset($projectNode->field_project_address_new['und'][0]['premise'])?$projectNode->field_project_address_new['und'][0]['premise']:'';
      $proLocality = isset($projectNode->field_project_address_new['und'][0]['locality'])?$projectNode->field_project_address_new['und'][0]['locality']:'';   
      $proAdministrativeArea = isset($projectNode->field_project_address_new['und'][0]['administrative_area'])?$projectNode->field_project_address_new['und'][0]['administrative_area']:'';
      $proPostalCode = isset($projectNode->field_project_address_new['und'][0]['postal_code'])?$projectNode->field_project_address_new['und'][0]['postal_code']:''; 
      $commands[] = ajax_command_invoke('#edit-field-proposal-job-location-und-0-thoroughfare','val',array($proThoroughfare));
      $commands[] = ajax_command_invoke('#edit-field-proposal-job-location-und-0-premise','val',array($proPremise));
      $commands[] = ajax_command_invoke('#edit-field-proposal-job-location-und-0-locality','val',array($proLocality));
      $commands[] = ajax_command_invoke('#edit-field-proposal-job-location-und-0-administrative-area','val',array($proAdministrativeArea));
      $commands[] = ajax_command_invoke('#edit-field-proposal-job-location-und-0-postal-code','val',array($proPostalCode));
      }
      }
    }
  }
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function get_field_access_by_comapny($fields){
  global $company;  
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_'.$fields.'', 'fdfa', 'fdfa.entity_id=n.nid');  
  $query->fields('fdfa', array(''.$fields.'_value'));
  $query->condition('n.nid',$company->nid,'=');
  $result = $query->execute()->fetchColumn(0);  
  return $result;
}

function m6connect_company_forms($form_id, $args) {
  $forms = array();
  if (strpos($form_id,'user_messaging_thread_form_')!==FALSE) {
  $dataObj = $args[0];
    $forms['user_messaging_thread_form_'.$dataObj->id] = array('callback' => 'user_messaging_thread_form');
  }
  return $forms;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// Start LinkedIn Messaging //////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function m6connect_company_preprocess_page(&$variables) {
  if (in_array(current_path(),array('user-messaging'))) {
  $variables['title'] = '';
  }
}

function m6message_connect_callback($connectWithUser){
  global $user;
  $db_and1 = db_and()->condition('mmc.created_by',$user->uid)->condition('mmc.mapping_gid',$connectWithUser->uid);
  $db_and2 = db_and()->condition('mmc.mapping_gid',$user->uid)->condition('mmc.created_by',$connectWithUser->uid);
  $db_or = db_or()->condition($db_and1)->condition($db_and2);
  $query = db_select('m6connect_messaging_connect','mmc');
  $query->fields('mmc',array('mapping_id'));
  $query->condition('mmc.mapping_group','user');
  $query->condition($db_or);
  $mappingId = $query->execute()->fetchField();
  //drup_msg($query->__toString());
  if(!$mappingId){
  $mappingId = md5($user->uid.'-'.$connectWithUser->uid.'-'.time());
  db_insert('m6connect_messaging_connect')->fields(array(
      'mapping_id' => $mappingId,
    'created_by' => $user->uid,
    'mapping_group' => 'user',
    'mapping_gid' => $connectWithUser->uid,
    'timestamp' => time(),
    'updated' => time(),
  ))->execute();
  $currentTime = time();
  db_merge('m6connect_messaging_connect_users')->key(array('mapping_id'=>$mappingId,'user_uid'=>$user->uid))
     ->fields(array('mapping_id'=>$mappingId,'user_uid'=>$user->uid,'mapping_type'=>'user','status'=>1,'join_timestamp'=>$currentTime))->execute();
    db_merge('m6connect_messaging_connect_users')->key(array('mapping_id'=>$mappingId,'user_uid'=>$connectWithUser->uid))
     ->fields(array('mapping_id'=>$mappingId,'user_uid'=>$connectWithUser->uid,'mapping_type'=>'user','status'=>1,'join_timestamp'=>$currentTime))->execute();    
  }
  //return $mappingId;
  //drupal_goto('user-messaging',array('query' => array('thread' => $mappingId)));
  db_update('m6connect_messaging_connect')->fields(array('updated'=>time()))->condition('mapping_id',$mappingId)->execute();
  drupal_goto('user-messaging');
}

function user_messaging_callback(){
  global $user;
  $currentUser = user_load($user->uid);

  // Checking whether the user messaging is accessed on company profile page.
  $_on_company_profile = arg(0) == 'node' && is_numeric(arg(1));
  $_on_scm = arg(0) == 'scm' || !empty($_SESSION['scr_request']) || !empty($_SESSION['login-mail']);

  if ($_on_scm) {
    if (empty($_SESSION['scr_request'])) {
      $_SESSION['scr_request'] = -1;
    }
    if (!empty($_SESSION['login-mail'])) {
      $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
      $uid = $userdata->UUID;
      $currentUser = user_load($uid);
    }
  }

  $elements = array();
  $userinfo = array(); 
  $userOptions = array();
  $userDefaultValue='';
  $userDefaultdataObj = '';
  drupal_add_library('system', 'ui.autocomplete');
  drupal_add_library('system', 'ui.dialog');
  drupal_add_js('sites/all/libraries/emojione/emojionearea.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_vendor') . '/js/messaging_socket.js');
  drupal_add_css('sites/all/libraries/emojione/emojionearea.min.css');
  
  drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/js/m6messaging.js');
  //$userDefaultValue = (isset($_REQUEST['thread']) && !empty($_REQUEST['thread']))?$_REQUEST['thread']:$userDefaultValue;
  
  $userOptions['new_mapping'] = 'new_mapping';
  
  $connectedUsers = array();
  $subQuery = db_select('m6connect_messaging_connect_users','mmcu');
  $subQuery->distinct();
  //leave group
  $subQuery->fields('mmcu',array('mapping_id','leave_timestamp'));
  $subQuery->condition('mmcu.user_uid',$currentUser->uid);
  
  $mainQuery = db_select('m6connect_messaging_connect_users','mmcua');
  $mainQuery->join($subQuery,'smc','smc.mapping_id=mmcua.mapping_id');
  $mainQuery->join('m6connect_messaging_connect','mmc','mmc.mapping_id=smc.mapping_id');
  $mainQuery->join('realname','r','r.uid=mmcua.user_uid');

  if ($_on_company_profile) {
    // If the user messaging is called on company profile page.
    $vendors = _get_vendors_by_company(arg(1)); // Defined in vendor module.
    $subQuery2 = db_select('service_messaging','sm');
    $subQuery2->distinct();
    $subQuery2->fields('sm',array('mapping_id'));
    $subQuery2->condition('sm.reference', $vendors);

    $mainQuery->join($subQuery2, 'sm', 'sm.mapping_id=mmcua.mapping_id');
  }

  if ($_on_scm) {
    // If the user messaging is called on SCM pages.
    $scm_reference = $_SESSION['scr_request'];
    $group_users = _get_group_users_by_nid_scm($scm_reference);
    unset($_SESSION['scr_request']);
    $subQuery2 = db_select('service_messaging','sm');
    $subQuery2->distinct();
    $subQuery2->fields('sm',array('mapping_id'));
    $subQuery2->condition('sm.reference', $scm_reference);

    if (!empty($group_users)) {
      $subQuery2->condition(db_or()->condition('sender', $currentUser->uid)->condition('receiver', $currentUser->uid)->condition('receiver', $group_users)->condition('receiver', '%' . db_like($currentUser->uid) . '%', 'LIKE'));
    }
    else {
      $subQuery2->condition(db_or()->condition('sender', $currentUser->uid)->condition('receiver', $currentUser->uid)->condition('receiver', '%' . db_like($currentUser->uid) . '%', 'LIKE'));
    }

    $mainQuery->join($subQuery2, 'sm', 'sm.mapping_id=mmcua.mapping_id');
  }

  $mainQuery->leftjoin ('field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=mmcua.user_uid' );
  $mainQuery->leftjoin ('file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid');
  $mainQuery->leftjoin('field_data_field_job_titles','jobm','jobm.entity_id=mmcua.user_uid AND jobm.bundle=:JobBundle',array(':JobBundle'=>'user'));
  $mainQuery->leftjoin('taxonomy_term_data','jterm','jterm.tid=jobm.field_job_titles_target_id');
  $mainQuery->fields('mmcua');
  //leave group
  $mainQuery->addField('smc','leave_timestamp','exit_timestamp');
  $mainQuery->fields('r',array('realname'));
  $mainQuery->fields('fmu', array('uri'));
  $mainQuery->addField('jterm','name','job_title');
  $mainQuery->condition('mmcua.user_uid',$currentUser->uid,'!=');
  //leave group
  $mainQuery->isNull('mmcua.leave_timestamp');
  $mainQuery->orderBy('mmc.updated',DESC);
  $mappingusers = $mainQuery->execute()->fetchAll();

  if(empty($mappingusers)){
  //drupal_goto('/find-people');  
  }
  
  //leave group
  $mainQuery->addField('smc','leave_timestamp','exit_timestamp');
  
  foreach ($mappingusers as $index => $mapping) {
    if (!isset($connectedUsers[$mapping->mapping_id])) {
      $connectedUsers[$mapping->mapping_id] = array();
      $connectedUsers[$mapping->mapping_id]['show_in_mapping'] =0;
      $connectedUsers[$mapping->mapping_id]['id'] = $mapping->id;
      $connectedUsers[$mapping->mapping_id]['mapping_id'] = $mapping->mapping_id;
      $connectedUsers[$mapping->mapping_id]['mapping_type'] = $mapping->mapping_type;
      $connectedUsers[$mapping->mapping_id]['group_name'] = array();
      $defaultUserPicicon = ($mapping->mapping_type=='user')?'sites/all/themes/m6connect/images/messanger_icons/fa-user-icon.png':'sites/all/themes/m6connect/images/messanger_icons/fa-group-icon.png';

      if ($_on_scm) {
        $connectedUsers[$mapping->mapping_id]['user_pic'] = '';
      }
      else {
        $connectedUsers[$mapping->mapping_id]['user_pic'] = (!empty($mapping->uri) && $mapping->mapping_type=='user')?theme_image_style(array('style_name'=>'pic_40x40','path'=>$mapping->uri,'attributes'=>array('class'=>array('img-circle')))):theme('image', array('path' => $defaultUserPicicon,'attributes'=> array('class'=> array('img-circle'),'style'=>'width:40px;height:40px;')));
      }

       //leave group
       if(empty($mapping->exit_timestamp)){
         $connectedUsers[$mapping->mapping_id]['all_names'][$currentUser->uid] = ucwords($currentUser->realname);
       }
       $connectedUsers[$mapping->mapping_id]['on_scm'] = $_on_scm;
       if (!empty($scm_reference)) {
        $connectedUsers[$mapping->mapping_id]['scm_reference'] = $scm_reference;
       }
    }

    // New group name according to new service messaging system.
    // Function defined in vendor.module.
    $new_group_name = _get_new_group_name_by_mapping_id($mapping->mapping_id, ucwords($mapping->realname), $mapping->user_uid);

    $connectedUsers[$mapping->mapping_id]['group_name'][]= !empty($new_group_name) ? $new_group_name : ucwords($mapping->realname);
    $connectedUsers[$mapping->mapping_id]['connected_user'][]= $mapping->user_uid;
    $connectedUsers[$mapping->mapping_id]['job_title'][$mapping->user_uid]= $mapping->job_title;
    $connectedUsers[$mapping->mapping_id]['all_names'][$mapping->user_uid] = ucwords($mapping->realname);
  }

  $connectedUserSettings = array();

  if ($connectedUsers && !empty($connectedUsers)) {
    foreach ($connectedUsers as $mappingidKey => $dataObj) {
      $activeClass = '';
      if (empty($userDefaultValue)) {
        $userDefaultValue = $mappingidKey; 
        $userDefaultdataObj = (object)$dataObj;
        $activeClass = ' user-active';
      }
      elseif ($userDefaultValue==$mappingidKey) {
        $userDefaultdataObj = (object)$dataObj; 
        $activeClass = ' user-active';
      }
      $connectedUserSettings[$mappingidKey] = array(
        'group_pic' => $dataObj['user_pic'],
        'group_name' => implode(', ',$dataObj['group_name']),
        'mapping_id' => $mappingidKey,
      );
      $userOptions[$mappingidKey] = $mappingidKey;
      $userinfo[$mappingidKey]  = '<div id="'.$mappingidKey.'" class="msg-connected-user-info msg-connected-user-'.implode('-',$dataObj['connected_user']).' clearfix'.$activeClass.'">';
      $userinfo[$mappingidKey] .= '  <div class="msg-connected-info">';
      if (!$_on_scm) {
        $userinfo[$mappingidKey] .= '    <div class="msg-connected-picture msg-connected-user-inner padding-5">';
        $userinfo[$mappingidKey] .= '      <span class="msg-pic">'.$dataObj['user_pic'].'</span>';
        $userinfo[$mappingidKey] .= '    </div>';
      }
      $userinfo[$mappingidKey] .= '    <div class="msg-connected-user-data msg-connected-user-inner padding-5">';
      $userinfo[$mappingidKey] .= '      <div class="msg-connected-user-name">'.implode(', ',$dataObj['group_name']).'</div>';
      $userinfo[$mappingidKey] .= '      <div class="msg-connected-user-desg"></div>';
      $userinfo[$mappingidKey] .= '    </div>';
      $userinfo[$mappingidKey] .= '  </div>';
      $userinfo[$mappingidKey] .= '</div>';
    }
  }
  elseif (empty($userDefaultValue)) {
    $userDefaultValue = 'new_mapping';
    $headerDataObj = array(
      'show_in_mapping' =>0,
      'id' => 0,
      'mapping_id' => 'new_mapping',
      'group_name' => $_on_scm ? '' : array('Add New Recipients'),
      'job_title' => '' ,
      'user_pic' => $_on_scm ? '' : theme('image', array('path' =>'sites/all/themes/m6connect/images/messanger_icons/fa-user-icon.png','attributes'=> array('class'=> array('img-circle'),'style'=>'width:40px;height:40px;'))),
      'mapping_type' => 'user',
      'no_recipients' =>1,
      'all_names' => array($currentUser->uid => ucwords($currentUser->realname)),
      'connected_user' => array($currentUser->uid),
      'on_scm' => $_on_scm,
      'scm_reference' => $scm_reference,
    );
    $userDefaultdataObj = (object)$headerDataObj;
  }

  $NorecipientActiveClass = ($userDefaultValue == 'new_mapping')?' user-active':'';
  $mappingidKey = 'new_mapping';

  $userinfoNorecipient = array();

  $userinfoNorecipient[$mappingidKey]  = '<div id="'.$mappingidKey.'" class="msg-connected-user-info '.$mappingidKey.' msg-connected-user-0 clearfix'.$NorecipientActiveClass.'">';
  $userinfoNorecipient[$mappingidKey] .= '  <div class="msg-connected-info">';
  if (!$_on_scm) {
    $userinfoNorecipient[$mappingidKey] .= '    <div class="msg-connected-picture msg-connected-user-inner padding-5">';
    $userinfoNorecipient[$mappingidKey] .= '      <span class="msg-pic">'.theme('image', array('path' =>'sites/all/themes/m6connect/images/messanger_icons/fa-user-icon.png','attributes'=> array('class'=> array('img-circle'),'style'=>'width:40px;height:40px;'))).'</span>';
    $userinfoNorecipient[$mappingidKey] .= '    </div>';
  }
  $userinfoNorecipient[$mappingidKey] .= '    <div class="msg-connected-user-data msg-connected-user-inner padding-5">';
  $userinfoNorecipient[$mappingidKey] .= '      <div class="msg-connected-user-name">Add New Recipients</div>';
  $userinfoNorecipient[$mappingidKey] .= '      <div class="msg-connected-user-desg">New Message</div>';
  $userinfoNorecipient[$mappingidKey] .= '    </div>';
  $userinfoNorecipient[$mappingidKey] .= '  </div>';
  $userinfoNorecipient[$mappingidKey] .= '</div>';

  $userinfo = array_merge($userinfoNorecipient,$userinfo);

  drupal_add_js(array('m6connect_messenger' => array('connectedusers'=>$connectedUserSettings)), 'setting');

  $connect_list_attr_class_row = array('margin-5','row');
  if ($_on_scm) {
    $connect_list_attr_class_row =  array('margin-0','row');
  }

  $elements['connected-list'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => $connect_list_attr_class_row),
    '#prefix' => '<div class="user-connected-user m6message-full-overlay clearfix" data-mapping="'.$userDefaultValue.'">',
    '#suffix' => '</div>',
  );

  $connect_list_attr_class_small = array('col-md-3','col-sm-4','col-xs-12','padding-5');

  if ($_on_company_profile) {
    $connect_list_attr_class_small =  array('col-md-4','col-sm-4','col-xs-12','padding-5');
  }
  if ($_on_scm) {
    $connect_list_attr_class_small =  array('col-md-4','col-sm-4','col-xs-12','padding-0');
  }

  $elements['connected-list']['left-container'] = array(
    '#type' => 'container',
    '#attributes' => array('class'=> $connect_list_attr_class_small),
  );

  $connect_list_attr_class_big =  array('col-md-9','col-sm-8','col-xs-12','padding-5');
  if ($_on_company_profile) {
    $connect_list_attr_class_big =  array('col-md-8','col-sm-8','col-xs-12','padding-5');
  }
  if ($_on_scm) {
    $connect_list_attr_class_big =  array('col-md-8','col-sm-8','col-xs-12','padding-0');
  }

  $elements['connected-list']['right-container'] = array(
    '#type' => 'container',
    '#attributes' => array('class'=> $connect_list_attr_class_big),
  );
  
  $elements['connected-list']['left-container']['connected-user-select']= array(
    '#markup' => drupal_render(drupal_get_form('user_messaging_thread_switch_form',$userOptions,$userDefaultValue, $_on_company_profile, $_on_scm)),
    '#prefix' => '<div style="display:none;">',
    '#suffix' => '</div>',
  );

  $createRecipientLink = '';
  if (!$_on_company_profile && !$_on_scm) {
    $creteImage = theme('image', array('path' => 'sites/all/themes/m6connect/images/messanger_icons/fa-user-create-icon.png','attributes'=> array('class'=> array('img-circle'),'style'=>'width:40px;height:40px;')));
    $createRecipientLink = l($creteImage,'javascript:void(0);', array(
      'html'=>TRUE,'external'=> TRUE,'attributes'=>array('class'=>array('new-recipient-create-link'),'onclick'=>'jQuery(".msg-connected-user-list div#new_mapping").click();')));
  }
  elseif ($_on_scm) {
    $creteImage = theme('image', array('path' => 'sites/all/themes/m6connect/images/messanger_icons/fa-user-create-icon.png','attributes'=> array('class'=> array('img-circle'),'style'=>'width:35px;height:35px;')));
    if (!empty($scm_reference)) {
      $_new_link = 'scm-chat-invite/' . $scm_reference . '/nojs';
      $createRecipientLink = l($creteImage, $_new_link, array('html' => TRUE, 'attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'))));
    }
    else {
      $_new_link = 'javascript:void(0)';
      $createRecipientLink = l($creteImage, $_new_link, array(
      'html'=>TRUE,'external'=> TRUE,'attributes'=>array('class'=>array('new-recipient-create-link'),'onclick'=>'jQuery(".msg-connected-user-list div#new_mapping").click();')));
    }
  }

  $elements['connected-list']['left-container']['connected-user-header']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('msg-connected-header-main-container-inner','message-user-heading')),
    '#prefix' => $_on_scm ? '<div class="msg-connected-header-main-container msg-connected-header-main clearfix dashboard-block-heading">' : '<div class="msg-connected-header-main-container msg-connected-header-main clearfix">',
    '#suffix' => '</div>',
  );
  $elements['connected-list']['left-container']['connected-user-header']['connected-user-header-markup'] = array(
    '#markup' => '<div class="col-md-8 col-sm-8 col-xs-8 padding-5">
                    <div class="create-messenger-group-text">All Messages</div>
                  </div>
            <div class="col-md-4 col-sm-4 col-xs-4 padding-5 text-right">
              <div class="create-messenger-group">'.$createRecipientLink.'</div>
                  </div>',
    '#prefix' => '<div class="row margin-5">',
    '#suffix' => '</div>',
    );

  /*$elements['connected-list']['left-container']['connected-user-header']= array(
    '#markup' => '<div class="msg-connected-header panel-body">
                <div class="pull-left">Messages</div>
                <div class="pull-right">'.$createRecipientLink.'</div>
                </div>',
     '#prefix' => '<div class="msg-connected-header-main clearfix">',
     '#suffix' => '</div>',         
  );*/
  
  $elements['connected-list']['left-container']['connected-user-list'] = array(
    '#markup' => implode('',$userinfo),
    '#prefix' => '<div class="msg-connected-user-list clearfix">',
    '#suffix' => '</div>',
  );
  $elements['connected-list']['right-container']['connected-user-form'] = array(
  '#markup' => drupal_render(drupal_get_form('user_messaging_thread_form',$userDefaultdataObj)),
  '#prefix' => '<div id="user-messaging-thread-form-container">',
  '#suffix' => '</div>',
  );
  
  $elements['messenger-dialog'] = array(
    '#markup' => '',
  '#prefix' => '<div id="messenger-dialog" class="messenger-dialog">',
  '#suffix' => '</div>',
  );
  
  $elements['messenger-confirmation'] = array(
    '#markup' => '',
  '#prefix' => '<div id="messenger-confirmation-dialog" class="messenger-confirmation-dialog">',
  '#suffix' => '</div>',
  );

  // For sound notifications.
  $elements['play_sound'] = array(
    '#markup' => '<div id="sound"></div>',
    '#prefix' => '<div style="display:none;">',
    '#suffix' => '</div>',
  );
  $elements['play_sound_2'] = array(
    '#markup' => '<div id="play_sound">Yes</div>',
    '#prefix' => '<div style="display:none;">',
    '#suffix' => '</div>',
  );
  return $elements;
}

function user_messaging_thread_switch_form($form,&$form_state,$userOptions= array(),$defaultValue='', $_on_company_profile = FALSE, $_on_scm = FALSE){
  $form['#attributes'] = array('class'=>array('user_messaging_thread_switch_form'));
  if ($_on_company_profile && arg(0) == 'node' && is_numeric(arg(1))) {
    $form_state['on_company_profile_nid'] = arg(1);
  }
  $form_state['on_scm'] = $_on_scm;
  $form_state['on_company_profile'] = $_on_company_profile;
  $form['connected-user-select']= array(
    '#type' => 'select',
  '#options' => $userOptions,
  '#attributes' => array('class'=> array('connected-user-select')),
  '#ajax' => array(
    'callback' => 'user_messaging_thread_switch_callback',
  ),
  );
  if(!empty($defaultValue)){
  $form['connected-user-select']['#default_value'] =  $defaultValue; 
  }
  return $form;
}

function user_messaging_thread_switch_callback($form,&$form_state){
  global $user;
  $currentUser = user_load($user->uid);

  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $currentUser = user_load($uid);
  }

  // Trying to judge whether we are on SCM.
  if (!empty($form_state['on_scm'])) {
    $_on_scm = $form_state['on_scm'];
  }
  else {
    $_on_scm = FALSE;
    $form_state['on_scm'] = FALSE;
  }

  $commands = array();
  $values = $form_state['values'];

  if (!empty($form_state['values']['connected-user-select']) && $form_state['values']['connected-user-select']!='new_mapping') {
    $_on_company_profile = $form_state['on_company_profile'];
    $_on_company_profile_nid = $form_state['on_company_profile_nid'];
    $connectedUsers = array();
   //leave group - Current User Status
    $subquery=db_select('m6connect_messaging_connect_users','qtp');
     $subquery->addField('qtp','leave_timestamp','exit_timestamp');
     $subquery->condition('qtp.user_uid',$currentUser->uid,'=');
    $subquery->condition('qtp.mapping_id',$form_state['values']['connected-user-select'],'=');
    $userStatusMapping = $subquery->execute()->fetchObject();
   
    $mainQuery = db_select('m6connect_messaging_connect_users','mmcua');
    $mainQuery->join('realname','r','r.uid=mmcua.user_uid');
    $mainQuery->leftjoin ('field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=mmcua.user_uid' );
    $mainQuery->leftjoin ('file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid');
    $mainQuery->leftjoin('field_data_field_job_titles','jobm','jobm.entity_id=mmcua.user_uid AND jobm.bundle=:JobBundle',array(':JobBundle'=>'user'));
    $mainQuery->leftjoin('taxonomy_term_data','jterm','jterm.tid=jobm.field_job_titles_target_id');
    $mainQuery->fields('mmcua');
    $mainQuery->fields('r',array('realname'));
    $mainQuery->fields('fmu', array('uri'));
    $mainQuery->addField('jterm','name','job_title');
    $mainQuery->condition('mmcua.mapping_id',$form_state['values']['connected-user-select'],'=');
    $mainQuery->condition('mmcua.user_uid',$currentUser->uid,'!=');

    //leave group
    $mainQuery->isNull('mmcua.leave_timestamp');
    $mappingusers = $mainQuery->execute()->fetchAll();

    foreach ($mappingusers as $index => $mapping) {
    if (!isset($connectedUsers[$mapping->mapping_id])) {
      $connectedUsers[$mapping->mapping_id] = array();
      $connectedUsers[$mapping->mapping_id]['id'] = $mapping->id;
      $connectedUsers[$mapping->mapping_id]['mapping_id'] = $mapping->mapping_id;
      $connectedUsers[$mapping->mapping_id]['mapping_type'] = $mapping->mapping_type;
      $connectedUsers[$mapping->mapping_id]['group_name'] = array();
      $defaultUserPicicon = ($mapping->mapping_type=='user')?'sites/all/themes/m6connect/images/messanger_icons/fa-user-icon.png':'sites/all/themes/m6connect/images/messanger_icons/fa-group-icon.png';
      if ($_on_scm) {
        // Avoiding image on SCM.
        $connectedUsers[$mapping->mapping_id]['user_pic'] = '';
      }
      else {
        $connectedUsers[$mapping->mapping_id]['user_pic'] = (!empty($mapping->uri) && $mapping->mapping_type=='user')?theme_image_style(array('style_name'=>'pic_40x40','path'=>$mapping->uri,'attributes'=>array('class'=>array('img-circle')))):theme('image', array('path' => $defaultUserPicicon,'attributes'=> array('class'=> array('img-circle'),'style'=>'width:40px;height:40px;')));
      }
      if(empty($userStatusMapping->exit_timestamp)){
        $connectedUsers[$mapping->mapping_id]['all_names'][$currentUser->uid] = ucwords($currentUser->realname);
      }
      $connectedUsers[$mapping->mapping_id]['on_scm'] = $_on_scm;
      $connectedUsers[$mapping->mapping_id]['scm_reference'] = $scm_reference;
    }
    if ($mapping->user_uid!=$currentUser->uid) {
      $new_group_name = _get_new_group_name_by_mapping_id($mapping->mapping_id, ucwords($mapping->realname), $mapping->user_uid);
      $connectedUsers[$mapping->mapping_id]['group_name'][]= !empty($new_group_name) ? $new_group_name : ucwords($mapping->realname);
      $connectedUsers[$mapping->mapping_id]['connected_user'][]= $mapping->user_uid;
      $connectedUsers[$mapping->mapping_id]['job_title'][$mapping->user_uid]= $mapping->job_title;
    }
    $connectedUsers[$mapping->mapping_id]['all_names'][$mapping->user_uid] = ucwords($mapping->realname);
  }

    $dataObj = (object)$connectedUsers[$form_state['values']['connected-user-select']];
    $rendermsg  = _user_messageing_threads($dataObj);

    if (!empty($dataObj->all_names)) {
    $tousernames = '';
    $all_names_tofrom = array_keys($dataObj->all_names);
    $tousernames = _prepare_from_to_usernames_socket($all_names_tofrom);
    if (!empty($tousernames)) {
      $commands[] = ajax_command_invoke('textarea.m6messaging-tofromnames', 'val', array($tousernames));
    }
  }

    $commands[] = ajax_command_css('.new-group-action-container .m6message_group_add_cancel', array('display'=>'inline-block'));

    //leave group 
    if (!array_key_exists($currentUser->uid,$dataObj->all_names)) {
      $commands[] = ajax_command_invoke('div.form-textarea-emoji', 'hide' ,array());
    }
    else{
      $commands[] = ajax_command_invoke('div.form-textarea-emoji', 'show' ,array());  
    }

    $commands[] = ajax_command_data('div.user-connected-user.m6message-full-overlay','mapping',$dataObj->mapping_id);
    $commands[] = ajax_command_invoke('.messaging-mapping-mapping','val', array($dataObj->mapping_id));
    $commands[] = ajax_command_html('#messenger-header-user-info',_m6messenger_header_markup($dataObj));
    $commands[] = ajax_command_html('.user-message-container .edit-message-container',$rendermsg);
    $commands[] = ajax_command_invoke('.add-new-member-users','val', array(''));
    $commands[] = ajax_command_html('.add-new-member-markup','');
    $commands[] = array('command'=>'SwitchMessagingCallback');
    $commands[] = ajax_command_invoke('div.m6message-main-container','removeClass',array('opacity02'));
  }
  elseif (!empty($form_state['values']['connected-user-select']) && $form_state['values']['connected-user-select']=='new_mapping') {
    $headerDataObj = array(
      'group_name'    => array('Add New Recipients'),
      'job_title'     => '' ,
      'user_pic'      => theme('image', array('path' =>'sites/all/themes/m6connect/images/messanger_icons/fa-user-icon.png','attributes'=> array('class'=> array('img-circle'),'style'=>'width:40px;height:40px;'))),
      'mapping_type'  => 'user',
      'no_recipients' => 1,
    );

    $headerDataObj = (object)$headerDataObj;

    $commands[] = ajax_command_css('.new-group-action-container .m6message_group_add_cancel', array('display'=>'none'));  
    $commands[] = ajax_command_invoke('div.form-textarea-emoji', 'hide' ,array());
    $commands[] = ajax_command_data('div.user-connected-user.m6message-full-overlay','mapping','new_mapping');
    $commands[] = ajax_command_invoke('.messaging-mapping-mapping','val', array($form_state['values']['connected-user-select']));
    $commands[] = ajax_command_html('.user-message-container .edit-message-container','');
    $commands[] = ajax_command_invoke('.add-new-member-users','val', array(''));
    $commands[] = ajax_command_html('.add-new-member-markup','');
    //$commands[] = ajax_command_html('.m6message-member-markup','No recipients');
    $commands[] = ajax_command_html('#messenger-header-user-info',_m6messenger_header_markup($headerDataObj));
    //$commands[] = ajax_command_invoke('#messenger-header-user-info .m6messenger-confid-link-main','hide',array());
    $commands[] = ajax_command_invoke('.add-new-group-container-section','show', array());
    $commands[] = array('command'=>'SwitchMessagingCallback');  
  }

  $commands[] = ajax_command_invoke('div.user-connected-user.m6message-full-overlay','removeClass',array('opacity02'));

  return array('#type' => 'ajax', '#commands' => $commands);  
}

function user_messaging_thread_form($form,&$form_state,$dataObj){
  global $user;
  $currentUser = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $currentUser = user_load($uid);
  }

  $_on_scm = $dataObj->on_scm;

  $form['#attributes'] = array('class'=>array('user_messaging_thread_form')); //dropzone
  
  // setTimeout(refreshMessageContent, 10000);
  $form['#attached']['js'][] = array(
    'data' => 'jQuery(document).ready(function(e) { 
         var container = jQuery("body").find("#user-messaging-thread-form-container .edit-message-container .message-box-main-container"); 
         if(container.length){
           container.animate({scrollTop: container[0].scrollHeight}, "slow");  
         }
         });',
  'type' => 'inline',
  );
  
  $form['#attached']['css'][] = array(
    'data' => 'div.message-post-message img.emojioneemoji{ width:50px; }
            .msg-connected-user-info.new_mapping{ display:none; }
              .msg-connected-user-info.new_mapping.user-active{ display:block; }',
  'type' => 'inline',
  );
  
  /*$form['reresh-link']= array(
    '#type' => 'submit',   
    '#value' => 'Refresh',
    '#attributes' => array('class' => array('m6messaging-refresh-submit')),
    '#executes_submit_callback' => FALSE,
  '#limit_validation_errors' => array(array('mapping-id')),
    '#ajax' => array(
      'callback' => 'refresh_user_messageing_threads_callback',
      'progress' => array('type' => 'none'),
    ),
    '#prefix' => '<div style="display:none;">',
    '#suffix' => '</div>',
  );*/
  
  $form['m6message-header']= array(
    '#type' => 'container',
  '#attributes' => array('class'=> array('message-user-heading','clearfix')),
  '#prefix' => '<div id="messenger-container-message-header" class="messenger-header-container">',
  '#suffix' => '</div>',
  );
  
  $form['m6message-header']['m6message-header-markup'] = array(
    '#markup' => _m6messenger_header_markup($dataObj),
  '#prefix' => '<div id="messenger-header-user-info" class="messenger-header-user-info">',
  '#suffix' => '</div>',
  );
  
  $group_container = (isset($dataObj->no_recipients))?'block':'none';
  if (!$_on_scm) {
    $form['m6message-header']['group_container'] = array(
      '#type' => 'container',
    '#attributes' => array('class'=>array('add-new-group-container-section'),'style'=>'display:'.$group_container.';'),
    );
    
    /*$form['m6message-header']['group_container']['member_markup'] = array(
      '#markup' => implode(', ',$dataObj->all_names),
    '#prefix' => '<div class="m6message-member-markup clearfix">',
    '#suffix' => '</div>',
    );*/
    $form['m6message-header']['group_container']['add_new_member_markup'] = array(
      '#markup' => '',
    '#prefix' => '<div class="add-new-member-markup clearfix">', //style="margin-top:10px;"
    '#suffix' => '</div>',
    );
    
    $form['m6message-header']['group_container']['add_new_member_box'] = array(
      '#type' => 'textfield',
    '#attributes' => array('class'=>array('add-new-member-box'),'placeholder'=> 'Add New Recipients'),
    '#prefix' => '<div class="margin-bottom-10">',
    '#suffix' => '</div>',
    );
    
    $form['m6message-header']['group_container']['new-message-box']= array(
      '#type' => 'textarea',
    '#resizable' => FALSE,
    '#attributes' => array('class'=> array('text-message-smilly-new'),'style'=>'display:none;'),
    '#attached'=> array(
      'js' =>  array(
        array(
        'data'=>'jQuery(document).ready(function() {
                   jQuery(".text-message-smilly-new").emojioneArea({
               container: ".new-message-box-inner",
               hideSource: true,
               useSprite: false,
               saveEmojisAs: "image",
               imageType: "png",
               shortnames: false,
               filtersPosition: "bottom",
               placeholder: "Enter your message here...",
               });
             });',
        'type' =>'inline'
      ),
      ),
      'css' => array(
        array(
        'data'=>'.new-message-box-inner .emojionearea-upbutton,
                 .new-message-box-inner .emojionearea-sendbutton{
                display:none;   
             }',
        'type' => 'inline'
      ),
      )
    ),
    '#prefix' => '<div class="margin-bottom-10 form-textarea-emoji-new">',
    '#suffix' => '<div class="new-message-box-inner"></div></div>',
    );
    $form['m6message-header']['group_container']['add_new_member_users'] = array(
      '#type' => 'hidden',
    '#attributes' => array('class'=>array('add-new-member-users')),
    );
    
    $form['m6message-header']['group_container']['gaction_container'] =  array(
      '#type' => 'actions',
    '#attributes' => array('class'=> array('pull-right')),
    '#prefix' => '<div class="new-group-action-container clearfix margin-bottom-10">',
    '#suffix' => '</div>',
    );
    
    $cancelLinlStyle = (isset($dataObj->no_recipients))?'none':'inline-block';
    
    $form['m6message-header']['group_container']['gaction_container']['gaction_save'] = array(
      '#type' => 'submit',   
      '#value' => 'Done',
      '#attributes' => array('class' => array('m6message_group_add_done'),'style'=>'display:none;'),
      '#submit' => array('add_message_group_member_submit_handler'),
      '#limit_validation_errors' => array(array('add_new_member_users'),array('mapping-id'),array('new-message-box')),
      '#ajax' => array(
        'callback' => 'add_message_group_member_callback',
        'effect' => 'fade',
      ),
    '#prefix' => l('<input type="button" class="form-submit" value="Send" />','javascript:void(0);', array('html'=>TRUE,'external'=>TRUE, 'attributes'=> array('class'=>array('m6message_group_add_group'),'onclick'=>'jQuery("input.m6message_group_add_done").trigger("mousedown");'))), 
    '#suffix' => l('<input type="button" class="form-submit" value="Cancel" />','javascript:void(0);', array('html'=>TRUE,'external'=>TRUE, 'attributes'=> array('class'=>array('m6message_group_add_cancel'),'style'=>'display:'.$cancelLinlStyle.';'))),
    );
  }
  
  $form['m6message-header']['forword_container'] = array(
    '#type' => 'actions',
  '#attributes' => array('class'=>array('message-forword-container-section','clearfix'),'style'=>'margin-top:10px;display:none;'),
  );
  
  $form['m6message-header']['forword_container']['forword_save']= array(
    '#type' => 'markup',
  '#markup' => '<div class="col-md-4 col-sm-4 col-xs-4 padding-5 text-left">'.l('<input type="button" class="form-submit" value="Cancel" />','javascript:void(0);',array('external'=>TRUE,'html'=>TRUE,'attributes'=>array('class'=>array('message-forword-cancel-link')))).'</div>
         <div class="col-md-4 col-sm-4 col-xs-4 padding-5 text-center">'.l('<input type="button" class="form-submit" value="0 Selected" />','javascript:void(0);',array('external'=>TRUE,'html'=>TRUE,'attributes'=>array('class'=>array('message-forword-selected-link')))).'</div>
         <div class="col-md-4 col-sm-4 col-xs-4 padding-5 text-right">'.l('<input type="button" class="form-submit" value="Forward" />','javascript:void(0);',array('external'=>TRUE,'html'=>TRUE,'attributes'=>array('class'=>array('message-forword-next-link')))).'</div>',
  '#prefix' => '<div class="row margin-5">',
  '#suffix' => '</div>',
  );
  
  $form['m6message-header']['delete_container'] = array(
    '#type' => 'actions',
  '#attributes' => array('class'=>array('message-delete-container-section','clearfix'),'style'=>'margin-top:10px;display:none;'),
  );
  
  $form['m6message-header']['delete_container']['delete_save']= array(
    '#type' => 'markup',
  '#markup' => '<div class="col-md-4 col-sm-4 col-xs-4 padding-5 text-left">'.l('<input type="button" class="form-submit" value="Cancel" />','javascript:void(0);',array('external'=>TRUE,'html'=>TRUE,'attributes'=>array('class'=>array('message-delete-cancel-link')))).'</div>
         <div class="col-md-4 col-sm-4 col-xs-4 padding-5 text-center">'.l('<input type="button" class="form-submit" value="0 Selected" />','javascript:void(0);',array('external'=>TRUE,'html'=>TRUE,'attributes'=>array('class'=>array('message-deleted-selected-link')))).'</div>
         <div class="col-md-4 col-sm-4 col-xs-4 padding-5 text-right">'.l('<input type="button" class="form-submit" value="Delete Selected" />','javascript:void(0);',array('external'=>TRUE,'html'=>TRUE,'attributes'=>array('class'=>array('message-delete-next-link')))).'</div>',
  '#prefix' => '<div class="row margin-5">',
  '#suffix' => '</div>',
  );
  
  $form['m6message-main'] = array(
    '#type' => 'container',
  '#attributes' =>  array('class' => array('m6message-main-container')),
  );

  $form['m6message-main']['message-container'] =  array(
    '#type' => 'container',
  '#attributes' =>  array('class' => array('edit-message-container')),
  '#prefix' => '<div class="user-message-container">',
  '#suffix' => '</div>',
  );
  
  $form['m6message-main']['message-container']['message-list'] =  array(
    '#markup' => _user_messageing_threads($dataObj),
  );

  $tousernames = '';
  if (!empty($dataObj->all_names)) {
    $all_names_tofrom = array_keys($dataObj->all_names);
    $tousernames = _prepare_from_to_usernames_socket($all_names_tofrom);
  }

  $form['m6message-main']['tofromnames'] = array(
    '#prefix' => '<div style="display:none;">',
    '#suffix' => '</div>',
    '#type' => 'textarea',
    '#attributes' => array('class' => array('m6messaging-tofromnames')),
    '#default_value' => $tousernames,
  );
  $form['m6message-main']['mapping-id'] = array(
    '#type' => 'hidden',
  '#default_value' => $dataObj->mapping_id,
  '#attributes' => array('class'=>array('messaging-mapping-mapping')),
  );
  
  $isMappingNew = (isset($dataObj->no_recipients))?1:0; 
  $empjitextareaStyle = (isset($dataObj->no_recipients))?'none':'block' ; 
  //leave group
  if($isMappingNew==0 && !array_key_exists($currentUser->uid,$dataObj->all_names)){
  $empjitextareaStyle = 'none'; 
  }
  $form['m6message-main']['message-box']= array(
    '#type' => 'textarea',
  '#resizable' => FALSE,
  '#attributes' => array('class'=> array('text-message-smilly'),'style'=>'display:none; '),
  '#attached'=> array(
    'js' =>  array(
      array(
      'data'=>'jQuery(document).ready(function() {
                 jQuery(".text-message-smilly").emojioneArea({
             container: ".message-abc-cont",
             hideSource: true,
             useSprite: false,
             saveEmojisAs: "image",
             imageType: "png",
             shortnames: false,
             filtersPosition: "bottom",
             placeholder: "Enter your message here...",
             });
           });',
      'type' =>'inline'
    ),
    ),
  ),
  '#prefix' => $_on_scm ? '<div class="form-textarea-emoji" style="display:'.$empjitextareaStyle.'">' : '<div class="margin-bottom-10 form-textarea-emoji" style="display:'.$empjitextareaStyle.'">',
  '#suffix' => '<div class="message-abc-cont"></div></div>',
  );
   
  $form['m6message-main']['attachment-section']= array(
    '#type' => 'container',
  '#attributes' => array('style'=>'display:none;'),
  '#prefix' => '<div id="attachment-fid-section">',
    '#suffix' => '</div>',
  );
  
  $form['m6message-main']['attachment-section']['attachment-fid'] = array(
    '#type' => 'file',
  '#name' => 'files[]',
  '#attributes' => array('class'=> array('emoji-file-attachment')),
  '#title' => t('Choose a file'),
    '#title_display' => 'invisible',
    '#size' => 22, 
  );
  
  $form['m6message-main']['attachment-section']['upload-attachment'] = array(
   '#type' => 'submit',   
   '#value' => 'Upload Attachment',
   '#attributes' => array('class' => array('m6message_attachment_send')),
   '#submit' => array('new_thread_attachment_submit_handler'),
   '#limit_validation_errors' => array(array('attachment-fid'),array('mapping-id')),
   '#ajax' => array(
    'callback' => 'new_thread_attachment_callback',
    'effect' => 'fade',
   ),
  );
 
  $form['m6message-main']['submit'] = array(
   '#type' => 'submit',   
   '#value' => 'Send',
   '#attributes' => array('class' => array('m6message_message_send'),'style'=>'display:none;'),
   '#submit' => array('new_thread_message_submit_handler'),
   '#limit_validation_errors' => array(array('message-box'),array('mapping-id')),
   '#ajax' => array(
    'callback' => 'new_thread_message_callback',
    'effect' => 'fade',
    'progress' => array('type' => 'none'),
   ),
  );
  return $form;
}

function add_message_group_member_submit_handler(&$form,&$form_state){
  global $user, $company;
  $values = $form_state['values'];
  $form_state['new_message_group'] = '';
  $currentTime = time();
  if(!empty($values['add_new_member_users']) && !empty($values['mapping-id']) && $values['mapping-id']!='new_mapping'){
  $mappingId = $values['mapping-id'];
  $invitedUser  = explode(',',$values['add_new_member_users']);
  $invitedUser = array_map('trim',$invitedUser);
  $invitedUser = array_filter($invitedUser);
  $invitedUser = array_unique($invitedUser);
  if(!empty($invitedUser)){
    $mapping = db_select('m6connect_messaging_connect','mmc')->fields('mmc')->condition('mmc.mapping_id',$values['mapping-id'])->execute()->fetchObject();  

    $mappingQuery = db_select('m6connect_messaging_connect_users','mmcu');
    $mappingQuery->fields('mmcu',array('mapping_type'));
    $mappingQuery->addExpression('GROUP_CONCAT(distinct mmcu.user_uid  separator \',\')', 'user_uids');
    $mappingQuery->condition('mmcu.mapping_id',$values['mapping-id']);
    $mappingQuery->groupBy('mmcu.mapping_id');
    //leave group
    $mappingQuery->isNull('mmcu.leave_timestamp');
    $mapping = $mappingQuery->execute()->fetchObject();
    $mappingUsers = explode(',',$mapping->user_uids);
    if($mapping->mapping_type=='user'){
    $checkUser = $mappingUsers;
    $checkUser = array_merge($checkUser,$invitedUser);
    $checkUser = array_unique($checkUser);
    $groupUserCount = count($checkUser);
    if($groupUserCount>2){
      $groupQuery1 = db_select('m6connect_messaging_connect_users','mmcu');
      $groupQuery1->fields('mmcu',array('mapping_id'));
      $groupQuery1->addExpression('count(mmcu.user_uid)','ucount');
      $groupQuery1->condition('mmcu.mapping_type','group');
      $groupQuery1->condition('mmcu.user_uid',$checkUser,'IN');
      $groupQuery1->groupBy('mmcu.mapping_id');
      $groupQuery1->havingCondition('ucount', $groupUserCount);
      $group = $groupQuery1->execute()->fetchAllKeyed(0,1);
      if(!empty($group)){
      $mappingId = key($group);  
      }else{
      $userkey = implode('-',$mappingUsers);
      $mappingId = md5($userkey.'-'.$currentTime);
          db_insert('m6connect_messaging_connect')->fields(array(
              'mapping_id' => $mappingId,
            'created_by' => $user->uid,
            'mapping_group' => 'group',
            'mapping_gid' => $user->uid,
            'timestamp' => $currentTime,
        'updated' => $currentTime,
          ))->execute();
      }
      foreach($checkUser as $delta => $userUid){
      if($values['mapping-id']==$mappingId && in_array($userUid,$mappingUsers)){
        continue; 
      }
      //leave group
        db_merge('m6connect_messaging_connect_users')->key(array('mapping_id'=>$mappingId,'user_uid'=>$userUid))
           ->fields(array('mapping_id'=>$mappingId,'user_uid'=>$userUid,'mapping_type'=>'group','status'=>1,'join_timestamp'=>$currentTime,'leave_timestamp'=>NULL))->execute();  
      }
      $form_state['new_message_group']= $mappingId;
    }
    }else{
    foreach($invitedUser as $delta => $userUid){
      if(in_array($userUid,$mappingUsers)){
        continue; 
      }
      //leave group
        db_merge('m6connect_messaging_connect_users')->key(array('mapping_id'=>$values['mapping-id'],'user_uid'=>$userUid))
           ->fields(array('mapping_id'=>$values['mapping-id'],'user_uid'=>$userUid,'mapping_type'=>'group','status'=>1,'join_timestamp'=>$currentTime,'leave_timestamp'=>NULL))->execute(); 
    }
    $form_state['new_message_group']= $values['mapping-id'];  
    }
  }
  }else if(!empty($values['add_new_member_users']) && !empty($values['mapping-id']) && $values['mapping-id']=='new_mapping'){
   $mappingId ='';
   $invitedUser  = explode(',',$values['add_new_member_users']);
   $invitedUser = array_map('trim',$invitedUser);
   $invitedUser[] = $user->uid;
   $invitedUser = array_filter($invitedUser);
   $invitedUser = array_unique($invitedUser); 
   $invitedCount = count($invitedUser);
   $mapping_group = ($invitedCount==2)?'user':'group';
   if($invitedCount >= 2){
     $groupQuery1 = db_select('m6connect_messaging_connect_users','mmcu');
     $groupQuery1->fields('mmcu',array('mapping_id'));
     $groupQuery1->addExpression('count(mmcu.user_uid)','ucount');
     $groupQuery1->condition('mmcu.mapping_type',$mapping_group);
     $groupQuery1->condition('mmcu.user_uid',$invitedUser,'IN');
     //leave group
       $groupQuery1->isNull('mmcu.leave_timestamp');
     $groupQuery1->groupBy('mmcu.mapping_id');
     $groupQuery1->havingCondition('ucount', $invitedCount); 
     $group = $groupQuery1->execute()->fetchAllKeyed(0,1);
     if(!empty($group)){
       $mappingId = key($group);
     $form_state['new_message_group']= $mappingId;   
     }else{
     $userkey = implode('-',$invitedUser);
     $mappingIdNew = md5($userkey.'-'.$currentTime);
     $mapping_group = ($invitedCount==2)?'user':'group';
       $insertID = db_insert('m6connect_messaging_connect')->fields(array(
       'mapping_id' => $mappingIdNew,
       'created_by' => $user->uid,
       'mapping_group' => $mapping_group,
       'mapping_gid' => $user->uid,
       'timestamp' => $currentTime,
       'updated' => $currentTime,
     ))->execute();
     if($insertID && is_numeric($insertID)){
       $mappingId = $mappingIdNew;
       $form_state['new_message_group']= $mappingId;
       foreach($invitedUser as $delta => $inviteUserUid){
       //db_insert('m6connect_messaging_connect_users')->fields(array('mapping_id'=>$mappingId,'user_uid'=>$inviteUserUid,'mapping_type'=>$mapping_group,'status'=>1,'join_timestamp'=>$currentTime))->execute(); 
       //leave group
        db_merge('m6connect_messaging_connect_users')->key(array('mapping_id'=>$mappingId,'user_uid'=>$inviteUserUid))
           ->fields(array('mapping_id'=>$mappingId,'user_uid'=>$inviteUserUid,'mapping_type'=>$mapping_group,'status'=>1,'join_timestamp'=>$currentTime,'leave_timestamp'=>NULL))->execute();  
       }
     }
     }
     if(!empty($mappingId) && !empty($values['new-message-box'])){
     $message  = _messenger_message_filter($values['new-message-box']);
     if(!empty($message)){
       $insertId = db_insert('m6connect_messaging_connect_message')->fields(array(
       'mapping_id' => $mappingId,
       'author_uid' => $user->uid,
       'message_text' => $message,
       'attachment' => 0,
       'render_state' =>1,
       'timestamp' => $currentTime,
       'seen_by' => $user->uid,
      ))->execute();
     }
     }
   }
  }
}


function add_message_group_member_callback($form,&$form_state){
  ctools_include('ajax');
  ctools_include('modal');
  $commands = array();
  if(!empty($form_state['new_message_group'])){
  db_update('m6connect_messaging_connect')->fields(array('updated'=>time()))->condition('mapping_id',$form_state['new_message_group'])->execute();
  $commands[] = ctools_ajax_command_redirect('user-messaging', 0);
  //array('query'=> array('thread'=>$form_state['new_message_group']))  
  }else{
  $commands[] = ajax_command_invoke('div.m6message-main-container','removeClass',array('opacity02'));  
  }
  
  return array('#type' => 'ajax', '#commands' => $commands);    
}

function new_thread_attachment_submit_handler(&$form,&$form_state){
  global $user, $company, $base_url, $base_path;
  $account = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $account = user_load($uid);
  }

  $values = $form_state['values'];
  $files = $_FILES;
  $form_state['insertAttachment'] = array();
  $insertedAttachment = array();
  $attachmentTime = time();
  $messageDateClass = date('m-d-Y',$attachmentTime);
  $messageDate = date('m/d/Y',$attachmentTime);
  $messageTime = date('h:i A',$attachmentTime);
  if (!empty($files['files']['name'][0]) && !empty($values['mapping-id'])) {
  $filecount = count($files['files']['name']);
  foreach($files['files']['name'] as $delta => $filename){
    $validator = array(
      'file_validate_extensions' => array('txt pdf jpg jpeg doc docx rtf xls xlsx dwg dxf mpp mpx mspdi xml mpd mpxj pp mdb sdef tiff rif gif bmp png ppm pgm pbm pnm bpg cgm svg tar zip exe tz csv'),
    );
    $uploadedFile = file_save_upload($delta, $validator ,'public://m6message-attachment/',FILE_EXISTS_RENAME);
    if(is_object($uploadedFile)){
    $attachment = file_load($uploadedFile->fid);
      $attachment->status = FILE_STATUS_PERMANENT;
      $attachment = file_save($attachment); 
    $insertId = db_insert('m6connect_messaging_connect_message')->fields(array(
        'mapping_id' => $values['mapping-id'],
        'author_uid' => $account->uid,
        'message_text' => NULL,
        'attachment' => $attachment->fid,
        'render_state' =>1,
        'timestamp' => $attachmentTime,
      'seen_by' => $account->uid,
      ))->execute();
    
    if($insertId){
      $message = get_m6message_attachment_box($attachment->fid,$attachment->uri,$attachment->filename,$attachment->filemime);
      $mainClass = 'm6-messaging-message message-submitted clearfix text-right padding-5';
      $messageOutput  ='<div id="m6-messaging-message-'.$insertId.'" class="message-row margin-bottom-10 '.$mainClass.'">';
      $messageOutput .='  <div  class="clearfix">';
      $messageOutput .='    <div  class="message-post-message display-inline-block">'.$message.'</div>';
      $messageOutput .='  </div>';
      $messageOutput .='  <span class="message-post-time text-left clearfix">'.date('h:i A',$messageTime).'</span>';
      $messageOutput .='    <input type="checkbox" name="message_forword[]" class="messenger-message-forword-checkbox" value="'.$insertId.'">';
      $messageOutput .='</div>';
        $messageDateRow ='<div class="message-box message-date-'.$messageDateClass.'"><div class="message-date-data text-center margin-bottom-10">'.$messageDate.'</div></div>'; 
        $insertedAttachment[] = array(
          'message' => $messageOutput,
          'date_div_class' => '.message-box.message-date-'.$messageDateClass,
          'data_div' => $messageDateRow,
            'action' => 'insert',
        );
    }
    }
  }
  }
  $form_state['insertAttachment'] = $insertedAttachment;
}

function new_thread_attachment_callback($form,&$form_state){
  $commands = array();
  $commands[] = ajax_command_invoke('input.emoji-file-attachment','val', array(''));  
  if(!empty($form_state['insertAttachment'])){
  $commands[] = array('command'=>'M6MessagingRefresh','insert_data'=>$form_state['insertAttachment']);
  $commands[] = array('command'=>'M6MessagingSocketSend');
  }
  $form_state['insertAttachment']=array();
  return array('#type' => 'ajax', '#commands' => $commands);    
}

function new_thread_message_submit_handler(&$form,&$form_state){
  global $user;
  $account = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $account = user_load($uid);
  }
  $form_state['insertMessage'] = '';
  $values = $form_state['values'];
  $message  = _messenger_message_filter($values['message-box']);
  if(!empty($message) && !empty($values['mapping-id'])){
  $time = time();
    $insertId = db_insert('m6connect_messaging_connect_message')->fields(array(
    'mapping_id' => $values['mapping-id'],
    'author_uid' => $account->uid,
    'message_text' => $message,
    'attachment' => 0,
    'render_state' =>1,
    'timestamp' => $time,
    'seen_by' => $account->uid,
  ))->execute(); 
  if($insertId){
    $mainClass = 'm6-messaging-message message-submitted clearfix text-right padding-5';
    $messageOutput  ='<div id="m6-messaging-message-'.$insertId.'" class="message-row margin-bottom-10 '.$mainClass.'">';
      $messageOutput .='  <div  class="clearfix">';
    $messageOutput .='    <div  class="message-post-message display-inline-block">'.$message.'</div>';
    $messageOutput .='  </div>';
    $messageOutput .='  <span class="message-post-time text-left clearfix">'.date('h:i A').'</span>';
    $messageOutput .='    <input type="checkbox" name="message_forword[]" class="messenger-message-forword-checkbox" value="'.$insertId.'">';
      $messageOutput .='</div>';
    $dataOne = date('m-d-Y');
    $date = date('m/d/Y');
    $dateDiv ='<div class="message-box message-date-'.$dataOne.'"><div class="message-date-data text-center margin-bottom-10">'.$date.'</div></div>'; 
    $insert = array();
    $insert[] = array(
      'message' => $messageOutput,
      'date_div_class' => '.message-box.message-date-'.$dataOne,
      'data_div' => $dateDiv,
        'action' => 'insert',
    );
    $form_state['insertMessage'] = $insert;
  }
  }
}

function new_thread_message_callback(&$form,&$form_state){
  global $user;
  $commands = array();
  if(!empty($form_state['insertMessage'])){
  $commands[] = array('command'=>'M6MessagingRefresh','insert_data'=>$form_state['insertMessage']);  
  $form_state['insertMessage']='';
  }
  $commands[] = ajax_command_html('div.emojionearea.text-message-smilly div.emojionearea-editor','');
  $commands[] = ajax_command_invoke('textarea.text-message-smilly','val',array(''));
  return array('#type' => 'ajax', '#commands' => $commands);  
}

function _user_messageing_threads($dataObj){
  global $user;
  $account = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $account = user_load($uid);
  }
  $userNewDetail = array();
  $output = '';
  if(isset($dataObj->no_recipients)){
  return $output;  
  }

  $userNewDetail = array(
  'realname' => implode(', ',$dataObj->group_name),
  'job_title' => ($dataObj->mapping_type=='group')?'':implode(', ',$dataObj->job_title) ,
  'user_pic' => $dataObj->user_pic,
  );
  
  //leave group
  $subquery=db_select('m6connect_messaging_connect_users','qtp');
  $subquery->addExpression('IFNULL(qtp.leave_timestamp,:CurrentTime)','exit_timestamp',array(':CurrentTime'=>time()));
  $subquery->fields('qtp', array('mapping_id','join_timestamp'));
  $subquery->condition('qtp.user_uid',$account->uid,'=');
  
  $query = db_select('m6connect_messaging_connect_message','mmcm');
  //leave group
  $query->join($subquery,'mql','mql.mapping_id=mmcm.mapping_id');
  $query->join('m6connect_messaging_connect_users','mmcu','mmcm.mapping_id=mmcu.mapping_id AND mmcu.user_uid=:UserUid', array(':UserUid'=>$account->uid));
  $query->join('realname','r','r.uid=mmcm.author_uid');
  $query->leftjoin ('field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=mmcm.author_uid' );
  $query->leftjoin ('file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid');
  $query->leftjoin ('file_managed', 'fmat', 'fmat.fid=mmcm.attachment');
  $query->addExpression('DATE_FORMAT(FROM_UNIXTIME(mmcm.timestamp), :Format)','timestamp_date',array(':Format'=>'%m/%d/%Y'));
  $query->addExpression('IF(FIND_IN_SET(:userUid,mmcm.seen_by)>0,0,1)','not_found',array(':userUid'=>$account->uid));
  $query->fields('mmcm');
  $query->addField('fmu','uri','user_pic_uri');
  $query->fields('r', array('realname'));
  $query->addField('fmat','uri','attach_uri');
  $query->addField('fmat','filemime','attach_filemime');
  $query->addField('fmat','filename','attach_filename');
  //$query->fields('fmu', array('uri'));
  $query->condition('mmcm.mapping_id',$dataObj->mapping_id);
  $query->condition('mmcm.render_state',2,'!=');
  $query->condition('mmcm.render_state',2,'!=');
  $query->orderBy('mmcm.timestamp',ASC);
  //$query->where('(mmcm.timestamp>mmcu.clear_conversation_timestamp)');
  //leave group
  $query->where('(mmcm.timestamp>mmcu.clear_conversation_timestamp) AND (mmcm.timestamp<=mql.exit_timestamp)'); //(mmcm.timestamp>mql.join_timestamp)
  $messagesObj = $query->execute()->fetchAll();
  
  
  $messageFiltered = array();
  foreach($messagesObj as $delta => $messageData){
  $date_object = new DateObject($messageData->timestamp, new DateTimeZone('UTC'));
    $date_object->setTimezone(new DateTimeZone(drupal_get_user_timezone()));
  $messageData->timestamp_time = date_format_date($date_object, 'custom', 'h:i A');
  $messageFiltered[$messageData->timestamp_date][] = $messageData;
  if($messageData->not_found){
    $seenBy = explode(',',$messageData->seen_by);
    $seenBy[] = $account->uid;
    db_update('m6connect_messaging_connect_message')->fields(array('seen_by'=>implode(',',$seenBy)))->condition('id',$messageData->id)->execute();
  }
  }
  //<i class="fa fa-user-plus" aria-hidden="true"></i>  <i class="glyphicon glyphicon-plus"></i>
  /*$output .= '<div class="message-user-heading margin-bottom-10 clearfix">';
  $output .= '  <div class="row margin-5">';
  $output .= '    <div class="col-md-10 col-sm-10 col-xs-10 padding-5">';
  $output .= '      <div class="message-user-heading-img display-inline-block">'.$userNewDetail['user_pic'].'</div>';
  $output .= '      <div class="message-user-heading-user-info display-inline-block">';
  $output .= '        <div class="message-user-heading-user-name">'.$userNewDetail['realname'].'</div>';
  $output .= '        <div class="message-user-heading-user-job">'.$userNewDetail['job_title'].'</div>';
  $output .= '      </div>';
  $output .= '    </div>';
  $output .= '    <div class="col-md-2 col-sm-2 col-xs-2 padding-5 text-right">';
  $output .= '      <div class="message-user-heading-user-add display-inline-block">';
  $output .= '      '.l('<i class="fa fa-user-plus" aria-hidden="true"></i>','javascript:void(0);', array('html'=>TRUE,'external'=> TRUE, 'attributes'=> array('class'=> array('m6id-mapping-user-add','m6id-mapping-user-setting'))));
  $output .= '      </div>';
  $output .= '      <div class="dropdown messenger-user-config-section display-inline-block">';
  $output .= '        '.l('<i class="fa fa-ellipsis-h" aria-hidden="true"></i></i>','javascript:void(0);', array('html'=>TRUE,'external'=> TRUE, 'attributes'=> array('class'=> array('m6id-mapping-user-config','m6id-mapping-user-setting'),'id'=>'messenger-configure','data-target' => '#','data-toggle' => 'dropdown','role' => 'button','aria-haspopup' => 'true','aria-expanded' => 'false')));
  $output .= '        <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="messenger-configure">';
  $output .= '          <li>'.l('Delete Conversation','javascript:void(0);', array('external'=>TRUE)).'</li>';
  $output .= '          <li>'.l('Exit Group','javascript:void(0);', array('external'=>TRUE)).'</li>';
  $output .= '        </ul>';
  $output .= '      </div>';
  $output .= '    </div>';
  $output .= '  </div>';
  $output .= '</div>';*/
 
  $output .= '<div class="message-box-main-container">';
  foreach($messageFiltered as $date => $messages){
  $dataOne = date('m-d-Y',strtotime($date));
  $output .='<div class="message-box message-date-'.$dataOne.'"><div class="message-date-data text-center margin-bottom-10">'.$date.'</div>';  
  foreach($messages as $delta => $message){
    $messageUserPic  = '';
    $messageUserRealname  = '';
    $mainClass = 'm6-messaging-message message-submitted clearfix text-right padding-5';
    if($account->uid != $message->author_uid){
    $mainClass = 'm6-messaging-message message-received clearfix text-left text-left padding-5';
    //$messageUserPic  = (!empty($message->user_pic_uri))?theme_image_style(array('style_name'=>'pic_40x40','path'=>$dataObj->user_pic_uri,'attributes'=>array('class'=>array('img-circle')))):theme('image', array('path' => 'sites/default/files/images_13_0.png','attributes'=> array('class'=> array('img-circle'),'style'=>'width:40px;height:40px;')));
      $messageUserRealname = ucwords($message->realname);
    }
    $message_text = $message->message_text;
    if(empty($message->message_text)){
      if(empty($message->attachment)){
        continue; 
      }
      $message_text = get_m6message_attachment_box($message->attachment,$message->attach_uri,$message->attach_filename,$message->attach_filemime);
    }

    // Getting the seen by mark and html.
    $seen_by_markup = '';
    if($account->uid == $message->author_uid) {
      $seen_by_markup = _get_seen_by_markup($message->mapping_id, $message->id, $message->seen_by);
    }

    $output .='<div id="m6-messaging-message-'.$message->id.'" class="message-row margin-bottom-10 '.$mainClass.'">';
      $output .='    <div class="clearfix">';
    $output .='      <div class="message-post-user-realname">'.ucwords($messageUserRealname).'</div>';
    $output .='      <div class="message-post-message display-inline-block">'.$message_text.'</div>';
    $output .='    </div>';
    $output .='    <span class="message-post-time text-left clearfix">'.$message->timestamp_time . $seen_by_markup . '</span>';
    $output .='    <input type="checkbox" name="message_forword[]" class="messenger-message-forword-checkbox" value="'.$message->id.'">';
    if($account->uid == $message->author_uid){
      $output .='<input type="checkbox" name="message_delete[]" class="messenger-message-delete-checkbox" value="'.$message->id.'">';
    }
      $output .='</div>'; 
  }
  $output .='</div>'; 
  }
  $output .= '</div>';
  return $output;
} 

function refresh_user_messageing_threads_callback($form,&$form_state){
  global $user;
  $account = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $account = user_load($uid);
  }
  $mappingID = $form_state['values']['mapping-id'];
  $commands = array();
  $query = db_select('m6connect_messaging_connect_message','mmcm');
  $query->join('realname','r','r.uid=mmcm.author_uid');
  $query->leftjoin ('field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=mmcm.author_uid' );
  $query->leftjoin ('file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid');
  $query->addExpression('DATE_FORMAT(FROM_UNIXTIME(mmcm.timestamp), :FormatDate)','timestamp_date',array(':FormatDate'=>'%m/%d/%Y'));
  $query->addExpression('DATE_FORMAT(FROM_UNIXTIME(mmcm.timestamp), :FormatClass)','timestamp_class',array(':FormatClass'=>'%m-%d-%Y'));
  $query->fields('mmcm');
  $query->fields('r', array('realname'));
  $query->fields('fmu', array('uri'));
  $query->condition('mmcm.mapping_id',$mappingID);
  $query->orderBy('mmcm.timestamp',ASC);
  $query->where('(mmcm.render_state=:renderStatus) || ((FIND_IN_SET(:UserUid,mmcm.seen_by)=0) AND mmcm.author_uid!=:UserUid)', array(':renderStatus'=>2,':UserUid'=>$account->uid));
  $messagesObj = $query->execute()->fetchAll();
  $insert = array();
  $inserted = array();
  $deleted = array();
  foreach($messagesObj as $index => $message){
    if($message->render_state != 2){
      $inserted[] = $message->id;
    $date_object = new DateObject($message->timestamp, new DateTimeZone('UTC'));
      $date_object->setTimezone(new DateTimeZone(drupal_get_user_timezone()));
    $message->timestamp_time = date_format_date($date_object, 'custom', 'h:i A');
    $message_text= $message->message_text;
    
    if(empty($message->message_text)){
    if(empty($message->attachment)){
      continue; 
    }
    $attachment = file_load($message->attachment);
    $fileShow = ($attachment->type=='image')?theme('image_style', array('style_name' => 'pic_40x40', 'path' => $attachment->uri, 'getsize' => TRUE,'attributes'=>array('class'=>array('message-attachemnt-file')))):$attachment->filename;
    $message_text = l($fileShow,file_create_url($attachment->uri), array('html'=>TRUE,'attributes'=>array('download'=>$attachment->filename,'class'=>array('message-attachemnt-file'))));
    }
  
    $mainClass = 'm6-messaging-message message-received clearfix text-left padding-5'; 
    $messageOutput  ="<div id='m6-messaging-message-".$message->id."' class='message-row margin-bottom-10 ".$mainClass."'>";
    $messageOutput .="    <div  class='clearfix'>";
    $messageOutput .="      <div class='message-post-user-realname'>".ucwords($message->realname)."</div>";
    $messageOutput .="      <div  class='message-post-message display-inline-block'>".$message_text;
    $messageOutput .="    </div>";
    $messageOutput .="    <span class='message-post-time text-left clearfix'>".$message->timestamp_time."</span>";
    $messageOutput .='    <input type="checkbox" name="message_forword[]" class="messenger-message-forword-checkbox" value="'.$message->id.'">';
    $messageOutput .="</div>";
    $dateDiv ="<div class='message-box message-date-".$message->timestamp_class."'><div class='message-date-data text-center margin-bottom-10'>".$message->timestamp_date."</div></div>";
    $insert[] = array(
      'message' => $messageOutput,
      'date_div_class' => '.message-box.message-date-'.$message->timestamp_class,
      'data_div' => $dateDiv,
        'action' => 'insert',
    );
    $seenBy = explode(',',$message->seen_by);
    $seenBy[] = $account->uid;
    db_update('m6connect_messaging_connect_message')->fields(array('seen_by'=>implode(',',$seenBy)))->condition('id',$message->id)->execute();
    }else{
       $deleted[] = $message->id;
       $insert[] = array(
      'message' => '',
      'date_div_class' => '#m6-messaging-message-'.$message->id,
      'data_div' => '',
        'action' => 'remove',
    ); 
    }
  }
  if(!empty($deleted)){
    db_delete('m6connect_messaging_connect_message')->condition('id',$deleted,'IN')->execute();
  }
  if(!empty($insert)){
    $commands[] = array('command'=>'M6MessagingRefresh','insert_data'=>$insert);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function user_messaging_attachment_callback(){
  global $user;
  $account = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $account = user_load($uid);
  }
  $insert = array();
  $file = new stdClass();
  if(isset($_FILES['file'],$_FILES['file']['error'],$_REQUEST['mapping_id']) && $_FILES['file']['error']==0 && !empty($_FILES['file']['name']) && !empty($_REQUEST['mapping_id']) && (strpos($_FILES['file']['type'],'image')===0)){
   $path = 'public://m6message-attachment/';
   file_prepare_directory($path, FILE_CREATE_DIRECTORY);
   $uri = $path.$_FILES['file']['name'];
   $destination = file_destination($uri, FILE_EXISTS_RENAME);
   if($destination!==FALSE && drupal_move_uploaded_file($_FILES['file']['tmp_name'],$uri)){
     $file = new stdClass();
       $file->uid = $account->uid;
       $file->status = 0;
       $file->filename = trim($_FILES['file']['name']);
       $file->uri = $destination;
       $file->filemime = $_FILES['file']['type'];
       $file->filesize = $_FILES['file']['size']; 
     if ($file = file_save($file)) {
      $timestamp = time();
      $timestamp_class = date('m-d-Y',$timestamp);
      $timestamp_date = date('m/d/Y',$timestamp);
      $imageStyleUrl = image_style_url('pic_50x50',$file->uri); 
      $dateDiv ="<div class='message-box message-date-".$timestamp_class."'><div class='message-date-data text-center margin-bottom-10'>".$timestamp_date."</div></div>";
      $messageOutput = '<img class="m6message-attachment-file" src="'.$imageStyleUrl.'" />';
      $insert = array(
          'message' => $messageOutput,
          'date_div_class' => '.message-box.message-date-'.$timestamp_class,
          'data_div' => $dateDiv,
            'action' => 'insert',
       ); 
     }
    } 
  }
  drupal_json_output($insert);
  drupal_exit(0);
}

function get_m6messaging_user_detail_ajax(){
  $users = array();
  $term = (isset($_REQUEST['term']))?trim($_REQUEST['term']):'';
  $mappingID = (isset($_REQUEST['mapping_id']))?trim($_REQUEST['mapping_id']):'';
  if(!empty($mappingID) && !empty($term)){
    
  $notShowUserQuery = db_select('users_roles','urd');
  $notShowUserQuery->fields('urd',array('uid'));
  $notShowUserQuery->condition('urd.rid',3,  '=');
    
  $query =  db_select('users',  'u');
  $query->join('realname','r','r.uid=u.uid');
  $query->leftjoin('field_data_field_user_profile_photo', 'ufpm', 'ufpm.entity_id=u.uid' );
  $query->leftjoin('file_managed', 'fmum', 'fmum.fid=ufpm.field_user_profile_photo_fid');
  $query->leftjoin('field_data_field_job_titles','jobm','jobm.entity_id=u.uid AND jobm.bundle=:JobBundle',array(':JobBundle'=> 'user'));
  $query->leftjoin('taxonomy_term_data','jtermm','jtermm.tid=jobm.field_job_titles_target_id');
  $query->fields('u', array('uid'));
  $query->fields('r', array('realname'));
  $query->fields('fmum', array('uri'));
  $query->fields('jtermm', array('name'));
  $query->condition('r.realname','%'.db_like($term).'%',  'LIKE');
  $query->condition('u.uid',$notShowUserQuery,'NOT IN');
  $query->condition('u.status',1);
  $query->orderBy('r.realname',  'ASC');
  $results = $query->execute()->fetchAll();    
  
  if(!empty($results)){
    $jobTitle = !empty($udetail->name)?$udetail->name:'';
    foreach($results as $index => $udetail) {
	  $usrComp = '';
	  $getComData = m6connect_misc_get_groups_by_ownerid($udetail->uid);
      foreach($getComData as $comDelta => $comVal) {
        if($comVal->field_type_of_company_value != 'individual') {
          $usrComp = ', '.$comVal->title;
        }
      }
    $users[] = array(
      'label'=> ucwords($udetail->realname), 
      'value'=> $udetail->uid, 
      'image'=> (!empty($udetail->uri))?theme_image_style(array('style_name'=>'pic_40x40','path'=>$udetail->uri,'attributes'=>array('class'=>array('img-circle')))):theme('image', array('path' => 'sites/default/files/images_13_0.png','attributes'=> array('class'=> array('img-circle'),'style'=>'width:40px;height:40px;'))), 
      'job_title' => $jobTitle,
	  'userCom' => $usrComp,	  
      );  
    }
  }
  }
  drupal_json_output($users);
  drupal_exit();
}

function m6message_insert_message_ajax_callback(){
  global $user,$company;
  $account = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $account = user_load($uid);
  }
  $values = array();
  $insert = array();
  parse_str($_REQUEST['formDataValues'], $values);
  $message  = _messenger_message_filter($values['message-box']);
  if(!empty($message) && !empty($values['mapping-id'])){
  $time = time();
    $insertId = db_insert('m6connect_messaging_connect_message')->fields(array(
    'mapping_id' => $values['mapping-id'],
    'author_uid' => $account->uid,
    'message_text' => $message,
    'attachment' => 0,
    'render_state' =>1,
    'timestamp' => $time,
    'seen_by' => $account->uid,
  ))->execute(); 
  
  //m6id message insert start 
    if (!empty($company->nid)) {
      $query = db_select('m6connect_messaging_connect_users' ,'mmc');
      $query->fields('mmc',array('user_uid'));
      $query->condition('mmc.mapping_id',$values['mapping-id'],'=');
      $query->condition('mmc.user_uid',$account->uid,'<>');
      $mapping_gid = $query->execute()->fetchColumn(0); 
      $user_type = 'company_user';
        $onboardingManagerUids = _get_company_users_by_og_roles($company->nid,'M6ID Manager');
      if(in_array($account->uid,$onboardingManagerUids)){
        $user_type = 'ob_manager';    
      } 
      $approval_message= array(
        'request_from' => $account->uid,
        'request_to' => $mapping_gid,
        'message' => strip_tags($message, '<>'), 
        'company_nid' => $company->nid,
        'user_type' => $user_type,
        'message_prefix' => NULL,
        'timestamp' => time(),
      );  
        $m6id = db_insert('m6connect_onboarding_inter_company_message')->fields($approval_message)->execute(); 
    }
  //m6id message insert end 
  if($insertId){
    // Getting the seen by mark and html.
    $seen_by_markup = _get_seen_by_markup($values['mapping-id'], $insertId);

    $mainClass = 'm6-messaging-message message-submitted clearfix text-right padding-5';
    $messageOutput  ='<div id="m6-messaging-message-'.$insertId.'" class="message-row margin-bottom-10 '.$mainClass.'">';
      $messageOutput .='  <div  class="clearfix">';
    $messageOutput .='    <div  class="message-post-message display-inline-block">'.$message.'</div>';
    $messageOutput .='  </div>';
    $messageOutput .='  <span class="message-post-time text-left clearfix">'.date('h:i A').$seen_by_markup .'</span>';
    $messageOutput .='    <input type="checkbox" name="message_forword[]" class="messenger-message-forword-checkbox" value="'.$insertId.'">';
    $messageOutput .='    <input type="checkbox" name="message_delete[]" class="messenger-message-delete-checkbox" value="'.$insertId.'">';
      $messageOutput .='</div>';
    $dataOne = date('m-d-Y');
    $date = date('m/d/Y');
    $dateDiv ='<div class="message-box message-date-'.$dataOne.'"><div class="message-date-data text-center margin-bottom-10">'.$date.'</div></div>'; 
    $insert = array();
    $insert[] = array(
      'message' => $messageOutput,
      'date_div_class' => '.message-box.message-date-'.$dataOne,
      'data_div' => $dateDiv,
        'action' => 'insert',
    );
    db_update('m6connect_messaging_connect')->fields(array('updated'=>time()))->condition('mapping_id',$values['mapping-id'])->execute();
  }
  }
  drupal_json_output(array('callback'=>'M6MessagingRefresh','insert'=>$insert,'values'=>$values));
  drupal_exit();
}

function m6message_refresh_message_ajax_callback(){
  global $user;
  $account = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $account = user_load($uid);
  }
  $insert = array();
  $inserted = array();
  $deleted = array();
  $values = array();
  parse_str($_REQUEST['formDataValues'], $values);
  $mappingID = $values['mapping-id'];
  if(!empty($mappingID)){
    
  //leave group
    $subquery=db_select('m6connect_messaging_connect_users','qtp');
    $subquery->addExpression('IFNULL(qtp.leave_timestamp,:CurrentTime)','exit_timestamp',array(':CurrentTime'=>time()));
    $subquery->fields('qtp', array('mapping_id','join_timestamp'));
    $subquery->condition('qtp.user_uid',$account->uid,'=');
  
  $query = db_select('m6connect_messaging_connect_message','mmcm');
  $query->join($subquery,'mql','mql.mapping_id=mmcm.mapping_id');
  $query->join('realname','r','r.uid=mmcm.author_uid');
  $query->leftjoin ('field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=mmcm.author_uid' );
  $query->leftjoin ('file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid');
  $query->leftjoin ('file_managed', 'fmat', 'fmat.fid=mmcm.attachment');
  $query->addExpression('DATE_FORMAT(FROM_UNIXTIME(mmcm.timestamp), :FormatDate)','timestamp_date',array(':FormatDate'=>'%m/%d/%Y'));
  $query->addExpression('DATE_FORMAT(FROM_UNIXTIME(mmcm.timestamp), :FormatClass)','timestamp_class',array(':FormatClass'=>'%m-%d-%Y'));
  $query->fields('mmcm');
  $query->fields('r', array('realname'));
  $query->fields('fmu', array('uri'));
  $query->addField('fmat','uri','attach_uri');
  $query->addField('fmat','filemime','attach_filemime');
  $query->addField('fmat','filename','attach_filename');
  $query->condition('mmcm.mapping_id',$mappingID);
  $query->orderBy('mmcm.timestamp',ASC);
  //leave group
  $query->where('((mmcm.timestamp>mql.join_timestamp) AND (mmcm.timestamp<=mql.exit_timestamp)) AND (((mmcm.render_state=:renderStatus) AND ((FIND_IN_SET(:UserUid,mmcm.deleted_from))=0)) || ((FIND_IN_SET(:UserUid,mmcm.seen_by)=0) AND mmcm.author_uid!=:UserUid))', array(':renderStatus'=>2,':UserUid'=>$account->uid));
  $messagesObj = $query->execute()->fetchAll();
  foreach($messagesObj as $index => $message){
    if (empty($message->realname)) {
      $user_data = _get_user_mail_realname_by_uid($message->author_uid);
      if (empty($user_data['realname'])) {
        $user_data['realname'] = $user_data['name'];
      }
      $message->realname = $user_data['realname'];
    }
    if($message->render_state != 2){
    $inserted[] = $message->id;
    $date_object = new DateObject($message->timestamp, new DateTimeZone('UTC'));
    $date_object->setTimezone(new DateTimeZone(drupal_get_user_timezone()));
    $message->timestamp_time = date_format_date($date_object, 'custom', 'h:i A');
    $message_text= $message->message_text;
    
    if(empty($message->message_text)){
      if(empty($message->attachment)){
      continue; 
      }
      $message_text=get_m6message_attachment_box($message->attachment,$message->attach_uri,$message->attach_filename,$message->attach_filemime);
    }
    
    $mainClass = 'm6-messaging-message message-received clearfix text-left padding-5'; 
    $messageOutput  ="<div id='m6-messaging-message-".$message->id."' class='message-row margin-bottom-10 ".$mainClass."'>";
    $messageOutput .="    <div  class='clearfix'>";
    $messageOutput .="      <div class='message-post-user-realname'>".ucwords($message->realname)."</div>";
    $messageOutput .="      <div  class='message-post-message display-inline-block'>".$message_text;
    $messageOutput .="    </div>";
    $messageOutput .="    <span class='message-post-time text-left clearfix'>".$message->timestamp_time."</span>";
    $messageOutput .='    <input type="checkbox" name="message_forword[]" class="messenger-message-forword-checkbox" value="'.$message->id.'">';
    $messageOutput .="</div>";
    $dateDiv ="<div class='message-box message-date-".$message->timestamp_class."'><div class='message-date-data text-center margin-bottom-10'>".$message->timestamp_date."</div></div>";
    $notify_data = array(
      'title'   => 'New Message on M6Connect from ' . ucwords($message->realname),
      'options' => array(
        'body' => strip_tags($message_text),
        'icon' => 'https://dev.m6connect.com/sites/all/themes/m6connect/images/icon-42.png',
      ),
    );

    $seen_data = array(
      'fromusername' => _prepare_username_for_socket($account->uid),
      'tousername'   => _prepare_username_for_socket($message->author_uid),
      'mid'          => $message->id,
    );
    $insert[] = array(
      'message' => $messageOutput,
      'date_div_class' => '.message-box.message-date-'.$message->timestamp_class,
      'data_div' => $dateDiv,
      'action' => 'insert',
      'notifydata' => $notify_data,
      'seendata' => $seen_data,
    );
    $seenBy = explode(',',$message->seen_by);
    $seenBy[] = $account->uid;
    db_update('m6connect_messaging_connect_message')->fields(array('seen_by'=>implode(',',$seenBy)))->condition('id',$message->id)->execute();
    }else{
    $deletedFrom = (!empty($message->deleted_from))?$message->deleted_from:'';
    $deletedFrom = explode(',',$deletedFrom);
    $deletedFrom = array_filter($deletedFrom);
    $deletedFrom[] = $account->uid;
    $deletedFrom = array_unique($deletedFrom);
    $deleteFromQuery = db_update('m6connect_messaging_connect_message')->fields(array('deleted_from'=>implode(',',$deletedFrom)))->condition('id',$message->id);
    $isDeleted = $deleteFromQuery->execute();
    if($isDeleted){
      $deleted[] = $message->id;
      $insert[] = array(
        'message' => '',
        'date_div_class' => '#m6-messaging-message-'.$message->id,
        'data_div' => '',
        'action' => 'remove',
      ); 
    }
    }
  }
  }
  drupal_json_output(array('callback'=>'M6MessagingRefresh','insert'=>$insert));
  drupal_exit();
}

function get_font_awesome_file_icon_by_filemime($filemime){
  $filemimeArr = explode('/',$filemime);
  $iconPath = '';
  if($filemimeArr[0]!= 'image'){
    $iconPath = '<i class="fa fa-file-o fa-3x" aria-hidden="true"></i>';
    if($filemimeArr[0] == 'text'){
    $iconPath = '<i class="fa fa-file-text fa-3x" aria-hidden="true"></i>'; 
    }else if(count($filemimeArr) > 1 && $filemimeArr[0] == 'application'){
    if($filemimeArr[1] == 'pdf'){
      $iconPath = '<i class="fa fa-file-pdf-o fa-3x" aria-hidden="true"></i>';  
    }else if(in_array($filemimeArr[1], array('msword','rtf','vnd.openxmlformats-officedocument.wordprocessingml.document'))){
      $iconPath = '<i class="fa fa-file-word-o fa-3x" aria-hidden="true"></i>'; 
    }else if(in_array($filemimeArr[1], array('vnd.ms-excel','vnd.openxmlformats-officedocument.spreadsheetml.sheet'))){
      $iconPath = '<i class="fa fa-file-excel-o fa-3x" aria-hidden="true"></i>';  
    }else if(in_array($filemimeArr[1], array('x-tar','zip'))){
      $iconPath = '<i class="fa fa-file-archive-o fa-3x" aria-hidden="true"></i>';  
    } 
    }
  }
  return $iconPath;
}

function get_m6message_attachment_box($attachFid,$attachUri,$attachFileName,$attachFileMime){
  $fileShow = '';
  if(strpos($attachFileMime,'image/')!==FALSE){
    $fileShow = theme('image_style', array('style_name' => 'pic_40x40', 'path' => $attachUri, 'getsize' => TRUE,'attributes'=>array('class'=>array('message-attachemnt-file'))));
  }else{
  $fileShow = get_font_awesome_file_icon_by_filemime($attachFileMime);
  $fileShow .= '<span class="m6message-attachment-filename">&nbsp;'.$attachFileName.'</span>';
  }
  $message_text = l($fileShow,file_create_url($attachUri), array('html'=>TRUE,'attributes'=>array('target'=>'_blank','class'=>array('message-attachemnt-file'),'style'=>'text-decoration:none;')));
  return $message_text;
}

function _m6messenger_header_markup($dataObj){
  global $user;
  $_on_company_profile = arg(0) == 'node' && is_numeric(arg(1));
  $_on_scm = $dataObj->on_scm;
  //drup_msg($dataObj);
  $output = '';

  $userNewDetail = array(
  'realname' => implode(', ',$dataObj->group_name),
  'job_title' => ($dataObj->mapping_type=='group')?'':implode(', ',$dataObj->job_title) ,
  'user_pic' => $dataObj->user_pic,
  );
  $isMappingNew = (isset($dataObj->no_recipients))?1:0;
  $configLinkStyle = ($isMappingNew)?'none':'block';
  if ($_on_scm) {
    if (strlen($userNewDetail['realname']) > 70) {
      $new_realname = substr($userNewDetail['realname'], 0, 70) . '...';
    }
    else {
      $new_realname = $userNewDetail['realname'];
    }

    $output .= '  <div class="row margin-0">';
    $output .= '    <div class="col-md-10 col-sm-10 col-xs-10 padding-0">';
    // $output .= '      <div class="message-user-heading-img col-md-3 col-sm-3 col-xs-3 padding-0">'.$userNewDetail['user_pic'].'</div>';
    // $output .= '      <div class="message-user-heading-user-info col-md-9 col-sm-9 col-xs-9 padding-0">';
    $output .= '        <div class="message-user-heading-user-name" title="' . $userNewDetail['realname'] . '">'.$new_realname.'</div>';
    // $output .= '        <div class="message-user-heading-user-job">'.$userNewDetail['job_title'].'</div>';
    // $output .= '      </div>';
    $output .= '    </div>';
    $output .= '    <div class="col-md-2 col-sm-2 col-xs-2 padding-0 text-right m6messenger-confid-link-main">';
    $output .='      <div class="chatting-icon clearfix">
                      <a href="javascript:void(0);" class="chatting-volume-up on text-white" title="Disable Sound and Notifications">
                        <i class="fa fa-volume-up" aria-hidden="true"></i>
                      </a>
                      <a href="javascript:void(0);" class="chatting-font-bold text-white">
                        <i class="capital-fonts fa fa-font" aria-hidden="true"></i>
                      </a>
                      <a href="/email-chat/' . $dataObj->mapping_id . '/nojs" class="chatting-envelope text-white ctools-use-modal ctools-modal-assign-dashboard-popup-style" title="Email Chat">
                        <i class="fa fa-envelope" aria-hidden="true"></i>
                      </a>
                      </div>';
  }
  else {
    $output .= '  <div class="row margin-5">';
    $output .= '    <div class="col-md-10 col-sm-10 col-xs-10 padding-5">';
    $output .= '      <div class="message-user-heading-img display-inline-block">'.$userNewDetail['user_pic'].'</div>';
    $output .= '      <div class="message-user-heading-user-info display-inline-block">';
    $output .= '        <div class="message-user-heading-user-name">'.$userNewDetail['realname'].'</div>';
    $output .= '        <div class="message-user-heading-user-job">'.$userNewDetail['job_title'].'</div>';
    $output .= '      </div>';
    $output .= '    </div>';
    $output .= '    <div class="col-md-2 col-sm-2 col-xs-2 padding-5 text-right m6messenger-confid-link-main" style="display:'.$configLinkStyle.';">';
  }
  //leave group
  if($isMappingNew==0 && array_key_exists($user->uid,$dataObj->all_names) && !$_on_scm ){
    $output .= '      <div class="message-user-heading-user-add display-inline-block">';
    if (!$_on_company_profile) {
      $output .= '      '.l('<i class="fa fa-user-plus" aria-hidden="true" style="color:#00aeef;"></i>','javascript:void(0);', array('html'=>TRUE,'external'=> TRUE, 'attributes'=> array('class'=> array('m6id-mapping-user-add','m6id-mapping-user-setting'))));
    }
    $output .= '      </div>';
    $output .= '      <div class="dropdown messenger-user-config-section display-inline-block">';
    $output .= '        '.l('<i class="fa fa-ellipsis-h" aria-hidden="true" style="color:#00aeef;"></i></i>','javascript:void(0);', array('html'=>TRUE,'external'=> TRUE, 'attributes'=> array('class'=> array('m6id-mapping-user-config','m6id-mapping-user-setting'),'id'=>'messenger-configure','data-target' => '#','data-toggle' => 'dropdown','role' => 'button','aria-haspopup' => 'true','aria-expanded' => 'false')));
    $output .= '        <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="messenger-configure">';
    $output .= '          <li>'.l('Forward Messages','javascript:void(0);', array('external'=>TRUE,'attributes'=>array('class'=>'messenger-config-forword-msg'))).'</li>';
    $output .= '          <li>'.l('Delete Messages','javascript:void(0);', array('external'=>TRUE,'attributes'=>array('class'=>'messenger-config-delete-msg'))).'</li>';
  $output .= '          <li>'.l('Clear Conversation','javascript:void(0);', array('external'=>TRUE,'attributes'=>array('class'=>'messenger-config-clear-conversation-msg'))).'</li>';
  if($dataObj->mapping_type=='group'){
      $output .= '        <li>'.l('Leave Group','javascript:void(0);', array('external'=>TRUE,'attributes'=>array('class'=>'messenger-config-exit-group'))).'</li>';
  }
    $output .= '        </ul>';
    $output .= '      </div>';
  }
  $output .= '    </div>';
  $output .= '  </div>';
  return $output;
}

function _messenger_message_filter($message){
  global $base_url;
  $message = trim(strip_tags($message,'<img><br>'));
  $message = nl2br($message);
  $message = explode('<br>',$message);
  $message = array_map('trim',$message);
  $message = array_filter($message);
  $message = implode('<br>',$message); 
  $dom = new DOMDocument();
  @$dom->loadHTML($message);
  $imgtags = $dom->getElementsByTagName('img');
  foreach ($imgtags as $imgtag) {
  $class = $imgtag->getAttribute('class');
  if($class == 'emojioneemoji'){
    $imgtag->removeAttribute('alt');
    $href = $imgtag->getAttribute('src');
    $imgtag->setAttribute('src',$base_url.$href);
  }
  }
  $message = $dom->saveHTML();
  $message = str_ireplace(array('<p>','</p>'), array('',''),$message);
  $message = trim($message);
  return $message;
}

function m6message_forword_message_ajax_callback(){
  global $user;
  $currentTime = time();
  $userInsertMessage = array();
  $mappingToMessage = array();
  $insertMessage = array();
  $values = $_REQUEST;
  $forwordToMapping = $values['forword-to-mapping'];
  $forwordMessage = explode(',',$values['forword-to-messege']);
  $currentMapping = $values['forword-current_mapping'];
  if(!empty($forwordToMapping) && !empty($forwordMessage)){
  $messages = db_select('m6connect_messaging_connect_message','msg')->fields('msg')->condition('msg.id',$forwordMessage,'IN')->execute()->fetchAll(); 
  foreach($messages as $delta => $message){
    foreach($forwordToMapping as $index => $mapping){
    $newMessage = (array)$message;
    unset($newMessage['id']);
    $newMessage['mapping_id'] = $mapping;
    $newMessage['author_uid'] = $user->uid;
    $newMessage['timestamp'] = $currentTime;
    $newMessage['seen_by'] = $user->uid;
    $newMessage['id'] = db_insert('m6connect_messaging_connect_message')->fields($newMessage)->execute();
    if($mapping == $currentMapping && is_numeric($newMessage['id'])){
      $date_object = new DateObject($newMessage['timestamp'], new DateTimeZone('UTC'));
          $date_object->setTimezone(new DateTimeZone(drupal_get_user_timezone()));
          $newMessage['timestamp_time'] = date_format_date($date_object, 'custom', 'h:i A');
      $newMessage['timestamp_class'] = date_format_date($date_object, 'custom', 'm-d-Y');
      $newMessage['timestamp_date'] = date_format_date($date_object, 'custom', 'm/d/Y');
          $message_text = $newMessage['message_text'];
          if(empty($message_text)){
            if(!empty($newMessage['attachment'])){
        $messageFile = file_load($newMessage['attachment']);
        $messageNewFile = file_copy($messageFile, 'public://m6message-attachment/',FILE_EXISTS_RENAME);
              $message_text=get_m6message_attachment_box($messageNewFile->fid,$messageNewFile->uri,$messageNewFile->filename,$messageNewFile->filemime);
            } 
      }
      $mainClass = 'm6-messaging-message message-submitted clearfix text-right padding-5'; 
          $messageOutput  ="<div id='m6-messaging-message-".$newMessage['id']."' class='message-row margin-bottom-10 ".$mainClass."'>";
          $messageOutput .="    <div  class='clearfix'>";
          $messageOutput .="      <div class='message-post-user-realname'></div>";
          $messageOutput .="      <div  class='message-post-message display-inline-block'>".$message_text;
          $messageOutput .="    </div>";
          $messageOutput .="    <span class='message-post-time text-left clearfix'>".$newMessage['timestamp_time']."</span>";
      $messageOutput .='    <input type="checkbox" name="message_forword[]" class="messenger-message-forword-checkbox" value="'.$newMessage['id'].'">';
          $messageOutput .="</div>";
          $dateDiv ="<div class='message-box message-date-".$newMessage['timestamp_class']."'><div class='message-date-data text-center margin-bottom-10'>".$newMessage['timestamp_date']."</div></div>";
          $userInsertMessage[] = array(
            'message' => $messageOutput,
      'action' => 'insert',
            'date_div_class' => '.message-box.message-date-'.$newMessage['timestamp_class'],
            'data_div' => $dateDiv,
          );
    }
    }
  }
  }
  drupal_json_output(array('insertMessage'=>$userInsertMessage));
  drupal_exit(0);
}

function m6message_delete_message_ajax_callback(){
  global $user;
  $removedIds = array();
  $deletedMessageIds = explode(',',$_REQUEST['delete-message']);
  if(!empty($deletedMessageIds)){
  foreach($deletedMessageIds as $delta => $deleteId){
     $deleteQuery = db_update('m6connect_messaging_connect_message');
     $deleteQuery->fields(array('render_state'=>2,'deleted_from'=>$user->uid));
     $deleteQuery->condition('id',$deleteId)->condition('author_uid',$user->uid);
     $isRemoved = $deleteQuery->execute();
    if($isRemoved){ 
    $removedIds[] = array(
        'message' => '',
        'date_div_class' => '#m6-messaging-message-'.$deleteId,
        'data_div' => '',
          'action' => 'remove',
      ); 
    }
  }
  }
  drupal_json_output(array('deleteMessage'=>$removedIds));
  drupal_exit(0);
}

function m6message_update_seenby_ajax_callback() {
  $response = array(
    'status' => 'failed',
    'data' => array(),
  );

  $message_id = $_REQUEST['mid'];

  if (!empty($message_id)) {
    $mapping_id = db_select('m6connect_messaging_connect_message', 'm')
      ->fields('m', array('mapping_id'))
      ->condition('id', $message_id)
      ->execute()
      ->fetchField();

    if ($mapping_id) {
      $data = _get_seen_by_markup($mapping_id, $message_id);
      if (!empty($data)) {
        $response['status'] = t('success');
        $response['data'] = $data;
      }
    }
  }

  drupal_json_output($response);
  drupal_exit();
}

function messenger_truncateHtml($message,$length){
  $truncate = '';
  $lengthCount = 0;
  $messageBreak = 0;
  $message = strip_tags($message,'<img>'); 
  if(strpos($message,'<img')!==FALSE){
    preg_match_all('/(<.+?>)?([^<>]*)/s', $message, $lines, PREG_SET_ORDER);
  foreach($lines as $index => $messagepart){
    if(!empty($messagepart[1]) && strpos($messagepart[1],'emojioneemoji')!==FALSE){
    if(($lengthCount+5) > $length){
      $lengthCount +=5;
      $truncate .= $messagepart[1]; 
      $messageBreak = 1;
      break;
    }else{
      $lengthCount +=5; 
      $truncate .= $messagepart[1]; 
    }
    }
    if(!empty($messagepart[2])){
    $textlength = strlen($messagepart[2]);
    $tlength = $lengthCount+$textlength;
    if(($lengthCount+$textlength) > $length){
      $lengthCount = $length;
      $truncate .= substr($messagepart[2], 0, ($length-$lengthCount));
      $messageBreak = 1;  
      break;
    }else if($tlength == $length){
      $lengthCount = $length;
      $truncate .= $messagepart[2];
      break;
    }else{
      $lengthCount += $textlength;
      $truncate .= $messagepart[2]; 
    }
    }
  }
  }else{
  $textlength = strlen($message);
  if($textlength>$length){
    $truncate .= substr($message, 0, $length);
    $messageBreak = 1;  
  }else{
    $truncate .= $message;
  }
  }
  if($messageBreak){
  $truncate .= '...';   
  }
  return $truncate;
}

function m6messenger_timeago($time_diff_in_sec){
  $seconds    = $time_diff_in_sec ;
  $minutes    = round($time_diff_in_sec / 60 );
  $hours      = round($time_diff_in_sec / 3600);
  $days       = round($time_diff_in_sec / 86400 );
  $weeks      = round($time_diff_in_sec / 604800);
  $months     = round($time_diff_in_sec / 2600640 );
  $years      = round($time_diff_in_sec / 31207680 );
  if($seconds <= 60){  // Seconds
    return "just now";
  }else if($minutes <=60){  //Minutes
    if($minutes==1){
    return "one minute ago";
  }else{
    return "$minutes minutes ago";
  }
  }else if($hours <=24){  //Hours
  if($hours==1){
    return "an hour ago";
  }else{
    return "$hours hrs ago";
  }
  }else if($days <= 7){  //Days
  if($days==1){
    return "yesterday";
  }else{
    return "$days days ago";
  }
  }else if($weeks <= 4.3){  //Weeks
  if($weeks==1){
    return "a week ago";
  }else{
    return "$weeks weeks ago";
  }
  }else if($months <=12){  //Months
  if($months==1){
    return "a month ago";
  }else{
    return "$months months ago";
  }
  }else{  //Years
  if($years==1){
    return "one year ago";
  }else{
    return "$years years ago";
  }
  }
}

function _get_messenger_notification(){
  global $user;
  $mappingIdProcessed = array();
  $messageNotification = array();
  $messageNotification['notification'] = array();
  $messageNotification['new_message_count'] = 0;
  $query = db_select('m6connect_messaging_connect_message','mmcm');
  $query->join('m6connect_messaging_connect_users','mmcu','mmcu.mapping_id=mmcm.mapping_id');
  $query->join('realname','r','r.uid=mmcm.author_uid');
  $query->leftjoin ('field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=mmcm.author_uid' );
  $query->leftjoin ('file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid');
  $query->leftjoin ('file_managed', 'fmat', 'fmat.fid=mmcm.attachment');
  $query->addExpression('TIMESTAMPDIFF(second,FROM_UNIXTIME(mmcm.timestamp),FROM_UNIXTIME(:CurrentTime))','time_diff',array(':CurrentTime'=>time()));
  //$query->addExpression('IF(FIND_IN_SET(:userUid,mmcm.seen_by)=0,1,0)','seen_preference',array(':userUid'=>$user->uid));
  $query->fields('mmcm');
  $query->addField('fmu','uri','user_pic_uri');
  $query->fields('r', array('realname'));
  $query->addField('fmat','uri','attach_uri');
  $query->addField('fmat','filemime','attach_filemime');
  $query->addField('fmat','filename','attach_filename');
  $query->condition('mmcu.user_uid',$user->uid);
  $query->condition('mmcm.render_state',2,'!=');
  $query->condition('mmcm.author_uid',$user->uid,'!=');
  //$query->orderBy('seen_preference',DESC);
  $query->orderBy('mmcm.timestamp',DESC);
  //leave group
  $query->isNull('mmcu.leave_timestamp');
  $query->where('FIND_IN_SET(:userUid,mmcm.seen_by)=0',array(':userUid'=>$user->uid));
  $messagesObj = $query->execute()->fetchAll();
  
  if(!empty($messagesObj)){
  foreach($messagesObj as $delta => $message){
    if(in_array($message->mapping_id, $mappingIdProcessed)){
    continue;
    }
    $mappingIdProcessed[] = $message->mapping_id;
    $timeago = m6messenger_timeago($message->time_diff);
    $picture = (!empty($message->user_pic_uri))?theme_image_style(array('style_name'=>'pic_40x40','path'=>$message->user_pic_uri,'attributes'=>array('class'=>array('img-circle')))):theme('image', array('path' => 'sites/all/themes/m6connect/images/messanger_icons/fa-user-icon.png','attributes'=> array('class'=> array('img-circle'),'style'=>'width:40px;height:40px;')));
    $message_text = messenger_truncateHtml($message->message_text,50);
    $message_text = (!empty($message_text))?$message_text:'has post a message';
    $messageNotification['notification'][] = '<div class="notification-inner notification-message-'.$message->id.' unread">
              <a href="/messenger-goto/'.$message->id.'" class="row margin-5 notification-inner2">
                <div class="col-md-2 col-sm-2 col-xs-2 padding-5">'.$picture.'</div>
                <div class="col-md-10 col-sm-10 col-xs-10 padding-5"><strong>'.ucwords($message->realname).'</strong> '.$message_text.'
                  <div class="notification-time">'.$timeago.'</div>
                </div>
              </a>  
              </div>';
    $messageNotification['new_message_count']++; 
  }
  }
  if($messageNotification['new_message_count']<5){
  $messageNeededMore = 5-$messageNotification['new_message_count'];
  $subQuery = db_select('m6connect_messaging_connect_message','smmcm');
  $subQuery->join('m6connect_messaging_connect_users','mmcu','mmcu.mapping_id=smmcm.mapping_id');
  $subQuery->addExpression('MAX(smmcm.id)','maxid');
  $subQuery->fields('smmcm',array('mapping_id'));
  $subQuery->condition('smmcm.author_uid',$user->uid,'!=');
  $subQuery->condition('mmcu.user_uid',$user->uid);
  $subQuery->condition('smmcm.render_state',2,'!=');
  $subQuery->where('FIND_IN_SET(:userUid,smmcm.seen_by)>0',array(':userUid'=>$user->uid));
  $subQuery->groupBy('smmcm.mapping_id');
  $subQuery->orderBy('smmcm.timestamp',DESC);
  if(!empty($mappingIdProcessed)){
    $subQuery->condition('smmcm.mapping_id',$mappingIdProcessed,'NOT IN');  
  }
  
  $query = db_select('m6connect_messaging_connect_message','mmcm');
  $query->join($subQuery,'slq','slq.maxid=mmcm.id');
  $query->join('realname','r','r.uid=mmcm.author_uid');
  $query->leftjoin ('field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=mmcm.author_uid' );
  $query->leftjoin ('file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid');
  $query->leftjoin ('file_managed', 'fmat', 'fmat.fid=mmcm.attachment');
  $query->addExpression('TIMESTAMPDIFF(second,FROM_UNIXTIME(mmcm.timestamp),FROM_UNIXTIME(:CurrentTime))','time_diff',array(':CurrentTime'=>time()));
  $query->fields('mmcm');
  $query->addField('fmu','uri','user_pic_uri');
  $query->fields('r', array('realname'));
  $query->addField('fmat','uri','attach_uri');
  $query->addField('fmat','filemime','attach_filemime');
  $query->addField('fmat','filename','attach_filename');
  $query->orderBy('mmcm.id',DESC);
  $query->range(0,$messageNeededMore);
  $messagesObj = $query->execute()->fetchAll();
  if(!empty($messagesObj)){
    foreach($messagesObj as $delta => $message){
      $mappingIdProcessed[] = $message->mapping_id;
      $timeago = m6messenger_timeago($message->time_diff);
      $picture = (!empty($message->user_pic_uri))?theme_image_style(array('style_name'=>'pic_40x40','path'=>$message->user_pic_uri,'attributes'=>array('class'=>array('img-circle')))):theme('image', array('path' => 'sites/all/themes/m6connect/images/messanger_icons/fa-user-icon.png','attributes'=> array('class'=> array('img-circle'),'style'=>'width:40px;height:40px;')));
      $message_text = messenger_truncateHtml($message->message_text,50);
      $message_text = (!empty($message_text))?$message_text:'has post a message';
      $messageNotification['notification'][] = '<div class="notification-inner notification-message-'.$message->id.'">
              <a href="/messenger-goto/'.$message->id.'" class="row margin-5 notification-inner2">
                <div class="col-md-2 col-sm-2 col-xs-2 padding-5">'.$picture.'</div>
                <div class="col-md-10 col-sm-10 col-xs-10 padding-5"><strong>'.ucwords($message->realname).'</strong> '.$message_text.'
                  <div class="notification-time">'.$timeago.'</div>
                </div>
              </a>  
              </div>';
    }
    }
  }
  
  return $messageNotification;
}

function m6message_goto_mapping_callback($messageId){
  $query = db_select('m6connect_messaging_connect_message','mmcm');
  $query->fields('mmcm');
  $query->condition('mmcm.id',$messageId);
  $result = $query->execute()->fetchAssoc();
  if(!empty($result) && isset($result['mapping_id'])){
   db_update('m6connect_messaging_connect')->fields(array('updated'=>time()))->condition('mapping_id',$result['mapping_id'])->execute();
  }
  drupal_goto('user-messaging');
}

function m6message_exit_group_ajax_callback(){
  global $user;
  $mappingId = $_REQUEST['mapping-id'];
  $groupUsers = db_select('m6connect_messaging_connect_users','mmcu')->fields('mmcu', array('user_uid'))->condition('mmcu.mapping_id',$mappingId)->condition('mmcu.mapping_type','group')->execute()->fetchCol();
  if(in_array($user->uid,$groupUsers)){
  //db_delete('m6connect_messaging_connect_users')->condition('mapping_id',$mappingId)->condition('user_uid',$user->uid)->execute();  
  db_update('m6connect_messaging_connect_users')->fields(array('leave_timestamp'=>time()))->condition('mapping_id',$mappingId)->condition('user_uid',$user->uid)->execute();  
  }
  drupal_json_output(array('redirectTo'=>'/user-messaging',));
  drupal_exit(0); 
}

function m6message_clear_conversation_ajax_callback(){
  global $user;
  $mappingId = $_REQUEST['mapping-id'];
  $updateQuery = db_update('m6connect_messaging_connect_users')->fields(array('clear_conversation_timestamp'=>time()))->condition('mapping_id',$mappingId)->condition('user_uid',$user->uid);
  $isUpdated = $updateQuery->execute(); 
  drupal_json_output(array('isUpdated'=>$isUpdated));
  drupal_exit(0);   
}

function messenger_cron_mail_handler(){
  global $base_url,$base_path;
  $timeToCheck = strtotime('-5 minutes');
  $userMappingQuery = db_select('m6connect_messaging_connect_users','mmcu');
  $userMappingQuery->fields('mmcu', array('mapping_id'));
  $userMappingQuery->addExpression('GROUP_CONCAT(distinct mmcu.user_uid  separator \',\')', 'mapping_users');
  $userMappingQuery->groupBy('mmcu.mapping_id');
  //leave group
  $userMappingQuery->isNull('mmcu.leave_timestamp');
  
  $query = db_select('m6connect_messaging_connect_message','mmcm');
  $query->join($userMappingQuery,'umq','umq.mapping_id=mmcm.mapping_id');
  $query->join('realname','r','r.uid=mmcm.author_uid');
  $query->leftjoin('field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=mmcm.author_uid' );
  $query->leftjoin('file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid');
  $query->fields('mmcm');
  $query->fields('umq', array('mapping_users'));
  $query->fields('r', array('realname'));
  $query->fields('fmu', array('uri'));
  $query->condition('mmcm.cron_processed',0,'=');
  $query->condition('mmcm.timestamp',$timeToCheck,'<');
  $messageObj = $query->execute()->fetchAll();
  foreach($messageObj as $dalta => $message){
  $seenBy = explode(',',$message->seen_by);
  $mappinguser = explode(',',$message->mapping_users);
  $notSeenBy = array_diff($mappinguser,$seenBy);
  if(empty($notSeenBy) || $message->render_state==2){
    db_update('m6connect_messaging_connect_message')->fields(array('cron_processed'=>1))->condition('id',$message->id)->execute();  
    continue;
  }else{
    // /sites/default/files/images_13.png
    $siteLogo = theme('image', array('path' =>'sites/all/themes/m6connect/images/icon-76.png','attributes'=> array('style'=>'width:50px; height:50px;')));
    $senderUsername = ucwords($message->realname);
    $senderUserLogo = (!empty($message->uri))?theme('image_style', array('style_name' => 'pic_80x80', 'path' =>$message->uri,'getsize'=>TRUE, 'attributes'=> array('style'=>'line-height:80px;'))):theme('image', array('path' =>'sites/default/files/images_13.png','attributes'=> array('style'=>'width:80px; height:80px; line-height:80px;')));
    
    $messageText = $message->message_text;
    if(!empty($message->attachment)){
    $messageText = 'Attached a docoument';  
    }
    
    $userQuery = db_select('users','u');
    $userQuery->join('realname','r','r.uid=u.uid');
    $userQuery->leftjoin('field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=u.uid' );
      $userQuery->leftjoin('file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid');
    $userQuery->fields('u', array('uid','mail'));
    $userQuery->fields('r', array('realname'));
      $userQuery->fields('fmu', array('uri'));
    $userQuery->condition('u.uid',$notSeenBy,'IN');
    $usermailresult = $userQuery->execute()->fetchAll();
    
    foreach($usermailresult as $delta2 => $receiverDetail){
    $sendMessageTo = $receiverDetail->mail; 
    $receiverUsername = ucwords($receiverDetail->realname);
      $receiverUserLogo = (!empty($receiverDetail->uri))?theme('image_style', array('style_name' => 'pic_50x50', 'path' =>$receiverDetail->uri,'getsize'=>TRUE, 'attributes'=> array('style'=>'vertical-align:top;'))):theme('image', array('path' =>'sites/default/files/images_13.png','attributes'=> array('style'=>'width:50px; height:50px; vertical-align:top;')));
    $messenger = array(
      'SiteLogo' => $siteLogo,
      'ReceiverUserName' =>$receiverUsername,
      'ReceiverUserLogo' => $receiverUserLogo,
      'SenderUserName' => $senderUsername,
      'SenderUserLogo' => $senderUserLogo,
      'MessageText' => $messageText,
      'ReplyLink' => l('<input type="button" value="Reply" class="btn btn-primary" style="background:#265A7F;padding:6px 12px;color:#FFF;border: none;">',$base_url.$base_path.'messenger-goto/'.$message->id,array('html'=>TRUE, 'external'=>TRUE, 'attributes'=>array('style' => 'display: inline-block;'))),
      );
    $messageBody = theme('messenger_new_message_notify', array('messenger' => $messenger));
    //print $messageBody;
    //die;
    $params = array(
      'subject' => ucwords($message->realname).' has sent you a message',
      'body' => $messageBody,
      'sender' => 'support@m6connect.com',
      'language' => language_default(),
      'module' => 'm6connect_misc',
      'key' => 'messenger_new_message_email',
      'build' => TRUE,
      );
      $return = drupal_mail($params['module'], $params['key'], $sendMessageTo, $params['language'], $params);
    }
    /*$sendMessageTo = implode(',',$usermailresult);
    $messagetext = '';
    if(!empty($message->message_text)){
      $messagetext = ucwords($message->realname).' has sent a message.<br/><strong>Message: </strong>'.$message->message_text;
    }else if(!empty($message->attachment)){
    $messagetext = ucwords($message->realname).' has sent a document.<br/>'; 
    }else{
    $messagetext = ucwords($message->realname).' has sent a message.<br/>';  
    }
    
    
    
    //$messageText = $content = theme('messenger_new_message_notify', array('messenger' => $messenger));
    $params = array(
    'subject' => ucwords($message->realname).' has post a message',
    'body' => $messagetext.'<br/><br/>Thanks <br>Team M6Connect',
    'sender' => 'support@m6connect.com',
    'language' => language_default(),
    'module' => 'm6connect_misc',
    'key' => 'messenger_new_message_email',
    'build' => TRUE,
    );
    $return = drupal_mail($params['module'], $params['key'], $sendMessageTo, $params['language'], $params);*/
    db_update('m6connect_messaging_connect_message')->fields(array('cron_processed'=>1))->condition('id',$message->id)->execute();  
  }
  }
  drupal_exit(0);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// End LinkedIn Messaging //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function access_proposal_amount_callback($proposalNode){
  global $user, $company;
  $currentTime = time();
  $nodePath = '';
  $invalid_access= 1;
  $bidAmount = '0';
  $access_purpose = 'no_access';
  $proposalAction = '';
  $targetEntityNid = 0;
  $request = array_map('trim',$_REQUEST);
  if(isset($request['access_key']) && !empty($request['access_key'])){
    $targetEntityNid = '';
  $access_purpose = isset($request['access_purpose']) && !empty($request['access_purpose'])?$request['access_purpose']:$access_purpose;
    if(isset($proposalNode->field_submit_proposal_in_respons['und']) && !empty($proposalNode->field_submit_proposal_in_respons['und'][0]['target_id'])){
    $targetEntityNid = $proposalNode->field_submit_proposal_in_respons['und'][0]['target_id'];  
    }else if(isset($proposalNode->field_field_sub_proposal_pjt['und']) && !empty($proposalNode->field_field_sub_proposal_pjt['und'][0]['target_id'])){
    $targetEntityNid = $proposalNode->field_field_sub_proposal_pjt['und'][0]['target_id'];   
    }
  if(!empty($targetEntityNid)){
    $accessKey = db_select('m6connect_confidential_bids_keys','bck')->fields('bck',array('confid_value'))->condition('bck.entity_id',$targetEntityNid)->execute()->fetchField();
    if(strcasecmp($accessKey,$request['access_key'])==0){
    $invalid_access= 0;  
    }
  }
  if($invalid_access==0){
    $nodePath = '/'.drupal_get_path_alias('node/'.$proposalNode->nid);
    if(isset($proposalNode->field_proposal_bid_amount['und']) && !empty($proposalNode->field_proposal_bid_amount['und'][0]['value'])){
    $bidAmount = $proposalNode->field_proposal_bid_amount['und'][0]['value'];  
    }
    if($access_purpose=='node_access'){
    $_SESSION['proposal_node_access'] = $proposalNode->nid;
    }
    if($access_purpose=='action_access'){
     $submitted_for = (isset($proposalNode->field_choose_from_the_options_li['und']) && !empty($proposalNode->field_choose_from_the_options_li['und'][0]['value']))?$proposalNode->field_choose_from_the_options_li['und'][0]['value']:'';
     $submitedRFPProjectMapping = array(
       'Submit Proposal in Response to a RFP' => 'field_submit_proposal_in_respons',
       'Submit Proposal in Response to a Project' => 'field_field_sub_proposal_pjt',
       'Submit Proposal to a company' => 'field_submit_proposal_to_company',
     );
     
     $proposalGroupMoveLi = '';
     if(array_key_exists($submitted_for,$submitedRFPProjectMapping) && isset($proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und']) && !empty($proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und'][0]['target_id'])){
         $submittedForNid = $proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und'][0]['target_id'];
         $submittedForNode = node_load($submittedForNid);
       $submittedForTitle = ucwords($submittedForNode->title);
       $submittedForType = ucfirst($submittedForNode->type);
       $proposalGroupMoveLi = '<li class="text-center"><a href="#" class="pro-group-move-archive" id="move-group-archive-'.$proposalNode->nid.'" data="'.$proposalNode->uid.'@@'.$proposalNode->nid.'@@'.$user->uid.'" data-sutmittype="'.$submittedForType.'" data-submitfor="'.$submittedForTitle.'">Move all "'.$submittedForTitle.'" proposals to archive</a></li>';
     }
     $awardId = db_select('proposal_award','pa')->fields('pa', array('award_id'))
     ->condition('pa.node_id',$proposalNode->nid)->execute()->fetchField();
     $proposalAction = '<button aria-expanded="false" aria-haspopup="true" class="btn btn-success" data-toggle="dropdown" id="dLabel" type="button">Actions</button> <ul aria-labelledby="dLabel" class="dropdown-menu dropdown-menu-right" role="menu"><li class="text-center"><a href="'.$nodePath.'">Open</a></li>';
     if(empty($awardId)){
       $proposalAction .= '<li class="text-center"><a href="#" class="pro-award" id="award-'.$proposalNode->nid.'" data="'.$proposalNode->uid.'@@'.$proposalNode->nid.'@@'.$user->uid.'">Award</a></li>'; 
     }
     $proposalAction .= '<li class="text-center"><a href="#" class="pro-reject" id="reject-'.$proposalNode->nid.'" data="'.$proposalNode->uid.'@@'.$proposalNode->nid.'@@'.$user->uid.'">Reject</a></li><li class="text-center"><a href="#" class="pro-move-archive" id="move-archive-'.$proposalNode->nid.'" data="'.$proposalNode->uid.'@@'.$proposalNode->nid.'@@'.$user->uid.'">Move to Archive</a></li>'.$proposalGroupMoveLi.'</ul>'; 
    }
  }
  }
  db_insert('m6connect_confidential_bids_keys_access_log')->fields(array(
    'user_uid' => $user->uid,
  'company_nid' => $company->nid,
  'proposal_nid' => $proposalNode->nid,
  'entity_id' => $targetEntityNid,
  'access_purpose' => $access_purpose,
  'timestamp' => $currentTime,
  'status' => ($invalid_access)?0:1,
  ))->execute();
  $bidAmount = '$'.$bidAmount;
  drupal_json_output(array('proposal_path'=>$nodePath,'prposal_amt'=>$bidAmount,'invalid_access'=>$invalid_access,'proposal_action'=>$proposalAction));
  drupal_exit(0); 
}

function send_proposal_confirmation_to_submitter($proposalNode){
  global $base_url, $base_path;
  include_once(libraries_get_path('mpdf') . '/mpdf.php');
  $submittedForNodeType = '';
  $receiverCompanyIcon = '';
  $receiverCompanyName = '';
  $receiverCompanyIconUri = '';
  $receiverCompanyNid = '';
  $proposalCompany = $proposalNode->og_group_ref['und'][0]['target_id'];
  $companyEmail = db_select('m6connect_og_membership_email','ogm')->fields('ogm', array('company_email'))->condition('ogm.user_uid',$proposalNode->uid)->condition('ogm.entity_id',$proposalCompany)->execute()->fetchField();
  $submitted_for = (isset($proposalNode->field_choose_from_the_options_li['und']) && !empty($proposalNode->field_choose_from_the_options_li['und'][0]['value']))?$proposalNode->field_choose_from_the_options_li['und'][0]['value']:'';
  $proposalNumber = $proposalNode->field_proposal_number['und'][0]['value'];
  $submitedRFPProjectMapping = array(
  'Submit Proposal in Response to a RFP' => 'field_submit_proposal_in_respons',
  'Submit Proposal in Response to a Project' => 'field_field_sub_proposal_pjt',
  'Submit Proposal to a company' => 'field_submit_proposal_to_company',
  );
  
  if(array_key_exists($submitted_for,$submitedRFPProjectMapping) && !empty($companyEmail)){
  if(isset($proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und']) && !empty($proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und'][0]['target_id'])){
    $submittedForNid = $proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und'][0]['target_id'];
    $submittedForNode = node_load($submittedForNid);
    if($submittedForNode->type == 'organization'){
      $submittedForNodeType = 'Company'; 
    $receiverCompanyName = ucfirst($submittedForNode->title);
    $receiverCompanyIconUri = (isset($submittedForNode->field_logo['und']))?$submittedForNode->field_logo['und'][0]['uri']:'';
    $receiverCompanyNid =  $submittedForNode->nid;
    }else{
    $submittedForNodeType = ucfirst($submittedForNode->type); 
    $query = db_select('node','n');
    $query->join('og_membership','og','og.etid=n.nid AND og.entity_type=:EntityType',array(':EntityType'=>'node')); 
    $query->join('node','cnode','cnode.nid=og.gid');
    $query->leftjoin('field_data_field_logo','fdfl','fdfl.entity_id=cnode.nid');
    $query->leftjoin('file_managed','fm','fm.fid=fdfl.field_logo_fid');
    $query->fields('cnode', array('nid','title'));
    $query->fields('fm', array('uri'));
    $query->condition('n.nid', $submittedForNode->nid);
    $companyDetail = $query->execute()->fetchAssoc();
    if(!empty($companyDetail)){
      $receiverCompanyName = ucfirst($companyDetail['title']);
      $receiverCompanyIconUri = $companyDetail['uri']; 
      $receiverCompanyNid =  $companyDetail['nid'];
    }
    }
    if(is_numeric($receiverCompanyNid)){
      $proposalOwner = user_load($proposalNode->uid);
        $receiverCompanyIcon = (!empty($receiverCompanyIconUri)) ? theme('image_style', array('style_name' => 'pic_50x50', 'path' => $receiverCompanyIconUri, 'getsize' => TRUE)) : '';
    $receiverCompanyIcon = (!empty($receiverCompanyIcon))?$receiverCompanyIcon.'<br/>':'';
        $replace = array(
        '[Proposal:ProposalNumber]' => $proposalNumber,
      '[Proposal:SubmitterUserName]' => ucwords($proposalOwner->realname),
      '[Proposal:ReceiverNodeType]' => $submittedForNodeType,
      '[Proposal:ReceiverNodeName]' => ucfirst($submittedForNode->title),
      '[Proposal:ReceiverCompanyIcon]' => $receiverCompanyIcon,
      '[Proposal:ReceiverCompanyName]' => $receiverCompanyName,
      '[Proposal:SubmitionDate]' => date('m/d/Y',$proposalNode->changed),
      '[Proposal:SubmitionTime]' => date('h:i A',$proposalNode->changed),
      );
    $replace = array_map('trim',$replace);
    $subject = 'Proposal Submission Confirmation - PN:[Proposal:ProposalNumber]';
        $message = '[Proposal:SubmitterUserName],<p>Thanks for submitting your proposal for the [Proposal:ReceiverNodeType] [Proposal:ReceiverNodeName].</p><p>Your proposal has been received.</p><p>Thank you,<br/>[Proposal:ReceiverCompanyIcon][Proposal:ReceiverCompanyName]</p>';
    $params = array(
          'subject' => str_replace(array_keys($replace), array_values($replace), $subject),
          'body' => str_replace(array_keys($replace), array_values($replace), $message),
          'sender' => 'support@m6connct.com',
          'language' => language_default(),
          'module' => 'm6connect_misc',
          'key' => 'proposal_mail___proposal_submission_confirmation',
          'build' => TRUE,
        );
    
    //pdf
    $mpdf = new mPDF('c');
        $mpdf->WriteHTML(theme('proposal_feedback_report_content', array('node' => $proposalNode)));
        $mpdf->SetHTMLHeader('<div class="page_header" style="padding:10px; background: #eee;"><div style="margin-bottom:10px;"><table><tr><td style="width:230px;">'.$replace['[Proposal:ReceiverCompanyIcon]'].'</td><td style="width:450px; vertical-align:top;"><h1 style="text-align:center">'.$replace['[Proposal:ReceiverNodeName]'].'</h1></td></tr><tr><td style="width:230px; vertical-align:bottom;"><h2 style="margin:0;">'.$replace['[Proposal:ReceiverCompanyName]'].'</h2></td><td align="right" style="width:450px; vertical-align:bottom;"><strong>Date: '.$replace['[Proposal:SubmitionDate]'].'<br>Time: '.$replace['[Proposal:SubmitionTime]'].'<strong></td></tr></table></div></div>','', TRUE);    
        $mpdf->SetHTMLFooter('<table width="100%" style="vertical-align: bottom; font-size: 10pt; margin:60px 0 0 0px;"><tr><td width="33%"><img style="width:150px;" src="'.$base_url.$base_path.'sites/all/themes/m6connect/images/bidder_report_footer.png" alt="logo"/></td>
<td width="33%" align="center" style="font-style: normal;">{PAGENO}/{nbpg}</td>
<td width="33%" align="right"><span style="font-style: normal;">Print Date:{DATE j-m-Y}</span></td></tr></table>');
        $mpdf->SetHTMLFooter('<table width="100%" style="vertical-align: bottom; font-size: 10pt; margin:60px 0 0 0px;"><tr><td width="33%"><img style="width:15px;" src="'.$base_url.$base_path.'sites/all/themes/m6connect/images/bidder_report_footer.png" alt="logo"/></td>
<td width="33%" align="center" style="font-style: normal;">{PAGENO}/{nbpg}</td>
<td width="33%" align="right"><span style="font-style: normal;">Print Date:{DATE j-m-Y}</span></td></tr></table>', 'E');
        $file_content = $mpdf->Output('', 'S');
        $params['attachments'][] = array(
            'filecontent' => $file_content,
            'filename' => 'ProposalSummary.pdf',
            'filemime' => 'application/pdf',
        );
    $mailResponse = drupal_mail($params['module'], $params['key'], $companyEmail, $params['language'], $params);
    }
  }
  } 
}

function _cron_proposal_moved_archived_bid_date_passed(){
  $dbOr = db_or()->isNotNull('redd.field_extend_due_date_value')->isNotNull('rdd.field_due_value');
  $query = db_select('node','n');
  $query->leftjoin('field_data_field_is_proposal_archived','pip','pip.entity_id=n.nid');
  $query->leftjoin('field_data_field_submit_proposal_to_company','cet','cet.entity_id=n.nid');
  $query->leftjoin('field_data_field_field_sub_proposal_pjt','pet','pet.entity_id=n.nid');
  $query->leftjoin('field_data_field_submit_proposal_in_respons','ret','ret.entity_id=n.nid');
  $query->leftjoin('field_data_field_due','rdd','rdd.entity_id=ret.field_submit_proposal_in_respons_target_id');
  $query->leftjoin('field_data_field_extend_due_date','redd','redd.entity_id=ret.field_submit_proposal_in_respons_target_id');
  $query->fields('n',array('nid'));
  $query->addExpression('IFNULL(redd.field_extend_due_date_value,rdd.field_due_value)', 'rfp_due_date');
  $query->addExpression('TIMESTAMPDIFF(SECOND, NOW(), IFNULL(redd.field_extend_due_date_value,rdd.field_due_value))', 'due_diff');
  $query->isNull('cet.field_submit_proposal_to_company_target_id');
  $query->isNull('pet.field_field_sub_proposal_pjt_target_id');
  $query->isNull('pip.field_is_proposal_archived_value');
  $query->condition('n.type','my_proposal');
  $query->condition('n.status',1);
  $query->condition($dbOr);
  $query->havingCondition('due_diff',0,'<');
  $result = $query->execute()->fetchAll();
  if(!empty($result)){
  foreach($result as $delta => $dataObj){
    $proposalNode = node_load($dataObj->nid);
    $proposalNode->field_is_proposal_archived['und'][0]['value'] = 1;
    node_save($proposalNode);
  }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// Start user Message Blocking /////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function user_opt_out_email_redirect(){
  global $user;
  $query = array();
  if(isset($_REQUEST['mail-key']) && !empty($_REQUEST['mail-key'])){
  $query = array('query'=> array('mail-key'=>$_REQUEST['mail-key']));    
  }
  drupal_goto('user/'.$user->uid.'/opt-out-email',$query);  
}

function user_opt_out_email_form($form,&$form_state,$account){
  $options = array(
    'company_mail___invite_user_by_company' => 'Invite User By User Management of Company',
  'connection_request_connect' => 'Connection Request/Approved Notification',
  'project_mail___user_invite_project' => 'Project - Invite Notification',
    'project_mail___invite_user_project_updated' => 'Project - Update Notification',
  'project_mail___show_interest_in_project' => 'Project - Show Interest Notification',
  'project_mail___interested_bidding_project' => 'Project - Interested in Bidding Notify',
  'project_mail___collaborate_user_invite_project' => 'Project - Collaborated User Invite Noification' ,
  'rfp_mail___user_invite_rfp' => 'RFP - Invite Notification',
  'rfp_mail___invite_user_rfp_updated' => 'RFP - Update Notification',
  'rfp_mail___awarded_proposal_notify' => 'RFP - Award Notification',
  'rfp_mail___request_to_intent_notify' => 'RFP - Request to Intent Notify',
  'clarification_mail___owner_public_clarification_msg' => 'Clarification - Public Message by Owner Notification',
  'clarification_mail___owner_private_clarification_msg' => 'Clarification - Private Message by Owner Notifification',
    'clarification_mail___users_private_clarification_msg' => 'Clarification - Private Message by Invited User Notification',
  'proposal_mail___insert_communuication_message' => 'Proposal - New Message Notification',
  'proposal_mail___awarded_proposal_membership_notify' => 'Proposal - Awarded Proposal Membership Notification',
  'proposal_mail___awarded_proposal_notify' => 'Proposal - Awarded Proposal Notification',
    'proposal_mail___proposal_submission_confirmation' => 'Proposal - Submission Confirmation Notification',
  'insurance_mail___approval_reminder_notify' => 'Insurance Certificate - Approval Reminder Notification',
  'insurance_certificates_invite' => 'Insurance Certificate Invite Notification',
  'routing_mail___routing_status_notify' => 'Routing Slip - Status Change Notification',
    'routing_mail___approval_invite_notify' => 'Routing Slip - Approver Invite Notification',
    'routing_mail___approval_reminder_notify' => 'Routing Slip -  Approval Reminder Notification',
    'routing_mail___approved_status_notify' => 'Routing Slip - Approved Status Notification',
  'routing_mail___approver_update_approval_notify' => 'Routing Slip - Approver Changes Approval Status Notification',
  'messenger_new_message_email' => 'Messenger - New Message Notification',
  'm6id_mail___m6id_invite_employee_notify' => 'M6ID - Invite Employee Notification',
  'm6id_mail___m6id_invite_worker_to_project_notify' => 'M6ID - Invite Worker To Project Notification',
  'onboarding_mail___invite_company_users' => 'M6ID - Invite Companies To Project',
  'hcfm_mail___invite_user_by_company' => 'Invite User By HCFM User Management of Company',
  );
  
  if(isset($_REQUEST['mail-key']) && array_key_exists($_REQUEST['mail-key'],$options)){
  $emailKey = $_REQUEST['mail-key'];
  drupal_add_js('jQuery(document).ready(function(e){
    jQuery("input[value=\''.$_REQUEST['mail-key'].'\']").closest(".form-type-checkbox").find("label").css("color","#a52a2a");
  });','inline');  
  }
  
  $userDefaultOptions = db_select('m6connect_opt_out_emails','mooe')->fields('mooe', array('email_key'))->condition('mooe.user_uid',$account->uid)->execute()->fetchCol();
  $form['opt_out_emails'] = array(
    '#type' => 'checkboxes',
  '#title' => 'Check to opt out from Emails',
  '#options' => $options,
  '#default_value' => $userDefaultOptions,
  );
  
  $form['opt_out_emails_defaults'] = array(
    '#type' => 'value',
  '#value' => $userDefaultOptions,
  );
  
  
  $form['user_uid'] = array(
    '#type' => 'value',
  '#value' => $account->uid,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
  '#value' => 'Submit',
  );
  return $form; 
}

function user_opt_out_email_form_submit(&$form,&$form_state){
  $values = $form_state['values'];
  $previousChecked =  $values['opt_out_emails_defaults'];
  $allmailKeys = array_keys($values['opt_out_emails']);
  $optoutemails = array_filter($values['opt_out_emails']);
  $optoutemails = array_keys($optoutemails);
  $deleteKeys = array_diff($allmailKeys, $optoutemails);
  $newInsertedKey = array_diff($optoutemails,$previousChecked);
  if(!empty($deleteKeys)){
    db_delete('m6connect_opt_out_emails')->condition('user_uid',$values['user_uid'])->condition('email_key',$deleteKeys,'IN')->execute();
  }
  $insertRecords = db_insert('m6connect_opt_out_emails')->fields(array('user_uid', 'email_key'));
  $insertFlag = 0;
  foreach($newInsertedKey as $index => $mailKey){
  $insertRecords->values(array('user_uid'=>$values['user_uid'],'email_key' =>$mailKey));  
  $insertFlag =1;
  }
  if($insertFlag){
  $insertRecords->execute();  
  }
}

function m6connect_company_mail_alter(&$message) { 
  global $base_url,$base_path;
  $messageKey = $message['key'];
  $messageTo = explode(',',$message['to']);
  $messageTo = array_map('trim',$messageTo);
  $messageTo = array_map('strtolower',$messageTo);
  if(!empty($messageTo)){
    $usermapping = db_select('m6connect_og_membership_email','ogm');
    $usermapping->join('m6connect_opt_out_emails','ooe','ooe.user_uid=ogm.user_uid AND ooe.email_key=:EmailKey', array(':EmailKey'=>$messageKey));
    $usermapping->distinct();
    $usermapping->fields('ogm', array('company_email'));
    $usermapping->condition('ogm.company_email',$messageTo,'IN');
    $blockedEmail = $usermapping->execute()->fetchCol();
   
    $blockedEmail = array_map('strtolower',$blockedEmail); 
    if(!empty($blockedEmail)){
      $newMessageTo = array_diff($messageTo,$blockedEmail); 
      if(empty($newMessageTo)){
        $message['send'] = FALSE; 
      }else{
        $message['to'] = implode(', ',$newMessageTo); 
      }
    }
  }
  $message['body'][] = '<div><a href="'.$base_url.$base_path.'opt-out-email?mail-key='.$message['key'].'">unsubscribe from this list</a></div>';
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////// End user Message Blocking //////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// Strat Here for Update company Profile logo ///////
function update_company_logo_callback($nid, $ajax = NULL){
 
  if($ajax){
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'node_nid' => $nid,
      'title' => '<p class="asset-popup-title-custom">'.t('Update Company logo').'</p>',
    );
    $output = ctools_modal_form_wrapper('update_company_logo_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
   }
   return drupal_get_form('update_company_logo_form', $nid);
  
}
function update_company_logo_form($form, &$form_state, $nid) {
  global $user, $company;
  // $tempform = array();
  $node_nid = (isset($form_state['node_nid'])) ? $form_state['node_nid'] : $nid;
  $form_state['node_nid'] =  $node_nid; 
   
  $closeButton = l('<input type="button" class="btn btn-primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();Drupal.attachBehaviors();')));

  $custom_save_button = l('<input type="button" class="form-submit" value="Save" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('logo-upload-save-custom', 'margin-right-10'))));

  
  $form['#prefix'] = '<div class="all_crop_image_custom_form">';
  $form['#suffix'] = '</div>';

  $entity = node_load($node_nid);
  // field_attach_form('node', $entity, $tempform, $form_state, array('field_name' => 'field_logo'));

  // Image Field.
  $logo_old_img = '';
  if(!empty($entity->field_logo['und']['0']['uri'])){
    $file_url = file_create_url($entity->field_logo['und']['0']['uri']);
    $logo_old_img = '<img class="old_preview_img" src="' . $file_url . '" style="max-width:100%;">';
  }
  
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'm6connect_company') . '/cropit-master/dist/jquery.cropit.js',
  );

  $form['upload_img'] = array(
    '#type' => 'file',
    '#title' => t('Upload New File'),
    '#title_display' => 'invisible',
    '#attributes' => array('class' => array('cropit-image-input', 'hidden')),
    '#prefix' => '<div id="upload_log_ele" class="image-editor banner_small_log_ele"><div class="cropit-preview">' . $logo_old_img . '</div>',
    '#suffix' => '</div>',
  );

  $form['crop-img'] = array(
    '#type' => 'textarea',
    '#name' => t('Cropped Image Data'),
    '#prefix' => '<div id="cropped-img-data" style="display:none;">',
    '#suffix' => '</div>',
  );

  // A blank space for new logo upload.
  $form['logo_new'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="logo_new"></div>',
  );

  /*if(!empty($entity->field_logo['und']['0']['uri'])){
    // If there is an image already present. Then we show the image with a
    // remove button.
    $form['old_img'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="margin-bottom-10 btn btn-primary logo_old_remove node_' . $node_nid . '">Remove</div>',
    );
  }*/

  $form['choose_logo'] = array(
   '#markup' => '<div class="all_choose_image_custom display-inline-block">
                  <a class="btn btn-primary" id="all_choose_image_custom" href="javascript:void(0);">Upload New Image</a>
               </div>',
    '#prefix' => '<div class="clearfix">',
  );
  if(!empty($entity->field_logo['und']['0']['uri'])){
    // If there is an image already present. Then we show the image with a
    // remove button.
    $form['old_img'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="btn btn-primary display-inline-block logo_old_remove node_' . $node_nid . '">Remove</div>',
    );
  }  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#submit'=> array('update_company_logo_form_submit'),
    '#value' => 'Save',
    //'#prefix' => '<div class="clearfix">',  
   // '#suffix' => $closeButton.'</div></div></div>', 
    '#prefix' => '<div class="origina-submit-logo display-inline-block" style="display:none;">',
    '#suffix' => '</div><div class="display-inline-block">' . $custom_save_button . $closeButton . '</div></div>', 
  );
  
  return $form;
}
/*function update_company_logo_form_validate($form, &$form_state) {

   //print "<pre>"; print_r($form_state['values']); die;

  $file = file_save_upload('field_logo', array(
      'file_validate_is_image' => array(),
      'file_validate_extensions' => array('png gif jpg jpeg'),
  ));
  if (!$file) {
   form_set_error('field_logo', t('No file was uploaded.'));
  }else{
    $file1= file_move($file, 'private://', FILE_EXISTS_RENAME);
    $form_state['values']['field_logo']= $file1;  
  }
}*/
function update_company_logo_form_submit($form, &$form_state) {
  global $user, $base_url;
  $nid = $form_state['node_nid'];
  $node = node_load($nid);
    // $nid = 18371;file_save_data

  if(!empty($_POST['Cropped_Image_Data'])){
    $imgData = str_replace(' ','+',$_POST['Cropped_Image_Data']);
    if (strpos($imgData, 'jpg') !== FALSE || strpos($imgData, 'jpeg') !== FALSE) {
      $ext = '.jpeg';
    }
    else {
      $ext = '.png';
    }
    $imgData =  substr($imgData,strpos($imgData,",")+1);
    $imgData = base64_decode($imgData);
    $img_name = 'logo_image_' . time();
    if ($file = file_save_data($imgData, 'public://' . $img_name . $ext)) {
      $node->field_logo['und'][0] = (array)$file;
      field_attach_presave('node', $node);
      field_attach_update('node', $node);
      entity_get_controller('node')->resetCache(array($node->nid));
    }
    // $file = file_load($form_state['values']['field_logo']['und'][0]['fid']);
    // //print "<pre>"; print_r($file); die;
    // $imageValues = $form_state['values']['field_logo']['und'][0];
    // if(isset($nid) && is_numeric($nid)){
    //  // Load image by uri.
    //   $image = image_load($file->uri);

    //   $x = $form_state['values']['field_logo']['und'][0]['data']['x'];
    //   $y = $form_state['values']['field_logo']['und'][0]['data']['y'];

    //   // $width = $form_state['values']['field_logo']['und'][0]['scaled_size']['width'];
    //   // $height = $form_state['values']['field_logo']['und'][0]['scaled_size']['height'];

    //   $width  = abs($form_state['values']['field_logo']['und'][0]['data']['x'] - $form_state['values']['field_logo']['und'][0]['data']['x2']);
    //   $height = abs($form_state['values']['field_logo']['und'][0]['data']['y'] - $form_state['values']['field_logo']['und'][0]['data']['y2']);

    //  // Use Drupal's scale and crop function to do the work for you.
    //   // image_scale_and_crop($image,  $x, $y);
    //   image_crop($image, $x, $y, '229', '194');
    //   image_save($image);
    //   $node = node_load($nid);
    //   $node->field_logo['und'][0] = $imageValues;

    //   field_attach_presave('node', $node);
    //   field_attach_update('node', $node);
    //   entity_get_controller('node')->resetCache(array($node->nid));
    }
     
    //print "<pre>"; print_r($node); die;
  //}

   //$nodePath = drupal_lookup_path('alias','node/'.$nid);
  if (!empty($node->field_logo['und']['0']['uri'])) {
    $img_url = image_style_url('company_logo', $node->field_logo['und']['0']['uri']);
    $ahref = file_create_url($node->field_logo['und']['0']['uri']);
  }
  else {
    $ahref = $base_url . '/sites/all/themes/m6connect/images/default_company_profile.jpg';
    $img_url = $ahref;
  }
  $output = '<div class="company_logo_details text-center" id="company-logo-custom-header"><a href="' . $ahref . '" class="colorbox">
    <img typeof="foaf:Image" src="' . $img_url . '" alt="">
    </a>';
  if($user->uid == $node->uid) {
    $output  .= '<div class="custom-user-profile-photo custom-user-profile-photo-company">';
    $output .=   l('Update Company logo', 'update-company-logo-photo/'.$node->nid.'/nojs', array('attributes' => array('class' => array('ctools-use-modal ctools-modal-assign-dashboard-facebook-popup-style btn btn-success text-white'),'title' =>"Update Company logo"))); 
    $output .='</div>';
  }
  $output .= '</div>';

  if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    $form_state['ajax_commands'][] = ajax_command_replace("#company-logo-custom-header", $output);
  }
}

/// Strat Here for Update company banner images////////////////////////////////////
////////////////////////////////////////////===========////////////////////////////
///////////////////=================///////////////////////////////////////////////
function update_company_banner_callback($nid, $ajax = NULL){
 
  if($ajax){
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'node_nid' => $nid,
      'title' => '<p class="asset-popup-title-custom">'.t('Update Company banner').'</p>',
    );
    $output = ctools_modal_form_wrapper('update_company_banner_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
   }
   return drupal_get_form('update_company_banner_form', $nid);
  
}
function update_company_banner_form($form, &$form_state, $nid) {

   global $user, $company;
   $node_nid = (isset($form_state['node_nid'])) ? $form_state['node_nid'] : $nid;
   $form_state['node_nid'] =  $node_nid; 
    
   $closeButton = l('<input type="button" class="btn btn-primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();Drupal.attachBehaviors();')));

   $custom_save_button = l('<input type="button" class="form-submit" value="Save" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('logo-upload-save-custom', 'margin-right-10'))));

   
   $form['#prefix'] = '<div class="all_crop_image_custom_form">';
   $form['#suffix'] = '</div>';

   $entity = node_load($node_nid);

   // Image Field.
   $logo_old_img = '';
   if(!empty($entity->field_company_profile_cover_img['und'][0]['uri'])){
    $file_url = '';
    $file_url = image_style_url('company_cover_1073_394', $entity->field_company_profile_cover_img['und'][0]['uri']);
    $logo_old_img = '<img class="old_preview_img" src="' . $file_url . '" style="max-width:100%;">';
   }
   
   $form['#attached']['js'] = array(
     drupal_get_path('module', 'm6connect_company') . '/cropit-master/dist/jquery.cropit.js',
   );

   $form['upload_img'] = array(
     '#type' => 'file',
     '#title' => t('Upload New File'),
     '#title_display' => 'invisible',
     '#attributes' => array('class' => array('cropit-image-input', 'hidden')),
     '#prefix' => '<div id="upload_log_ele" class="image-editor banner_upload_log_ele"><div class="cropit-preview">' . $logo_old_img . '</div>',
     '#suffix' => '</div>',
   );

   $form['crop-img'] = array(
     '#type' => 'textarea',
     '#name' => t('Cropped Image Data'),
     '#prefix' => '<div id="cropped-img-data" style="display:none;">',
     '#suffix' => '</div>',
   );

   // A blank space for new logo upload.
   $form['logo_new'] = array(
     '#type' => 'markup',
     '#markup' => '<div id="logo_new"></div>',
   );
   $form['choose_logo'] = array(
    '#markup' => '<div class="all_choose_image_custom display-inline-block">
                 <a class="btn btn-primary" id="all_choose_image_custom" href="javascript:void(0);">Upload New Image</a>
              </div>',
    '#prefix' => '<div class="clearfix">',
   );
   if(!empty($entity->field_logo['und']['0']['uri'])){
     // If there is an image already present. Then we show the image with a
     // remove button.
     $form['old_img'] = array(
       '#type' => 'markup',
       '#markup' => '<div class="btn btn-primary display-inline-block banner_old_remove node_' . $node_nid . '">Remove</div>',
     );
   }
  
   $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#submit'=> array('update_company_banner_form_submit'),
    '#value' => 'Save',
    //'#prefix' => '<div class="clearfix">',  
   // '#suffix' => $closeButton.'</div></div></div>', 
    '#prefix' => '<div class="origina-submit-logo display-inline-block" style="display:none;">',
    '#suffix' => '</div><div class="display-inline-block">' . $custom_save_button . $closeButton . '</div></div>', 
  ); 
  return $form;
}
function update_company_banner_form_submit($form, &$form_state) {
  global $user, $base_url;
  $nid = $form_state['node_nid'];
  $node = node_load($nid);
  $file = FALSE;
    // $nid = 18371;file_save_data

  if(!empty($_POST['Cropped_Image_Data'])){
    $imgData = str_replace(' ','+',$_POST['Cropped_Image_Data']);
    if (strpos($imgData, 'jpg') !== FALSE || strpos($imgData, 'jpeg') !== FALSE) {
      $ext = '.jpeg';
    }
    else {
      $ext = '.png';
    }
    $imgData =  substr($imgData,strpos($imgData,",")+1);
    $imgData = base64_decode($imgData);
    $img_name = 'banner_image_' . time();
    if ($file = file_save_data($imgData, 'public://' . $img_name . $ext)) {
      if (!empty($node->field_company_profile_cover_img['und'][0])) {
        unset($node->field_company_profile_cover_img['und']);
      }
      $node->field_company_profile_cover_img['und'][0] = (array)$file;
      field_attach_presave('node', $node);
      field_attach_update('node', $node);
      entity_get_controller('node')->resetCache(array($node->nid));
    }
  }

  $img_src = '';
  if (isset($node->field_company_profile_cover_img['und'])) {
    $img_src = '<img src="' . image_style_url('company_cover_1073_394', $node->field_company_profile_cover_img['und'][0]['uri']) . '">';
  }
  else {
    $cirtificate = m6connect_company_get_circtficat($node);
    if ($cirtificate) {
      $img_src = '<img src="/sites/all/themes/m6connect/images/default-company-cover_c.jpg" alt="default-company-cover">';
    }
    else {
      $img_src = '<img src="/sites/all/themes/m6connect/images/default-company-cover-new.jpg" alt="default-company-cover">';
    }
  }
  $output = '';
  $output = '<div class="company-header" id="company-banner-custom-header">' . $img_src;
  if($user->uid == $node->uid) {
    $output  .= '<div class="custom-user-profile-photo custom-user-profile-photo-company">';
    $output .=   l('Update Company Banner', 'update-company-banner-photo/'.$node->nid.'/nojs', array('attributes' => array('class' => array('ctools-use-modal ctools-modal-assign-update-images-crop-popup-style btn btn-success text-white'),'title' =>"Update Company Banner"))); 
    $output .='</div>';
  }
  $output .= '</div>';

  //echo $nodePath; die;
  if((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    $form_state['ajax_commands'][] = ajax_command_replace("#company-banner-custom-header", $output);
  }
}


/**
 * Helper function to prepare socket from and to usernames for textarea.
 */
function _prepare_from_to_usernames_socket($names = array()) {
  global $user;
  $account = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $account = user_load($uid);
  }
  if (empty($names)) {
    return '';
  }

  // Filtering out the sender.
  $names = array_diff($names, array($account->uid));

  // If we have receipients.
  $final_names = '';
  $fromusername = _prepare_username_for_socket($account->uid);
  $tousername = array();
  foreach ($names as $key => $value) {
    $tousername[] = _prepare_username_for_socket($value);
  }
  $final_names .= $fromusername . ':';
  $final_names .= implode(',', $tousername);
  return $final_names;
}

/**
 * Menu callback for email-chat/%/%ctools_js
 */
function email_chat_user_messaging($mapping_id = '', $ajax = NULL) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $title = t('Email Chat');

    $form_state['ajax'] = true;
    $form_state['mapping_id'] = $mapping_id;
    $form_state['title'] = '<h4 class="asset-popup-title-custom">' . $title . '</h4>';

    $output = ctools_modal_form_wrapper('email_chat_user_messaging_form', $form_state);

    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    print ajax_render($output);
    drupal_exit();
  }
  return drupal_get_form('email_chat_user_messaging_form', $mapping_id);
}

function email_chat_user_messaging_form($form, &$form_state, $mapping_id = '') {
  if (empty($form_state['mapping_id']) && !empty($mapping_id)) {
    $form_state['mapping_id'] = $mapping_id;
  }
  elseif (empty($mapping_id) && !empty($form_state['mapping_id'])) {
    $mapping_id = $form_state['mapping_id'];
  }

  $form = array();

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Please provide Email Address.'),
    '#attributes' => array('placeholder' => t('Enter Email Address here.'), 'class'=> array('form-control invite_to_m6')),
    '#element_validate' => array('vendor_multiple_email_validate'),
    '#prefix' => '<div class="clearfix form-item invite-m6">',
    '#suffix' => '</div>',
    '#required' => TRUE,
    '#description' => t('Seperate multiple emails by comma(,).'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Email Chat'),
  );

  if (!empty($form_state['ajax']) && $form_state['ajax']) {
    $form['cancel'] = array(
      '#type' => 'markup',
      '#markup' => '<a href="javascript:void(0);" class="ob-msg-popup-close-link" onclick="jQuery(&quot;span.popups-close&quot;).click(); return false;"><input type="button" class="btn cancel-button" value="Close"></a>',
    );
  }

  return $form;
}

function email_chat_user_messaging_form_submit($form, &$form_state) {
  // Collecting necessary data.
  $mapping_id = $form_state['mapping_id'];
  if ($mapping_id == 'new_mapping') {
    $mapping_id = '';
  }
  if (!empty($mapping_id)) {
    $all_emails = $form_state['values']['email'];
    $value = str_replace(' ', '', $all_emails);
    $emails = explode(',', $value);

    if (!empty($emails)) {
      $email_body = _get_email_body_by_mapping_id($mapping_id);

      $all_users = _get_all_users_of_chat_by_mapping_id($mapping_id);
      $subject = t('Chat history between @users on @site', array('@users' => implode(', ', $all_users), '@site' => variable_get('site_name', 'M6Connet')));

      if (!empty($email_body)) {
        $params = array(
          'subject' => $subject,
          'body' => $email_body,
          'sender' => variable_get('site_mail', 'support@m6connect.com'),
          'language' => language_default(),
          'module' => 'm6connect_misc',
          'key' => 'commitment_mail___invite_2_m6_notify',
          'build' => TRUE,
        );
        $to = implode(', ', $emails);
        $mail = drupal_mail($params['module'], $params['key'], $to, $params['language'], $params);

        drupal_set_message(t('Email sent successfully.'), 'status', FALSE);
      }
      else {
        drupal_set_message(t('Could no send emails, as no messages found.'), 'warning', FALSE);
      }
    }
    else {
      drupal_set_message(t('Could not send emails, as no email address found.'), 'warning', FALSE);
    }
  }
  else {
    drupal_set_message(t('Could not send email, as no chat found.'), 'error', FALSE);
  }

  $form_state['ajax_commands'][] = ajax_command_remove('.messages');
  $form_state['ajax_commands'][] = ajax_command_append('.region-top-header', '' . theme('status_messages') . '');
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
}

/**
 * Helper function to get email body by mapping id.
 */
function _get_email_body_by_mapping_id($mapping_id) {
  $return = '';
  global $user, $company;
  $account = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $account = user_load($uid);
  }

  // Trying to fetch all messages for the current mapping_id.
  $messages = db_select('m6connect_messaging_connect_message', 'm')
    ->fields('m')
    ->condition('mapping_id', $mapping_id)
    ->orderBy('timestamp', 'ASC')
    ->execute()
    ->fetchAll();

  if (empty($messages)) {
    // If there are no messages, then abort.
    return $return;
  }

  // If we have messages, then formatting messges.

  // Trying to get all users related to this chat.
  $all_users = _get_all_users_of_chat_by_mapping_id($mapping_id);
  $return .= '<div style="font-size: 20px; font-weight: 600;"><p>Chat history between ' . implode(', ', $all_users) . '.</p></div><br/><br/>';
  foreach ($messages as $message) {
    // Trying to get author's realname.
    $author = $all_users[$message->author_uid];
    $message_text = strip_tags($message->message_text);
    $timestamp = date('m/d/Y h:i A', $message->timestamp);
    $file_link = '';

    if (!empty($message->attachment) && $file = file_load($message->attachment)) {
      // If we have a attachment.
      $attach_link = file_create_url($file->uri);
      $file_link = l($file->filename, $attach_link, array('external' => TRUE, 'absolute' => TRUE));
    }

    if (!empty($message_text)) {
      $return .= '<div>';
      $return .= '<p><span style="font-weight:600;">' . $author . ':</span> ' . $message_text;
      $return .= '<span style="font-size:12px; display:inherit; margin-top:7px">' . $timestamp . '</span></p>';
      $return .= '</div>';
    }
    if (!empty($file_link)) {
      $return .= '<div>';
      $return .= '<p><span style="font-weight:600;">' . $author . ':</span> ' . $file_link . ' <span style="font-size:12px; font-weight:600; margin-left:7px;">(Attachment)</span>';
      $return .= '<span style="font-size:12px; display:inherit; margin-top:7px">' . $timestamp . '</span></p>';
      $return .= '</div>';
    }
  }

  return $return;
}

function _get_mapping_type_by_mapping_id($mapping_id) {
  return db_select('m6connect_messaging_connect', 'm')
    ->fields('m', array('mapping_group'))
    ->condition('mapping_id', $mapping_id)
    ->execute()
    ->fetchField();
}

function _get_all_users_of_chat_by_mapping_id($mapping_id) {
  $query = db_select('m6connect_messaging_connect_users', 'mu');
  $query->fields('mu', array('user_uid'));
  $query->condition('mapping_id', $mapping_id);
  $results = $query->execute()->fetchAll();

  $return = array();
  if (!empty($results)) {
    foreach ($results as $result) {
      $uid = $result->user_uid;
      // Getting user data by uid.
      $user_data = _get_user_mail_realname_by_uid($uid);
      if (empty($user_data['realname'])) {
        // In case we do not have a realname, we shall use username.
        $user_data['realname'] = $user_data['name'];
      }

      $return[$uid] = $user_data['realname'];
    }
  }

  return $return;
}

function _get_group_users_by_nid_scm($reference = NULL, $unformatted = TRUE) {
  $return = '';
  if (empty($reference)) {
    return $return;
  }

  $node = node_load($reference);
  $entity = !empty($node->field_materials_manager_ref[LANGUAGE_NONE][0]['value']) ? $node->field_materials_manager_ref[LANGUAGE_NONE][0]['value'] : NULL;
  $category = !empty($node->field_supply_chain_lead_ref[LANGUAGE_NONE][0]['value']) ? $node->field_supply_chain_lead_ref[LANGUAGE_NONE][0]['value'] : NULL;

  $material_managers = array();

  if (!empty($entity)) {
    $material_managers = explode('|', $entity);
  }
  

  // Trying to get supply chain leads.
  $supply_chain_leads = array();

  if (!empty($category)) {
    $supply_chain_leads = explode('|', $category);
  }

  if (empty($material_managers) && empty($supply_chain_leads)) {
    return $return;
  }

  $user_map_to_these = array_unique(array_merge($material_managers, $supply_chain_leads));
  sort($user_map_to_these);

  if ($unformatted) {
    return $user_map_to_these;
  }

  if (!empty($user_map_to_these)) {
    $return = implode(',', $user_map_to_these);
  }

  return $return;
}

function _get_seen_by_markup($mapping_id, $message_id, $seen_by = '') {
  if (empty($mapping_id) || empty($message_id)) {
    return '';
  }

  global $user;
  $account = user_load($user->uid);
  if (!empty($_SESSION['login-mail'])) {
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $uid = $userdata->UUID;
    $account = user_load($uid);
  }

  // If we do not have a seen_by users list, getting it.
  if (empty($seen_by)) {
    // Get here.
    $seen_by = db_select('m6connect_messaging_connect_message', 'm')
      ->fields('m', array('seen_by'))
      ->condition('id', $message_id)
      ->execute()
      ->fetchField();
  }

  if (!empty($seen_by)) {
    $seen_by = explode(',', $seen_by);
  }
  else {
    $seen_by = array();
  }

  // If we get a list of seen_by users, then we make sure that we filter out
  // the sender.
  $seen_by = array_diff($seen_by, array($account->uid => $account->uid));

  // If a message is saved in db, and hence we have a message id, then it means
  // it is already delivered to the receivers.
  // We just need to figure out, whether it has been seen by everybody or not.
  // If it is seen by everybody, then blue ticks will be marked, else gray.

  // Getting all receipients for current mapping id.
  $q = db_select('m6connect_messaging_connect_users', 'u');
  $q->fields('u', array('user_uid'));
  $q->condition('mapping_id', $mapping_id);
  $users_ids = $q->execute()->fetchAll();

  if (empty($users_ids)) {
    // If somehow we did not get users, then abort.
    return '';
  }

  $users = array();
  foreach ($users_ids as $key => $value) {
    if ($value->user_uid == $account->uid) {
      // Skip current logged in user/Sender.
      continue;
    }

    $users[] = $value->user_uid;
  }

  if (empty($users)) {
    // If we do not have users other then the sender, then abort.
    return '';
  }

  $delivered_list = array_diff($users, $seen_by);

  $tick_class = 'gray-ticks';

  if (empty($delivered_list) && !empty($seen_by)) {
    $tick_class = 'blue-ticks';
  }

  $output = '<span class="fa-stack fa-lg ' . $tick_class . '">
              <i class="fa fa-check fa-stack-1x" style="margin-left:4px"></i>
              <i class="fa fa-check  fa-stack-1x" style="margin-left:-4px"></i>
            </span>';
  $output .= '<div class="seen-by-list-outer seen-by-list-' . $message_id . '" style="display:none;">';

  $output .= '<div class="seen-by-list-inner">';

  if (!empty($seen_by)) {
    array_walk($seen_by, 'get_user_names_by_id_walk');
    $output .= '<div class="seen-by-container">';
    $output .= '<div class="seen-by-list">';

    $vars = array(
      'title' => t('Seen By'),
      'items' => $seen_by,
      'type'  => 'ul',
    );
    $output .= theme_item_list($vars);

    $output .= '</div>'; //End seen-by-list
    $output .= '</div>'; //End seen-by-container
  }

  if (!empty($delivered_list)) {
    array_walk($delivered_list, 'get_user_names_by_id_walk');
    $output .= '<div class="delivered-to-container">';
    $output .= '<div class="seen-by-list">';

    $vars = array(
      'title' => t('Delivered To'),
      'items' => $delivered_list,
      'type'  => 'ul',
    );
    $output .= theme_item_list($vars);

    $output .= '</div>'; //End delivered-to-list
    $output .= '</div>'; //End delivered-to-container
  }

  // Close div button.
  $output .= '<i class="fa fa-times close-seen-by-list" aria-hidden="true"></i>';

  $output .= '</div>'; // End seen-by-list-inner
  $output .= '</div>'; // End seen-by-list-outer

  return $output;
}

function get_user_names_by_id_walk(&$item, $key) {
  $user_data = _get_user_mail_realname_by_uid($item);
  if (empty($user_data['realname'])) {
    $user_data['realname'] = $user_data['name'];
  }
  $realname = $user_data['realname'];
  $item = $realname;
}