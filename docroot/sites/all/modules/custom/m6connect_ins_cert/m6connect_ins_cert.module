<?php  
 /**
 * Implements hook_menu().
 */
function m6connect_ins_cert_menu() {
  $items['status/%/%'] = array(
    'title' => 'Status Update',
    'page callback' => 'status_callback_page',
    'page arguments' => array(1,2),
    'access callback' => TRUE,
    'delivery callback' => 'status_ajax_callback',  // Magic goes here
  );
  // insurance certificate autotitle
  $items['ins_cert/autotitle'] = array(
    'title' => 'User list',
    'page callback' => 'ins_cert_autotitle',
    'access arguments'=>array('access content'),
    'type'=>MENU_CALLBACK,
  );
	$items['entityreference/autocomplete/single/field_submit_to/node/insurance_certificates/%'] = array(
    'title' => 'User list',
    'page callback' => 'ins_cert_autocomlist',
    'access arguments'=>array('access content'),
    'type'=>MENU_CALLBACK,
  );
  // $field_name, $nid, $operator, $id = 0
  $items['modal/field-collection/%/%/%/%/%ctools_js/go'] = array(
    'page callback' => 'glue_modal_operator_callback',
    'page arguments' => array(2,3,4,5,6),
    'access arguments' => array('access content'),
  ); 
  // feedback tab
  $items['insurance-feedback/%node'] = array(
	'title' => 'Insurance Certificate Feedback',
	'page callback' => 'insurance_certificate_feedback_content',
	//'access callback' => 'check_routing_slip_access',
	'access callback' => TRUE,
	'access arguments' => array(1),
  );
  $items['remove-insurance-feedback-message/%/%ctools_js'] = array(
    'page callback' => 'remove_insurance_feedback_message_callback',
	'page arguments' => array(1, 2),
	'access callback' => TRUE,
	'type' => MENU_CALLBACK,
  );
  $items['get-insurance-reminder/%node/%'] = array(
    'page callback' => 'get_insurance_reminder_form_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['insurance-reminder/%node/%'] = array(
    'page callback' => 'insurance_reminder_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['insurance-reminder-msg/%node/%'] = array(
    'page callback' => 'insurance_reminder_msg_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['change-seened-msg-status/%'] = array(
    'title' => t(''),
    'page callback' => 'change_seened_msg_status',
    'page arguments' => array(1),
    //'access arguments' => array('access custom group setting'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['contract/add/new/%ctools_js'] = array(
	'page callback' => 'contract_section_callback',
	'page arguments' => array(1,2,3),
	'access arguments' => array('access content'),
	'access callback' => '_is_m6_user_logged_in',
  );
  $items['contract/edit/%node/%ctools_js'] = array(
	'page callback' => 'contract_section_callback',
	'page arguments' => array(1,2,3),
	'access arguments' => array('access content'),
	'access callback' => '_is_m6_user_logged_in',
  );
  $items['insurance-certificates-invite/%ctools_js'] = array(
  'title' => 'Invite Insurance Certificates',
	'page callback' => 'insurance_invite_certificates_callback',
  'page arguments' => array(1),
	'access callback' => '_is_m6_user_logged_in', 
  );
  $items['insurance-certificates-invite-cpm/%/%ctools_js'] = array(
  'title' => 'Invite Insurance Certificates Cpm',
  'page callback' => 'insurance_invite_certificates_cpm_callback',
  'page arguments' => array(1,2),
  'access callback' => '_is_m6_user_logged_in', 
  );
  $items['insurance-certificates'] = array(
   // 'title' => 'Insurance Certificates',
	'page callback' => 'insurance_certificates_manage_view',
    //'page arguments' => array(1),
	'access callback' => '_is_m6_user_logged_in', 
  );
  $items['insurance-certificates/my-insurance-certificates'] = array(
    //'title' => 'Insurance Certificates',
	'page callback' => 'insurance_certificates_myinscert_view',
    //'page arguments' => array(1),
	'access callback' => '_is_m6_user_logged_in', 
  );
  $items['insurance-certificates/%'] = array(
    //'title' => 'Insurance Certificates',
  'page callback' => 'insurance_certificates_construction_manager',
  'page arguments' => array(1),
  'access callback' => '_is_m6_user_logged_in', 
  );
  $items['insurance-certificates/%/my-insurance-certificates'] = array(
    //'title' => 'Insurance Certificates',
  'page callback' => 'insurance_certificates_construction_manager_view',
  'page arguments' => array(1),
  'access callback' => '_is_m6_user_logged_in', 
  );
  $items['insurance-certificates-invite/%/%/%/%ctools_js'] = array(
    'title' => 'Insurance Certificates',
	'page callback' => 'insurance_certificates_log_action_callback',
    'page arguments' => array(1,2,3,4),
	'access callback' => '_is_m6_user_logged_in', 
  );
  $items['load-more-btn-data/%/%/%'] = array(
    'page callback' => 'load_more_btn_data_callback',
    'page arguments' => array(1,2,3),
	'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,	
  );
  return $items;
}

/**
 * Page callback for certificate status
 */
/* 
function status_callback_page($status_tid, $nid) {
	//dpm($nid,'nid');
	$node = node_load($nid); // $nid is the function's parameter
	//dpm($node,'node start');
    //echo $cert;
	$node->field_certificate_status['und'][0]['tid'] = $status_tid;
    //echo $node->field_certificate_status['und'][0]['tid'];
	node_save($node);
    //dpm($node,'node end');
	// TODO remove hard coded taxonomy ids
	if($status_tid == '94666'){
		return 'Deleted:'.$nid.':'.$status_tid;	
	}else{
		return 'Updated:'.$nid.':'.$status_tid;
	}
}*/

function status_callback_page($status_tid, $nid) {
  global $user;	
  $node = node_load($nid); // $nid is the function's parameter
  $term = taxonomy_term_load($status_tid);
  //if(in_array($term->name,array('Approved Certificate','Rejected Certificates','Pending','Deleted'))) {
  if(in_array($term->name,array('Approved','Rejected','Pending'))) {	  
    $node->field_certificate_status['und'][0]['tid'] = $status_tid;
	sent_mail_of_status_change($term->name,$node);
  } else if(in_array($term->name,array('Draft'))) {
	  $node->status = 0;
	  $flag = flag_get_flag('archive');
    //$flag->flag('flag', $node->nid, $user, TRUE);  
	  $flag->flag('unflag', $nid);
  } else if(in_array($term->name,array('Resubmit Certificates'))) {
	$Submittedtid = _get_term_id_by_term_name('Submitted');  
	$node->field_certificate_status['und'][0]['tid'] = $Submittedtid;  
  } else if(in_array($term->name,array('Archive'))) {
		$node->status = 1;
    $flag = flag_get_flag('archive');
    //$flag->flag('flag', $node->nid, $user, TRUE);  
	  $flag->flag('flag', $nid);
  } if(in_array($term->name,array('Deleted'))) {	
    node_delete($nid);
  }
	
  
  if(!in_array($term->name,array('Deleted'))) {
		
    node_save($node);
  }
  if(in_array($term->name,array('Publish'))) {
		$node->status = 1;
    node_save($node);
  }
  $deletetid = _get_term_id_by_term_name('Deleted');
  if($status_tid == $deletetid){
	return 'Deleted:'.$nid.':'.$status_tid;	
  }else{
	return 'Updated :'.$nid.':'.$status_tid;
  }
}

function status_ajax_callback($page_callback_result) {
  print $page_callback_result;
}

function sent_mail_of_status_change($termname,$node, $submissionmail = FALSE){
  global $user,$base_url;	
  //////////////////////////////////////////////////////
	//$actionArr = array('Rejected','Approved','Pending');
	//$nid = $values['node_nid'];
	//$actKey = $values['routing_action'];
	//$status_tid = _get_term_id_by_term_name($actionArr[$actKey]);
	//$node = node_load($nid);
	//$commentMessagePrefix = $actionArr[$values['routing_action']];
	$commentMessagePrefix = $termname;
	$clientMessage = 'Update Message: '.$termname;
	///////////////////////////////////////////////////
	//$nnid = $values['node_nid'];
	//$node = node_load($nnid);
	//$uuid = $values['user_uid'];
	$uuid = $user->uid;
	$sender_receiver_details = _get_submiter_approver_details($node->nid, $uuid); //pre($nid);pre($uuid);pre($sender_receiver_details);pre($node);
	
	$senderto = $sender_receiver_details['senderto'];
	$receiving_to_name = $sender_receiver_details['receiving_to_name'];
	$receiving_company_name = $sender_receiver_details['receiving_company_name'];
	$from_company_name = $sender_receiver_details['from_company_name'];
	$from_to_name = $sender_receiver_details['from_to_name'];
	
	$mgrUserDetail = get_user_real_name_email(array($senderto));
	$mailTo=$mgrUserDetail[$senderto]['mail'];
	
	$insuranceNodePathAlias = drupal_lookup_path('alias','node/'.$node->nid);
	$insuranceNodePathAlias2 = $base_url.'/'.drupal_get_path_alias('node/'.$node->nid);
	$nodeUserDetail = get_user_real_name_email(array($uuid));
	
	
	if($submissionmail) {
	  $message = '[Insurance:ReceivingPerson],<br/><br/> Your Approval is needed on insurance certificate titled [Insurance:Title]<p>Please click [Site:SignUplink] to log into M6Connect to see the document(s).</p><p>Thank you,<br/>[Insurance:SendingCompany]<br/>[Insurance:SendingPerson]</p>';	
	  $insuranceNodePath = l(t('here'),$insuranceNodePathAlias2 ,array('external'=>TRUE,'query' => array('feedback-tab' => 'feedback-tab')));
	} else {
	  $message = '[Insurance:ReceivingPerson],<br/><br/> The status of your insurance certificate has changed to [Insurance:InsStatus] for [Insurance:ReceivingCompany]. The following special message was made by the approver, please review and take action as necessary.<p></p>[Insurance:ClientMessage] <p>Click the link below to view the updated Insurance Certificate if necessary.</p>[Site:SignUplink]<p>Sincerely,<br/>[Insurance:SendingCompany]</p>';
	  $insuranceNodePath = l(t($node->title),$base_url.$base_path.$insuranceNodePathAlias,array('external'=>TRUE));
	}
	
	$replace = array(
	  '[Insurance:SendingPerson]' => $from_to_name,
	  '[Insurance:ReceivingPerson]' => $receiving_to_name,
	  '[Insurance:SendingCompany]' => $from_company_name,
	  '[Insurance:ReceivingCompany]' => $receiving_company_name,
	  '[Insurance:Title]' => $node->title,
	  '[Insurance:ClientMessage]' => $clientMessage,
	  '[Insurance:InsStatus]' => $commentMessagePrefix,
	  '[Site:SignUplink]' => $insuranceNodePath,
	);
	$params = array(
	  'subject' => $commentMessagePrefix.' Insurance Certificate by '.$from_company_name, //$from_to_name
	  'body' => str_replace(array_keys($replace),array_values($replace),$message),
	  'sender' => $nodeUserDetail[$user->uid]['mail'],
	  //'sender' => 'devd@mailinator.com',
	  'language' => language_default(),
	  'module' => 'm6connect_misc',
	  'key' => 'insurance_mail___approval_reminder_notify',
	  'build' => TRUE,
	 );
	//$message = str_replace(array_keys($replace),array_values($replace),$message); 
	$ins_mail=drupal_mail($params['module'], $params['key'], $mailTo, $params['language'], $params); 	
	
	/*	*******notification start ********** */
	$m6connect_notification_table_exist = db_table_exists('m6connect_notification');
		if ($m6connect_notification_table_exist) {	
			$notification_company_nid = isset($node->field_submit_to['und'])?$node->field_submit_to['und'][0]['target_id']:0;			
			$m6connect_notification = array(
			'type' => 'insurance_certificates',
			'event' => 'invite',
			'entity_id' => $node->nid,
			'company_nid' => $notification_company_nid,
			'message' => 'submit',
			'request_from' => $user->uid,
			'request_to' => $senderto,
			'status' => 1,
			'timestamp' => time(),
			);
			//entity_save('m6connect_notification', (object) $m6connect_notification);
		}
	/*	*******notification end ********** */
	
	
	return;	
}

/**
 * Implements hook_block_info().
 */
function m6connect_ins_cert_block_info() {
  $blocks['ins-cert-status-content'] = array(
    'info' => t('Insurance Certificate Status'),
  );
  $blocks['ins-cert-status-btn'] = array(
    'info' => t('Insurance Certificate Status button'),
  );
  $blocks['ins-cert-top-add-edit'] = array(
    'info' => t('Add/Edit top Insurance Certificate'),
  );
  $blocks['ins-cert-top-banner'] = array(
    'info' => t('Insurance Certificate Top Banner'),
  );
  $blocks['insurance-approval-feedback'] = array(
    'info' => t('Insurance Feedback tab content'),
  );
  $blocks['associate-project-contract'] = array(
    'info' => t('Associate project contract on content'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function m6connect_ins_cert_block_view($delta = '') {
  global $user;
  $block = array();
  $content = '';
  switch ($delta) {
    case 'ins-cert-status-content':
      $block['subject'] = t('');
      $block['content'] = insurance_certificate_status();
    break;
	case 'ins-cert-status-btn':
      $block['subject'] = t('');
      $block['content'] = insurance_certificate_status_btn();
    break;
    case 'ins-cert-top-add-edit':
	  $block['subject'] = t('');
      $block['content'] = top_add_edit_insurance_certificate();
	break;
    case 'ins-cert-top-banner':
	  $block['subject'] = t('');
      $block['content'] = top_banner_insurance_certificate();
	break;	
	case 'insurance-approval-feedback':
	  $block['subject'] = t('');
	  $block['content'] = insurance_certificate_feedback_content();
	break;
	case 'associate-project-contract':
	  $nid = arg(1);
	  $block['subject'] = t('');
	  $block['content'] = associate_project_contract_content($nid);
	break;
  }
  return $block;
}

function top_banner_insurance_certificate(){
  global $user, $company;
  if(!is_object($company)){
    $company = node_load($_SESSION['company']);
  }
  drupal_add_library('system', 'ui.dialog');
  drupal_add_js(drupal_get_path('module', 'm6connect_ins_cert') . '/m6connect_ins_cert.js');
  $access = FALSE;
  if($company && isset($company->nid) && !is_company_individual_flag($company->nid)){
	if (isset($user->roles[3])){
	  $access = TRUE;  	
	} else {
      $access = insurance_certificate_create_access_callback($company->nid);
	}
  }
	
  $output = '';
  $output .= '<div class="main_content">
	<div class="box box-with-image">
		<div class="box-header-main box-header">
			<div class="box-image-wrapper"> <a href="#"> <i class="fa fa-files-o"></i> </a> </div>
			<div class="box-right-entity">
				<div class="row">
					<div class="col-sm-4">
						<h1>Insurance Certificates</h1>
						<p>Create and manage Insurance Certificates and Contracts</p>
					</div>';
  if($access) {					
    $output .= '		<div class="col-sm-6 col-sm-offset-2 box-actions text-right"> <a style="line-height: 3em;" href="/node/add/insurance-certificates" title="Create New Insurance Certificate"><i class="glyphicon glyphicon-plus"></i> New Insurance Certificate</a> </div>'; 
	
  } else {
	$output .= '<div class="col-sm-6 col-sm-offset-2 box-actions text-right"> <a href="javascript:void(0);" class="individual-insurance-create-link" title="Create New Insurance Contract"><i class="glyphicon glyphicon-plus"></i> Contract Requirements</a> </div>';  
  }
  
  $output .='	</div>
			</div>
		</div>
	</div>
</div>';
$output .= '<div id="individual-insurance-create-dialog"></div>';
  return $output;	
}

function top_add_edit_insurance_certificate(){
  $output = '';
  //$output .= current_path();
  if(current_path() == 'node/add/insurance-certificates') {
    /*$output .= '<div class="row margin-5">
  <div class="col-md-1 col-sm-1 col-xs-12 padding-5"></div>
  <div class="col-md-10 col-sm-10 col-xs-12 padding-5">
<div class="ins-cert-top-add-edit"><h1>Add Insurance Certificate</h1></div>
</div>
  <div class="col-md-1 col-sm-1 col-xs-12 padding-5"></div>
</div>';*/
    $output .= '<div class="row margin-5">
  
  <div class="col-md-12 col-sm-12 col-xs-12 padding-5">
<div class="ins-cert-top-add-edit"><h1>Add Insurance Certificate</h1></div>
</div>
  
</div>';
  } else if(arg(0) == 'node' && is_numeric(arg(1)) && (arg(2) == 'edit')){
	/* $output .= '<div class="row margin-5">
  <div class="col-md-1 col-sm-1 col-xs-12 padding-5"></div>
  <div class="col-md-10 col-sm-10 col-xs-12 padding-5">
<div class="ins-cert-top-add-edit"><h1>Edit Insurance Certificate</h1></div>
</div>
  <div class="col-md-1 col-sm-1 col-xs-12 padding-5"></div>
</div>'; */ 
  }
  return $output;
}

function insurance_certificate_status(){
  global $user;
  $output = '';
  //$output .= current_path();
  if(current_path() == 'node/add/insurance-certificates') {
    //$output .= '<div class="ins-cert-content-status"><strong>Draft</strong></div>';
	/*$status = 'Draft';
    $output .= '
  <div class="row">
	<div class="col-sm-12" style="text-align:left;">
	  <input id="approve" style="height:55px; padding:5px 40px 0 40px; background-color:#337ab7; color:#fff; font-size:1.2em; margin:20px 30px 20px 0; border:none;" value="'.$status.'" type="submit">
	</div>
  </div>';*/
  } else if(arg(0) == 'node' && is_numeric(arg(1)) && (!arg(2) || arg(2) == 'edit')){
	$nid = arg(1);
	$cnode = node_load($nid);
	$ICstatus = '';
	$ICstatus = _get_ins_certificate_status($nid, 'term');
	if (!empty($ICstatus)) {
	  if($ICstatus == 'Submitted') {
		$isuser_receiver = _is_user_submiiter_receiver($cnode);
		if($user->uid != $cnode->uid && $isuser_receiver == 'receiver') {
		  $ICstatus = 'Received';	
		}
	  }
	  //$output .= '<div class="ins-cert-content-status"><strong>'.$sterm->name.'</strong></div>';
	  
  /*$output .= '
  <div class="row">
	<div class="col-sm-12" style="text-align:left;">
	  <input id="approve" style="height:55px; padding:5px 40px 0 40px; background-color:#337ab7; color:#fff; font-size:1.2em; margin:20px 30px 20px 0; border:none;" value="'.$sterm->name.'" type="submit">
	</div>
  </div>';*/
     $output .= '
  <div class="ins-cert-content-status">
	<input id="approve" value="'.$ICstatus.'" type="submit" class="cust-ic-status-top">
  </div>';
	} else {
	  //$output .= '<div class="ins-cert-content-status"><strong>Draft</strong></div>';	
	 /* $status = 'Draft';
      $output .= '
  <div class="row">
	<div class="col-sm-12" style="text-align:left;">
	  <input id="approve" style="height:55px; padding:5px 40px 0 40px; background-color:#337ab7; color:#fff; font-size:1.2em; margin:20px 30px 20px 0; border:none;" value="'.$status.'" type="submit">
	</div>
  </div>'; */
	}
  }
  return $output;	
}


function insurance_certificate_status_btn(){
  $output = '';
  if(arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)){
  $output .= '
  <div class="row">
	<div class="col-sm-12" style="text-align:center;">';
 /* $output .= '	
	  <input id="approve" style="height:55px; padding:5px 40px 0 40px; background-color:#337ab7; color:#fff; font-size:1.2em; margin:20px 30px 20px 0; border:none;" value="Approve Certificate" type="submit">
	  <input id="reject" style="height: 55px; padding: 5px 40px 0 40px; background-color: #fff; color: #337ab7; font-size: 1.2em; margin: 20px 30px 0 0; border: 3px solid #337ab7; " value="Reject Certificate" type="submit">';
  $output .= '	  
	  <input id="sendMessage" style="height: 55px; padding: 5px 40px 0 40px; background-color: #fff; color: #337ab7; font-size: 1.2em; margin: 20px 0; border: 3px solid #337ab7; " value="Send Message To Company" type="submit">';*/
  /*$output .= '	  
	  <input id="sendMessage" style="height:55px; padding:5px 40px 0 40px; background-color:#337ab7; color:#fff; font-size:1.2em; margin:20px 30px 20px 0; border:none; " value="Insurance Certificate Message" type="submit">';	*/
  $output .= l(t('Insurance Certificate Message'), 'insurance-feedback/'.arg(1), array('attributes'=>array('class' => array('ins-cert-message-link')),'html'=> TRUE));	    
  $output .= '
  	</div>
  </div>';	
  }
  return $output;	
}

function ins_creti_user_project_process($element,&$form_state){
  $opt = array('Select Project');
  $options = array('Select Company Individual');
  $element['submit_to_user'] = array(
	'#type' => 'select',
	'#title' => 'Submit to Selected Company Individual',
	'#options' => $form_state['ins_crti_user_list_option']['options'],
	'#empty_option' => 'Select Company Individual',
	'#default_value' => $form_state['ins_crti_user_list_option']['default'],
	'#ajax' => array(
	  'callback' => 'change_submit_to_comp_callback',
	  'event' => 'change',
	  'wrapper' => 'ins-cert-submit-to-usr',
	  'method' => 'replace',
	),
	'#required' => 1,
  );
  
  $element['submit_to_user_proj'] = array(
	 '#type' => 'select',
     '#title' => 'Associate to project',
	 '#empty_option' => 'Select Project',
     '#options' => $form_state['ins_crti_project_list_option']['options'], 
	 '#default_value'=> $form_state['ins_crti_project_list_option']['default'],
  );
  return $element;
}


function m6connect_ins_cert_form_alter(&$form, &$form_state, $form_id){ 
  //kpr($form_id);pre($form_state); 
  global $user, $company;	
  /*ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();*/
  if ($form_id == 'insurance_certificates_node_form') { 
    //drup_msg($form); drup_msg($form_state);//kpr($form); pre($form['og_group_ref']);   
    $InsCertPopupBtn = '';
    //Ajax Title Callback
  	if(empty($form['nid']['#value']) && isset($_GET['cm'])){
      $form['field_cm_type']['und'][0]['value']['#default_value'] = $_GET['cm'];
      $form['field_cm_type']['und'][0]['#default_value'] = $_GET['cm'];
    }
  	if(isset($form_state['values']) && isset($form_state['input']) && isset($form_state['triggering_element']) && isset($form_state['triggering_element']['#type']) && $form_state['triggering_element']['#type']=='textfield'){
  	  $triggering_element = $form_state['triggering_element'];
  	  $string = $triggering_element['#value'];
      $query = db_select('node', 'n');
      $query->condition('title', $string.'%', 'LIKE');
  	  $query->condition('type', 'insurance_certificates', '=');
  	  $query->fields('n',array('nid'));
  	  $result = $query->execute()->fetchColumn(0);
  	  $InsCertPopupBtn = 1;
  	  if(!empty($result)){
  		
  		$ins_node = node_load($result);
  		//['input']['submit_to_user']
  		$SubmitTo = $ins_node->field_submit_to['und'][0]['target_id'];
  		$SubmitToCompanyUsers = $ins_node->field_submit_to_company_user['und'][0]['uid'];
  		$submitToCom = isset($ins_node->field_submit_to['und'][0])?_get_user_mappping_by_group_company_nid($SubmitTo):'';
  		$ProjectsLists = isset($ins_node->field_submit_to_company_user['und'][0])?get_insurance_projects_list_TT($SubmitToCompanyUsers, $user->uid):''; 
      //drup_msg($ProjectsLists);
  		
  		$form_state['ins_crti_user_list_option']['options']= $submitToCom;
  		$form_state['ins_crti_project_list_option']['options']= $ProjectsLists;		
  	  }		
  	}	
  	$form['title']['#ajax'] = array(
  	  'event' => 'blur',
  	  'callback' => 'custom_insurance_certificate_autofill_callback',
  	);
    // Is Company Listed as a Certificate Holder Dependees start
  	$form['field_individual_company_name_2']['#states'] = array(
  	  'visible' => array(	  
  		':input[name="field_is_company_listed_as_a_cer[und]"]' => array('value' => 'Y'),
  	  ),
  	);
  	$form['field_individual_company_name_2']['#after_build'][]= 'ins_cert_company_listed_dependees_after_build';
  	
  	$form['field_location_address']['#states'] = array(
  	  'visible' => array(	  
  		':input[name="field_is_company_listed_as_a_cer[und]"]' => array('value' => 'Y'),
  	  ),
  	);
  	$form['field_location_address']['#after_build'][]= 'ins_cert_company_listed_dependees_after_build';
  	
  	$form['field_add_company_information']['#states'] = array(
  	  'visible' => array(	  
  		':input[name="field_is_company_listed_as_a_cer[und]"]' => array('value' => 'Y'),
  	  ),
  	);
	  // Is Company Listed as a Certificate Holder Dependees end	
    $form['#after_build'][] = 'ins_cert_save_draft_form_after_build';
    $form['#after_build'][] = 'custom_insurance_certificates_after_build';
  	if(!(array_key_exists(3, $user->roles))) {
  	  //unset($form['additional_settings']);
  	  //unset($form['track_field_changes']);
  	  
  	}	
  	if(empty($form_state['company_listing_all'])){
  		$form_state['company_listing_all']= _get_all_organigation_mapping();
  	}
  	//kpr($form)	
  	if(arg(0) == 'node' && arg(1) == 'add') {  
  	  drupal_set_title('Add Insurance Certificate');
  	  $form['field_submit_to_user_list']['#access'] = FALSE;
  	  $form['field_associate_to_project']['#access'] = FALSE;
  	}
  	if(arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit'){
  	  //$node = node_load(arg(1));				
  		$form['field_submit_to']['und'][0]['target_id']['#default_value'];
  		if(isset($form['field_submit_to']['und'][0]) && !empty($form['field_submit_to']['und'][0]['target_id']['#default_value'])){
  		  $field_submit_to_default = $form['field_submit_to']['und'][0]['target_id']['#default_value'];
  		  $field_submit_to_default_new = explode(' (',$field_submit_to_default);
  			$form['field_submit_to']['und'][0]['target_id']['#default_value'] = $field_submit_to_default_new[0];
  		}		
  	}	
  	$form['actions']['template'] = array(
  	  '#name'=> 'template',
      '#type' => 'submit',
      '#value' => 'Save Template',
      '#weight' => 98,
      //'#submit' => array('custom_ins_cert_template_submit'),
  	  //'#submit' => array(custom_ins_cert_template_submit,'node_form_submit'),
      //'#attributes' => array('class'=>array('DocumentsWithRFP'),'data'=>array($data))			
      //'#limit_validation_errors' => array(array('title')),
  	  //'#validate' => 'remove_required_field',
  	  '#submit' => array('node_form_submit','custom_ins_cert_template_submit_handler'),
    );	
  	/*$form['actions']['has_save_as_template'] = array(
  		'#name'=> 'has_save_as_template',
  		'#type' => 'button',
  		'#value' => 'Update',
  		'#weight' => 105,		 
  		'#submit' => array('node_form_submit'),
  	  );
  	  $form['actions']['has_save_as_template_copy'] = array(
  		'#name'=> 'has_save_as_template_copy',
  		'#type' => 'submit',
  		'#value' => 'Copy as',
  	    '#weight' => 106,	
  		//'#submit' => array('custom_ins_cert_template_copy_collback'),
  		'#submit' => array('custom_ins_cert_template_submit_handler'),
  		//'#limit_validation_errors'=> array(array('title')),
  	  );
  	  $form['actions']['has_save_as_template_cancel'] = array(
  		'#name'=> 'has_save_as_template_cancel',
  		'#type' => 'submit',
  		'#value' => 'Cancel',
  	    '#weight' => 107,		 
  		'#submit' => array('node_form_submit'),
  	  );*/
  	//array_unshift($form['actions']['template']['#submit'],'custom_ins_cert_template_submit');
  	//['submit']['#submit']
		//$form['#submit'][] = 'custom_ins_cert_form_submit';
  	$form['actions']['submit']['#submit'][] = 'custom_ins_cert_main_submit_handler';
  	array_unshift($form['#submit'],'callback_ins_cert_form_submit');
  	$form['#validate'][] = 'custom_ins_cert_form_validate';
  	$form['title']['#attributes']['required']='required';
  	$form['title']['#autocomplete_path'] = 'ins_cert/autotitle';	
  	$js = "jQuery('document').ready(function(){
  	         jQuery('.form-item-field-is-company-listed-as-a-cer-und .form-required').hide();
  	       });";
      drupal_add_js($js, 'inline'); 
  	
  	$form['field_submit_to']['und'][0]['target_id']['#ajax'] = array(
      'callback' => 'change_submit_to_comp_callback',  
      'event' => 'blur',
      'wrapper' => 'ins-cert-submit-to-usr',
      //'progress' => array('type' => 'none'),
      'method' => 'replace',
    );
	
  	if(empty($form_state['ins_crti_user_list_option'])){
  	  $form_state['ins_crti_user_list_option'] = array('options'=>array(),'default'=>'');	
  	}
  	if(empty($form_state['ins_crti_project_list_option'])){
  	  $form_state['ins_crti_project_list_option'] = array('options'=>array(),'default'=>'');	
  	}
  	
  	if(!empty($form['nid']['#value']) && empty($form_state['user_project_initail'])){
  	  $form_state['user_project_initail']=1;
  	  $SubmitToUser = $form['field_submit_to_company_user']['und']['#default_value'];	
  	  $opt= array();
  	  if(!empty($SubmitToUser) && isset($SubmitToUser[0])) {
  	    $authoruid = $form['uid']['#value'];	
  	    $opt = get_insurance_projects_list_TT($SubmitToUser[0], $authoruid);
  		  $form_state['ins_crti_project_list_option']['options'] = $opt;
  	  }
  	  
  	  $selectproj = (isset($form['field_submit_to_project']['und']['#default_value']) && !empty($form['field_submit_to_project']['und']['#default_value']))?$form['field_submit_to_project']['und']['#default_value']:'';
  	  if(!empty($selectproj)){ 
    		$selproj = $selectproj[0];
    		if(array_key_exists($selproj,$form_state['ins_crti_project_list_option']['options'])){
    		  $form_state['ins_crti_project_list_option']['default'] = $selproj;
    		}
  	  }	
  	  ////////////////////////////////////////
  	  $com = $form['field_submit_to']['und'][0]['target_id']['#default_value'];
  		/////
  		$company_listing_alls = _get_all_organigation_mapping();
  		$company_listing_alls = array_flip($company_listing_alls);
  		$rearrange_submit_to = $com.' ('.$company_listing_alls[$com].')';
  		/////
  	  $comid = explode('(', $rearrange_submit_to);
  	  if(is_array($comid) && !empty($comid)) {
    		$comnid = $comid[1];
    		$comnids = str_replace(')','',$comnid);
  	    if(is_numeric($comnids)) {
  	      $cnode = node_load($comnids);
  	      if($cnode->type == 'organization') { //pre('ttt',1);
  	        $gmlist = og_get_group_members_properties($cnode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
            $userUidNameMapping = _get_user_uid_name_mapping(array_values($gmlist));
  		      $options = array();
            foreach ($userUidNameMapping as $invitedUid => $invitedName) {
  		        $options[$invitedUid] = $invitedName;
            }
      			$form_state['ins_crti_user_list_option']['options'] = $options;
      			$form_state['ins_crti_user_list_option']['default']= '';	
      			$selecteduser = (isset($form['field_submit_to_company_user']['und']['#default_value']) && !empty($form['field_submit_to_company_user']['und']['#default_value']))?$form['field_submit_to_company_user']['und']['#default_value']:'';
      			if(!empty($selecteduser) && isset($selecteduser[0])){ //pre($selecteduser);
      			  $selusr = $selecteduser[0];
      			  if(array_key_exists($selusr,$form_state['ins_crti_user_list_option']['options'])){
  		          $form_state['ins_crti_user_list_option']['default'] = $selusr;
    		      }
      			}
    		  }
    		}
  	  }
  	}
	
  	$selecteduser = (isset($form['field_submit_to']['und'][0]['target_id']['#default_value']) && !empty($form['field_submit_to']['und'][0]['target_id']['#default_value']))?$form['field_submit_to']['und'][0]['target_id']['#default_value']:'';
      if(!empty($selecteduser)){ //pre('dfdfds',1);
  	  //$form['field_submit_to']['und'][0]['target_id']['#attributes']['readonly'] = TRUE;	//16mar
  	}
	
	  //----//$form['field_submit_to_user_list']['und']['#options'] = array('Select Company Individual');
	  //----//$form['field_associate_to_project']['und']['#options'] = array('Select Project');
	  //$triggering_element2 = $form_state['triggering_element']; drupal_set_message('<pre>'.print_r($triggering_element2,1).'</pre>');
  	if(isset($form_state['values']) && isset($form_state['input']) && isset($form_state['triggering_element']) && isset($form_state['triggering_element']['#type'])){ 
      $triggering_element = $form_state['triggering_element'];
      if(isset($triggering_element['#field_name']) && $triggering_element['#field_name']=='field_submit_to'){ //pre($triggering_element,1);//pre('aa',1);
  	    $form_state['ins_crti_user_list_option'] = array('options'=>array(),'default'=>'');
        $form_state['ins_crti_project_list_option'] = array('options'=>array(),'default'=>'');
  	    $com =  $triggering_element['#value']; 
  			$companyLising = array_flip($form_state['company_listing_all']);
  			if(isset($companyLising[$com])){
  				$comnids = $companyLising[$com];
  				if(is_numeric($comnids)) {
  	        $cnode = node_load($comnids);
  		      if($cnode->type == 'organization') {
  		        $gmlist = og_get_group_members_properties($cnode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
              $userUidNameMapping = _get_user_uid_name_mapping(array_values($gmlist));
  		        $options = array();
              foreach ($userUidNameMapping as $invitedUid => $invitedName) {
  			        $options[$invitedUid] = $invitedName;
              }	
  		        $form_state['ins_crti_user_list_option']['options'] = $options;
  		     }
  			}
  	  }		
  		/*$comid = explode('(', $com); //pre($comid,1);
  		if(is_array($comid) && !empty($comid)) {
  		  $comnid = $comid[1];
  		  $comnids = str_replace(')','',$comnid);
  		  //$form['submit_to_container']['hdfbg']= array('#markup'=>$comnids);  
  		  if(is_numeric($comnids)) {
  		    $cnode = node_load($comnids);
  			if($cnode->type == 'organization') {
  			  $gmlist = og_get_group_members_properties($cnode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
                $userUidNameMapping = _get_user_uid_name_mapping(array_values($gmlist));
  			  $options = array();
                foreach ($userUidNameMapping as $invitedUid => $invitedName) {
  				$options[$invitedUid] = $invitedName;
                }	
  			  $form_state['ins_crti_user_list_option']['options'] = $options;
  			}
  		  }
  		}*/
    }
    ///////////////////////////////////////////////////////////////// project listing start
  	if(isset($triggering_element['#name']) && $triggering_element['#name']=='submit_to_user'){ 
      //  pre('hiii'); pre($triggering_element,1);
      $cmcr = '';
      $cmcr = $form_state['values']['field_cm_type']['und'][0]['value'];    
      $SubmitToUser = $triggering_element['#value'];
  		$form_state['ins_crti_project_list_option'] = array('options'=>array(),'default'=>'');
  		$opt1 = array();
  		if(!empty($form['nid']['#value'])){ //pre('1');pre($node);
  		  $authoruid = $form['uid']['#value'];	
  		  $opt1 = get_insurance_projects_list_TT($SubmitToUser, $authoruid, $cmcr);	
  		} else { 
  		  $authoruid = $user->uid;	
        $opt1 = get_insurance_projects_list_TT($SubmitToUser, $authoruid, $cmcr); //array('Select Company Individual','devd');
  		}    
  	  $form_state['ins_crti_project_list_option']['options']=$opt1;
    }
	  //pre($triggering_element,1);
	}
	
	$form['field_submit_to']['und'][0]['target_id']['#attributes']['placeholder'] = t('Select the company you are submitting to');
	$form['title']['#attributes']['placeholder'] = t('Provide a title for this insurance certificate');	
	$form['submit_to_container'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="ins-cert-submit-to-usr" class="ins-cert-submit-to-usr">',
    '#suffix' => '</div>',
    '#process' => array('ins_creti_user_project_process')
  );	
	$form['#group_children']['submit_to_container'] ='group_submit_to_user_div';
	//kpr($form);
  }
  if($form_id == 'field_collection_item_delete_confirm' || $form_id == 'field_collection_item_form') { //pre($form);
  	if(isset($form_state['ajax'])) {
  	  if($form_id == 'field_collection_item_delete_confirm') {	
  	    unset($form['actions']['cancel']);
  	  }
  	  $form['actions']['close'] = array(
          '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('coverage-popup-close cust-coverage-close-btn'), 'onclick' => 'jQuery("span.popups-close").click();'))),
  		'#weight' => 10,
        );
  	}	
	  //$form['#submit'][] = 'cust_ins_cert_sub';
  }  
  if($form_id == 'contract_node_form') {
  	if (current_path() == 'node/add/contract') {  
  	  ///////////////  	    
  	  drupal_set_title('');
  	  ///////////////
        if(isset($form['og_group_ref']['und'][0]['default'])){
          $form['og_group_ref']['und'][0]['default']['#default_value']=$company->nid;	
        }	
  	  //drupal_add_js('jQuery(document).ready(function(){ jQuery("#edit-field-project-und").css(``); });', 'inline');
  	}
  	drupal_add_css('#edit-og-group-ref {display:none;}', 'inline');
  }  
}
function custom_ins_cert_template_copy_collback($form, &$form_state) {
  drup_msg($form_state['values']);
  global $user;
  $tterms = taxonomy_get_term_by_name('Template'); 
  $ttermid = '';
  foreach($tterms as $tid => $term) {
	$ttermid = $term->tid;			
  }
  $node = node_load($form_state['values']['nid']);
  $node->title = 'copy-'.$form_state['values']['title'];
  $node->nid = NULL;
  $node->vid = NULL;
  $node->tnid = NULL;
  $node->log = NULL;
  $node->uuid = NULL;
  $node->vuuid = NULL;
  $node->created = NULL;
  $node->path = NULL;
  $node->files = array();
  $node->uid = $user->uid;
  $node->type = 'insurance_certificates';
  $node->field_certificate_status['und'][0]['tid'] = $ttermid;
  node_save($node);
}

function custom_ins_cert_template_submit($form, &$form_state) {
 //pre($form_state,1);
 	//drup_msg($form_state);	
  global $user;
  //$selected_user = $form_state['values']['submit_to_user'];
  $selected_user = $form_state['input']['submit_to_user']; //pre($form_state,1);
  if(!empty($selected_user)) { //pre('fsds');
    $form_state['values']['field_submit_to_company_user']['und'][0]['uid'] = $selected_user;
  } //pre($form_state['values'],1);
  $selected_proj = $form_state['input']['submit_to_user_proj']; //pre($form_state,1);
  if(!empty($selected_proj)) { //pre('fsds');
    $form_state['values']['field_submit_to_project']['und'][0]['target_id'] = $selected_proj;
  } 
  if($form_state['clicked_button']['#value'] == 'Save Template') {    
		if(empty($form_state['values']['nid'])  ){
			$terms = taxonomy_get_term_by_name('Template');
			$termid = ''; 
			foreach($terms as $tid => $term) {
				$form_state['values']['field_certificate_status']['und'][0]['tid'] = $term->tid;
			}
		}
  }	
}

function custom_ins_cert_template_submit_handler($form,&$form_state){
  global $user;
  $terms = taxonomy_get_term_by_name('Submitted'); 
  $termid ='';
  foreach($terms as $tid => $term) {
    $termid = $term->tid;		
  }
  $tterms = taxonomy_get_term_by_name('Template'); 
  $ttermid = '';
  foreach($tterms as $tid => $term) {
    $ttermid = $term->tid;			
  }
  if($form_state['values']['field_certificate_status']['und'][0]['tid'] == $termid) {
	$node = node_load($form_state['values']['nid']);
	$node->nid = NULL;
	$node->vid = NULL;
	$node->tnid = NULL;
	$node->log = NULL;
	$node->uuid = NULL;
	$node->vuuid = NULL;
	$node->created = NULL;
	$node->path = NULL;
	$node->files = array();
	$node->uid = $user->uid;	
	$node->field_certificate_status['und'][0]['tid'] = $ttermid;
	node_save($node);	
  }
  if($form_state['triggering_element']['#name'] == 'has_save_as_template_copy'){
	$node = node_load($form_state['values']['nid']);
	$node->title = 'copy-'.$form_state['values']['title'];
	$node->nid = NULL;
	$node->vid = NULL;
	$node->tnid = NULL;
	$node->log = NULL;
	$node->uuid = NULL;
	$node->vuuid = NULL;
	$node->created = NULL;
	$node->path = NULL;
	$node->files = array();
	$node->uid = $user->uid;	
	$node->field_certificate_status['und'][0]['tid'] = $ttermid;
	node_save($node);	
  }
}

function custom_ins_cert_main_submit_handler(&$form,&$form_state){
  //drup_msg($form_state['values']);
  global $user;
	//drup_msg($form_state['values']);
  $terms = taxonomy_get_term_by_name('Submitted'); 
	$termid ='';
	foreach($terms as $tid => $term) {
		$termid = $term->tid;		
	}
	$tterms = taxonomy_get_term_by_name('Template'); 
	$ttermid = '';
	foreach($tterms as $tid => $term) {
		$ttermid = $term->tid;			
	}
	if($form_state['values']['field_certificate_status']['und'][0]['tid'] == $ttermid) {		
	//if((isset($form_state['values']['vid']) && $form_state['values']['vid'])){
		$node = node_load($form_state['values']['nid']);
		$node->nid = NULL;
		$node->vid = NULL;
		$node->tnid = NULL;
		$node->log = NULL;
		$node->uuid = NULL;
		$node->vuuid = NULL;
		$node->created = NULL;
		$node->path = NULL;
		$node->files = array();
		$node->uid = $user->uid;
		$node->field_certificate_status['und'][0]['tid'] = $termid;
		node_save($node);
	//}
	}
  //drup_msg($form_state['clicked_button']);
  //drup_msg($form_state['#new_insurance']);
  //drup_msg($form_state['values']);
  
  if($form_state['clicked_button']['#value'] == 'Submit') {	
    if($form_state['#new_insurance'] == 1){
  	  if(db_table_exists('m6connect_notification')){
    		$m6connect_notification = array(
    		  'type' => 'insurance_certificates',
    		  'event' => 'invite',
    		  'entity_id' => (isset($form_state['values'])?$form_state['values']['nid']:0),
    		  'company_nid' => (isset($form_state['values']['field_submit_to']['und'])?$form_state['values']['field_submit_to']['und'][0]['target_id']:0),
    		  'message' => NULL,
    		  'request_from' => $user->uid,
    		  'request_to' => (isset($form_state['values']['field_submit_to_company_user']['und'])?$form_state['values']['field_submit_to_company_user']['und'][0]['uid']:0),	
    		  'status' => 1,
    		  'timestamp' => time ()
    		);
    		entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
  	  }
  	}
  }
}


function ins_csrtificate_after_build($form, &$form_state) {  
  $form['field_submit_to']['#attributes']['placeholder'] = t('Select the company you are submitting to');
  return $form;
}

function change_submit_to_comp_callback(&$form, $form_state){
  //$output = '<h1>hell</h1>';
  //$commands = array();
  //$commands[] = ajax_command_html('#ins-cert-submit-to-usr', $output);
  return $form['submit_to_container'];
}

function change_submit_to_proj_callback(&$form, $form_state){ //drup_msg($form_state);
  //pre($form_state,1);//drup_msg($form_state['triggering_element']);	
  return $form['submit_to_container_proj'];
}

function change_submit_to_project_callback(&$form, $form_state){ //drup_msg($form_state);
  //pre($form_state,1);//drup_msg($form_state['triggering_element']);	
  return $form['submit_to_container_project'];
}

function cust_ins_cert_sub($form, &$form_state) { //pre($form,1);
  ctools_include('ajax');
  $hnodeentity = isset($form['#entity'])?$form['#entity']:'';
  $hnode = $hnodeentity->hostEntity(); //pre($hnode);
  $hnodeid = $hnode->nid;
  //$path = drupal_lookup_path('alias', 'node/' . $objectMail->nid);
  //$path = ($path) ? $path : 'node/' . $objectMail->nid;
  if($hnodeid) {
	//$form_state['redirect'] = 'node/'.$hnodeid;  
  }
  
  if((isset($form_state['ajax']))?(($form_state['ajax']==1)?true:false):false) { pre('dfdf',1);
    //$form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    $form_state['ajax_commands'][] = ctools_ajax_command_redirect('node/'.$hnodeid);
  }
}

function custom_ins_cert_form_validate($form, &$form_state){
  //pre($form_state,1);
  if($form_state['clicked_button']['#value'] != 'Save Template') {
	if(empty($form_state['input']['field_submit_to']['und'][0]['target_id'])) {
	  form_set_error('field_submit_to', t('Field "Submit To" is required.'));	
	}
	/*if($form_state['input']['field_is_company_listed_as_a_cer']['und'][0]['value'] != 'Y') {
	  form_set_error('field_is_company_listed_as_a_cer', t('Field "Is Company Listed as a Certificate Holder" is required.'));	
	}*/
  }else if($form_state['clicked_button']['#value'] == 'Save Template') {  //pre($form_state,1);
    if(empty($form_state['input']['title'])) {
	  form_set_error('title', t('Title is required.'));	
	} 
	  form_clear_error();
	  unset($_SESSION['messages']['error']);
	
  }
}

function custom_ins_cert_form_submit($form, &$form_state){
	//pre('custom_ins_cert_form_submit');
  //pre($form_state,1);	
	//drup_msg($form_state);
  global $user;
  //$selected_user = $form_state['values']['submit_to_user'];
  $selected_user = $form_state['input']['submit_to_user']; //pre($form_state,1);
  if(!empty($selected_user)) { //pre('fsds');
    $form_state['values']['field_submit_to_company_user']['und'][0]['uid'] = $selected_user;
  } //pre($form_state['values'],1);
  $selected_proj = $form_state['input']['submit_to_user_proj']; //pre($form_state,1);
  if(!empty($selected_proj)) { //pre('fsds');
    $form_state['values']['field_submit_to_project']['und'][0]['target_id'] = $selected_proj;
  } 
  if($form_state['clicked_button']['#value'] == 'Submit') {
	$terms = taxonomy_get_term_by_name('Submitted'); 
	foreach($terms as $tid => $term) {
	  $termid = $term->tid;
	  $termname = $term->name;
	}  
	if(isset($form_state['values']['nid']) && !empty($form_state['values']['nid'])) {
	  $entityId = $form_state['values']['nid'];	
	  $is_status_exists =  _get_ins_certificate_status($entityId, '', TRUE);
	  if(!$is_status_exists) {
		$form_state['values']['field_certificate_status']['und'][0]['tid'] = $termid; //'94038'; //$termid; //'94668'
		$nid = $form_state['values']['nid'];
		sent_mail_of_status_change($termname,$nid,TRUE);
	  }
	} else { //pre($termid);pre($form_state,1);
      $form_state['values']['field_certificate_status']['und'][0]['tid'] = $termid; //'94038'; //$termid;  
	}
  }
}

function callback_ins_cert_form_submit($form, &$form_state){//drup_msg($form_state);
  global $user;
  $com = $form_state['input']['field_submit_to']['und'][0]['target_id'];
  $companyLising = array_flip($form_state['company_listing_all']);
  if(isset($companyLising[$com])){
	$comnids = $companyLising[$com];
	$form_state['values']['field_submit_to']['und'][0]['target_id']= $comnids;
  }
  
  $selected_user = $form_state['input']['submit_to_user']; //pre($form_state,1);
  if(!empty($selected_user)) { //pre('fsds');
    $form_state['values']['field_submit_to_company_user']['und'][0]['uid'] = $selected_user;
  } //pre($form_state['values'],1);
  $selected_proj = $form_state['input']['submit_to_user_proj']; //pre($form_state,1);
  if(!empty($selected_proj)) { //pre('fsds');
    $form_state['values']['field_submit_to_project']['und'][0]['target_id'] = $selected_proj;
  }
	 
  if($form_state['clicked_button']['#value'] == 'Save Template') {
  	if(empty($form_state['values']['nid'])  ){
  	  $terms = taxonomy_get_term_by_name('Template');
  	  foreach($terms as $tid => $term) {
  		  $form_state['values']['field_certificate_status']['und'][0]['tid'] = $term->tid;
  	  }
  	}
  }
	
  if($form_state['clicked_button']['#value'] == 'Submit') {
  	if(empty($form_state['values']['nid'])  ){
  	  $terms = taxonomy_get_term_by_name('Submitted');
  	  foreach($terms as $tid => $term) {
    		$form_state['values']['field_certificate_status']['und'][0]['tid'] = $term->tid;
    		$form_state['#new_insurance']=1;
  	  }	  	
  	}
  }		
}
function ins_cert_autotitle($string = ''){
  global $user;
  if ($string !='') {
    $query = db_select('node', 'n');
    $query
    ->condition('title', $string.'%', 'LIKE')
	->condition('status', 1, '=')
	->condition('n.uid', $user->uid, '=')
	->condition('type', 'insurance_certificates', '=')
    ->fields('n', array('title','nid'));
    //->range(0,10);
    $result = $query->execute();
    $matches = array();
    foreach($result as $row) {
      //$matches[$row->title.' ('.$row->nid.')'] = $row->title;
			$matches[$row->title] = $row->title;
    }
  }
  drupal_json_output($matches);
  exit();	
}


function ins_cert_autocomlist($string = ''){
  if ($string !='') {
    $result = _get_all_organigation_mapping($string);
    $matches = array();
    foreach($result as $rownid => $rowtitle) {
      //$matches[$row->title.' ('.$row->nid.')'] = $row->title;
			$matches[$rowtitle] = $rowtitle;
    }
  }
  drupal_json_output($matches);
  exit();	
}
 /**
 *  Modal callback
 */
function glue_modal_operator_callback($field_name, $nid, $operator, $id = 0, $js = FALSE) {
  //We need a function to load an argument to use in our form state for a file in the field collection which is not loaded in this context
  module_load_include('pages.inc', 'field_collection');  
  
  //Access checks to make sure the user has access to the field collections
  switch ($opertor) {
    case 'add':
      $result = field_collection_item_add($field_name, 'node', $nid);
      if ($result == MENU_NOT_FOUND || $result == MENU_ACCESS_DENIED) {
        exit();
      }     
      break;
    case 'edit':           
    case 'delete':
      if (!field_collection_item_access($opertor, $id)) {
        exit();
      }
      break;
  }  
  
  //Check if js is enabled, this parameter will be loaded by ctools
  if ($js) {
	//////////////////////////////////
	$fclabel = array('field_automotive_liability'=>'Automotive Liability', 'field_builders_risk'=>'Builders Risk', 'field_commercial_general_liabili'=> 'Commercial General Liability', 'field_excess_liability'=> 'Excess Liability', 'field_garage_liability'=>'Garage Liability', 'field_professional_liability'=>'Professional Liability', 'field_workers_compensation_and_e'=>'Workers Compensation and employers Liability');
	$flabel = $fclabel[$field_name];
	//////////////////////////////////  
    //Include ctools ajax and modal, dont forget to set ajax TRUE
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t($flabel), //'Experiences'
    );
    
    if ($operator == 'add') {
      //Arguments need to be loaded directly onto the build_info args array because ctools_modal_form_wrapper will call drupal_build_form() directly see from API for more
      $arg = glue_field_collection_item_add(str_replace('-', '_', $field_name), 'node', $nid);
      if ($arg == MENU_NOT_FOUND || $arg == MENU_ACCESS_DENIED) {
        exit();
      }
      $form_state['build_info']['args'][] = $arg; 
      //The modal form wrapper is needed to make sure the form will allow validating, you cannot use drupal_get_form directly it wont work.
      $output = ctools_modal_form_wrapper('field_collection_item_form', $form_state);
    }
    else {
      //The id is the collection entity id
      $form_state['build_info']['args'][] = field_collection_item_load($id);
      if ($operator == 'edit') {
        $output = ctools_modal_form_wrapper('field_collection_item_form', $form_state);
      }
      elseif ($operator == 'delete') {
        $output = ctools_modal_form_wrapper('field_collection_item_delete_confirm', $form_state);
      }
      else {
        exit();
      }
    }
        
    //If the form is executed will need to dismiss the form and reload the page
    if ($form_state['executed']) {      
      $commands = array();
      
      //Load the new output
      $node = node_load($nid, NULL, false);       
      //Render the newly saved field collection set       
      //Here is how to render a single field:<a href="http://dominiquedecooman.com/blog/drupal-7-tip-theming-render-only-single-field-your-entities">http://dominiquedecooman.com/blog/drupal-7-tip-theming-render-only-singl...</a>      
	  $field_to_render = field_view_field('node', $node, str_replace('-', '_', $field_name), 'full');     

      // Remove the prefix and suffix, which contain unneeded div's and actions links.
      unset($field_to_render['#prefix']);
      unset($field_to_render['#suffix']);

      $output = render($field_to_render);
      
      //We will replace the fieldcollection with the new output
      $commands[] = ajax_command_html('.field-name-field-cv-experience', $output);
      //close the frame
      $commands[] = ctools_modal_command_dismiss();
	  
	  ///////////////////////////// redirected to node view
      $commands[] = ctools_ajax_command_redirect('node/'.$nid); 
     
      $output = $commands;
    }
    //Render the output
    print ajax_render($output);
    exit();        
  }
  else {
    //No js found lets go to the default page
    return drupal_get_form('field_collection_item_form', field_collection_item_load($id));
  }
}

/**
 * Add a new field-collection item.
 * 
 * We copied this function from the field collection module but instead of returning a form we return the object
 */
function glue_field_collection_item_add($field_name, $entity_type, $entity_id, $revision_id = NULL, $langcode = NULL) {
  $info = entity_get_info();
  if (!isset($info[$entity_type])) {
    return MENU_NOT_FOUND;
  }
  $result = entity_load($entity_type, array($entity_id));

  $entity = reset($result);  

  if (!$entity) {
    return MENU_NOT_FOUND;
  }
  // Ensure the given entity is of a bundle that has an instance of the field.
  list($id, $rev_id, $bundle) = entity_extract_ids($entity_type, $entity);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  if (!$instance) {
    return MENU_NOT_FOUND;
  }

  // Check field cardinality.
  $field = field_info_field($field_name);
  $langcode = LANGUAGE_NONE;
  if (!($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || !isset($entity->{$field_name}[$langcode]) || count($entity->{$field_name}[$langcode]) < $field['cardinality'])) {
    drupal_set_message(t('Too many items.'), 'error');
    return '';
  }

  $title = ($field['cardinality'] == 1) ? $instance['label'] : t('Add new !instance_label', array('!instance_label' => drupal_strtolower($instance['label'])));

  drupal_set_title($title);

  $field_collection_item = entity_create('field_collection_item', array('field_name' => $field_name));
  // Do not link the field-collection item with the host entity at this point,
  // as during the form-workflow we have multiple field-collection item entity
  // instances, which we don't want link all with the host.
  // That way the link is going to be created when the item is saved.
  $field_collection_item->setHostEntity($entity_type, $entity, LANGUAGE_NONE, FALSE);

  // Make sure the current user has access to create a field collection item.
  if (!field_collection_item_access('create', $field_collection_item)) {
    return MENU_ACCESS_DENIED;
  }
  return $field_collection_item;
}

function m6connect_ins_cert_menu_local_tasks_alter(&$data, $router_item, $root_path) {
    global $user;
    //kpr($data);
    //!array_key_exists(3, $user->roles) &&
    /*if ($user->uid != 0 && (arg(0) == 'node' && is_numeric(arg(1)))) {
        $node = menu_get_object();
        if ($node->type == 'insurance_certificates') { //pre($data,1);
            if ($data['tabs'][0]['output'][0]['#link']['path'] == 'node/%/view') {
                //$data['tabs'][0]['output'][0]['#link']['title'] = t('');

                unset($data['tabs'][0]['output'][0]);
            }
            if ($data['tabs'][0]['output'][1]['#link']['path'] == 'node/%/edit') {
                //$data['tabs'][0]['output'][1]['#link']['title'] = t(''); 
                unset($data['tabs'][0]['output'][1]);
            }
        }
    } */
}

function coverage_ctools_popup_style() {
    static $coveragAdded = FALSE;
    if ($coveragAdded == FALSE) {
        $coveragAdded = TRUE;
        ctools_include('modal');
        ctools_include('ajax');
        ctools_modal_add_js();
        $coverage_popup_style = array(
            'coverage-popup-style' => array(
                'modalSize' => array(
                    'type' => 'fixed',
                    'width' => 530,
                    'height' => 'auto',
                ),
                'modalOptions' => array(
                    'opacity' => (float) 0.85,
                    'background-color' => '#000000',
                ),
                'closeText' => '',
                'loadingText' => '',
                'animation' => 'fadeIn',
                'modalTheme' => 'AssignCoveragePopup',
                'animationSpeed' => 'fast',
            ),
        );
        drupal_add_js($coverage_popup_style, 'setting');
        ctools_add_js('m6connect_coverage_modal', 'm6connect_ins_cert');
    }
}

/*
 * get the Insurance certificate's status, has status or not.
 */
function _get_ins_certificate_status($entityId, $termname = '', $isstatusexists = FALSE) {
  $query =db_select('field_data_field_certificate_status', 'cs');
  $query->fields('cs',array('field_certificate_status_tid'));
  $query->condition('cs.entity_id',$entityId,'=');
  if($isstatusexists) {
    $statusexists = $query->execute()->rowCount();
    return $statusexists;	
  } else {
    $result = $query->execute()->fetchAll();
	if ($result && is_array($result) && !empty($result) && count($result) > 0) {
	  foreach($result as $var=>$val) {
        $statustid = $val->field_certificate_status_tid;		  
	  }
	  if(!empty($termname)) {
		$term = taxonomy_term_load($statustid);
		return $term->name;  
	  } else {
	    return $statustid;
	  }
	}
	return;
  }
}

function m6connect_ins_cert_init(){
  drupal_add_js(drupal_get_path('module', 'm6connect_ins_cert') . '/m6connect_ins_cert.js');	
}

function m6connect_ins_cert_node_access($node, $op, $account) { 
  global $user;	
  $type = (is_object($node) && isset($node->type)) ? $node->type : '';	
  $cmpNid = isset($_SESSION['company'])?$_SESSION['company']:'';
  if(empty($type) && in_array($node, array('insurance_certificates', 'contract')) && in_array($op, array('create'))) {
	if (isset($user->roles[3]) || isset($user->roles[6]) || insurance_certificate_create_access_callback($cmpNid)) {	 //pre($cmpNid);pre('tz',1);  
        return NODE_ACCESS_ALLOW;
    } 
    return NODE_ACCESS_DENY;  
  }
  
  if ($type && in_array($type, array('insurance_certificates','contract'))) { 
	$NodeCmpNid = _get_company_nid_by_group_content($node);
	  
	if (is_object($node) && in_array($node->type, array('insurance_certificates','contract')) && in_array($op, array('view'))) {  
	  if (!user_is_logged_in()) {
	    return NODE_ACCESS_DENY;
	  } 
	  if ((isset($user->roles[3]) || isset($user->roles[6]) || $user->uid == $node->uid ) && $cmpNid == $NodeCmpNid) {	  
	    if ($node->status == 1) {
		  return NODE_ACCESS_ALLOW;
		} else if (isset($user->roles[3]) || isset($user->roles[6]) || $user->uid == $node->uid) {
		  return NODE_ACCESS_ALLOW;
		}
	  }
	  if($node->type == 'insurance_certificates') {
	    if (is_insurance_certificate_submited_company($node->nid)) {
	      if ($node->status == 1) {
		    return NODE_ACCESS_ALLOW;
		  }
	    }
	  }
	  return NODE_ACCESS_DENY;
    } else if (is_object($node) && in_array($node->type, array('insurance_certificates','contract')) && in_array($op, array('create','update'))) { //pre($op);pre('dsf',1);
	  
	  if ((isset($user->roles[3]) || isset($user->roles[6]) || $user->uid == $node->uid ) && $cmpNid == $NodeCmpNid && insurance_certificate_create_access_callback($cmpNid)) {	  
        return NODE_ACCESS_ALLOW;
      } 
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

function _is_user_submiiter_receiver($node) {
  global $user;
  if($node->uid == $user->uid) {
    return 'submitter';	  
  } else {
	$entityId = $node->nid;  
	//field_data_field_submit_to_company_user
	$query =db_select('field_data_field_submit_to_company_user', 'cs');
    $query->fields('cs',array('field_submit_to_company_user_uid'));
    $query->condition('cs.entity_id',$entityId,'='); 
	$result = $query->execute()->fetchAll();
	if ($result && is_array($result) && !empty($result) && count($result) > 0) {
	  foreach($result as $var=>$val) {
        $submituid = $val->field_submit_to_company_user_uid;
		if($submituid == $user->uid) {
		  return 'receiver';	
		} else {
		  return 'none';  
		}
	  }
	} else {
	  return 'none';	
	}
  }
}

function _get_term_id_by_term_name($tname){
  $terms = taxonomy_get_term_by_name($tname);
  if(!empty($terms)){ 
    foreach($terms as $tid => $term) {
	  $termid = $term->tid;
    }
	return $termid; 
  }
  return;  	
}

/*
 * Assign group(Company) to insurance certificate node
 */
function m6connect_ins_cert_node_presave($node) { //pre($node,1);
  global $user, $company;
  //if (in_array($node->type, array('insurance_certificates'))) {
  if (isset($node->is_new) && $node->is_new == 1 && in_array($node->type, array('insurance_certificates'))) {
    if (empty($node->og_group_ref['und'][0]['target_id'])) {
      if (is_object($company) && isset($company->nid)) {
        $node->og_group_ref['und'][0]['target_id'] = $company->nid;
      }
    }
  } else if(in_array($node->type, array('insurance_certificates'))) {
	$orig_og = $node->original->og_group_ref['und'][0]['target_id'];  
	$node->og_group_ref['und'][0]['target_id'] = $orig_og;  
  }
	//if($node->type=='insurance_certificates'){ drup_msg('node_presave');drup_msg($node);}
}

/**
 *  Check Current User'commany submitted For Insurance certificate.
 */
function is_insurance_certificate_submited_company($icNid, $type = 'insurance_certificates') {
  global $user;
  $companyNid = $_SESSION['company'];	
  if ($companyNid && is_numeric($companyNid)) {
    $query = db_select('node', 'n');
	$query->leftJoin('field_data_field_submit_to', 'st', 'st.entity_id = n.nid');
	$query->condition('st.field_submit_to_target_id', $companyNid, '=');
	$query->fields('n', array('nid'));
    $query->condition('n.type', $type, '=');
    $query->condition('n.nid', $icNid, '=');
	$result = $query->execute()->fetchCol();
    if ($result && is_array($result) && !empty($result) && count($result) > 0) {
      return TRUE;
    }
  }
  return false;
}


/**
 *  Get Insurance certificate's submit for CompanyNid/UserId.
 */
 
function insurance_certificate_submited_for($icNid, $for = 'company') {
  global $user;
  $companyNid = $_SESSION['company'];
  $type = 'insurance_certificates';	
  $output = '';
  //if ($companyNid && is_numeric($companyNid)) {
    $query = db_select('node', 'n');
	if($for == 'company') {
	  $query->leftJoin('field_data_field_submit_to', 'st', 'st.entity_id = n.nid');
	  $query->fields('st', array('field_submit_to_target_id'));
	}
	if($for == 'user') {
	  $query->leftJoin('field_data_field_submit_to_company_user', 'cu', 'cu.entity_id = n.nid');
	  $query->fields('cu', array('field_submit_to_company_user_uid'));
	}
	//$query->condition('st.field_submit_to_target_id', $companyNid, '=');
	$query->fields('n', array('nid'));
    $query->condition('n.type', $type, '=');
    $query->condition('n.nid', $icNid, '=');
	$result = $query->execute()->fetchAll();
    if ($result && is_array($result) && !empty($result) && count($result) > 0) {
	  foreach($result as $var=>$val){
        if($for == 'company') {
		  $output = $val->field_submit_to_target_id;
		  return $output;	
		}
		if($for == 'user') {
		  $output = $val->field_submit_to_company_user_uid;
		  return $output;	
		}
		
	  }
    }
  //}
  return $output;
}


/********** Start Insurance Certificate Feedback Tab Content Callback  **********/

function insurance_certificate_feedback_content(){
   global $user;	
   $elements = array();
   
   $InsCertNode = menu_get_object('node',1);
   
   //drupal_add_js(drupal_get_path('module', 'm6connect_routing').'/m6connect_routing_invite_form.js');
   drupal_add_js(drupal_get_path('module', 'm6connect_ins_cert').'/m6connect_ins_cert.js');
   drupal_add_library('system', 'ui.dialog');
   //drupal_add_js(array('m6connect_routing' => array('request_approval_reminder_dialog' => 1,'change_approver_status_dialog'=>1)), 'setting');
   drupal_add_js(array('m6connect_ins_cert' => array('insurance_reminder_dialog' => 1,'change_insurance_status_dialog'=>1)), 'setting');
   
   $header = array('Organization', 'M6Notes', 'Approval Needed By Date', 'Invitee', 'Phone#', 'Approved', 'Rejected', 'Not Sure Yet');
   
   $header = array(
     //array('data'=>'Purpose','class'=> array('text-center')),
	 //array('data'=>'Order','class'=> array('text-center')),
     array('data'=>'Company','class'=> array('text-center')),
	 //array('data'=>'M6Notes','class'=> array('text-center')),
	 //array('data'=>'Reminder','class'=> array('text-center')),
	 array('data'=>'Name','class'=> array('text-center')),
	 array('data'=>'Phone#','class'=> array('text-center')),
	 array('data'=>'Approved','class'=> array('text-center')),
	 array('data'=>'Rejected','class'=> array('text-center')),
	 array('data'=>'Pending','class'=> array('text-center')),
	 
	 array('data'=>'Insurance Company','class'=> array('text-center')),
	 array('data'=>'Agent','class'=> array('text-center')),
	 array('data'=>'Email','class'=> array('text-center')),
	 array('data'=>'Phone No.','class'=> array('text-center')),
	 
   );
   $rows =array();
   $entity_id = arg(1);
   //$approvalTypes = $approvalTypes2 = get_approval_type_listing_options($entity_id);
   //$approvalTypes2[0] = 'Unassigned';
   //$info = get_approval_feedback_table($entity_id,$approvalTypes);
   $rows = check_insurance_certificate_feedback($entity_id);
   $elements['start'] = array(
        '#markup' => '<div class="cust-bidder-fb-content clearfix"><div id="cust-bidder-fb-lists">'
   );

   $elements['bid_package_0']['package-content'] = array(
	 '#markup' => theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Approval Feedback yet','attributes'=>array('class'=>array('m6connect-custom-table','table',/*'table-hover',*/'table-bordered','approval-feedback-table')))),
	 '#prefix' => '<div class="rfp-bidder-fb-section approval-fb-main-section" id="rfp-bidder-fb-section_0">',
	 '#suffix' => '</div>',
   );  
   $elements['end'] = array(
     '#markup' => '</div></div>'
   );
   $m6notes = check_insurance_certificate_feedback_new($entity_id); //pre($m6notes,1);
   
   $newmsglist = '';//get_insurance_feedback_message_common($entity_id,0,0);
   //////////////////////////////
   /*$NodeCmpNid = _get_company_nid_by_group_content($insuranceNode);
  $submitter_approver = array($insuranceNode->uid => $NodeCmpNid);
  
  $submit_to_comp = insurance_certificate_submited_for($entity_id);
  $submit_to_user = insurance_certificate_submited_for($entity_id,'user');
  //pre($submitter_approver);
  if(!empty($submit_to_comp) && !empty($submit_to_user)){
    $submitter_approver[$submit_to_user] = $submit_to_comp;  	  
  }
  //pre($submitter_approver);
  foreach($submitter_approver as $uid => $comp_id) {
  }*/
   //////////////////////////////
   $dataarr = array('node_nid'=>$entity_id,'node_uid'=>$user->uid,'action'=>1);
   $dataObj = (object) $dataarr; 
   $newmsgform = drupal_render(drupal_get_form('common_insurance_feedback_message_form',$dataObj,$user->uid));
   //$newmsgform ='';
   if($user->uid == $InsCertNode->uid) {
   $elements['insurance_cert'] = array(
     //'#markup' => '<div>'.implode('',$var1).'</div>'
	 '#markup' => '<div class="appr-feedback-notes-block row">
	                 <div class="ins-feed-notes-title col-sm-12"><span class="ins-notes-title">M6 Notes</span></div>
					 
					 <div class="ins-feed-submitter col-sm-6 padding-right-0">
                       <div class="ins-feed-sub-title"><span class="sub-title">Approver</span></div>
                     </div>
                     <div class="ins-feed-approver col-sm-6 padding-left-0">
                       <div class="ins-feed-sub-title"><span class="sub-title">Submitter</span></div>
                     </div>
					 
					 <div class="col-sm-12">
					   <div class="ins-feed-sub-rec-outer-blk">
					    						 
					     <div class="ins-feed-submitter col-sm-6 padding-0">
					       <div class="ins-sub-detail">
					         <div class="ins-feed-sub-details">'.$m6notes[1]['details'].'</div>
					         
					       </div>
					       <div class="ins-feed-reminder" style="display:none">'.$m6notes[1]['reminder'].'</div>
					     </div> 
					 
					     <div class="ins-feed-approver col-sm-6 padding-0">
					       <div class="ins-appr-detail">
					         <div class="ins-feed-sub-details">'.$m6notes[0]['details'].'</div>
					         
					       </div>
					       <div class="ins-feed-reminder" style="display:none">'.$m6notes[0]['reminder'].'</div>
					     </div> 
						 
					   </div>
					 </div>
					 
					 <div class="col-sm-12">'.$newmsgform.'</div>
					
				   </div>'
   );	   
   } else {
   $elements['insurance_cert'] = array(
     //'#markup' => '<div>'.implode('',$var1).'</div>'
	 '#markup' => '<div class="appr-feedback-notes-block row">
	                 <div class="ins-feed-notes-title col-sm-12"><span class="ins-notes-title">M6 Notes</span></div>
					 
					 <div class="ins-feed-submitter col-sm-6 padding-right-0">
                       <div class="ins-feed-sub-title"><span class="sub-title">Submitter</span></div>
                     </div>
                     <div class="ins-feed-approver col-sm-6 padding-left-0">
                       <div class="ins-feed-sub-title"><span class="sub-title">Approver</span></div>
                     </div>
					 
					 <div class="col-sm-12">
					   <div class="ins-feed-sub-rec-outer-blk">
					    						 
					     <div class="ins-feed-submitter col-sm-6 padding-0">
					       <div class="ins-sub-detail">
					         <div class="ins-feed-sub-details">'.$m6notes[0]['details'].'</div>
					         
					       </div>
					       <div class="ins-feed-reminder" style="display:none">'.$m6notes[0]['reminder'].'</div>
					     </div> 
					 
					     <div class="ins-feed-approver col-sm-6 padding-0">
					       <div class="ins-appr-detail">
					         <div class="ins-feed-sub-details">'.$m6notes[1]['details'].'</div>
					         
					       </div>
					       <div class="ins-feed-reminder" style="display:none">'.$m6notes[0]['reminder'].'</div>
					     </div> 
						 
					   </div>
					 </div>
					 
					 <div class="col-sm-12">'.$newmsgform.'</div>
					
				   </div>'
   );
   }
   
   $elements['request_to_intent_dialog'] = array(
     '#markup' => '',
     '#prefix' => '<div id="insurance-reminder-dialog">',
     '#suffix' => '</div>',
    ); 
	
	$elements['change_approver_status_dialog'] = array(
     '#markup' => '',
     '#prefix' => '<div id="change-insurance-status-dialog">',
     '#suffix' => '</div>',
    );
   return $elements; 
}


function check_insurance_certificate_feedback($entity_id){
  global $user, $company;
  $display_to_all = 0;
  $currentUserComapnyDetail= array();
  $insuranceNode = node_load($entity_id);
 
  $rows= array();
  $NodeCmpNid = _get_company_nid_by_group_content($insuranceNode);
  $submitter_approver = array($insuranceNode->uid => $NodeCmpNid);
  
  $submit_to_comp = insurance_certificate_submited_for($entity_id);
  $submit_to_user = insurance_certificate_submited_for($entity_id,'user');
  //pre($submitter_approver);
  if(!empty($submit_to_comp) && !empty($submit_to_user)){
    $submitter_approver[$submit_to_user] = $submit_to_comp;  	  
  }
  //pre($submitter_approver);
  foreach($submitter_approver as $uid => $comp_id) {
	$dataarr = array('node_nid'=>$entity_id,'node_uid'=>$uid,'action'=>1);
    $dataObj = (object) $dataarr;  
	//Company Detail 
	$masterCompanyDetails = array(); 
    $CompanyDetail = get_ins_cert_company_details_by_nid($comp_id,$masterCompanyDetails, TRUE);	  
	if(!$CompanyDetail){
	  $CompanyDetail = array('nid' => '', 'title' => '', 'image' => '');
	}
	
	
	$companyTab = $CompanyDetail['title'] . '<br/>' . $CompanyDetail['image'];
	$m6notesTab =drupal_render(drupal_get_form('insurance_feedback_message_form',$dataObj,$uid));
	$remiderButton = get_insurance_request_approval_reminder_button($dataObj, $uid);
	//$m6notesTab =drupal_render(drupal_get_form('insurance_feedback_message_form',$dataObj,$uid)).$remiderButton;
	
	$ApproverStatus =1;
	$masterUserDetail = get_user_details_by_uids(array($uid));
	$UserInfoDetails =  get_insurance_user_details_feedback(array($uid),$masterUserDetail,$dataObj,$ApproverStatus);
	$ApproverSubmitter = '';
	if($uid == $insuranceNode->uid) {
	  $ApproverSubmitter = '<div class="msg-feedback-sub-appr">Submitter</div>';
	} else if($uid == $submit_to_user) {
	  $ApproverSubmitter = '<div class="msg-feedback-sub-appr">Approver</div>';	
	}
	$inviteeTab = $UserInfoDetails['userDetailsTab'].$ApproverSubmitter;
	$phoneTab = $UserInfoDetails['userphoneTab'];
	$acceptApprovalTab = $UserInfoDetails['acceptApprovalTab'];
	$rejectApprovalTab = $UserInfoDetails['rejectApprovalTab'];
	$reviewApprovalTab = $UserInfoDetails['reviewApprovalTab'];
	
	$viewFieldCollectionID = $uid;
	
	
    $viewTdClassMapping = array(0=>' bg-danger',1=>' bg-success',2=>' bg-warning');
    $viewTdMapping = array(
	  0=>array('selector'=>'approve','class'=>''),
	  1=>array('selector'=>'reject','class'=>''),
	  2=>array('selector'=>'notsure','class'=>''),
    );
	if(($user->uid == $uid && $user->uid != $insuranceNode->uid) || ($user->uid != $uid && $user->uid === $insuranceNode->uid)) {
	  $starr = array('Rejected','Approved','Pending');
	  $st = _get_ins_certificate_status($entity_id,'term');
	  if(in_array($st, $starr)) {
	    $key = array_search($st, $starr);  
	    $viewTdMapping[$key]['class'] = $viewTdClassMapping[$key];	
	  }
	}
	if($uid == $insuranceNode->uid) {
	  $IncCompanyTab = (isset($insuranceNode->field_insurance_company_name['und']) && isset($insuranceNode->field_insurance_company_name['und'][0]['value']) && !empty($insuranceNode->field_insurance_company_name['und'][0]['value']))?$insuranceNode->field_insurance_company_name['und'][0]['value']:'';
	  $IncAgentTab = (isset($insuranceNode->field_insurance_agent_s_name['und']) && isset($insuranceNode->field_insurance_agent_s_name['und'][0]['value']) && !empty($insuranceNode->field_insurance_agent_s_name['und'][0]['value']))?$insuranceNode->field_insurance_agent_s_name['und'][0]['value']:'';
	  $IncAgentmailTab = (isset($insuranceNode->field_email['und']) && isset($insuranceNode->field_email['und'][0]['email']) && !empty($insuranceNode->field_email['und'][0]['email']))?$insuranceNode->field_email['und'][0]['email']:'';
	  $IncAgentphoneTab = (isset($insuranceNode->field_phone['und']) && isset($insuranceNode->field_phone['und'][0]['value']) && !empty($insuranceNode->field_phone['und'][0]['value']))?$insuranceNode->field_phone['und'][0]['value']:'';
	   $IncAgentphonevaleTab = get_international_formatPhoneNumber($IncAgentphoneTab);
	} else {
	  $IncCompanyTab = $IncAgentTab = $IncAgentmailTab = $IncAgentphoneTab = $IncAgentphonevaleTab = 'N/A';
	}
    $rows[] = array(
	    //array('data' => '<div class="text-center">'.$purposeTab.'</div>', 'class' => array('views-field', 'views-field-info')),
		//array('data' => $orderNo, 'class' => array('views-field', 'views-field-php-1')),
	    array('data' => $companyTab, 'class' => array('views-field', 'views-field-php')),
	   // array('data' => $m6notesTab, 'class' => array('views-field', 'views-field-php-2')),
	    //array('data' => $remiderButton, 'class' => array('views-field', 'views-field-php-3','text-center')),
	    array('data' => $inviteeTab, 'class' => array('views-field', 'views-field-php-8')),
	    array('data' => $phoneTab, 'class' => array('views-field', 'views-field-php-4')),
	    array('data' => $acceptApprovalTab, 'class' => array('views-field', 'views-field-php-5', 'text-center','view-accept-field-'.$viewFieldCollectionID.'-td'.$viewTdMapping[1]['class'])),
	    array('data' => $rejectApprovalTab, 'class' => array('views-field', 'views-field-php-6', 'text-center', 'view-reject-field-'.$viewFieldCollectionID.'-td'.$viewTdMapping[0]['class'])),
	    array('data' => $reviewApprovalTab, 'class' => array('views-field', 'views-field-php-7', 'text-center', 'view-notsure-field-'.$viewFieldCollectionID.'-td'.$viewTdMapping[2]['class'])),
		
		array('data' => $IncCompanyTab, 'class' => array('views-field', 'views-field-php1')),
		array('data' => $IncAgentTab, 'class' => array('views-field', 'views-field-php2')),
		
		array('data' => $IncAgentmailTab , 'class' => array('views-field', 'views-field-php10')),
		array('data' => $IncAgentphonevaleTab, 'class' => array('views-field', 'views-field-php11')),
      );
  }
  
  return $rows;
}


function insurance_feedback_message_form($form, $form_state,$dataObj,$managerUids) {
    global $user;
	////$fieldCollectionId = $dataObj->field_invited_approvers_value;
	$fieldCollectionId = $managerUids;
	//$approvalTypeid = $dataObj->approval_type_id;
	$approvalTypeid = 0;
	$nodeNid = $dataObj->node_nid;
	$nodeUid = $dataObj->node_uid; 
	////$nodeRoutingStatus=$dataObj->field_routing_status_value;
	$nodeRoutingStatus=1;
    $form = array();
    $form['#attributes'] = array('class' => array('routing_feedback_message_form','rfp_bidder_feedback_message_form'), 'id' => 'routing_feedback_message_form_' . $fieldCollectionId.'_'.$approvalTypeid);

    $form['message-list'] = array(
        '#markup' => get_insurance_feedback_message($nodeNid,$fieldCollectionId,$approvalTypeid),
        '#prefix' => '<div id="approval_feedback_message_container_' . $fieldCollectionId . '_' . $approvalTypeid . '">',
        '#suffix' => '</div>',
    );
	////if($user->uid == $nodeUid || in_array($user->uid,$managerUids) && $nodeRoutingStatus=='in_route'){
	if($user->uid == $nodeUid || in_array($user->uid,$managerUids)){	
	  $form['message'] = array(
		  '#type' => 'textfield',
		  '#title' => 'Message',
		  '#title_display' => 'invisible',                                 //here
		  '#attributes' => array('placeholder' => 'Please provide comments', 'id' => 'approval_feedback_message_' . $fieldCollectionId . '_' . $approvalTypeid, 'class' => array('approval_feedback_message_msg','bidder_feedback_message_msg', 'onkeypress' => array('if(event.keyCode==13){this.form.submit();}'))),
		  '#prefix' => '<div>',
		  '#suffix' => '</div>',
	  );
	  $form['user_uid'] = array(
		  '#type' => 'value',
		  '#value' => $user->uid,
	  );
	  $form['node_nid']= array(
		'#type' => 'value',
		'#value'=> $nodeNid,
	  );
	  $form['fc_item_id']= array(
		'#type' => 'value',
		'#value'=> $fieldCollectionId,
	  );
	  $form['approval_type_id']= array(
		'#type' => 'value',
		'#value'=> $approvalTypeid,
	  );
	  $form['add'] = array(
		  '#type' => 'submit',
		  '#value' => 'Add',
		  '#attributes' => array('class' => array('add_new_approval_feedback_message','add_new_bidder_feedback_message')),
		  '#executes_submit_callback' => FALSE,
		  '#limit_validation_errors' => array(),
		  '#href' => '',
		  '#ajax' => array(
			  'callback' => 'add_new_insurance_feedback_message',
			  'effect' => 'fade',
			  'event' => 'click',
			  'progress' => array('type' => 'none'),
		  ),
		  '#prefix' => '<div id="bidder-feedback-message-button" class="approval_feedback-message-button bidder-feedback-message-button">',
		  '#suffix' => '</div>',
	  );
	}
    return $form;
}

function add_new_insurance_feedback_message(&$form,&$form_state){
  $commands = array();
  $output = '';
  $values = $form_state['values'];
  $message = trim($values['message']);
  if (!empty($message) && is_numeric($values['node_nid']) && is_numeric($values['fc_item_id'])) {
	/*$approval_message= array(
	 'node_nid' => $values['node_nid'],
	 'fc_item_id' => $values['fc_item_id'],
	 'user_uid' => $values['user_uid'],
	 'approval_type_id' => $values['approval_type_id'],
	 'message' => $message,
	 'timestamp' => time(),
	);
	$id = db_insert('m6connect_insurance_feedback_message')->fields($approval_message)->execute(); */
	
	//$output = get_insurance_feedback_message($values['node_nid'],$values['fc_item_id'],$values['approval_type_id']); //new design
	$output = get_insurance_feedback_message_common($values['node_nid'],$values['fc_item_id'],$values['approval_type_id']);
	$commands[] = ajax_command_invoke('#approval_feedback_message_'.$values['fc_item_id'].'_'.$values['approval_type_id'],'val', array(''));
    $commands[] = ajax_command_html('#approval_feedback_message_container_'.$values['fc_item_id']. '_' .$values['approval_type_id'], $output);
	$commands[] = array("command" => 'insuranceOfNoticeDailog', 'message'=> $message,'fc_item_id' => $values['fc_item_id'],'node_nid' => $values['node_nid']);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function get_insurance_feedback_message($nodeNid,$fieldCollectionId,$approvalTypeid){
  global $user;
  ctools_include('ajax');
  ctools_include('modal');
  $output = '<div class="bidder-feedback-msg-list">';
  if (db_table_exists('m6connect_insurance_feedback_message')) {
	  $query = db_select('m6connect_insurance_feedback_message', 'rfm');
	  $query->leftjoin('node','n','n.nid=rfm.node_nid');
	  $query->join('realname', 'r', 'r.uid=rfm.user_uid');
	  $query->fields('rfm', array('id', 'message','message_prefix', 'timestamp','user_uid'));
	  $query->fields('n', array('uid'));
	  $query->fields('r', array('realname'));
	  $query->condition('rfm.node_nid', $nodeNid, '=');
	  //$query->condition('rfm.fc_item_id', $fieldCollectionId, '=');
	  $query->condition('rfm.user_uid', $fieldCollectionId, '=');
	  $query->condition('rfm.approval_type_id', $approvalTypeid, '=');
	  $query->orderBy('rfm.timestamp', 'ASC');
	  //$isNodeCompanyUser = in_array($user->uid, _get_current_company_users($node->uid));
	  $result = $query->execute()->fetchAll();
	  if ($result && !empty($result)) {
		foreach ($result as $delta => $msgObj) {
		  $messagePrifix =$msgObj->message_prefix;
		  if(!empty($messagePrifix)){
			$messagePrifix = ' '.$messagePrifix;  
		  }
		  $output .= '<div class="bidder-feedback-msg routing-feedback-msg-' . $msgObj->id . ' clearfix">';
		  $output .= '<div class="bidder-feedback-msg-attr pull-left">';
		  $output .= '<span class="bidder-feedback-msg-time"><strong>' . date('m/d/Y h:i A', $msgObj->timestamp) . ' (' . $msgObj->realname . ')'.$messagePrifix.'</strong> - </span>';
		  $output .= '<span class="bidder-feedback-msg-msg">' . $msgObj->message . '</span>';
		  $output .= '</div>';
          //if($user->uid == $msgObj->uid || $user->uid == $msgObj->user_uid){
		  if($user->uid == $msgObj->user_uid){	  
		    $output .= '<div class="bidder-feedback-msg-delete pull-right">';
		    $output .= l('<i class="fa fa-times-circle"></i>', 'remove-insurance-feedback-message/' . $msgObj->id . '/nojs', array('html' => TRUE, 'attributes' => array('class' => array('bidder-feedback-msg-delete-link', 'use-ajax'))));
		    $output .= '</div>';
		  }
		  $output .= '</div>';
		}
	  }
  }
  $output .= '</div>';
  return $output;	
}



function get_insurance_user_details_feedback($managerUids,$masterUserDetail,$dataObj,$ApproverStatus){ //pre($dataObj);
  global $user;
  //$collectionItemId = $dataObj->field_invited_approvers_value;
  foreach($managerUids as $delta1 => $uid1){
  $collectionItemId = $uid1;
  }
  //$approval_type_id =  $dataObj->approval_type_id;
  $approval_type_id =  0;
  $userDetails = $userphone = $acceptApproval = $rejectApproval = $reviewApproval = array();
  if(!empty($managerUids)){
	foreach($managerUids as $delta => $uid){
	  //$userObj = $masterUserDetail[$uid];
	  
	  //$userObject = user_load($uid);
	  //$userObj = get_user_details_by_uids(array($uid));
	  $userObj = $masterUserDetail[$uid];
	  
	  $userApprovalStatus = array(0=>'',1=>'',2=>'');
	  $optionSelected ='';
	  /*if(isset($ApproverStatus[$collectionItemId][$approval_type_id][$userObj['uid']])){
		$userApprovalStatus[$ApproverStatus[$collectionItemId][$approval_type_id][$userObj['uid']]] = 'checked="checked"';
		$optionSelected = $ApproverStatus[$collectionItemId][$approval_type_id][$userObj['uid']];
	  }*/
	  $radioDisabled = 'disabled="disabled"';
	  $radioClass= 'approval_feedback_radio_not';
	  $acceptedFormTab='';
	  $nid = $dataObj->node_nid;
	  $icnode = node_load($nid);
	  $isstatus = _get_ins_certificate_status($nid, '', TRUE);
	  $ICstatus = _get_ins_certificate_status($nid, 'term');
	  if($isstatus && in_array($ICstatus,array('Submitted','Approved','Rejected','Pending'))) {
		  //pre($user->uid); pre($uid);pre($icnode->uid);
		if($user->uid == $uid && $user->uid != $icnode->uid) {
		  $acceptedFormTab = drupal_render(drupal_get_form('insurance_accepted_rejected_radio_form',$dataObj));	
		  $radioClass= 'approval_feedback_radio';
		  $radioDisabled=''; 
		}
		if($ICstatus == 'Approved') {
		  $userApprovalStatus[1] =  'checked="checked"';
		}
		if($ICstatus == 'Rejected') {
		  $userApprovalStatus[0] =  'checked="checked"';  
		}
		if($ICstatus == 'Pending') {
		  $userApprovalStatus[2] =  'checked="checked"';  
		}
	  }
	  
	  /*if($userObj['uid'] == $user->uid && $dataObj->field_routing_status_value=='in_route' && $dataObj->is_approvar_notified==1){
	    $acceptedFormTab = drupal_render(drupal_get_form('routing_accepted_rejected_radio_form',$dataObj));
		$radioClass= 'approval_feedback_radio';
		$radioDisabled='';	
	  }*/
	  if(!empty($userObj['phone'])){
	  $phoneNumberins = get_international_formatPhoneNumber($userObj['phone']);
	  }
	  $userDetails[] = '<div class="bidder-fb-invitee-name">'.$userObj['name'].'</div><div class="bidder-fb-invitee-email bidder_feedback_blank">' . $userObj['mail'] . '</div>';
	  $userphone[] = '<div class="bidder_feedback_phone_section"><div class="bidder_feedback_phone">' . $phoneNumberins. '</div><div class="bidder_feedback_blank">&nbsp;</div></div>';
	  
	  //if($dataObj->action !='N/O'){
	  //if(!($uid == $icnode->uid)) {	
	  if(($uid  == $user->uid && $user->uid != $icnode->uid) || ($uid  != $user->uid && $user->uid == $icnode->uid)) {  
	  
	    $acceptApproval[] = ' <div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox"><input type="radio" '.$radioDisabled.' '.$userApprovalStatus[1].' data-id="routing_acceptance_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'"  class="'.$radioClass.'" data-selected="'.$optionSelected.'" name="approval_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'" value="1" class="form-radio"><label><span><span></span></span></label></div> <div class="bidder_feedback_blank">&nbsp;</div></div>';
	  
        $rejectApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox"><input type="radio" '.$radioDisabled.' '.$userApprovalStatus[0].' data-id="routing_acceptance_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'" class="'.$radioClass.'" data-selected="'.$optionSelected.'" name="approval_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'" value="0" class="form-radio"><label><span><span></span></span></label></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
	  
        $reviewApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox"><input type="radio" '.$radioDisabled.' '.$userApprovalStatus[2].' data-id="routing_acceptance_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'" class="'.$radioClass.'" data-selected="'.$optionSelected.'" name="approval_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'" value="2" class="form-radio"><label><span><span></span></span></label></div><div class="bidder_feedback_blank">&nbsp;</div></div>'.$acceptedFormTab;
	  }else{
		$acceptApproval[] = ' <div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox">N/A</div> <div class="bidder_feedback_blank">&nbsp;</div></div>'; 
		$rejectApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox">N/A</div><div class="bidder_feedback_blank">&nbsp;</div></div>';
        $reviewApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox">N/A</div><div class="bidder_feedback_blank">&nbsp;</div></div>'.$acceptedFormTab; 
	  }
	  
	}
  }
  
  return array(
   'userDetailsTab'=> '<div class="bidder-fb-invitee-section">'.implode('</div><div class="bidder-fb-invitee-section">',$userDetails).'</div>',
   'userphoneTab' => implode('', $userphone),
   'acceptApprovalTab' => implode('', $acceptApproval),
   'rejectApprovalTab' => implode('', $rejectApproval),
   'reviewApprovalTab' => implode('', $reviewApproval),
  );
}

function get_insurance_request_approval_reminder_button($dataObj,$uid){
  global $user,$company;
  ctools_include('ajax');
  ctools_include('modal');
  $output ='';
  $nodeNid= $dataObj->node_nid;;
  //$fieldCollectionId = $dataObj->field_invited_approvers_value;
  $fieldCollectionId = $uid;
  $notificationCount;
  $nodeUid = $dataObj->node_uid;
  //$notificationCount = $dataObj->field_approval_reminder_count_value;
  $notificationCount = _get_reminder_count($nodeNid, $uid);
  //$InsCertManagerRole = user_role_load_by_name('Insurance Certificate Manager');
 // $InsCertManagerRoleId = $InsCertManagerRole->rid;
  $CompanyRoles = og_get_user_roles('node', $company->nid, $user->uid);
  $isInsCertManager = (in_array('Insurance Certificate Manager', $CompanyRoles))?1:0;
  if($user->uid == $nodeUid){
	$notificationCount = ($notificationCount)?$notificationCount:'';
	$inputButtonStyle = ($notificationCount)?'style="background:#419641;"':'';
	$spanNotificationStyle = ($notificationCount)?' notification-count':'';
	$output= '<div class="request-bid-intent-link-section request-approval-reminder-link-section">' . l('<input type="button" value="Send Reminder" '.$inputButtonStyle.' class="form-submit request-approval-reminder-link-button request-approval-reminder-link-button-'.$fieldCollectionId.'" /><span class="request-bid-intent-link-count'.$spanNotificationStyle.'">'.$notificationCount.'</span>', 'javascript:void(0);', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('request-approval-reminder-link','request-approval-reminder-link-'.$fieldCollectionId), 'data-fc' => $fieldCollectionId, 'data-routing' => $nodeNid))) . '</div>';
  } else if(isset($user->roles[3]) || isset($user->roles[6]) || $isInsCertManager){
	$notificationCount = '';
	$inputButtonStyle = 'style="background:#808080;"';
	$spanNotificationStyle = ($notificationCount)?' notification-count':'';
	$output= '<div class="request-bid-intent-link-section request-approval-reminder-link-section">' . l('<input type="button" disabled="disabled" value="Send Reminder" '.$inputButtonStyle.' class="form-submit request-approval-reminder-link-button request-approval-reminder-link-button-'.$fieldCollectionId.'" /><span class="request-bid-intent-link-count'.$spanNotificationStyle.'">'.$notificationCount.'</span>', 'javascript:void(0);', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('request-approval-reminder-linkTTT','request-approval-reminder-link-'.$fieldCollectionId), 'data-fc' => $fieldCollectionId, 'data-routing' => $nodeNid))) . '</div>';  
  }
  return $output;
}

function remove_insurance_feedback_message_callback($messageId, $ajax = NULL){
  ctools_include('ajax');
    $commands = array();
    if (db_table_exists('m6connect_insurance_feedback_message') && is_numeric($messageId)) {
        db_delete('m6connect_insurance_feedback_message')->condition('id', $messageId, '=')->execute();
        $commands[] = ajax_command_remove('.routing-feedback-msg-' . $messageId);
    }
    print ajax_render($commands);
    exit;	
}

function get_insurance_reminder_form_callback($insuranceNode, $fcitemID) {
    $form = drupal_get_form('insurance_reminder_dialog_form', $insuranceNode->nid, $fcitemID);
    $output = drupal_render($form);
    $json = array('html' => $output, 'data' => $form);
    drupal_json_output($json);
    drupal_exit();
}

function insurance_reminder_dialog_form($form, &$form_state, $nodeNid, $fcitemId) {
    $form['#attributes'] = array('class' => array('request_approval_reminder_dialog_form'));
	///////////////////////////////////////////////////
	global $user;
	$insuranceNode = node_load($nodeNid);
    $rows= array();
    $NodeCmpNid = _get_company_nid_by_group_content($insuranceNode);
    $submitter_approver = array($insuranceNode->uid => $NodeCmpNid);
  
    $submit_to_comp = insurance_certificate_submited_for($nodeNid);
    $submit_to_user = insurance_certificate_submited_for($nodeNid,'user');
	if($user->uid == $insuranceNode->uid) {
	  $receiving_company = node_load($submit_to_comp);
	  $receiving_company_name = $receiving_company->title; 
	  //$receiving_to = user_load($submit_to_user);
	  $receiving_to = get_user_details_by_uids(array($submit_to_user)); //pre
	  $receiving_to_name = $receiving_to[$submit_to_user]['name'];
	} else if($user->uid == $submit_to_user) {
	  $receiving_company = node_load($NodeCmpNid);
	  $receiving_company_name = $receiving_company->title;	
	  $receiving_to_user = $insuranceNode->uid;
	  $receiving_to = get_user_details_by_uids(array($receiving_to_user)); //pre
	  $receiving_to_name = $receiving_to[$receiving_to_user]['name'];
	}
	if(!empty($receiving_to_name)){
	  $sentTocCmp = $receiving_company_name.', '.$receiving_to_name;
	} else {
	   $sentTocCmp = $receiving_company_name;	
	}
	///////////////////////////////////////////////////
    $form['markup'] = array(
        //'#markup' => '<div class="text-center"><strong>Would you like to send an Email Reminder? If so, please add a special note that will be included in email body.<span class="data-fc-item-id" style="display:none;">' . $fcitemId . '</span><span class="data-routing" style="display:none;">' . $nodeNid . '</span></strong></div>'
		'#markup' => '<div class="text-center"><strong>This message will be sent to '.$sentTocCmp.'.  Would you like to post this message now?<span class="data-fc-item-id" style="display:none;">' . $fcitemId . '</span><span class="data-routing" style="display:none;">' . $nodeNid . '</span></strong></div>'
    
    );
	$message = (isset($_REQUEST['message']) && !empty($_REQUEST['message']))?$_REQUEST['message']:'';
    $form['message'] = array(
        '#title' => 'Message',
        '#type' => 'textarea',
        '#rows' => 3,
        '#required' => TRUE,
        '#prefix' => '<div class="request-approval-reminder-message">',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('request-approval-reminder-message-text')),
		'#default_value' => $message,
    );

    $form['node-nid'] = array(
        '#type' => 'value',
        '#value' => $nodeNid,
    );
    $form['fc-item-id'] = array(
        '#type' => 'value',
        '#value' => $fcitemId,
    );
    return $form;
}

function insurance_reminder_callback($node,$fcitemId){ 
  global $base_url,$base_path,$user;
  $comment_box_data = array('selector'=>'','html'=>'');
  $values = '';
  $clientMessage = '';
  if(isset($_REQUEST['values']) && !empty($_REQUEST['values'])){
    parse_str($_REQUEST['values'], $values); 
	$clientMessage = 'Special Message: '.$values['message'];
  }
  $reminderCount=0;
  
  $reminderCount = _get_reminder_count($node->nid, $fcitemId);
 
	
	///////////////////////////////////////////////////////
	
	
	//$insuranceNode = node_load($node);
    $rows= array();
    $NodeCmpNid = _get_company_nid_by_group_content($node);
    $submitter_approver = array($node->uid => $NodeCmpNid);
    $nodeNid = $node->nid;
    $submit_to_comp = insurance_certificate_submited_for($nodeNid);
    $submit_to_user = insurance_certificate_submited_for($nodeNid,'user');
	$sent_notify = 0;
	if($user->uid == $node->uid) { 
	  $receiving_company = node_load($submit_to_comp);
	  $receiving_company_name = $receiving_company->title; 
	  $receiving_to = get_user_details_by_uids(array($submit_to_user)); 
	  $receiving_to_name = $receiving_to[$submit_to_user]['name'];
	  
	  $from_company = node_load($NodeCmpNid);
	  $from_company_name = $from_company->title; 
	  $from_to = get_user_details_by_uids(array($node->uid)); 
	  $from_to_name = $from_to[$node->uid]['name'];
	  $senderto = $submit_to_user;
	  $senderObj = user_load($senderto);
	  $sent_notify = (isset($senderObj->field_receive_insurance_certific['und']) && isset($senderObj->field_receive_insurance_certific['und'][0]['value']) && ($senderObj->field_receive_insurance_certific['und'][0]['value'] == '1'))?1:0;
	} else if($user->uid == $submit_to_user) {
	  $receiving_company = node_load($NodeCmpNid);
	  $receiving_company_name = $receiving_company->title;	
	  $receiving_to_user = $node->uid;
	  $receiving_to = get_user_details_by_uids(array($receiving_to_user)); 
	  $receiving_to_name = $receiving_to[$receiving_to_user]['name'];
	  
	  $from_company = node_load($submit_to_comp);
	  $from_company_name = $from_company->title; 
	  $from_to = get_user_details_by_uids(array($submit_to_user)); 
	  $from_to_name = $from_to[$submit_to_user]['name'];
	  
	  $senderto = $receiving_to_user;
	  $senderObj = user_load($senderto);
	  $sent_notify = (isset($senderObj->field_receive_insurance_certific['und']) && isset($senderObj->field_receive_insurance_certific['und'][0]['value']) && ($senderObj->field_receive_insurance_certific['und'][0]['value'] == '1'))?1:0;
	} 
	
	if($sent_notify) {
		
	$mgrUserDetail = get_user_real_name_email(array($senderto));
	$mailTo=$mgrUserDetail[$senderto]['mail'];
	//pre($mailTo); pre('ds',1);
	//pre($mgrUserDetail);pre($mailTo);
	///////////////////////////////////////////////////
	$message ='[Insurance:ReceivingPerson],<br/><br/> You are receiving this notification message regarding the [Insurance:Title] from [Insurance:SendingCompany], [Insurance:SendingPerson].<p><p>[Insurance:ClientMessage]<p>Select [Site:SignUplink] to login to M6Connect to review and respond.</p><p>Thanks,<br/>[Insurance:SendingPerson]<br/>[Insurance:SendingCompany]</p>';
	$insuranceNodePathAlias = drupal_lookup_path('alias','node/'.$node->nid);
	$nodeUserDetail = get_user_real_name_email(array($user->uid));
	$insuranceNodePath = l('here',$base_url.$base_path.$insuranceNodePathAlias,array('external'=>TRUE));
	$replace = array(
	  '[Insurance:SendingPerson]' => $from_to_name,
	  '[Insurance:ReceivingPerson]' => $receiving_to_name,
	  '[Insurance:SendingCompany]' => $from_company_name,
	  '[Insurance:ReceivingCompany]' => $receiving_company_name,
	  '[Insurance:Title]' => $node->title,
	  '[Insurance:ClientMessage]' => $clientMessage,
	  '[Site:SignUplink]' => $insuranceNodePath,
	);
	$params = array(
	  'subject' => 'Insurance Certificate Notification from '.$from_to_name,
	  'body' => str_replace(array_keys($replace),array_values($replace),$message),
	  'sender' => $nodeUserDetail[$user->uid]['mail'],
	  //'sender' => 'devd@mailinator.com',
	  'language' => language_default(),
	  'module' => 'm6connect_misc',
	  'key' => 'insurance_mail___approval_reminder_notify',
	  'build' => TRUE,
	 );
	//$message = str_replace(array_keys($replace),array_values($replace),$message); 
	drupal_mail($params['module'], $params['key'], $mailTo, $params['language'], $params); 
	
	//drupal_mail($params['module'], $params['key'], $to, $params['language'], $params);
	}
	///////////////////////////////////////////////////////
	$ICstatus = _get_ins_certificate_status($node->nid, 'term');
	if($ICstatus == 'Submitted') {
	  if($user->uid != $node->uid) {
		$ICstatus = 'Received';	
	  }
	}
	if(!empty($values['message']) && db_table_exists('m6connect_insurance_feedback_message')){
	  $approval_type_id =0;
	  $approval_message= array(
	    //'node_nid' => $routingNode->nid,
		'node_nid' => $node->nid,
	    'fc_item_id' => $fcitemId,
	    'user_uid' => $user->uid,
	    'approval_type_id' => $approval_type_id,
	    'message' => strip_tags($values['message']),
		'message_prefix'=> $ICstatus, //'Email Reminder Sent',
	    'timestamp' => time(),
	  );
	  $id = db_insert('m6connect_insurance_feedback_message')->fields($approval_message)->execute(); 
	  //$output = get_insurance_feedback_message($node->nid,$fcitemId,0);
	  $output = get_insurance_feedback_message_common($node->nid,$fcitemId,0);
	  $reminderCount++; //by dsr
	  $comment_box_data = array('selector'=>'#approval_feedback_message_container_'.$fcitemId. '_' .$approval_type_id,'html'=>$output);
	}
  //}
  drupal_json_output(array('status' => 1,'approval_reminder_count'=>$reminderCount,'comment_box'=> $comment_box_data)); 
  drupal_exit(0);
}

function insurance_reminder_msg_callback($node,$fcitemId){ 
  global $base_url,$base_path,$user;
  $comment_box_data = array('selector'=>'','html'=>'');
  $values = '';
  $clientMessage = '';
  if(isset($_REQUEST['values']) && !empty($_REQUEST['values'])){
    parse_str($_REQUEST['values'], $values); 
	$clientMessage = 'Special Message: '.$values['message'];
  }
  $reminderCount=0;
  
  $reminderCount = _get_reminder_count($node->nid, $fcitemId);
 
	
	///////////////////////////////////////////////////////
	
	/*
	//$insuranceNode = node_load($node);
    $rows= array();
    $NodeCmpNid = _get_company_nid_by_group_content($node);
    $submitter_approver = array($node->uid => $NodeCmpNid);
    $nodeNid = $node->nid;
    $submit_to_comp = insurance_certificate_submited_for($nodeNid);
    $submit_to_user = insurance_certificate_submited_for($nodeNid,'user');
	$sent_notify = 0;
	if($user->uid == $node->uid) { 
	  $receiving_company = node_load($submit_to_comp);
	  $receiving_company_name = $receiving_company->title; 
	  $receiving_to = get_user_details_by_uids(array($submit_to_user)); 
	  $receiving_to_name = $receiving_to[$submit_to_user]['name'];
	  
	  $from_company = node_load($NodeCmpNid);
	  $from_company_name = $from_company->title; 
	  $from_to = get_user_details_by_uids(array($node->uid)); 
	  $from_to_name = $from_to[$node->uid]['name'];
	  $senderto = $submit_to_user;
	  $senderObj = user_load($senderto);
	  $sent_notify = (isset($senderObj->field_receive_insurance_certific['und']) && isset($senderObj->field_receive_insurance_certific['und'][0]['value']) && ($senderObj->field_receive_insurance_certific['und'][0]['value'] == '1'))?1:0;
	} else if($user->uid == $submit_to_user) {
	  $receiving_company = node_load($NodeCmpNid);
	  $receiving_company_name = $receiving_company->title;	
	  $receiving_to_user = $node->uid;
	  $receiving_to = get_user_details_by_uids(array($receiving_to_user)); 
	  $receiving_to_name = $receiving_to[$receiving_to_user]['name'];
	  
	  $from_company = node_load($submit_to_comp);
	  $from_company_name = $from_company->title; 
	  $from_to = get_user_details_by_uids(array($submit_to_user)); 
	  $from_to_name = $from_to[$submit_to_user]['name'];
	  
	  $senderto = $receiving_to_user;
	  $senderObj = user_load($senderto);
	  $sent_notify = (isset($senderObj->field_receive_insurance_certific['und']) && isset($senderObj->field_receive_insurance_certific['und'][0]['value']) && ($senderObj->field_receive_insurance_certific['und'][0]['value'] == '1'))?1:0;
	} 
	*/
	
	///////////////////////////////////////////////////////
	$ICstatus = _get_ins_certificate_status($node->nid, 'term');
	if($ICstatus == 'Submitted') {
	  if($user->uid != $node->uid) {
		$ICstatus = 'Received';	
	  }
	}
	if(!empty($values['message']) && db_table_exists('m6connect_insurance_feedback_message')){
	  $approval_type_id =0;
	  $approval_message= array(
	    //'node_nid' => $routingNode->nid,
		'node_nid' => $node->nid,
	    'fc_item_id' => $fcitemId,
	    'user_uid' => $user->uid,
	    'approval_type_id' => $approval_type_id,
	    'message' => strip_tags($values['message']),
		'message_prefix'=> $ICstatus, //'Email Reminder Sent',
	    'timestamp' => time(),
	  );
	  $id = db_insert('m6connect_insurance_feedback_message')->fields($approval_message)->execute(); 
	  //$output = get_insurance_feedback_message($node->nid,$fcitemId,0);
	  $output = get_insurance_feedback_message_common($node->nid,$fcitemId,0); //new design
	  $reminderCount++; //by dsr
	  $comment_box_data = array('selector'=>'#approval_feedback_message_container_'.$fcitemId. '_' .$approval_type_id,'html'=>$output);
	}
  //}
  drupal_json_output(array('status' => 1,'approval_reminder_count'=>$reminderCount,'comment_box'=> $comment_box_data)); 
  drupal_exit(0);
}

function _get_reminder_count($nid, $uid){
  $rcount = 0;
  $query = db_select('m6connect_insurance_feedback_message', 'ifm');
  $query->fields('ifm',array('message_prefix'));
  $query->condition('ifm.message_prefix','Email Reminder Sent','=');
  $query->condition('ifm.node_nid',$nid,'=');
  $query->condition('ifm.user_uid',$uid,'=');
  $rcount = $query->execute()->rowCount();
  return $rcount;	
}

function insurance_accepted_rejected_radio_form($form,&$form_state,$dataObj){
  global $user;
  $nodeNid =  $dataObj->node_nid;
  //$fieldCollectionId = $dataObj->field_invited_approvers_value;
  $fieldCollectionId = $dataObj->node_uid;
  //$approval_type_id =  $dataObj->approval_type_id;
  $approval_type_id = 0;
  
  $form['#attributes']['style'] = 'display:none;';
  
  $options = array(1=>'Accepted',0=>'Rejected',2=>'Pending');
  $form['routing_action'] = array(
	'#type' => 'radios',
	'#title' => t('Aouting Action'),
	'#title_display' => 'invisible',
	'#attributes'=> array('class'=>array('routing_acceptance_action_'.$fieldCollectionId.'_'.$approval_type_id.'_'.$user->uid)),
	'#options' => $options,
	'#ajax' => array(
	  'callback' => 'insurance_accepted_rejected_radio_callback',
	  'event' => 'change',
	 ),
  );
  
  $form['routing_message'] = array(
	'#type' => 'textarea',
	'#title' => t('Message'),
	'#title_display' => 'invisible',
	'#attributes'=> array('class'=>array('message_routing_acceptance_action_'.$fieldCollectionId.'_'.$approval_type_id.'_'.$user->uid),'style'=>'display:none;'),
  );
  
  $form['user_uid'] = array(
    '#type' => 'value',
	'#value' => $user->uid,
  );
  $form['node_nid']= array(
	'#type' => 'value',
	'#value'=> $nodeNid,
  );
  $form['fc_item_id']= array(
	'#type' => 'value',
	'#value'=> $fieldCollectionId,
  );
  $form['approval_type_id']= array(
	'#type' => 'value',
	'#value'=> $approval_type_id,
  );
  return $form;	
}

function insurance_accepted_rejected_radio_callback(&$form,&$form_state){//pre($values,1);
  global $base_url,$base_path,$user;
  $commands= array();
  $commentMessagePrefix ='';
  $values = $form_state['values'];
  if(in_array($values['routing_action'], array(0,1,2))){
	$routing_message = $values['routing_message'];  
	$clientMessage = 'Update Message: '.$values['routing_message'];
	
	$actionArr = array('Rejected','Approved','Pending');
	$nid = $values['node_nid'];
	$actKey = $values['routing_action'];
	$status_tid = _get_term_id_by_term_name($actionArr[$actKey]);
	$node = node_load($nid);
	$commentMessagePrefix = $actionArr[$values['routing_action']];
	///////////////////////////////////////////////////
	//$nnid = $values['node_nid'];
	//$node = node_load($nnid);
	$uuid = $values['user_uid'];
	$sender_receiver_details = _get_submiter_approver_details($nid, $uuid); //pre($nid);pre($uuid);pre($sender_receiver_details);pre($node);
	
	$senderto = $sender_receiver_details['senderto'];
	$receiving_to_name = $sender_receiver_details['receiving_to_name'];
	$receiving_company_name = $sender_receiver_details['receiving_company_name'];
	$from_company_name = $sender_receiver_details['from_company_name'];
	$from_to_name = $sender_receiver_details['from_to_name'];
	
	$mgrUserDetail = get_user_real_name_email(array($senderto));
	$mailTo=$mgrUserDetail[$senderto]['mail'];
	
	$message = '[Insurance:ReceivingPerson],<br/><br/> The status of your insurance certificate has changed to [Insurance:InsStatus] for [Insurance:ReceivingCompany]. The following special message was made by the approver, please review and take action as necessary.<p></p>[Insurance:ClientMessage] <p>Click the link below to view the updated Insurance Certificate if necessary.</p>[Site:SignUplink]<p>Sincerely,<br/>[Insurance:SendingCompany]</p>';
	$insuranceNodePathAlias = drupal_lookup_path('alias','node/'.$node->nid);
	$nodeUserDetail = get_user_real_name_email(array($uuid));
	$insuranceNodePath = l(t($node->title),$base_url.$base_path.$insuranceNodePathAlias,array('external'=>TRUE));
	$replace = array(
	  '[Insurance:SendingPerson]' => $from_to_name,
	  '[Insurance:ReceivingPerson]' => $receiving_to_name,
	  '[Insurance:SendingCompany]' => $from_company_name,
	  '[Insurance:ReceivingCompany]' => $receiving_company_name,
	  '[Insurance:Title]' => $node->title,
	  '[Insurance:ClientMessage]' => $clientMessage,
	  '[Insurance:InsStatus]' => $commentMessagePrefix,
	  '[Site:SignUplink]' => $insuranceNodePath,
	);
	$params = array(
	  'subject' => $commentMessagePrefix.' Insurance Certificate by '.$from_company_name, //$from_to_name,
	  'body' => str_replace(array_keys($replace),array_values($replace),$message),
	  'sender' => $nodeUserDetail[$user->uid]['mail'],
	  //'sender' => 'devd@mailinator.com',
	  'language' => language_default(),
	  'module' => 'm6connect_misc',
	  'key' => 'insurance_mail___approval_reminder_notify',
	  'build' => TRUE,
	 );
	//$message = str_replace(array_keys($replace),array_values($replace),$message); 
	drupal_mail($params['module'], $params['key'], $mailTo, $params['language'], $params); 
	
	/************notification start ***************/
	$m6connect_notification_table_exist = db_table_exists('m6connect_notification');
		if ($m6connect_notification_table_exist) {	
		$notification_company_nid = $node->og_group_ref['und'][0]['target_id'];
		drup_msg('2255 '.$notification_company_nid);
			$m6connect_notification = array(
			'type' => 'insurance_certificates',
			'event' => $actKey,
			'entity_id' => $nid,
			'company_nid' => $notification_company_nid,
			'message' => NULL,
			'request_from' => $user->uid,
			'request_to' => $senderto,
			'status' => 1,
			'timestamp' => time(),
			);
			
			if(isset($actKey)&& $actKey==1){
				$m6connect_notification['event']='approved';
			}else if(isset($actKey)&& $actKey==0){
				$m6connect_notification['event']='rejected';
			}else if(isset($actKey)&& $actKey==2){
				$m6connect_notification['event']='pending';
			}
			entity_save('m6connect_notification', (object) $m6connect_notification);
		}
	/************notification end**************/
	
	///////////////////////////////////////////////////////
	$node->field_certificate_status['und'][0]['tid'] = $status_tid;
	node_save($node);
	//$commentMessagePrefix = $actionArr[$values['routing_action']];
	//////////////////////////////////////////////////////
	if(!empty($routing_message)){
	  $approval_message= array(
	    'node_nid' => $values['node_nid'],
	    'fc_item_id' => $values['fc_item_id'],
	    'user_uid' => $values['user_uid'],
	    'approval_type_id' => $values['approval_type_id'],
	    'message' => $routing_message,
		'message_prefix' =>$commentMessagePrefix,
	    'timestamp' => time(),
	  );
	  $id = db_insert('m6connect_insurance_feedback_message')->fields($approval_message)->execute();
	  //$output = get_insurance_feedback_message($values['node_nid'],$values['fc_item_id'],$values['approval_type_id']);
	  $output = get_insurance_feedback_message_common($values['node_nid'],$values['fc_item_id'],$values['approval_type_id']);
	  $commands[] = ajax_command_html('#approval_feedback_message_container_'.$values['fc_item_id']. '_' .$values['approval_type_id'], $output);
	}
	$viewTdClassMapping = array(
	  0=>array('selector'=>'.view-reject-field-'.$values['fc_item_id'].'-td','class'=>'bg-danger'),
	  1=>array('selector'=>'.view-accept-field-'.$values['fc_item_id'].'-td','class'=>'bg-success'),
	  2=>array('selector'=>'.view-notsure-field-'.$values['fc_item_id'].'-td','class'=>'bg-warning'),
	);
	
	$commands[] = ajax_command_invoke('.view-accept-field-'.$values['fc_item_id'].'-td', 'removeClass', array('bg-success'));
	$commands[] = ajax_command_invoke('.view-reject-field-'.$values['fc_item_id'].'-td', 'removeClass', array('bg-danger'));
	$commands[] = ajax_command_invoke('.view-notsure-field-'.$values['fc_item_id'].'-td', 'removeClass', array('bg-warning'));
	$commands[] = ajax_command_invoke($viewTdClassMapping[$values['routing_action']]['selector'], 'addClass', array($viewTdClassMapping[$values['routing_action']]['class']));
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}


function check_insurance_certificate_feedback_new($entity_id){
  global $user, $company;
  $display_to_all = 0;
  $currentUserComapnyDetail= array();
  $insuranceNode = node_load($entity_id);
  $rows= array();
  $NodeCmpNid = _get_company_nid_by_group_content($insuranceNode);
  $submitter_approver = array($insuranceNode->uid => $NodeCmpNid);
  
  $submit_to_comp = insurance_certificate_submited_for($entity_id);
  $submit_to_user = insurance_certificate_submited_for($entity_id,'user');
  //pre($submitter_approver);
  if(!empty($submit_to_comp) && !empty($submit_to_user)){
    $submitter_approver[$submit_to_user] = $submit_to_comp;  	  
  }
  //pre($submitter_approver);
  $m6notesTab = array();
  $k = 0;
  foreach($submitter_approver as $uid => $comp_id) {
	$dataarr = array('node_nid'=>$entity_id,'node_uid'=>$uid,'action'=>1);
    $dataObj = (object) $dataarr;  
	///////////////////////
	//Company Detail 
	$masterCompanyDetails = array(); 
    $CompanyDetail = get_ins_cert_company_details_by_nid($comp_id,$masterCompanyDetails);	  
	if(!$CompanyDetail){
	  $CompanyDetail = array('nid' => '', 'title' => '', 'image' => '');
	}
	//$companyTab = $CompanyDetail['title'] . '<br/>' . $CompanyDetail['image'];
	
	$ApproverStatus =1;
	$masterUserDetail = get_user_details_by_uids(array($uid));
	$UserInfoDetails =  get_insurance_user_details_feedback(array($uid),$masterUserDetail,$dataObj,$ApproverStatus);
	
	//$inviteeTab = $UserInfoDetails['userDetailsTab'];
	$uobj = get_user_details_by_uids(array($uid)); //pre
	$inviteeTab = $uobj[$uid]['name'];
	
	$companyTab = '<span class="m6-note-cmp-img">'.$CompanyDetail['image'] . '</span> '.$CompanyDetail['title'] . ', ' . $inviteeTab;
	////////////////////////
	$m6notesTab[$k]['msg'] =drupal_render(drupal_get_form('insurance_feedback_message_form',$dataObj,$uid));
	$m6notesTab[$k]['reminder'] = get_insurance_request_approval_reminder_button($dataObj, $uid);
	$m6notesTab[$k]['details'] = $companyTab;
	$k++;
  } 
  return $m6notesTab; 
}

////////////////////////******* New msg design start ****************//////////////////////////


function get_insurance_feedback_message_common($nodeNid,$fieldCollectionId,$approvalTypeid){
  global $user;
  ctools_include('ajax');
  ctools_include('modal');
  $node = node_load($nodeNid);
  
  $submitterUid = $node->uid;
  $approverUid = insurance_certificate_submited_for($nodeNid, 'user');  //dsm($submitterUid);  //dsm($approverUid);
  if(in_array($user->uid, array($submitterUid, $approverUid))) {
	$curruserclass = 'cuser-is-submitter-approver';  
  } else {
	$curruserclass = 'cuser-not-submitter-approver';  
  }
  $output = '<div class="bidder-feedback-msg-list '.$curruserclass.'">';
  if (db_table_exists('m6connect_insurance_feedback_message')) {
	  $query = db_select('m6connect_insurance_feedback_message', 'rfm');
	  $query->leftjoin('node','n','n.nid=rfm.node_nid');
	  $query->join('realname', 'r', 'r.uid=rfm.user_uid');
	  $query->fields('rfm', array('id', 'message','message_prefix', 'timestamp','user_uid'));
	  $query->fields('n', array('uid'));
	  $query->fields('r', array('realname'));
	  $query->condition('rfm.node_nid', $nodeNid, '=');
	  //$query->condition('rfm.fc_item_id', $fieldCollectionId, '='); //new design
	  //$query->condition('rfm.user_uid', $fieldCollectionId, '='); //new design
	  $query->condition('rfm.approval_type_id', $approvalTypeid, '=');
	  $query->orderBy('rfm.timestamp', 'ASC');
	  //$isNodeCompanyUser = in_array($user->uid, _get_current_company_users($node->uid));
	  $result = $query->execute()->fetchAll();
	  if ($result && !empty($result)) {
		foreach ($result as $delta => $msgObj) {
		  $messagePrifix =$msgObj->message_prefix;
		  if(!empty($messagePrifix)){
			$messagePrifix = ' '.$messagePrifix;  
		  }
		  if(in_array($user->uid, array($submitterUid, $approverUid))) {
			//if($user->uid == $submitterUid){
			  if($user->uid == $msgObj->user_uid) {	
				$alignclass = 'feedback-msg-writer';
			  } else {
				$alignclass = 'feedback-msg-reader'; 
			  }
			//}
		    $output .= '<div class="bidder-feedback-msg routing-feedback-msg-' . $msgObj->id . ' clearfix '.$alignclass.'">';
		  } else { //dsm($msgObj->user_uid);//dsm($submitterUid);dsm($approverUid);
			//$alignclass = ($msgObj->user_uid == $approverUid)?'feedback-msg-writer':($msgObj->user_uid == $submitterUid)?'feedback-msg-reader':'';
			if($msgObj->user_uid == $approverUid) {
			  $alignclass = 'feedback-msg-writer';	
			} else if($msgObj->user_uid == $submitterUid){
			  $alignclass = 'feedback-msg-reader';
			}
			//dsm($alignclass);  
			$output .= '<div class="bidder-feedback-msg routing-feedback-msg-' . $msgObj->id . ' clearfix '.$alignclass.'">';
		  }
		  //$output .= '<div class="bidder-feedback-msg routing-feedback-msg-' . $msgObj->id . ' clearfix">';
		  $output .= '<div class="bidder-feedback-msg-attr pull-left">';
		  $user_obj = user_load($msgObj->user_uid);
		  $imgpath = isset($user_obj->field_user_profile_photo['und']['0']['uri'])?$user_obj->field_user_profile_photo['und']['0']['uri']:'public://default_images/images_13_0_0.png';
		  $imgurl =  image_style_url('user_pic_40x40',$imgpath);
		  $userimg = '<img src="'.$imgurl.'">';
		  /*$output .= '<span class="bidder-feedback-msg-time"><span class="msg-aut-img">'.$userimg.'</span><strong>' .$msgObj->realname. '</strong> '.date('m/d/Y h:i A', $msgObj->timestamp) . ' '.$messagePrifix.' - </span>';
		  $output .= '<span class="bidder-feedback-msg-msg">' . $msgObj->message . '</span>'; */
		  $output .= '<span class="bidder-feedback-msg-time"><span class="msg-aut-img">'.$userimg.'</span></span>';
		  $output .= '<span class="bidder-feedback-msg-msg"><strong>' .$msgObj->realname. '</strong> '.date('m/d/Y h:i A', $msgObj->timestamp) . ' '.$messagePrifix.' - ' . $msgObj->message . '</span>';
		  $output .= '</div>';
          //if($user->uid == $msgObj->uid || $user->uid == $msgObj->user_uid){
		  if($user->uid == $msgObj->user_uid){	  
		    $output .= '<div class="bidder-feedback-msg-delete">'; //new design
			//$output .= '<div class="bidder-feedback-msg-delete pull-right">'; //new design
		    $output .= l('<i class="fa fa-times-circle"></i>', 'remove-insurance-feedback-message/' . $msgObj->id . '/nojs', array('html' => TRUE, 'attributes' => array('class' => array('bidder-feedback-msg-delete-link', 'use-ajax'))));
		    $output .= '</div>';
		  }
		  $output .= '</div>';
		}
	  }
  }
  $output .= '</div>';
  return $output;	
}

function common_insurance_feedback_message_form($form, $form_state,$dataObj,$managerUids) {
    global $user;
	////$fieldCollectionId = $dataObj->field_invited_approvers_value;
	$fieldCollectionId = $managerUids;
	//$approvalTypeid = $dataObj->approval_type_id;
	$approvalTypeid = 0;
	$nodeNid = $dataObj->node_nid;
	$nodeUid = $dataObj->node_uid; 
	/////////////////////////////
	$insuranceNode = node_load($nodeNid);
	$NodeCmpNid = _get_company_nid_by_group_content($insuranceNode);
    $submitter_approver = array($insuranceNode->uid => $NodeCmpNid);
  
    $submit_to_comp = insurance_certificate_submited_for($nodeNid);
    $submit_to_user = insurance_certificate_submited_for($nodeNid,'user');
    //pre($submitter_approver);
    if(!empty($submit_to_comp) && !empty($submit_to_user)){
      $submitter_approver[$submit_to_user] = $submit_to_comp;  	  
    }
    
	////////////////////////////
	////$nodeRoutingStatus=$dataObj->field_routing_status_value;
	$nodeRoutingStatus=1;
    $form = array();
    $form['#attributes'] = array('class' => array('routing_feedback_message_form','rfp_bidder_feedback_message_form'), 'id' => 'routing_feedback_message_form_' . $fieldCollectionId.'_'.$approvalTypeid);

    $form['message-list'] = array(
        '#markup' => get_insurance_feedback_message_common($nodeNid,0,0),
		'#prefix' => '<div id="approval_feedback_message_container_' . $fieldCollectionId . '_' . $approvalTypeid . '">',
        '#suffix' => '</div>',
    );
	//if($user->uid == $nodeUid || in_array($user->uid,$managerUids)){
	//dsm($submitter_approver);
	if(array_key_exists($user->uid, $submitter_approver)){		
	  $form['message'] = array(
		  '#type' => 'textfield',
		  '#title' => 'Message',
		  '#title_display' => 'invisible',                                 //here
		  '#attributes' => array('placeholder' => 'Please provide comments', 'id' => 'approval_feedback_message_' . $fieldCollectionId . '_' . $approvalTypeid, 'class' => array('approval_feedback_message_msg','bidder_feedback_message_msg', 'onkeypress' => array('if(event.keyCode==13){this.form.submit();}'))),
		  '#prefix' => '<div>',
		  '#suffix' => '</div>',
		  '#maxlength' => 198,
	  );
	  $form['user_uid'] = array(
		  '#type' => 'value',
		  '#value' => $user->uid,
	  );
	  $form['node_nid']= array(
		'#type' => 'value',
		'#value'=> $nodeNid,
	  );
	  $form['fc_item_id']= array(
		'#type' => 'value',
		'#value'=> $fieldCollectionId,
	  );
	  $form['approval_type_id']= array(
		'#type' => 'value',
		'#value'=> $approvalTypeid,
	  );
	  $form['add'] = array(
		  '#type' => 'submit',
		  '#value' => 'Add',
		  '#attributes' => array('class' => array('add_new_approval_feedback_message','add_new_bidder_feedback_message')),
		  '#executes_submit_callback' => FALSE,
		  '#limit_validation_errors' => array(),
		  '#href' => '',
		  '#ajax' => array(
			  'callback' => 'add_new_insurance_feedback_message',
			  'effect' => 'fade',
			  'event' => 'click',
			  'progress' => array('type' => 'none'),
		  ),
		  '#prefix' => '<div id="bidder-feedback-message-button" class="approval_feedback-message-button bidder-feedback-message-button">',
		  '#suffix' => '</div>',
	  );
	}
    return $form;
}

////////////////////////******* New msg design end ****************//////////////////////////

function get_ins_cert_company_details_by_nid($CompanyNid,&$masterCompanyDetails,$thumb = FALSE){
  global $base_url;	
  if(isset($masterCompanyDetails[$CompanyNid])){
	return $masterCompanyDetails[$CompanyNid];  
  }
  if($CompanyNid && is_numeric($CompanyNid)){
    $CompanyNode = node_load($CompanyNid);
	if($thumb) {
	  $companyLogo = (isset($CompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $CompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '<img src="'.$base_url.'/sites/all/themes/m6connect/images/default_company_profile.jpg" style="height:100px; width:100px" />';
	} else {
	  $companyLogo = (isset($CompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $CompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '<img src="'.$base_url.'/sites/all/themes/m6connect/images/default_company_profile.jpg" />';	
	}
    $masterCompanyDetails[$CompanyNode->nid] = array('nid' => $CompanyNode->nid, 'title' => $CompanyNode->title, 'image' => $companyLogo);
	return $masterCompanyDetails[$CompanyNode->nid]; 
  }
  return FALSE;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// end message feedback //////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
function m6connect_ins_cert_extended_file_field_output_alter(&$elements, &$context){ //pre($context);pre($elements,1);
  if($context['field']['field_name'] == 'field_attach_certificates') { //pre($context);pre($elements,1);
	$node = $context['entity'];
	$cnid = _get_company_nid_by_group_content($node);
	$comp = node_load($cnid);
	$comname = $comp->title;
	$elements[0]['#header']['uid']['data'] = 'Submitter';
	$elements[0]['#header']['comp'] = array('data' => 'Company');
	$headerarr = $elements[0]['#header'];
	$headrcomp = array('comp '=> array('data' => 'Company'));
	//$elements[0]['#header'] = array($headerarr['filename'], $headerarr['filesize'], $headrcomp['comp'], $headerarr['uid']);
	$elements[0]['#header'] = array($headerarr['filename'], $headerarr['filesize'], $headerarr['comp'], $headerarr['uid']);
	foreach($elements[0]['#rows'] as $k =>$val){
	  $elements[0]['#rows'][$k]['data']['comp'] = array('data' =>$comname);
	  $rowarr = $elements[0]['#rows'][$k]['data'];
	  $elements[0]['#rows'][$k]['data'] = array($rowarr['filename'], $rowarr['filesize'], $rowarr['comp'], $rowarr['uid']);
	}
  }
}

function m6connect_ins_cert_extended_file_field_items_alter($elements, $context){ //pre($context);pre($elements,1);
  if($context['field']['field_name'] == 'field_attach_certificates') {
	
  }
} 

function _get_submiter_approver_details($nid, $uid){
	global $user;
	$returnArr = array();
	$node = node_load($nid);
	$subApprover = user_load($uid);//pre($nid);pre($uid);pre($subApprover);pre($node);
    $NodeCmpNid = _get_company_nid_by_group_content($node);
    $submitter_approver = array($node->uid => $NodeCmpNid);
    $nodeNid = $node->nid;
    $submit_to_comp = insurance_certificate_submited_for($nid);
    $submit_to_user = insurance_certificate_submited_for($nid,'user');
	$sent_notify = 0;
	$from_to_name = $from_company_name = $receiving_to_name = $receiving_company_name = $sent_notify = '';
	if($subApprover->uid == $node->uid) { 
	  $receiving_company = node_load($submit_to_comp);
	  $receiving_company_name = $receiving_company->title; 
	  $receiving_to = get_user_details_by_uids(array($submit_to_user)); 
	  $receiving_to_name = $receiving_to[$submit_to_user]['name'];
	  
	  $from_company = node_load($NodeCmpNid);
	  $from_company_name = $from_company->title; 
	  $from_to = get_user_details_by_uids(array($node->uid)); 
	  $from_to_name = $from_to[$node->uid]['name'];
	  $senderto = $submit_to_user;
	  $senderObj = user_load($senderto);
	  $sent_notify = (isset($senderObj->field_receive_insurance_certific['und']) && isset($senderObj->field_receive_insurance_certific['und'][0]['value']) && ($senderObj->field_receive_insurance_certific['und'][0]['value'] == '1'))?1:0;
	} else if($subApprover->uid == $submit_to_user) {
	  $receiving_company = node_load($NodeCmpNid);
	  $receiving_company_name = $receiving_company->title;	
	  $receiving_to_user = $node->uid;
	  $receiving_to = get_user_details_by_uids(array($receiving_to_user)); 
	  $receiving_to_name = $receiving_to[$receiving_to_user]['name'];
	  
	  $from_company = node_load($submit_to_comp);
	  $from_company_name = $from_company->title; 
	  $from_to = get_user_details_by_uids(array($submit_to_user)); 
	  $from_to_name = $from_to[$submit_to_user]['name'];
	  
	  $senderto = $receiving_to_user;
	  $senderObj = user_load($senderto);
	  $sent_notify = (isset($senderObj->field_receive_insurance_certific['und']) && isset($senderObj->field_receive_insurance_certific['und'][0]['value']) && ($senderObj->field_receive_insurance_certific['und'][0]['value'] == '1'))?1:0;
	}
	$returnArr['from_to_name'] = $from_to_name;
	$returnArr['from_company_name'] = $from_company_name;
	$returnArr['receiving_to_name'] = $receiving_to_name;
	$returnArr['receiving_company_name'] = $receiving_company_name;
	$returnArr['senderto'] = $senderto;
	$returnArr['sent_notify'] = $sent_notify;
	return $returnArr;	
}

/*
 * Implement hook_node_insert
 */
function m6connect_ins_cert_node_insert($node) {  //if($node->type=='insurance_certificates'){ drup_msg('node_insert'); drup_msg($node); }
  $ICstatus = _get_ins_certificate_status($node->nid, 'term');	
  if (!empty($ICstatus)) {
    if($ICstatus == 'Submitted') {
	  if((isset($node->field_submit_to['und']) && isset($node->field_submit_to['und'][0]['target_id']) && !empty($node->field_submit_to['und'][0]['target_id'])) && (isset($node->field_submit_to_company_user['und']) && isset($node->field_submit_to_company_user['und'][0]['uid']) && !empty($node->field_submit_to_company_user['und'][0]['uid'])))	{	
        sent_mail_of_status_change($ICstatus,$node,TRUE);   		  
	  }
	}
  }
}


/*
 * Return project list on contarct page.
 */
function contract_project_listing() {
  global $user, $company;
  $CuurCompNid = $_SESSION['company'];
  $projlist = array();
  $type = array('project');
  
  $query = db_select('node', 'n');
  $query->fields('n', array('nid','title'));
  $query->leftJoin('og_membership', 'ogm', 'ogm.etid=n.nid');
  $userCmpNid = _get_user_company_nid();
  $query->leftJoin('field_data_field_project_invite_comapnies', 'pic', 'pic.entity_id=n.nid');
  $query->leftJoin('field_data_field_company_nid_mail', 'pcne', 'pcne.entity_id = pic.field_project_invite_comapnies_value');
  $query->leftJoin('field_data_field_comapny_manager', 'pcimu', 'pcimu.entity_id = pic.field_project_invite_comapnies_value');
  
  
  $query->condition('n.type', $type, 'IN');
  $query->condition('n.status', 1, '=');
  $query->orderBy('n.created', 'DESC');
  
  if(arg(0) == 'node' && arg(1) == 'add') { 
    $query->where('(ogm.gid=:ogmid)', array(':ogmid' => $CuurCompNid));
	//$InsCertManagerRole = user_role_load_by_name('Insurance Certificate Manager');
    //$InsCertManagerRoleId = $InsCertManagerRole->rid;
	$CompanyRoles = og_get_user_roles('node', $company->nid, $user->uid);
    $isInsCertManager = (in_array('Insurance Certificate Manager', $CompanyRoles))?1:0;
	if($isInsCertManager) {
	  $company_users = _get_company_users_by_group_company($company);	//pre($company_users,1);
	  $query->where('((pcne.field_company_nid_mail_value=:companyNid or pcne.field_company_nid_mail_value=:companyMail) and 
 ((pcimu.field_comapny_manager_value IS NULL) or FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)) or
 (n.uid IN (:companyUsers))', array(':UserUid' => $user->uid, ':companyMail' => $user->mail, ':companyNid' => $userCmpNid, ':companyUsers' => $company_users));
	} else {
		
      $query->where('((pcne.field_company_nid_mail_value=:companyNid or pcne.field_company_nid_mail_value=:companyMail) and 
 ((pcimu.field_comapny_manager_value IS NULL) or FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)) or
 (n.uid=:UserUid)', array(':UserUid' => $user->uid, ':companyMail' => $user->mail, ':companyNid' => $userCmpNid));
	}
    
	$result = $query->execute();
	while ($record = $result->fetchAssoc()) {
	  $nid = $record['nid'];
	  $projlist[$nid] = $record['title'];
	}
	
  } else if(arg(0) == 'node' &&  is_numeric(arg(1)) && arg(2) == 'edit') {
    $node = node_load(arg(1));	  
    $nodeCompNid = _get_company_nid_by_group_content($node);	
	$nodeUid = $node->uid;  
	$nodeUser = user_load($nodeUid);
	$query->where('(ogm.gid=:ogmid)', array(':ogmid' => $nodeCompNid));
	//$InsCertManagerRole = user_role_load_by_name('Insurance Certificate Manager');
    //$InsCertManagerRoleId = $InsCertManagerRole->rid;
	$CompanyRoles = og_get_user_roles('node', $company->nid, $user->uid);
    $isInsCertManager = (in_array('Insurance Certificate Manager', $CompanyRoles))?1:0;	
	if($isInsCertManager && $user->uid == $nodeUid) {
	  $company_users = _get_company_users_by_group_company($company);	//pre($company_users,1);
	  $query->where('((pcne.field_company_nid_mail_value=:companyNid or pcne.field_company_nid_mail_value=:companyMail) and 
 ((pcimu.field_comapny_manager_value IS NULL) or FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)) or
 (n.uid IN (:companyUsers))', array(':UserUid' => $user->uid, ':companyMail' => $user->mail, ':companyNid' => $userCmpNid, ':companyUsers' => $company_users));	
	} else {
	  $company_users = _get_company_users_by_group_company($company);
    $query->where('((pcne.field_company_nid_mail_value=:companyNid or pcne.field_company_nid_mail_value=:companyMail) and 
 ((pcimu.field_comapny_manager_value IS NULL) or FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)) or
 (n.uid=:UserUid)', array(':UserUid' => $nodeUid, ':companyMail' => $nodeUser->mail, ':companyNid' => $nodeCompNid));
	}
    $result = $query->execute();
	while ($record = $result->fetchAssoc()) {
	  $nid = $record['nid'];
	  $projlist[$nid] = $record['title'];
	}
  }
  
  return $projlist;
} 
 
function contract_project_listing_new($cmcr = NULL) {  
  if(arg(0) == 'node' && is_numeric(arg(1))){
    $node = node_load(arg(1));
    $cmcr = $node->field_cm_type['und'][0]['value'];    
  }  
  global $user, $company;
  $CuurCompNid = $_SESSION['company'];
  $projlist = array();
  $type = array('project');  
  $query = db_select('node', 'n');
  $query->fields('n', array('nid','title'));
  $query->leftJoin('og_membership', 'ogm', 'ogm.etid=n.nid');
  $userCmpNid = _get_user_company_nid();
  $query->leftJoin('field_data_field_project_invite_comapnies', 'pic', 'pic.entity_id=n.nid');
  $query->leftJoin('field_data_field_company_nid_mail', 'pcne', 'pcne.entity_id = pic.field_project_invite_comapnies_value');
  $query->leftJoin('field_data_field_comapny_manager', 'pcimu', 'pcimu.entity_id = pic.field_project_invite_comapnies_value');
  if(isset($cmcr) && !empty($cmcr)){
    $query->leftjoin('field_data_field_cm_type', 'fdfct', 'fdfct.entity_id = n.nid');
  }
  $query->condition('n.type', $type, 'IN');
  $query->condition('n.status', 1, '=');
  if(isset($cmcr) && !empty($cmcr)){
    $query->condition('fdfct.field_cm_type_value',$cmcr,'=');
  }
  $query->orderBy('n.created', 'DESC');  
  $query->where('(ogm.gid=:ogmid)', array(':ogmid' => $CuurCompNid));
	//$InsCertManagerRole = user_role_load_by_name('Insurance Certificate Manager');
    //$InsCertManagerRoleId = $InsCertManagerRole->rid;
	$CompanyRoles = og_get_user_roles('node', $company->nid, $user->uid);
  $isInsCertManager = (in_array('Insurance Certificate Manager', $CompanyRoles))?1:0;
	if($isInsCertManager) {
		$company_users = _get_company_users_by_group_company($company);	//pre($company_users,1);
		$query->where('((pcne.field_company_nid_mail_value=:companyNid or 
      pcne.field_company_nid_mail_value=:companyMail) and 
      ((pcimu.field_comapny_manager_value IS NULL) or FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)) or
      (n.uid IN (:companyUsers))', array(':UserUid' => $user->uid, ':companyMail' => $user->mail, ':companyNid' => $userCmpNid, ':companyUsers' => $company_users));
	} else {			
	  $query->where('((pcne.field_company_nid_mail_value=:companyNid or 
      pcne.field_company_nid_mail_value=:companyMail) and 
      ((pcimu.field_comapny_manager_value IS NULL) or FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)) or
      (n.uid=:UserUid)', array(':UserUid' => $user->uid, ':companyMail' => $user->mail, ':companyNid' => $userCmpNid));
	}
	$result = $query->execute();
	while ($record = $result->fetchAssoc()) {
	  $nid = $record['nid'];
	  $projlist[$nid] = $record['title'];
	} 
  return $projlist;
} 
/* 
function contract_project_listing() {
  global $user, $company;
  $CuurCompNid = $_SESSION['company'];
  $projlist = array();
  $type = array('project');
  if(arg(0) == 'node' && arg(1) == 'add') { 
    $query = db_select('node', 'n');
	$query->fields('n', array('nid','title'));
	$query->leftJoin('og_membership', 'ogm', 'ogm.etid=n.nid');
	$userCmpNid = _get_user_company_nid();
    $query->leftJoin('field_data_field_project_invite_comapnies', 'pic', 'pic.entity_id=n.nid');
    $query->leftJoin('field_data_field_company_nid_mail', 'pcne', 'pcne.entity_id = pic.field_project_invite_comapnies_value');
    $query->leftJoin('field_data_field_comapny_manager', 'pcimu', 'pcimu.entity_id = pic.field_project_invite_comapnies_value');
    $query->where('((pcne.field_company_nid_mail_value=:companyNid or pcne.field_company_nid_mail_value=:companyMail) and 
 ((pcimu.field_comapny_manager_value IS NULL) or FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)) or
 (n.uid=:UserUid)', array(':UserUid' => $user->uid, ':companyMail' => $user->mail, ':companyNid' => $userCmpNid));
    $query->where('(ogm.gid=:ogmid)', array(':ogmid' => $CuurCompNid));
	$query->condition('n.type', $type, 'IN');
	$query->condition('n.status', 1, '=');
	$query->orderBy('n.created', 'DESC');
	$result = $query->execute();
	while ($record = $result->fetchAssoc()) {
	  $nid = $record['nid'];
	  $projlist[$nid] = $record['title'];
	}
	
  } else if(arg(0) == 'node' &&  is_numeric(arg(1)) && arg(2) == 'edit') {
	  
  }
  
  return $projlist;
} */
/*
 * get the associated project and contract on insurance certificate for submitter as well as receiver.
 */
function associate_project_contract_content($nid){ //pre($nid);
  global $user;
  $output = '';
  $node = node_load($nid); //pre($node);
  if ($node->type == 'insurance_certificates') {
	$submittoUser = (isset($node->field_submit_to_company_user['und']) && isset($node->field_submit_to_company_user['und'][0]['uid']) && !empty($node->field_submit_to_company_user['und'][0]['uid']))?$node->field_submit_to_company_user['und'][0]['uid']:'';
	if((isset($node->field_submit_to_project['und']) && isset($node->field_submit_to_project['und'][0]['target_id']) && !empty($node->field_submit_to_project['und'][0]['target_id'])) || (isset($node->field_submit_to_contract['und']) && isset($node->field_submit_to_contract['und'][0]['target_id']) && !empty($node->field_submit_to_contract['und'][0]['target_id']))){
	$subProj = (isset($node->field_submit_to_project['und']) && isset($node->field_submit_to_project['und'][0]['target_id']) && !empty($node->field_submit_to_project['und'][0]['target_id']))? $node->field_submit_to_project['und'][0]['target_id']:'';
	$subCont = (isset($node->field_submit_to_contract['und']) && isset($node->field_submit_to_contract['und'][0]['target_id']) && !empty($node->field_submit_to_contract['und'][0]['target_id']))? $node->field_submit_to_contract['und'][0]['target_id']:'';
    $output .= '<h2 class="block-title">Associate Project/Contract</h2>';
    $output .= '<div class="ins-cert-details-right-inner">';
	if($user->uid == $submittoUser) {
	  $output .= drupal_render(drupal_get_form('insurer_submitter_associate_project_form',$node,$submittoUser));	
	} else {
	  if(!empty($subProj)){
	    $title =  _get_title_of_node($subProj);
        $output .= '<div class="ins-cert-details-item"><span class="ins-cert-details-label">Project: </span><span class="ins-cert-details-content">'.$title.'</span></div>';
	  }
	  if(!empty($subCont)){
	    $title =  _get_title_of_node($subCont);  
        $output .= '<div class="ins-cert-details-item"><span class="ins-cert-details-label">Contract: </span><span class="ins-cert-details-content">'.$title.'</span></div>';
	  }
	}
    $output .='</div>';	
	}
  }
  return $output;
}

function insurer_submitter_associate_project_form($form, $form_state, $node, $submiiterUId){
  //$proOpt = get_insurance_projects_list($submiiterUId, TRUE);	
  $subProj = (isset($node->field_submit_to_project['und']) && isset($node->field_submit_to_project['und'][0]['target_id']) && !empty($node->field_submit_to_project['und'][0]['target_id']))? $node->field_submit_to_project['und'][0]['target_id']:'';
	$subCont = (isset($node->field_submit_to_contract['und']) && isset($node->field_submit_to_contract['und'][0]['target_id']) && !empty($node->field_submit_to_contract['und'][0]['target_id']))? $node->field_submit_to_contract['und'][0]['target_id']:'';
  
  $proOpt = get_insurance_projects_list($submiiterUId, $node->uid);	
  $form['insurance_project'] = array(
    '#type' => 'select',
    '#title' => t('Project'),
    //'#title_display' => 'invisible',
    '#options' => $proOpt,
    '#default_value' => $subProj,
  );
  $conOpt = get_insurance_contract_list();
  $form['insurance_contract'] = array(
    '#type' => 'select',
    '#title' => t('Contract'),
    //'#title_display' => 'invisible',
    '#options' => $conOpt,
    '#default_value' => $subCont,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
    '#attributes' => array('class' => array('btn', 'btn-primary'), 'alt' => array('Save'), 'title' => array('Save')),
  );
  return $form;	
}

function insurer_submitter_associate_project_form_submit($form, $form_state) {
  //pre($form_state,1);
  $node = $form_state['build_info']['args'][0];
  $selected_proj = $form_state['input']['insurance_project'];
  $selected_cont = $form_state['input']['insurance_contract'];
  if($selected_proj && is_numeric($selected_proj) && $selected_proj >0) {
	$node->field_submit_to_project['und'][0]['target_id'] =  $selected_proj;
  }
  if($selected_cont && is_numeric($selected_cont) && $selected_cont >0) {
	$node->field_submit_to_contract['und'][0]['target_id'] =  $selected_cont;
  }
  node_save($node);
}

function get_insurance_projects_list_TT($uid, $authoruid, $receiver = FALSE) {
  global $user, $company;
  $cmcr = '';
  if(!empty($receiver) && ($receiver == 'cr' || $receiver == 'cm' || $receiver == 'cpm')){
    $cmcr = $receiver;
  }
  $projlist = array();
  $commonUids = array($uid,$authoruid);
  $commonemails = array();
  foreach($commonUids as $delta=>$cmpUid){
	$temp = user_load($cmpUid);  
	$commonemails[$cmpUid] = strtolower($temp->mail);  
  }
  $commonemails = array_values($commonemails);
  $query = db_select('node', 'n');
  $query->leftjoin('og_membership','ogm','ogm.etid=n.nid AND ogm.entity_type=:entityType', array(':entityType'=>'node'));
  $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.entity_id=n.nid');
  $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
  $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
  $query->leftJoin('field_data_field_invite_inbox_status', 'iis', 'ric.field_rfp_invite_comapnies_value = iis.entity_id');
  $query->leftJoin('invite_users_rfp_project', 'irp', 'n.nid = irp.entity_id');
  if(!empty($cmcr)){
    $query->leftjoin('field_data_field_cm_type', 'fdfct', 'fdfct.entity_id = n.nid');
  }  
  $query->fields('n', array('nid','title'));
  $query->condition('n.type', 'project', '=');
  $query->condition('n.status', 1, '=');
  if(!empty($cmcr)){
    $query->condition('fdfct.field_cm_type_value',$cmcr,'=');
  }
  $query->where('(
		((irp.invited_by=:UserUid1) AND
		(LOWER(rcne.field_rfp_company_nid_email_value=:UserUidMail2) or 
		((FIND_IN_SET(:UserUid2,rcimu.field_co_invite_manager_uid_value)>0)))) or
		((irp.invited_by=:UserUid2) AND
		(LOWER(rcne.field_rfp_company_nid_email_value=:UserUidMail1) or 
		((FIND_IN_SET(:UserUid1,rcimu.field_co_invite_manager_uid_value)>0))))
		)',array(':UserUid1' => $uid,':UserUid2' => $authoruid,':UserUidMail1' => $commonemails[$uid],':UserUidMail2' => $commonemails[$authoruid],':companyMail'=>$commonemails));
  $query->orderBy('n.created', 'DESC');
  $projlist = $query->execute()->fetchAllKeyed(0,1);
  return $projlist;
}

function get_insurance_projects_list($uid, $authoruid, $receiver = FALSE) {
  global $user, $company;
  $CuurCompNid = $_SESSION['company'];	
  $projlist = array();
  
  $query = db_select('node', 'n');
  $query->fields('n', array('nid','title'));
  $query->leftjoin('og_membership','ogm','ogm.etid=n.nid AND ogm.entity_type=:entityType', array(':entityType'=>'node'));
  $query->condition('n.type', 'project', '=');
  $query->condition('n.status', 1, '=');
  $query->orderBy('n.created', 'DESC');
  //$query->where('(ogm.gid=:ogmid)', array(':ogmid' => $CuurCompNid));
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
	$nid = $record['nid'];
	//if(is_rfp_invited_company($nid, 'project')) { 
	if($receiver) {
	  if(project_invited_by_user($nid, $uid, $authoruid, TRUE)) { 
	    $projlist[$nid] = $record['title'];
	  }	
	} else {
	  if(project_invited_by_user($nid, $uid, $authoruid)) { 
	    $projlist[$nid] = $record['title'];
	  }
	}
  }	
  return $projlist;
}

function get_insurance_contract_list() {
  global $user, $company;
  $CuurCompNid = $_SESSION['company'];	
  $projlist = array('-None-');
  $type = array('contract');
  
  $query = db_select('node', 'n');
  $query->fields('n', array('nid','title'));
  $query->leftJoin('og_membership', 'ogm', 'ogm.etid=n.nid');
  $query->condition('n.type', $type, 'IN');
  $query->condition('n.status', 1, '=');
  $query->orderBy('n.created', 'DESC');
  $query->where('(ogm.gid=:ogmid)', array(':ogmid' => $CuurCompNid));
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
	$nid = $record['nid'];
	$projlist[$nid] = $record['title'];
  }	
  return $projlist;
}

/**
 *  Check Current User'commany Invited For project.
 */
function project_invited_by_user($rfpNid, $uid, $authoruid, $receiverView = FALSE) {
	global $user;
	/*if ($receiverView) {
      $newUser = user_load($uid);
	  $uid = $user->uid;
	  $node = node_load($rfpNid);
	  //$companyNid = _get_company_nid_by_group_content($node);
    } else {
      //$newUser = $user; 
	  //$companyNid = $_SESSION['company'];
	} */
	////////////
	$node = node_load($rfpNid);
	/*if($user->uid != $node->uid) {
	  $user = user_load($node->uid);	
	} */
	/////////////
	$author = user_load($authoruid);
	$newUser = user_load($uid); //pre($user,1);
    
	$type = 'project';
	$commonUids = array($authoruid, $uid); 
	$commonemails = array(strtolower($newUser->mail),strtolower($author->mail));  //pre($commonemails,1); //pre($commonUids);
    //if ($companyNid && is_numeric($companyNid)) {
        /*         * ***Changed**** */
       // $isCompanyIndividual = is_company_individual_flag($companyNid);
        $companyMail = $author->mail;
        $query = db_select('node', 'n');
        $query->Join('field_data_field_rfp_invite_comapnies', 'ric', 'ric.entity_id=n.nid');
        $query->Join('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
        $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
        $query->leftJoin('field_data_field_invite_inbox_status', 'iis', 'ric.field_rfp_invite_comapnies_value = iis.entity_id');
		
		$query->leftJoin('invite_users_rfp_project', 'irp', 'n.nid = irp.entity_id');
		$query->fields('irp', array('invited_by'));
		$query->condition('irp.invited_by', $commonUids, 'IN');
		
        $query->fields('n', array('nid'));
        $query->condition('n.type', $type, '=');
        $query->condition('n.nid', $rfpNid, '=');

 	    $query->where('(
		(LOWER(rcne.field_rfp_company_nid_email_value) IN (:companyMail)) or 
		((FIND_IN_SET(:UserUid1,rcimu.field_co_invite_manager_uid_value)>0) or 
		(FIND_IN_SET(:UserUid2,rcimu.field_co_invite_manager_uid_value)>0))
		)',array(':UserUid1' => $newUser->uid,':UserUid2' => $author->uid,':companyMail'=>$commonemails));	
			

        $result = $query->execute()->fetchCol();
		if ($result && is_array($result) && !empty($result) && count($result) > 0) {
         return TRUE;
        }
    //}
    return FALSE;
}

function insurance_certificate_views_access_callback(){
  global $user;	
  $userCmpNid = '';
  if(isset($_SESSION['company']) && is_numeric($_SESSION['company'])){
	$userCmpNid = $_SESSION['company'];
  }
  if($userCmpNid && is_numeric($userCmpNid)){
	if(insurance_certificate_create_access_callback($userCmpNid)){  //routing_slip_create_access_by_user_callback($user->uid)
	  return TRUE;  
	}
    $query = db_select('node','n');
    $query->leftjoin('field_data_field_submit_to_company_user','scu','n.nid=scu.entity_id');
	$query->leftjoin('field_data_field_submit_to','st','n.nid=st.entity_id');
	//$query->leftJoin('og_membership', 'og', "og.etid = n.nid AND og.entity_type='node'"); 
    $query->fields('scu',array('field_submit_to_company_user_uid'));
    $query->condition('scu.field_submit_to_company_user_uid',$user->uid,'=');
	$query->condition('st.field_submit_to_target_id',$userCmpNid,'=');
	//$query->condition('og.gid',$userCmpNid,'=');
    $result = $query->execute()->fetchAll();
	if($result && !empty($result)){
	  return TRUE;
	}  	
  }
  return FALSE;
}

function insurance_certificate_create_access_callback($cmpNid){
  if(is_company_individual_flag($cmpNid)){
	/*$query = db_select('node','n');
	$query->leftjoin('users','u','u.uid=n.uid');
	$query->leftjoin('field_data_field_allow_ins_certi_access','arsa','u.uid=arsa.entity_id');
	$query->fields('arsa',array('field_allow_ins_certi_access_value'));
	$query->condition('n.nid',$cmpNid,'=');
	$result = $query->execute()->fetchColumn(0);
    return $result; */
	return;	 
  }
  $query = db_select('node','n');
  $query->leftjoin('field_data_field_allow_ins_certi_access','arsa','n.nid=arsa.entity_id');
  $query->fields('arsa',array('field_allow_ins_certi_access_value'));
  $query->condition('n.nid',$cmpNid,'=');
  $query->condition('arsa.field_allow_ins_certi_access_value',1,'=');
  $result = $query->execute()->fetchColumn(0);
  return $result; 	
}

/*
 * implement hook_node_view
 */
function m6connect_ins_cert_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'insurance_certificates') {
		if (isset($_GET['feedback-tab']) && $_GET['feedback-tab'] == 'feedback-tab') {
			$js = "jQuery('document').ready(function(){
	         jQuery('.group-ins-appr-feedback-tab').data('horizontalTab').focus();
	       });";
      drupal_add_js($js, 'inline');
		}
	//drupal_set_title('');
  }
}

/*
 * check unread message for submitter/approver
 */

function check_insurance_unread_message($nid, $uid, $otheruid){
  $query = db_select('m6connect_insurance_feedback_message','fm');
  $query->fields('fm',array('id'));
  $query->condition('fm.node_nid',$nid,'=');
  $query->condition('fm.user_uid',$otheruid,'=');
  $query->condition('fm.seen','0','=');
  $result = $query->execute()->rowCount(0);
  return $result;	
}

function change_seened_msg_status($nid){ 
  global $user;
  $entity = node_load($nid);
  if(in_array(_is_user_submiiter_receiver($entity),array('submitter','receiver'))) { 
    $submitToUserId = insurance_certificate_submited_for($entity->nid,'user');
    if($user->uid == $submitToUserId) {
	  $otheruserid = $entity->uid; 
    } else {
      $otheruserid = $submitToUserId;  
    }
    $isnew = check_insurance_unread_message($entity->nid, $user->uid, $otheruserid); 
    if($isnew) {
	  if (db_table_exists('m6connect_insurance_feedback_message')) {
        db_update('m6connect_insurance_feedback_message')
        ->fields(array('seen' => 1))
        ->condition('node_nid', $entity->nid, '=')
        ->condition('user_uid', $otheruserid, '=')
        ->condition('seen', 0, '=')
        ->execute();
      }  
    }
  }	
  exit();
}


function  m6connect_ins_cert_field_widget_form_alter(&$element, &$form_state, $context) { //drup_msg(pre($element));
  $has_field_collection_item = array('field_automotive_liability','field_builders_risk','field_commercial_general_liabili','field_excess_liability','field_garage_liability','field_professional_liability','field_workers_compensation_and_e');
	
	
  if (isset($element['#field_name']) && in_array($element['#field_name'] , $has_field_collection_item) && $context['instance']['bundle'] == 'insurance_certificates') {
    $element['#after_build'][] = 'custom_insurance_certificates_after_build';
  }
}



function custom_insurance_certificates_after_build($form, &$form_state) {
  if (isset($form['field_expiration_date']['und'][0]['value']['date'])) {
    $form['field_expiration_date']['und'][0]['value']['date']['#attributes']['onkeydown'] = 'return false;';
    $form['field_expiration_date']['und'][0]['value']['date']['#description'] = '';
  }
	if (isset($form['field_effective_date']['und'][0]['value']['date'])) {
    $form['field_effective_date']['und'][0]['value']['date']['#attributes']['onkeydown'] = 'return false;';
    $form['field_effective_date']['und'][0]['value']['date']['#description'] = '';
  }
	if (isset($form['field_cov_expiration_date']['und'][0]['value']['date'])) {
    $form['field_cov_expiration_date']['und'][0]['value']['date']['#attributes']['onkeydown'] = 'return false;';
    $form['field_cov_expiration_date']['und'][0]['value']['date']['#description'] = '';
  }      
  return $form;
}

function ins_cert_company_listed_dependees_after_build($element, &$form_state) {	
  if($element['#parents'][0]== 'field_location_address'){
    $element['und'][0]['street_block']['thoroughfare']['#states'] = array(
	  'required' => array(	  
		':input[name="field_is_company_listed_as_a_cer[und]"]' => array('value' => 'Y'),
	  ),
	);
	$element['und'][0]['locality_block']['locality']['#states'] = array(
	  'required' => array(	  
		':input[name="field_is_company_listed_as_a_cer[und]"]' => array('value' => 'Y'),
	  ),
	);
	$element['und'][0]['locality_block']['administrative_area']['#states'] = array(
	  'required' => array(	  
		':input[name="field_is_company_listed_as_a_cer[und]"]' => array('value' => 'Y'),
	  ),
	);
	$element['und'][0]['locality_block']['postal_code']['#states'] = array(
	  'required' => array(	  
		':input[name="field_is_company_listed_as_a_cer[und]"]' => array('value' => 'Y'),
	  ),
	);
  }
  
  if($element['#parents'][0]== 'field_individual_company_name_2'){
	$element['und'][0]['value']['#states'] = array(
	  'required' => array(	  
		':input[name="field_is_company_listed_as_a_cer[und]"]' => array('value' => 'Y'),
	  ),
	);  
  }
  
  // Check that the form has been submitted.
  if ($form_state['process_input']) {
    // If the save draft button was pressed.
    if ($form_state['values']['field_is_company_listed_as_a_cer']['und'][0]['value'] == 'N') {
      ins_cert_save_draft_remove_required($element);
    }	
  }
  return $element;
}

function custom_insurance_certificate_autofill_callback($form, &$form_state){ 
  $commands = array();  
  //$commands[] = ajax_command_alert($form_state['input']['title']);
  //drup_msg($form_state);
  $string = $form_state['input']['title'];
  $query = db_select('node', 'n');
  $query->condition('title', $string.'%', 'LIKE');
  //$query->condition('status', 1, '=');
  $query->condition('type', 'insurance_certificates', '=');
  $query->fields('n',array('nid'));
  $result = $query->execute()->fetchColumn(0);
    if(!($result)){
      return array('#type' => 'ajax','#commands' => $commands);
    }
    if(!empty($result)){
      $ins_node = node_load($result);
    }
	
	$ObjValue = 'value';
	$ObjTargetId = 'target_id';
	$ObjCountry = 'country';
	$ObjThoroughfare = 'thoroughfare';
	$ObjPremise = 'premise';
	$ObjLocality = 'locality';
	$ObjAdministrativeArea = 'administrative_area';
	$ObjPostalCode = 'postal_code';
	$ObjUid = 'uid';
	$ObjEmail = 'email';
	
    
 
    $AutoFillValues = array('field_submit_to'=>$ObjTargetId,'field_submit_to_company_user'=>$ObjUid,'field_submit_to_project'=>$ObjTargetId,'field_description_of_operations'=>$ObjValue,'field_desc_of_operations'=>$ObjValue,'field_is_company_listed_as_a_cer'=>$ObjValue,'field_individual_company_name_2'=>$ObjValue,'field_add_company_information'=>$ObjValue,'field_insurance_company_name'=>$ObjValue,'field_insurance_agent_s_name'=>$ObjValue,'field_phone'=>$ObjValue,'field_email'=>$ObjEmail,'field_certificate_number'=>$ObjValue,'field_revision_number'=>$ObjValue,'field_individual_company_name'=>$ObjValue,'field_expiration_date'=>$ObjValue);
	 $commands[] = ajax_command_replace("#ins-cert-submit-to-usr", render($form['submit_to_container']));
	 foreach($AutoFillValues as $key=>$obj){    
		if(isset($ins_node->{$key}['und'][0][$obj]) && !empty($ins_node->{$key}['und'][0][$obj])){
		  $FillValue = $ins_node->{$key}['und'][0][$obj];
		  if('field_submit_to' == $key){
		    $submitToUser = isset($FillValue)?_get_title_of_node($FillValue):'';
		    $commands[] = ajax_command_invoke('input[name="'.$key.'[und][0]['.$obj.']"]', 'val' ,array($submitToUser));
		  }else if('field_submit_to_company_user'== $key){
		    $commands[] = ajax_command_invoke('select[name="submit_to_user"]', 'val' ,array($FillValue));			
		  }else if('field_submit_to_project' == $key){		   
			$commands[] = ajax_command_invoke('select[name="submit_to_user_proj"]', 'val' ,array($FillValue));
		  }else if('field_description_of_operations'== $key){			
			$commands[] = ajax_command_invoke('.form-item-field-description-of-operations-und input[type="radio"]', 'removeAttr', array('checked'));			
	        $commands[]=ajax_command_invoke('.form-item-field-description-of-operations-und input[value="'.$FillValue.'"]','attr',array('checked', 'true')); 
			$commands[] = ajax_command_invoke('.form-item-field-description-of-operations-und input[value="'.$FillValue.'"]', 'trigger', array('change'));
		  }else if('field_is_company_listed_as_a_cer'== $key){			
			$commands[] = ajax_command_invoke('.form-item-field-is-company-listed-as-a-cer-und input[type="radio"]', 'removeAttr', array('checked'));			
	        $commands[]=ajax_command_invoke('.form-item-field-is-company-listed-as-a-cer-und input[value="'.$FillValue.'"]','attr',array('checked', 'true')); 			$commands[] = ajax_command_invoke('.form-item-field-is-company-listed-as-a-cer-und input[value="'.$FillValue.'"]', 'trigger', array('change'));
		  }else if('field_expiration_date' == $key){
			$FillValue_date_time = $ins_node->{$key}['und'][0][$obj];
			$FillValue_date = isset($FillValue_date_time)?format_date(strtotime($FillValue_date_time) , 'custom' , 'm/d/Y'):''; 
		    $commands[] = ajax_command_invoke('input[name="'.$key.'[und][0]['.$obj.'][date]"]', 'val' ,array($FillValue_date));
		  }else if('field_desc_of_operations' == $key || 'field_add_company_information' == $key){
		    $commands[] = ajax_command_invoke('textarea[name="'.$key.'[und][0]['.$obj.']"]', 'val' ,array($FillValue));
		  }else{
			$commands[] = ajax_command_invoke('input[name="'.$key.'[und][0]['.$obj.']"]', 'val' ,array($FillValue));
		  }
		}
	  }
	  
	$AutoFillValues01 = array($ObjThoroughfare=>'field_location_address',$ObjPremise=>'field_location_address',$ObjLocality=>'field_location_address',$ObjAdministrativeArea=>'field_location_address',$ObjPostalCode=>'field_location_address');	
	 foreach($AutoFillValues01 as $key01=>$obj01){    
		if(isset($ins_node->{$obj01}['und'][0][$key01]) && !empty($ins_node->{$obj01}['und'][0][$key01])){
		  $FillValue01 = $ins_node->{$obj01}['und'][0][$key01];
		  if('administrative_area'== $key01){
		    $commands[] = ajax_command_invoke('select[name="'.$obj01.'[und][0]['.$key01.']"]', 'val' ,array($FillValue01));
		  }else{
		    $commands[] = ajax_command_invoke('input[name="'.$obj01.'[und][0]['.$key01.']"]', 'val' ,array($FillValue01));
		  }
		}
	  }
	
    $AutoFillValues02 = array($ObjThoroughfare=>'field_insurer_address',$ObjPremise=>'field_insurer_address',$ObjLocality=>'field_insurer_address',$ObjAdministrativeArea=>'field_insurer_address',$ObjPostalCode=>'field_insurer_address');	
      foreach($AutoFillValues02 as $key02=>$obj02){    
		if(isset($ins_node->{$obj02}['und'][0][$key02]) && !empty($ins_node->{$obj02}['und'][0][$key02])){
		  $FillValue02 = $ins_node->{$obj02}['und'][0][$key02];
		  if('administrative_area'== $key02){
		    $commands[] = ajax_command_invoke('select[name="'.$obj02.'[und][0]['.$key02.']"]', 'val' ,array($FillValue02));
		  }else{
		    $commands[] = ajax_command_invoke('input[name="'.$obj02.'[und][0]['.$key02.']"]', 'val' ,array($FillValue02));
		  }
		}
	  }
	  
    $AutoFillValues03 = array($ObjThoroughfare=>'field_address',$ObjPremise=>'field_address',$ObjLocality=>'field_address',$ObjAdministrativeArea=>'field_address',$ObjPostalCode=>'field_address'); 	
	  foreach($AutoFillValues03 as $key03=>$obj03){    
		if(isset($ins_node->{$obj03}['und'][0][$key03]) && !empty($ins_node->{$obj03}['und'][0][$key03])){
		  $FillValue03 = $ins_node->{$obj03}['und'][0][$key03];
		  if('administrative_area'== $key03){
		    $commands[] = ajax_command_invoke('select[name="'.$obj03.'[und][0]['.$key03.']"]', 'val' ,array($FillValue03));
		  }else{
		    $commands[] = ajax_command_invoke('input[name="'.$obj03.'[und][0]['.$key03.']"]', 'val' ,array($FillValue03));
		  }
		}
	  }
	  
	$field_general_liability = isset($ins_node->field_commercial_general_liabili['und'][0]['value']) ? $ins_node->field_commercial_general_liabili['und'][0]['value']:'';	
      if($field_general_liability){
	  $automotiveCoverage = get_covrage_value_by_item_id($field_general_liability);
	  //$commands[] = ajax_command_invoke('.form-item-field-commercial-select-und input[type="checkbox"]', 'removeAttr', array('checked'));			
	  $commands[] =ajax_command_invoke('.form-item-field-commercial-select-und input[name="field_commercial_select[und]"]','attr',array('checked', 'true')); 	 // $commands[] = ajax_command_invoke('.form-item-field-commercial-select-und input[value="'.$field_general_liability.'"]', 'trigger', array('change'));
	  $Coveragearray = array('field_policy_number_value'=>'field_policy_number','field_coverage_limits_value'=>'field_coverage_limits','field_effective_date_value'=>'field_effective_date','field_cov_expiration_date_value'=>'field_cov_expiration_date');
		foreach($automotiveCoverage as $autokey=>$atuoobj){
		  if($autokey == 'field_effective_date_value' || $autokey == 'field_cov_expiration_date_value'){
			$autokey_date_time = $ins_node->{$key}['und'][0][$obj];
			$autokey_date = isset($atuoobj)?format_date(strtotime($atuoobj) , 'custom' , 'm/d/Y'):'';
			$commands[] = ajax_command_invoke('input[name="field_commercial_general_liabili[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.'][date]"]', 'val' ,array($autokey_date));
		  }else{
			$commands[] = ajax_command_invoke('input[name="field_commercial_general_liabili[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.']"]', 'val' ,array($atuoobj));
		  }
		}	  
      }
	  
	$field_automotive_liability = isset($ins_node->field_automotive_liability['und'][0]['value']) ? $ins_node->field_automotive_liability['und'][0]['value']:'';	
      if($field_automotive_liability){
	  //$commands[] = ajax_command_invoke('.form-item-field-automotive-select-und input[type="checkbox"]', 'removeAttr', array('checked'));			
	  $commands[] =ajax_command_invoke('.form-item-field-automotive-select-und input[name="field_automotive_select[und]"]','attr',array('checked', 'checked')); 	  
	  //$commands[] = ajax_command_invoke('.form-item-field-automotive-select-und input[value="'.$field_automotive_liability.'"]', 'trigger', array('select'));
	  $automotiveCoverage = get_covrage_value_by_item_id($field_automotive_liability);
	  $Coveragearray = array('field_policy_number_value'=>'field_policy_number','field_coverage_limits_value'=>'field_coverage_limits','field_effective_date_value'=>'field_effective_date','field_cov_expiration_date_value'=>'field_cov_expiration_date');
		foreach($automotiveCoverage as $autokey=>$atuoobj){
		  if($autokey == 'field_effective_date_value' || $autokey == 'field_cov_expiration_date_value'){
			$autokey_date_time = $ins_node->{$key}['und'][0][$obj];
			$autokey_date = isset($atuoobj)?format_date(strtotime($atuoobj) , 'custom' , 'm/d/Y'):'';
			$commands[] = ajax_command_invoke('input[name="field_automotive_liability[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.'][date]"]', 'val' ,array($autokey_date));
		  }else{
			$commands[] = ajax_command_invoke('input[name="field_automotive_liability[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.']"]', 'val' ,array($atuoobj));
		  }
		}	  
      }
		
	$field_professional_liability = isset($ins_node->field_professional_liability['und'][0]['value']) ? $ins_node->field_professional_liability['und'][0]['value']:'';	
      if($field_professional_liability){
	  $commands[] = ajax_command_invoke('.form-item-field-professional-liability-sel-und input[type="checkbox"]', 'removeAttr', array('checked'));			
	  $commands[] =ajax_command_invoke('.form-item-field-professional-liability-sel-und input[name="field_professional_liability_sel[und]"]','attr',array('checked', 'true')); 	  
	  $automotiveCoverage = get_covrage_value_by_item_id($field_professional_liability);
	  $Coveragearray = array('field_policy_number_value'=>'field_policy_number','field_coverage_limits_value'=>'field_coverage_limits','field_effective_date_value'=>'field_effective_date','field_cov_expiration_date_value'=>'field_cov_expiration_date');
		foreach($automotiveCoverage as $autokey=>$atuoobj){
		  if($autokey == 'field_effective_date_value' || $autokey == 'field_cov_expiration_date_value'){
			$autokey_date_time = $ins_node->{$key}['und'][0][$obj];
			$autokey_date = isset($atuoobj)?format_date(strtotime($atuoobj) , 'custom' , 'm/d/Y'):'';
			$commands[] = ajax_command_invoke('input[name="field_professional_liability[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.'][date]"]', 'val' ,array($autokey_date));
		  }else{
			$commands[] = ajax_command_invoke('input[name="field_professional_liability[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.']"]', 'val' ,array($atuoobj));
		  }
		}	  
      }
	  $field_builders_risk = isset($ins_node->field_builders_risk['und'][0]['value']) ? $ins_node->field_builders_risk['und'][0]['value']:'';	
      if($field_builders_risk){
	  $automotiveCoverage = get_covrage_value_by_item_id($field_builders_risk);
	  $Coveragearray = array('field_policy_number_value'=>'field_policy_number','field_coverage_limits_value'=>'field_coverage_limits','field_effective_date_value'=>'field_effective_date','field_cov_expiration_date_value'=>'field_cov_expiration_date');
		foreach($automotiveCoverage as $autokey=>$atuoobj){
		  if($autokey == 'field_effective_date_value' || $autokey == 'field_cov_expiration_date_value'){
			$autokey_date_time = $ins_node->{$key}['und'][0][$obj];
			$autokey_date = isset($atuoobj)?format_date(strtotime($atuoobj) , 'custom' , 'm/d/Y'):'';
			$commands[] = ajax_command_invoke('input[name="field_builders_risk[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.'][date]"]', 'val' ,array($autokey_date));
		  }else{
			$commands[] = ajax_command_invoke('input[name="field_builders_risk[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.']"]', 'val' ,array($atuoobj));
		  }
		}	  
      }
	  $field_garage_liability = isset($ins_node->field_garage_liability['und'][0]['value']) ? $ins_node->field_garage_liability['und'][0]['value']:'';	
      if($field_garage_liability){
	  $automotiveCoverage = get_covrage_value_by_item_id($field_garage_liability);
	  $Coveragearray = array('field_policy_number_value'=>'field_policy_number','field_coverage_limits_value'=>'field_coverage_limits','field_effective_date_value'=>'field_effective_date','field_cov_expiration_date_value'=>'field_cov_expiration_date');
		foreach($automotiveCoverage as $autokey=>$atuoobj){
		  if($autokey == 'field_effective_date_value' || $autokey == 'field_cov_expiration_date_value'){
			$autokey_date_time = $ins_node->{$key}['und'][0][$obj];
			$autokey_date = isset($atuoobj)?format_date(strtotime($atuoobj) , 'custom' , 'm/d/Y'):'';
			$commands[] = ajax_command_invoke('input[name="field_garage_liability[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.'][date]"]', 'val' ,array($autokey_date));
		  }else{
			$commands[] = ajax_command_invoke('input[name="field_garage_liability[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.']"]', 'val' ,array($atuoobj));
		  }
		}	  
      }
	  $field_excess_liability = isset($ins_node->field_excess_liability['und'][0]['value']) ? $ins_node->field_excess_liability['und'][0]['value']:'';	
      if($field_excess_liability){
	  $automotiveCoverage = get_covrage_value_by_item_id($field_excess_liability);
	  $Coveragearray = array('field_policy_number_value'=>'field_policy_number','field_coverage_limits_value'=>'field_coverage_limits','field_effective_date_value'=>'field_effective_date','field_cov_expiration_date_value'=>'field_cov_expiration_date');
		foreach($automotiveCoverage as $autokey=>$atuoobj){
		  if($autokey == 'field_effective_date_value' || $autokey == 'field_cov_expiration_date_value'){
			$autokey_date_time = $ins_node->{$key}['und'][0][$obj];
			$autokey_date = isset($atuoobj)?format_date(strtotime($atuoobj) , 'custom' , 'm/d/Y'):'';
			$commands[] = ajax_command_invoke('input[name="field_excess_liability[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.'][date]"]', 'val' ,array($autokey_date));
		  }else{
			$commands[] = ajax_command_invoke('input[name="field_excess_liability[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.']"]', 'val' ,array($atuoobj));
		  }
		}	  
      }
	  $field_workers_compensation_and_e = isset($ins_node->field_workers_compensation_and_e['und'][0]['value']) ? $ins_node->field_workers_compensation_and_e['und'][0]['value']:'';	
      if($field_workers_compensation_and_e){
	  $automotiveCoverage = get_covrage_value_by_item_id($field_workers_compensation_and_e);
	  $Coveragearray = array('field_policy_number_value'=>'field_policy_number','field_coverage_limits_value'=>'field_coverage_limits','field_effective_date_value'=>'field_effective_date','field_cov_expiration_date_value'=>'field_cov_expiration_date');
		foreach($automotiveCoverage as $autokey=>$atuoobj){
		  if($autokey == 'field_effective_date_value' || $autokey == 'field_cov_expiration_date_value'){
			$autokey_date_time = $ins_node->{$key}['und'][0][$obj];
			$autokey_date = isset($atuoobj)?format_date(strtotime($atuoobj) , 'custom' , 'm/d/Y'):'';
			$commands[] = ajax_command_invoke('input[name="field_workers_compensation_and_e[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.'][date]"]', 'val' ,array($autokey_date));
		  }else{
			$commands[] = ajax_command_invoke('input[name="field_workers_compensation_and_e[und][0]['.$Coveragearray [$autokey].'][und][0]['.$ObjValue.']"]', 'val' ,array($atuoobj));
		  }
		}	  
      }
	
    return array('#type' => 'ajax','#commands' => $commands); 
}



//

function ins_cert_save_draft_form_after_build($element, &$form_state) {
  // Check that the form has been submitted.
  if ($form_state['process_input']) {
    // If the save draft button was pressed.
    if ($form_state['triggering_element']['#value'] == $element['actions']['template']['#value']) {
      ins_cert_save_draft_remove_required($element);
    }
  }
  return $element;
}

function ins_cert_save_draft_remove_required(&$elements) {
  // Recurse through all children.
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
      ins_cert_save_draft_remove_required($elements[$key]);
    }
  }
  if (!empty($elements['#required'])) {
    $elements['#required'] = FALSE;
  }
}

function get_covrage_value_by_item_id($item_id){  
  $query = db_select('node','n');
  $query->join('field_data_field_policy_number', 'fpn', 'fpn.entity_id = n.nid');
  $query->join('field_data_field_coverage_limits', 'fcl', 'fcl.entity_id = n.nid');
  $query->join('field_data_field_effective_date', 'fed', 'fed.entity_id = n.nid');
  $query->join('field_data_field_cov_expiration_date', 'fced', 'fced.entity_id = n.nid');
  $query->fields('fpn',array('field_policy_number_value'));
  $query->fields('fcl',array('field_coverage_limits_value'));
  $query->fields('fed',array('field_effective_date_value'));
  $query->fields('fced',array('field_cov_expiration_date_value'));
  $query->condition('n.nid', $item_id , '=');  
  $result = $query->execute()->fetchAssoc();
  return $result;	
}


function contract_section_callback($status=false,$action=false,$ajax = NULL) {
  global $user;
  if ($ajax) {
    ctools_include('ajax');
	  ctools_include('modal');
  	$ctitle = '';
  	if($status == 'add'){
  	  $ctitle = 'Add New Contract';	
  	}else if($status == 'edit' && isset($action)){
  	  $ctitle = 'Edit Contract '.$action->title ;	
	  }	
  	$form_state = array(
      'ajax' => TRUE,
  		'title' => $ctitle,
  		'contract_status' => $status,
  		'contract_action' => $action,					
    );    
    $output = ctools_modal_form_wrapper('addnew_contract_action_form', $form_state);
  	if (!empty($form_state['ajax_commands'])) {
  	  $output = $form_state['ajax_commands'];
    }
  	print ajax_render($output);
  	drupal_exit();    
  }
  return drupal_get_form('addnew_contract_action_form',$status,$action);
}

function addnew_contract_action_form($form, &$form_state,$status=false,$action=false,$ajax = NULL)
{
  global $company;
  $cmcr = '';
  if(arg(0) == 'contract' && arg(1) == 'add' && !empty(arg(4))){
    $cmcr = arg(4);
  }
  $form['#attributes'] = array('class'=>array('addnew_contract_action_form'));
  if ($form_state['ajax'] == true) {
  	$status = $form_state['contract_status']; 
	  $action = $form_state['contract_action'];		
  }  
  $contract_og_group_ref = (isset($action)?$action->og_group_ref['und'][0]['target_id']:$company->nid);
  $form['contract_section_status'] = array('#type' => 'value', '#value' => $status);
  $form['contract_section_action'] = array('#type' => 'value', '#value' => $action);  
  $form['contract_section_og_group_ref'] = array('#type' => 'value', '#value' => $contract_og_group_ref);
  if(!empty($cmcr)){
    $form['cm_type'] = array(
      '#type' => 'hidden',
      '#value' => $cmcr,
    );
  }  
  $form['addnew_contract_container'] = array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('addnew_contract_container')),
  );  
  $form['addnew_contract_container']['addnew_contract_title'] = array(
    '#title' => 'Title',
    '#type' => 'textfield',
  	'#default_value' => (isset($action)?$action->title:''), 
  	'#required' => TRUE,	
  );
  $form['addnew_contract_container']['addnew_contract_project_list'] = array(
    '#type' => 'select',
  	'#title' => t('Select Project(s)'),	   
  	'#empty_option' => '- none -',
  	'#default_value' => (isset($action)?$action->field_contract_project_list['und'][0]['value']:''),
  	'#options' => contract_project_listing_new($cmcr),       
  );  
  $form['addnew_contract_container']['addnew_contract_body'] = array(
    '#type' => 'text_format',
	  '#title' => t('Description'),
    '#format'=> 'filtered_html',
  	'#default_value' => (isset($action)?$action->body['und'][0]['value']:''),
  	'#prefix' => '<div class="form-item">',
  	'#suffix' => '</div>',
  );
  $form['addnew_contract_container']['addnew_contract_file'] = array(
  	'#type' => 'dragndrop_upload',
  	'#title' => t('File Upload'),
  	'#file_upload_max_size' => '2M',
  	'#upload_location' => 'private://',
  	'#cardinality' => 4,
  	'#multiupload' => TRUE,
  	'#default_value' => (isset($action)?$action->field_file_upload['und'][0]['fid']:''),
  	'#attributes' => array('class'=>array('form-item')),
  	'#upload_validators' => array(
      'file_validate_extensions' => array('txt pdf jpg png doc docx tiff'),
    ),
  	'#description' => 'Files must be less than <strong>2 MB</strong>.<br>Allowed file types: <strong>txt pdf jpg png doc docx tiff</strong>.',
  );
  $form['addnew_contract_action_submit'] = array(
    '#type' => 'submit',
	  '#value' => t('Save')
  );  
  $form['addnew_contract_action_cancel']['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('group-delete-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    '#weight' => 10,
  );
  return $form;	  
}

function addnew_contract_action_form_submit($form, &$form_state) {// pre( $form_state['values'],1);
  global $user,$company;
  $values = $form_state['values'];
  $input = $form_state['input'];
  $cmcr = '';
  if(!empty($input['cm_type'])){
    $cmcr = $input['cm_type'];
  }
  if(isset($values) && !empty($values['addnew_contract_title']) && $values['contract_section_status'] == 'add'){  
  	$node = new stdClass();
  	$node->type = 'contract';
  	$node->title = $values['addnew_contract_title'];
  	node_object_prepare($node);
  	$node->status = 1;
  	$node->uid = $user->uid;
    $node->field_cm_type['und'][0]['value'] = $cmcr;
  	if(isset($values['addnew_contract_body']) && !empty( $values['addnew_contract_body']['value'])){
  	  $node->body['und'][0]['value'] = $values['addnew_contract_body']['value'];
  	  $node->body['und'][0]['format']	= 'filtered_html';
  	}
  	$node->og_group_ref['und'][0]['target_id'] = $company->nid;	
  	if(isset($values['addnew_contract_file']) && is_numeric($values['addnew_contract_file']) && $values['addnew_contract_file'] != 0){
  	  $fileObj = file_load($values['addnew_contract_file']);
  	  $fileObj->status = FILE_STATUS_PERMANENT;
  	  file_save($fileObj);
  	  $file = (array)$fileObj;
  	  $file['display']=1;
  	  //drup_msg($fileObj);
  	  $node->field_file_upload['und'][0] = $file;
  	}
  	if(isset($values['addnew_contract_project_list']) && is_numeric($values['addnew_contract_project_list'])){
  	  $node->field_contract_project_list['und'][0]['value']	= $values['addnew_contract_project_list'];
  	}
  	//drup_msg($node);
  	node_save($node);
  }
  if(isset($values) && !empty($values['addnew_contract_title']) && $values['contract_section_status']=='edit'){  // pre( $form_state['values'],1);
  	$node = $values['contract_section_action'];
    if(isset($node->field_cm_type['und'])){
      $cmcr = $node->field_cm_type['und'][0]['value'];
    }
  	$node->type = 'contract';
  	$node->title = $values['addnew_contract_title'];
  	node_object_prepare($node);
  	$node->status = 1;
  	$node->uid = $user->uid;    
  	if(isset($values['addnew_contract_body']) && !empty( $values['addnew_contract_body']['value']))
    {		
  	  $node->body['und'][0]['value'] = $values['addnew_contract_body']['value'];
  	  $node->body['und'][0]['format']	= 'filtered_html';
  	}else{
  	  $node->body = '';
  	}
  	$node->og_group_ref['und'][0]['target_id'] = $company->nid;	
  	if(isset($values['addnew_contract_file']) && is_numeric($values['addnew_contract_file']) && $values['addnew_contract_file'] != 0){
  	  $fileObj = file_load($values['addnew_contract_file']);
  	  $fileObj->status = FILE_STATUS_PERMANENT;
  	  file_save($fileObj);
  	  $file = (array)$fileObj;
  	  $file['display']=1;
  	  //drup_msg($fileObj);
  	  $node->field_file_upload['und'][0] = $file;
  	}else if(isset($values['addnew_contract_file']) && is_numeric($values['addnew_contract_file']) && $values['addnew_contract_file'] == 0){
  	  $node->field_file_upload = '';
  	}
  	if(isset($values['addnew_contract_project_list']) && is_numeric($values['addnew_contract_project_list'])){
  	  $node->field_contract_project_list['und'][0]['value']	= $values['addnew_contract_project_list'];
  	}else{
  	  $node->field_contract_project_list = '';
  	}
  	//drup_msg($node);
  	node_save($node);
  }
  $url = '/insurance-certificates/contracts';
  if(!empty($cmcr)){
    $url = '/insurance-certificates/'.$cmcr.'/contracts';
  }
  if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
  	$form_state['ajax_commands'][] = ctools_modal_command_dismiss(); 	
  	$form_state['ajax_commands'][] = ctools_ajax_command_redirect($url);	
  }
}

function insurance_invite_certificates_callback($ajax=NULL){
  if($ajax){
	$form_state = array(
	  'title' => '<div style="font-size:15px;padding-top:10px;">Invite Companies to Submit Insurance Certificates</div>',
	  'ajax' => TRUE,
	);
	$output = ctools_modal_form_wrapper('insurance_invite_certificates_company_form', $form_state); 
	if (!empty($form_state['ajax_commands'])) {
	  $output = $form_state['ajax_commands'];
	}
	print ajax_render($output);
	drupal_exit(); 
  }
  return drupal_get_form('insurance_invite_certificates_company_form');	
}
// callback for cpm function
function insurance_invite_certificates_cpm_callback($cm_type = '', $ajax=NULL){
  if($ajax){
    $form_state = array(
      'title' => '<div style="font-size:15px;padding-top:10px;">Invite Companies to Submit Insurance Certificates</div>',
      'ajax' => TRUE,
      'cm_type' => $cm_type,
    );
    $output = ctools_modal_form_wrapper('insurance_invite_certificates_company_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit(); 
  }
  return drupal_get_form('insurance_invite_certificates_company_form'); 
}
function insurance_invite_certificates_company_form($form,&$form_state){
  global $company;
  if(empty($form_state['comapny_listing'])){
    $form_state['comapny_listing'] = _get_all_organigation_mapping();
  	if(isset($form_state['comapny_listing'][$company->nid])){
  	  unset($form_state['comapny_listing'][$company->nid]);
  	}
  	$_SESSION['comapny_listing'] = $form_state['comapny_listing'];
  }  
  if(empty($form_state['project_company_invite_storage']) && empty($form_state['project_company_invite_storage_initialize'])){
  	$form_state['project_company_invite_storage_initialize'] =1;
  	if(isset($projectNode->field_m6id_project_invited_comp['und']) && !empty($projectNode->field_m6id_project_invited_comp['und'])){
  	  foreach($projectNode->field_m6id_project_invited_comp['und'] as $delta => $item){
  	    $form_state['project_company_default_invited'][] = 	$item['target_id'];  
  	  }
  	}
  	if(isset($projectNode->field_m6id_project_invited_email['und']) && !empty($projectNode->field_m6id_project_invited_email['und'])){
  	  foreach($projectNode->field_m6id_project_invited_email['und'] as $delta => $item){
  	    $form_state['project_email_default_invited'][] = 	$item['value'];  
  	  }
  	}
  }  
  if(empty($form_state['project_company_invite_storage'])){
  	$form_state['project_company_invite_storage']= array();
  	$tempIndentifer = uniqid();
  	$form_state['project_company_invite_storage'][$tempIndentifer]= array('type'=>'company');
  }
  $form['cm_type'] = array(
    '#type' => 'hidden',
    '#value' => !empty($form_state['cm_type']) ? $form_state['cm_type'] : '',
  );  
  $form['company_container'] = array(
    '#type' => 'container',
  	'#attributes' => array('class'=> array('m6id-projct-company-container')),
  	'#prefix' => '<div id="m6id-projct-company-container-section" class="margin-bottom-10">',
  	'#suffix' => '</div>',
  	'#process' => array('project_invite_company_process_callback'),
  	'#theme' => 'm6id_project_invite_companies_template',
  );  
  $form['action_container'] = array(
    '#type' => 'actions',
  );
  $closeButton = l('<input type="button" class="form-submit" value="Cancel" />', url('onboarding/projectlist'), array('html'=>TRUE,'attributes' => array('class' => array('m6id-popup-close'))));
  if(!empty($form_state['ajax'])){
	$closeButton = l('<input type="button" class="form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('m6id-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();')));  
  }  
  $form['action_container']['add_new_email'] = array(
    '#type'=>'submit',
  	'#value' => 'Add Email',
  	'#name' => 'add_new_email',
  	'#attributes'=> array('class'=>array('m6id-invite-workflow-action'),'title'=>'Add New Email'),
  	'#limit_validation_errors' => array(),
  	'#submit'=> array('add_m6id_project_invite_email_company_submit_handler'),
  	'#ajax' => array(
  	  'callback' => 'add_m6id_project_invite_email_company_callback',
  	  'wrapper' => 'm6id-projct-company-container-section',
  	  'method' => 'replace',
  	  'effect' => 'fade',
  	  'progress' => array('type'=> 'throbber', 'message'=> NULL),
  	),
  );  
  $form['action_container']['add_new_company'] = array(
    '#type'=>'submit',
  	'#value' => 'Add Company',
  	'#name' => 'add_new_company',
  	'#attributes'=> array('class'=>array('m6id-invite-workflow-action'),'title'=>'Add New Company'),
  	'#limit_validation_errors' => array(),
  	'#submit'=> array('add_m6id_project_invite_email_company_submit_handler'),
  	'#ajax' => array(
  	  'callback' => 'add_m6id_project_invite_email_company_callback',
  	  'wrapper' => 'm6id-projct-company-container-section',
  	  'method' => 'replace',
  	  'effect' => 'fade',
  	  'progress' => array('type'=> 'throbber', 'message'=> NULL),
  	),
  );  
  $form['action_container']['submit']= array(
    '#type' => 'submit',
  	'#value' => 'Invite',
  	'#suffix' => $closeButton,
  );
  return $form;
}
function insurance_invite_certificates_company_form_submit(&$form,&$form_state){
  global $user,$company;
  $value = $form_state['values'];
  $cpm_type = '';
  if(isset($value['cm_type']) && !empty($value['cm_type'])){
    $cpm_type = $value['cm_type'];    
  }
  $inviedcompanies = array();
  $Invited = array();  
  $index =0;
  $removedCompany = array();
  $project_invited_company_default = isset($form_state['project_company_default_invited'])?$form_state['project_company_default_invited']:array();
  $project_invited_email_default = isset($form_state['project_invited_email_default'])?$form_state['project_invited_email_default']:array();
  $new_invited_companies = array();
  // if(isset($value['project_nid']) && is_numeric($value['project_nid'])){
	//$node = node_load($value['project_nid']);
	$inside = 0;
	//if($node && is_object($node) && $node->type =='onboarding_project'){
	  if(!empty($value['invited_company'])){
		$inviteOnlyOnce = array();
  		foreach($value['invited_company'] as $uniqueId => $datarr){
  		  if(!empty($datarr['company_name']) && $datarr['company_nid'] && is_numeric($datarr['company_nid'])){
    			if(!in_array($datarr['company_nid'],$inviteOnlyOnce) && !in_array($datarr['company_nid'],$project_invited_company_default)){
    			  $Invited[] = $datarr['company_nid'];
    			  $inside = 1; 
    			  if(db_table_exists('m6connect_insurance_certificates_invite')){	  
      				$CompanyInvite= array(
      				  'user_uid' => $user->uid,
      				  'company_nid' => $datarr['company_nid'],
      				  'company_name' => $datarr['company_name'],
                'cpm_type' => $cpm_type,
      				  'timestamp' => time(),
      				);
      				$CompanyInviteId = db_insert('m6connect_insurance_certificates_invite')->fields($CompanyInvite)->execute(); 
    			  }			  
    			}
  		  }
  		}
	  }
	  if(!empty($value['invited_email'])){
		$inviteOnlyOnce = array();
  		foreach($value['invited_email'] as $uniqueId => $datarr){
  		  if(!empty($datarr['email_address'])  && valid_email_address($datarr['email_address'])){
    			if(!in_array($datarr['email_address'],$inviteOnlyOnce) && !in_array($datarr['email_address'],$project_invited_email_default)){
    			  $Invited[] = array('mail'=>$datarr['email_address']);
    			  $inside = 1; 
    			  if(db_table_exists('m6connect_insurance_certificates_invite')){	  
      				$MailInvite= array(
      				  'user_uid' => $user->uid,
      				  'mail' => $datarr['email_address'],
                'cpm_type' => $cpm_type,
      				  'timestamp' => time(),
      				);
      				$MailInviteId = db_insert('m6connect_insurance_certificates_invite')->fields($MailInvite)->execute(); 
    			  }
    			}
  		  }
  		}
	  }
	//}
	//node_save($node);
  //}
  $userRealnameName = _get_user_mail_realname_by_uid($user->uid);
  $userName = $userRealnameName['realname'];
  $companyName = _get_title_of_node($company->nid);
  $mail_message = '<p>Hello</p>
				   <p>You have been invited to submit insurance certificate.</p> 
                   <p>If you are not  a memeber of M6COnnect join by clicking on m6connect.com</p><br><br>
                   <p>Thanks</p><br>
                   '.$userName.'<br>
                    '.$companyName;
  $params = array(
	'subject' => 'insurance certificates invite', //$from_to_name
	'language' => language_default(),
	'module' => 'm6connect_misc',
	'key' => 'insurance_certificates_invite', //admin_mail___user_request_join_company
	'build' => TRUE,
  );
  if(isset($Invited) && !empty($Invited)){
  	foreach($Invited as $InvitedKey=>$InvitedDelta){
  	  if(is_numeric($InvitedDelta)){
  		$invitecomto = '';
  	    $InsCertManager = _get_company_users_by_og_roles($InvitedDelta, 'Insurance Certificate Manager');
          $CompanyAdmin = _get_company_users_by_og_roles($InvitedDelta, 'Company Admin');
  		$CompanyAuthor = _get_node_company_user_name($InvitedDelta);
  		if($InsCertManager){
  	      $invitecomto = $InsCertManager;
  		}
  		else if($CompanyAdmin){
  		  $invitecomto = $CompanyAdmin;
  		}
  		else{			
  		  $invitecomto = array($CompanyAuthor['company_author']);
  		}
  		foreach($invitecomto as $invitecomtoUids){ 
  		  $query = db_select('users','u');
  		  $query->fields ('u', array('mail'));
  		  $query->condition('u.status',1,'=');
  		  $query->condition('u.uid',$invitecomtoUids,'=');
  		  $userMail = $query->execute()->fetchColumn(0);		  
  		  $to = $userMail;		
  		  $params['body'] = $mail_message;
  		  drupal_mail($params['module'], $params['key'], $to, $params['language'], $params);		  
  		}		  
  	  }else{
  	    $to = $InvitedDelta['mail'];		
  		$params['body'] = $mail_message;
  		drupal_mail($params['module'], $params['key'], $to, $params['language'], $params);
  	  }	
  	}	 
  }  
  if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
  	$form_state['ajax_commands'][] = ctools_modal_command_dismiss(); 
  	drupal_set_message('Invitation has been sent successfully.');
      $form_state['ajax_commands'][] = ajax_command_html('.ins-cert-invite-success',theme('status_messages')); 
  }else{
	  $form_state['redirect'] = url(current_path());  
  }
}

function insurance_certificates_manage_view(){
  $quicktabs = quicktabs_build_quicktabs('insurance_certificates_manage_ta');
  return render($quicktabs);
}

function insurance_certificates_myinscert_view(){
  $quicktabs = quicktabs_build_quicktabs('insurance_certificates_myinscert');
  return render($quicktabs);
}
function insurance_certificates_construction_manager_view($cm_type){
  $quicktabs = quicktabs_build_quicktabs('insurance_certificate_cpm_group');
  return render($quicktabs);
}
function insurance_certificates_construction_manager($cm_type){
  $quicktabs = quicktabs_build_quicktabs('insurance_certificate_cpm_group_');
  return render($quicktabs);
}
function insurance_certificates_invite_log($uid,$ajax=FALSE,$endRange,$nextCount){
  global $user;
  $output = '';
  $cm_type = '';
  if(arg(0) == 'insurance-certificates' && (arg(1) == 'cr' || arg(1) == 'cm' || arg(1) == 'cpm')){
    $cm_type = arg(1);
    $output .= '<div class="clearfix"><div class="pull-left ins-cert-invite-success"></div><div class="pull-right">'.l('Invite Companies','insurance-certificates-invite-cpm/'.arg(1).'/nojs', array('html'=>TRUE,'attributes'=>array('class'=>array('ctools-use-modal','ctools-modal-assign-dashboard-popup-style','btn btn-primary')))).'</div></div>';
  }
  else{
    $output .= '<div class="clearfix"><div class="pull-left ins-cert-invite-success"></div><div class="pull-right">'.l('Invite Companies','insurance-certificates-invite/nojs', array('html'=>TRUE,'attributes'=>array('class'=>array('ctools-use-modal','ctools-modal-assign-dashboard-popup-style','btn btn-primary')))).'</div></div>';    
  }
  $header = array (
	'Company Name or Email',			
	'Date',
	'Action' 
  );
  $header = array (
	array (
	  'data' => 'Company Name or Email',
	  'class' => array (
		'text-left' 
	  ) 
	),
	array (
	  'data' => 'Date',
	  'class' => array (
		'text-left' 
	  ) 
	),
	array (
	  'data' => 'Action',
	  'class' => array (
		'text-left' 
	  ) 
	),
  );
  $rows = array ();
   
  $query = db_select('m6connect_insurance_certificates_invite','mici');
  $query->distinct();
  $query->fields('mici');
  $query->condition('mici.user_uid',$user->uid,'=');
  if(!empty($cm_type)){
    $query->condition('mici.cpm_type',$cm_type,'=');
  }
  $query->orderBy('id', 'DESC'); 
  if($ajax && is_numeric($endRange)){
    $query->condition('mici.id',$endRange,'<');
	$query->range(0,10);
	$result = $query->execute()->fetchAll();	
  }
  else {
    $result= $query->extend('PagerDefault')->limit(10)->execute();
  }

  foreach($result as $key=>$delta){
  	$date_object = new DateObject($delta->timestamp, new DateTimeZone('UTC'));
  	$date_object->setTimezone(new DateTimeZone(drupal_get_user_timezone()));
  	$messagetime = date_format_date($date_object, 'custom', 'h:i A');
  	$messagedate = date_format_date($date_object, 'custom', 'm/d/Y');	
    $MailOrComapnyName = array();
  	$ResendMailOrComapnyNid = array();
    if(isset($delta->mail)){
      $MailOrComapnyName = $delta->mail;
      $ResendMailOrComapnyNid = $delta->mail;	  
    }
    else{
      $MailOrComapnyName = $delta->company_name;
      $ResendMailOrComapnyNid = $delta->company_nid;  
    }
    // pre($comapnyNameOrmail);
	$action = '<div class="btn-group">
              <div class="dropdown">
                <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
                <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                  <li>'.l('Resend', url('/insurance-certificates-invite/'.$delta->id.'/resend/'.$ResendMailOrComapnyNid.'/nojs'), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax'))) ).'
				          </li>
					        <li>'.l('Delete', url('/insurance-certificates-invite/'.$delta->id.'/delete/'.$ResendMailOrComapnyNid.'/nojs'), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax'))) ).'
					        </li>
                </ul>
			        </div>
			      </div>';
			 
	$rows [] = array (
	  'data' => array (
		array (
		  'data' => $MailOrComapnyName,
		  'class' => array (
		  'view-MailOrComapnyName-invite' 
		  )
		),
		array (
		  'data' => $messagedate,
		  'class' => array (
		  'view-invite-date ins-cert-invite-date-'.$delta->id 
		  )
		),
		array (
		  'data' => $action,
		  'class' => array (
		  'view-invite-action' 
		  )
		),
		//array ()
	  ),
	  'class' => array (
	    'ins-invite-listing','ins_invite-listing-row-' . $delta->id 
	  ),
	  'for'=>array(
	    $delta->id
	  )
    ); 	 
  }
  if(!$ajax){
	$output .= theme ( 'table', array (
	  'header' => $header,
	  'rows' => $rows,
	  'empty' => 'Not Available Yet',
	  'attributes' => array (
		'id' => 'insurance-invite-mail-detail-table',
		'class' => array (
		  'insurance-mail-invite-detail-table m6connect-custom-table',
		  'table',
		  'table-bordered',
		  'table-hover',
		  'table-striped' 
		) 
	  ),
	  'sticky' => FALSE 
	) );		    
  }else{
	 $output = theme('feedback_table_rows', array('header' => array(), 'rows' => $rows));
  }    
  $query1 = db_select('m6connect_insurance_certificates_invite','mici');
  $query1->fields('mici');
  $query1->condition('mici.user_uid',$user->uid,'=');
  if(!empty($cm_type)){
    $query1->condition('mici.cpm_type',$cm_type,'=');
  }
  $query1->orderBy('id', 'DESC'); 
  $resultrowCount = $query1->execute()->rowCount(); 
  if(!$ajax){ 
    if($resultrowCount >= 10){
	  $output .= '<div class="inscert-invite-nav text-center">'.l('See More', '#', array('attributes' => array('class' => 'inscert-invite-data-load-more', 'for' => $delta->id,'data-totalrow'=>$resultrowCount))).'</div>';
	}	
  }
  return $output;   
}

function insurance_certificates_log_action_callback($inviteId,$action,$InvitedDelta,$ajax=NULL){
//pre($inviteId);
//pre($action);
//pre($deta);
//pre($ajax,1);
  global $user,$company;
  $commands = array();
  if($ajax ==1 && is_numeric($inviteId) && $action == 'resend'){
	$date_object = new DateObject(time(), new DateTimeZone('UTC'));
	$date_object->setTimezone(new DateTimeZone(drupal_get_user_timezone()));
	$messagetime = date_format_date($date_object, 'custom', 'h:i A');
	$messagedate = date_format_date($date_object, 'custom', 'm/d/Y');
	
	$userRealnameName = _get_user_mail_realname_by_uid($user->uid);
	$userName = $userRealnameName['realname'];
	$companyName = _get_title_of_node($company->nid);
	$mail_message = '<p>Hello</p>
					 <p>You have been invited to submit insurance certificate.</p> 
					 <p>If you are not  a memeber of M6COnnect join by clicking on m6connect.com</p><br><br>
					 <p>Thanks</p><br>
					 '.$userName.'<br>
					  '.$companyName;
	$params = array(
	  'subject' => 'insurance certificates invite', //$from_to_name
	  'language' => language_default(),
	  'module' => 'm6connect_misc',
	  'key' => 'insurance_certificates_invite', //admin_mail___user_request_join_company
	  'build' => TRUE,
	);	  
	if(is_numeric($InvitedDelta)){
	  $invitecomto = '';
	  $InsCertManager = _get_company_users_by_og_roles($InvitedDelta, 'Insurance Certificate Manager');
	  $CompanyAdmin = _get_company_users_by_og_roles($InvitedDelta, 'Company Admin');
	  $CompanyAuthor = _get_node_company_user_name($InvitedDelta);
	  if($InsCertManager){
		$invitecomto = $InsCertManager;
	  }
	  else if($CompanyAdmin){
		$invitecomto = $CompanyAdmin;
	  }
	  else{			
		$invitecomto = array($CompanyAuthor['company_author']);
	  }
	  foreach($invitecomto as $invitecomtoUids){ 
		$query = db_select('users','u');
		$query->fields ('u', array('mail'));
		$query->condition('u.status',1,'=');
		$query->condition('u.uid',$invitecomtoUids,'=');
		$userMail = $query->execute()->fetchColumn(0);		  
		$to = $userMail;		
		$params['body'] = $mail_message;
		drupal_mail($params['module'], $params['key'], $to, $params['language'], $params);		  
	  }		  
	}else{
	  $to = $InvitedDelta;		
	  $params['body'] = $mail_message;
	  drupal_mail($params['module'], $params['key'], $to, $params['language'], $params);
	}
	  $query = db_update('m6connect_insurance_certificates_invite');
	  $query->fields(array('timestamp' => time()))
	  ->condition ('id',$inviteId,'=')
	  ->execute();
	  drupal_set_message('Invitation has been sent successfully.');
	  $commands[] = ajax_command_html('.ins-cert-invite-success',theme('status_messages'));
	  $commands[] = ajax_command_html('td.ins-cert-invite-date-'.$inviteId,$messagedate);
	  
	  
  }
  if($ajax ==1 && is_numeric($inviteId) && $action == 'delete' && db_table_exists('m6connect_insurance_certificates_invite')){		
	db_delete ( 'm6connect_insurance_certificates_invite' )
	->condition ('id', $inviteId)
	->execute();  
    $commands[] = ajax_command_remove('.ins_invite-listing-row-'.$inviteId);  
  }
  print ajax_render($commands);
  exit;
}

function load_more_btn_data_callback($type,$endRange,$nextCount) {
  global $user,$company;
  if($type == 'inscert-invite-mail') {
    $tableRows = insurance_certificates_invite_log($user->uid,$ajax=TRUE,$endRange,$nextCount);
  }

  drupal_json_output(array('tableDate'=>$tableRows));
  drupal_exit(0);
}