<?php
/**
 * Implements hook_menu.
 */

function m6connect_routing_menu(){
  $items = array();	
  
  $items['routing-slip/move/%/%node'] = array(
    'page callback' => 'routing_slip_move_callback',
	'page arguments' => array(2,3),
    'access callback' => 'check_routing_slip_access',
	'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  
  /*$items['routing-approver-action/%/%'] = array(
    'page callback' => 'routing_slip_approver_action_callback',
	'page arguments' => array(1,2),
    'access callback' => TRUE,
	//'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );*/
  
  $items['routing-approver-action/%/%/%node'] = array(
    'page callback' => 'routing_slip_approver_action_callback',
	'page arguments' => array(1,2,3,4),
    'access callback' => TRUE,
	//'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  
  /*$items['approval-type/%node'] = array(
	'title' => 'Approval Types',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('add_new_routing_approval_type_form', 1),
	'access callback' => 'check_routing_slip_access',
	'access arguments' => array(1), 
  );
  
  $items['invite-approvers/%node'] = array(
	'title' => 'Invite Approvers',
	'page callback' => 'routing_slip_find_companies',
	'access callback' => 'check_routing_slip_access',
	'access arguments' => array(1),
  );*/
  
  $items['approver-feedback/%node'] = array(
	'title' => 'Approver Feedback',
	'page callback' => 'routing_slip_approval_feedback_content',
	'access callback' => 'check_routing_slip_access',
	'access arguments' => array(1),
  );
  
  $items['remove-routing-invited-company/%node/%'] = array(
	  'title' => t('Remove Invited Company Callback'),
	  'page callback' => 'remove_routing_invited_company_callback',
	  'page arguments' => array(1, 2),
	  'access arguments' => array('m6connect_authenticate_user'),
	  'type' => MENU_CALLBACK,
  );
  
  $items['remove-routing-feedback-message/%/%ctools_js'] = array(
	  'page callback' => 'remove_routing_feedback_message_callback',
	  'page arguments' => array(1, 2),
	  'access callback' => TRUE,
	  'type' => MENU_CALLBACK,
    );
	
  $items['get-request-approval-reminder/%node/%'] = array(
        'page callback' => 'get_request_approval_reminder_form_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
	/*$items['request-approval-reminder/%node/%/%ctools_js'] = array(
        'page callback' => 'request_approval_reminder_callback',
        'page arguments' => array(1, 2, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );*/
	
	$items['request-approval-reminder/%node/%'] = array(
        'page callback' => 'request_approval_reminder_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
	
	$items['approval-type-action/%/%node/%/%ctools_js'] = array(
	  'page callback' => 'approval_type_action_callback',
	  'page arguments' => array(1,2,3,4),
	  'access callback' => 'check_routing_slip_access',
	  'access arguments' => array(2),
	  'type' => MENU_CALLBACK,
    );
	
	$items['assign-approval-types/%ctools_js/%/%node'] = array(
	  'page callback' => 'assign_approval_types_callback',
	  'page arguments' => array(1, 2, 3),
	  'access callback' => TRUE,
	  'type' => MENU_CALLBACK,
    );
	
	$items['choose-approval-type/%ctools_js/%node/%'] = array(
        'page callback' => 'approval_type_user_response_callback',
        'page arguments' => array(1, 2, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
	
	$items['routing-slip-settings'] = array(
		'title' => 'Routing Slip -Settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('routing_slip_settings_form'),
		'access callback' => 'routing_slip_create_access_param',
		//'access arguments' => array(1), 
		//'access callback' => TRUE,
  	);
  
  $items['routing-company/autocomplete'] = array(
    'page callback' => 'routing_company_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['invite-handler/%'] = array(
    'page callback' => 'routing_slip_cron_invite_handler2',
	'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['copy-routing-slip/%node'] = array(
	'page callback' => 'routing_slip_node_clone',
	'page arguments' => array(1),
	'access callback' => 'routing_slip_node_clone_access',
	'access arguments' => array(1),
	'type' => MENU_CALLBACK,
  );
  
  $items['copy-routing-type/%node'] = array(
	'page callback' => 'routing_type_node_clone',
	'page arguments' => array(1),
	'access callback' => user_is_logged_in(),
	'type' => MENU_CALLBACK,
  );
  
  $items['routing-settings'] = array(
	'title' => 'Routing Type Settings',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('routing_type_settings_form'),
	'access callback' => 'routing_type_settings_access_callback',
  );

  	$items['signature-rfp/%ctools_js/%/%'] = array(
        'page callback' => 'signature_rfp_callback',
        'page arguments' => array(1,2,3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
  
  return $items;
}

function routing_slip_node_clone_access($node){
  global $user;
  if(user_is_logged_in() && $user->uid == $node->uid){
	return TRUE;
  }
  return FALSE;
}

function routing_type_settings_access_callback(){
  global $user;
  $cmpNid = $_SESSION['company'];
  $userCmpRoles = og_get_user_roles('node', $cmpNid);
  $intersect = array_intersect(array_values($userCmpRoles),array('administrator member','company admin'));
  if(!empty($intersect)){
	return TRUE;  
  }
  return FALSE; 
}

function m6connect_routing_preprocess_page(&$variables) {
  if (current_path() == 'routing-settings') {
	$variables['title'] = '';
  }
}

function routing_slip_create_access_param(){
  $cmpNid = $_SESSION['company'];
  if(routing_slip_create_access_callback($cmpNid)){
	return TRUE;  
  }
  return FALSE;
}

function m6connect_routing_init(){
  if(isset($_SESSION['routing_type_save_dialog'])){
	if(!empty($_SESSION['routing_type_save_dialog'])){
	  drupal_add_js(array('m6connect_routing' => array(
	    'routing_type_save_dialog' => 1,
		'routing_type_save_data'=>$_SESSION['routing_type_save_dialog'])
	  ), 'setting');	
	}
	unset($_SESSION['routing_type_save_dialog']);  
  }
}

function m6connect_routing_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node->type == 'routing_slip') {
	if ((isset($_REQUEST['route-invite']) && $_REQUEST['route-invite']==1) || isset($_REQUEST['co_name'])) {
      drupal_add_js(array('m6connect_routing' => array('invite_approvers_active' => 1)), 'setting');
	}
  }
}


function check_routing_slip_access($node){
  global $user;
  $cmpcall = in_array($user->uid, _get_current_company_users($node->uid)); 
  if ($node->type =='routing_slip' && ($node->uid == $user->uid || $cmpcall)) {
	return TRUE;	  
  }
  return FALSE;	
}

function m6connect_routing_node_access($node, $op, $account) {
  //$type = is_string($node) ? $node : $node->type;
  $type = (is_object($node) && isset($node->type)) ? $node->type : '';
  $currentCompanyNid = '';
  if(isset($_SESSION['company']) && is_numeric($_SESSION['company'])){
    $currentCompanyNid = $_SESSION['company'];   
  }
  if($type == 'routing_slip' && in_array($op,array('create','update','view'))){
	if($currentCompanyNid && is_numeric($currentCompanyNid)){
	  if(in_array($op, array('create','update')) && routing_slip_create_access_callback($currentCompanyNid)){
	    return NODE_ACCESS_ALLOW;  
	  }
	  if(in_array($op, array('view')) && routing_slip_node_view_access_callback($node,$currentCompanyNid,$account)){
	    return NODE_ACCESS_ALLOW;  
	  }
	}
	return NODE_ACCESS_DENY;  
  }
  return NODE_ACCESS_IGNORE;	
}

function routing_slip_create_access_callback($cmpNid){
  if(is_company_individual_flag($cmpNid)){
	$query = db_select('node','n');
	$query->leftjoin('users','u','u.uid=n.uid');
	$query->leftjoin('field_data_field_allow_routing_slip_access','arsa','u.uid=arsa.entity_id');
	$query->fields('arsa',array('field_allow_routing_slip_access_value'));
	$query->condition('n.nid',$cmpNid,'=');
	$result = $query->execute()->fetchColumn(0);
    return $result; 	 
  }
  $query = db_select('node','n');
  $query->leftjoin('field_data_field_allow_routing_slip_access','arsa','n.nid=arsa.entity_id');
  $query->fields('arsa',array('field_allow_routing_slip_access_value'));
  $query->condition('n.nid',$cmpNid,'=');
  $query->condition('arsa.field_allow_routing_slip_access_value',1,'=');
  $result = $query->execute()->fetchColumn(0);
  return $result; 	
}

/*function m6connect_routing_user_update(&$edit, $account, $category) {
  if(isset($edit['field_allow_routing_slip_access']['und'][0]['value']) && is_numeric($edit['field_allow_routing_slip_access']['und'][0]['value'])){
	$individualComapnyNid = _get_individual_company_by_uid($account->uid);
	if(is_numeric($individualComapnyNid)){
	  $individualComapnyNode = node_load($individualComapnyNid);
	  $individualComapnyNode->field_allow_routing_slip_access['und'][0]['value'] = $edit['field_allow_routing_slip_access']['und'][0]['value'];
	  field_attach_update('node',$individualComapnyNode);
	  drup_msg($individualComapnyNode->field_allow_routing_slip_access);
	}
  }
}*/


function is_user_has_create_routing_node_access($user){
  global $company;
  if($company && isset($company->nid) && routing_slip_create_access_callback($company->nid)){
	return TURE;  
  }
  return FALSE; 
}

/*function routing_slip_view_access_callback($node,$userCmpNid,$account){
  $result = FALSE;
  $nodeUserCompanyNid = _get_company_nid_by_group_content($node);
  if($nodeUserCompanyNid && is_numeric($nodeUserCompanyNid)){
	if(routing_slip_create_access_callback($nodeUserCompanyNid)){
	  if($nodeUserCompanyNid == $userCmpNid){
		$result = TRUE;
		return $result;  
	  }
	  $isCompanyIndividual = is_company_individual_flag($userCmpNid);
      $query = db_select('node', 'n');
	  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
	  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
	  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
	  $query->leftJoin('field_data_field_routing_status', 'frs', 'n.nid = frs.entity_id');
	  $query->fields('ria',array('field_invited_approvers_value'));
	  $query->isNotNull('rcne.field_routing_company_nid_email_value');
	  $query->condition('n.nid',$node->nid,'=');
	  $query->condition('n.status',1,'=');
	  $query->condition('frs.field_routing_status_value',array('in_route','approved'),'IN');
	  if($isCompanyIndividual){
	    $query->where('(rcne.field_routing_company_nid_email_value=:companyMail)',array(':companyMail'=>$account->mail));  
	  }else{
		$query->where('((rcne.field_routing_company_nid_email_value=:companyNid) && (FIND_IN_SET(:UserUid,rcimu.field_routing_invited_user_uids_value)>0))',array(':UserUid' => $account->uid,':companyNid'=>$userCmpNid));  
	  }
	  $result = $query->execute()->fetchColumn(0);
	}
  }
  return $result;
}*/

function routing_slip_node_view_access_callback($node,$userCmpNid,$account,$notFromView=TRUE){
  $result = FALSE;
  $nodeUserCompanyNid = _get_company_nid_by_group_content($node);
	$companyNid = $_SESSION['company'];
	$companyAdminRoleUsers = _get_company_users_by_og_roles($companyNid,'company admin');
  if($nodeUserCompanyNid && is_numeric($nodeUserCompanyNid)){
	  if($notFromView){
	    if($nodeUserCompanyNid == $userCmpNid){
		  $result = TRUE;
		  return $result;  
	    }
	  }
	  $companyMail = strtolower($account->mail);
	  $isCompanyIndividual = is_company_individual_flag($userCmpNid);
      $query = db_select('node', 'n');
	  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
	  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
	  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
	  $query->leftjoin('field_data_field_is_approvar_notified','ian','ria.field_invited_approvers_value=ian.entity_id');
	  $query->leftJoin('field_data_field_routing_status', 'frs', 'n.nid = frs.entity_id');
	  $query->fields('ria',array('field_invited_approvers_value'));
	  $query->isNotNull('rcne.field_routing_company_nid_email_value');
	  $query->condition('n.nid',$node->nid,'=');
	  $query->condition('n.status',1,'=');
	  $query->condition('frs.field_routing_status_value',array('in_route','approved'),'IN');
	  $query->condition('ian.field_is_approvar_notified_value',1,'=');
	  if($isCompanyIndividual){
	    $query->where('(LOWER(rcne.field_routing_company_nid_email_value)=:companyMail)',array(':companyMail'=>$companyMail));  
	  }else{
		$company_email = db_select('m6connect_og_membership_email','om')->fields('om',array('company_email'))->condition('om.entity_id',$userCmpNid,'=')->condition('om.user_uid',$account->uid,'=')->execute()->fetchColumn(0);
		if(!empty($company_email)){
		  $company_email = strtolower($company_email);
		  $query->where('((LOWER(rcne.field_routing_company_nid_email_value)=:companyMail) or ((rcne.field_routing_company_nid_email_value=:companyNid) && (FIND_IN_SET(:UserUid,rcimu.field_routing_invited_user_uids_value)>0)))',array(':UserUid' => $account->uid,':companyNid'=>$userCmpNid,':companyMail'=>$company_email));
		}else{
		  $query->where('((rcne.field_routing_company_nid_email_value=:companyNid) && (FIND_IN_SET(:UserUid,rcimu.field_routing_invited_user_uids_value)>0))',array(':UserUid' => $account->uid,':companyNid'=>$userCmpNid));  
		}
	  }
	  $result = $query->execute()->fetchColumn(0);
	//}
  }
  return $result;
}

function routing_slip_node_view_action_callback($node,$userCmpNid,$account){
  $result = array();
  $nodeUserCompanyNid = _get_company_nid_by_group_content($node);
  if($nodeUserCompanyNid && is_numeric($nodeUserCompanyNid)){
	  $companyMail = strtolower($account->mail);
	  $isCompanyIndividual = is_company_individual_flag($userCmpNid);
      $query = db_select('node', 'n');
	  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
	  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
	  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
	  $query->leftjoin('field_data_field_is_approvar_notified','ian','ria.field_invited_approvers_value=ian.entity_id');
	  $query->leftjoin('field_data_field_approval_action','aa','aa.entity_id=ria.field_invited_approvers_value');
	  $query->leftjoin('field_data_field_approval_status','fas','fas.entity_id=ria.field_invited_approvers_value');
	  $query->leftJoin('field_data_field_routing_status', 'frs', 'n.nid = frs.entity_id');
	  $query->fields('ria',array('field_invited_approvers_value'));
	  $query->fields('aa',array('field_approval_action_value'));
	  $query->fields('fas',array('field_approval_status_value'));
	  $query->isNotNull('rcne.field_routing_company_nid_email_value');
	  $query->condition('n.nid',$node->nid,'=');
	  $query->condition('n.status',1,'=');
	  $query->condition('frs.field_routing_status_value',array('in_route','approved'),'IN');
	  $query->condition('ian.field_is_approvar_notified_value',1,'=');
	  if($isCompanyIndividual){
	    $query->where('(LOWER(rcne.field_routing_company_nid_email_value)=:companyMail)',array(':companyMail'=>$companyMail));  
	  }else{
		$company_email = db_select('m6connect_og_membership_email','om')->fields('om',array('company_email'))->condition('om.entity_id',$userCmpNid,'=')->condition('om.user_uid',$account->uid,'=')->execute()->fetchColumn(0);
		if(!empty($company_email)){
		  $company_email = strtolower($company_email);
		  $query->where('((LOWER(rcne.field_routing_company_nid_email_value)=:companyMail) or ((rcne.field_routing_company_nid_email_value=:companyNid) && (FIND_IN_SET(:UserUid,rcimu.field_routing_invited_user_uids_value)>0)))',array(':UserUid' => $account->uid,':companyNid'=>$userCmpNid,':companyMail'=>$company_email));
		}else{
		  $query->where('((rcne.field_routing_company_nid_email_value=:companyNid) && (FIND_IN_SET(:UserUid,rcimu.field_routing_invited_user_uids_value)>0))',array(':UserUid' => $account->uid,':companyNid'=>$userCmpNid));  
		}
	  }
	  $result = $query->execute()->fetchObject();
  }
  return (array)$result;
}

function routing_slip_views_access_callback(){
  global $user;	
  $userCmpNid = '';
  if(isset($_SESSION['company']) && is_numeric($_SESSION['company'])){
	$userCmpNid = $_SESSION['company'];
	$companyAdminRoleUsers = _get_company_users_by_og_roles($userCmpNid,'company admin');
  }
  if($userCmpNid && is_numeric($userCmpNid)){
	if(routing_slip_create_access_callback($userCmpNid)){  //routing_slip_create_access_by_user_callback($user->uid)
	  return TRUE;  
	}
	$companyMail = strtolower($user->mail);
	$isCompanyIndividual = is_company_individual_flag($userCmpNid);
	$query= db_select('field_data_field_invited_approvers', 'ria');
	$query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
	$query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
	$query->leftJoin('node', 'n', 'ria.entity_id = n.nid');
	$query->leftJoin('field_data_field_routing_status', 'frs', 'ria.entity_id = frs.entity_id');
	$query->leftJoin('og_membership', 'og', "og.etid = n.nid AND og.entity_type='node'"); 
	$query->leftjoin('field_data_field_allow_routing_slip_access','arsa','og.gid=arsa.entity_id');
	$query->fields('n',array('nid','uid'));
	$query->fields('og',array('gid'));
	$query->isNotNull('rcne.field_routing_company_nid_email_value');
	$query->condition('n.status',1,'=');
	$query->condition('frs.field_routing_status_value',array('in_route','approved'),'IN');
	$query->condition('arsa.field_allow_routing_slip_access_value',1,'=');
	
	if($isCompanyIndividual){
	  $query->where('(LOWER(rcne.field_routing_company_nid_email_value)=:companyMail)',array(':companyMail'=>$companyMail));  
	}else{	
		$company_email = db_select('m6connect_og_membership_email','om')->fields('om',array('company_email'))->condition('om.entity_id',$userCmpNid,'=')->condition('om.user_uid',$user->uid,'=')->execute()->fetchColumn(0);
		if(!empty($company_email)){
		$company_email = strtolower($company_email);
		$query->where('((LOWER(rcne.field_routing_company_nid_email_value)=:companyMail) or ((rcne.field_routing_company_nid_email_value=:companyNid) && (FIND_IN_SET(:UserUid,rcimu.field_routing_invited_user_uids_value)>0)))',array(':UserUid' => $user->uid,':companyNid'=>$userCmpNid,':companyMail'=>$company_email));	
		}else{
		$query->where('((rcne.field_routing_company_nid_email_value=:companyNid) && (FIND_IN_SET(:UserUid,rcimu.field_routing_invited_user_uids_value)>0))',array(':UserUid' => $user->uid,':companyNid'=>$userCmpNid));   
		} 
	}
	$result = $query->execute()->fetchAll();
	if($result && !empty($result)){
	  return TRUE;
	}
  }
  return FALSE;
}

/**
 * Implements hook_form_alter.
 */

function m6connect_routing_form_alter(&$form,&$form_state, $form_id){
  global $company;	
  $routingViews =array(
	'views-exposed-form-routing-slip-center-page',
	'views-exposed-form-routing-slip-center-page-1',
	'views-exposed-form-routing-slip-center-page-2',
	'views-exposed-form-routing-slip-center-page-3',
	'views-exposed-form-routing-slip-center-page-4',
	'views-exposed-form-routing-slip-center-page-5',
	'views-exposed-form-routing-slip-center-page-6',

  );
  if($form_id=='views_exposed_form' && in_array($form['#id'],$routingViews)){
	$form['#attributes']['class'][] = 'rpf-exposed-filter';
    $form['#attributes']['class'][] = 'routing-slip-exposed-filter';
    $form['combine']['#attributes']['placeholder'] = 'Search...';
	$form['combine']['#attributes']['class'][] ='exposed_title_routing_slip';
    $form['combine']['#title_display'] = 'invisible';
    $form['sort_by']['#title_display'] = 'invisible';
    $form['sort_by']['#attributes']['class'][] ='exposed_sort_routing_slip';
	$form['sort_by']['#attributes']['onchange'] = 'jQuery(".exposed_submit_routing_slip").click();';
	$form['submit']['#attributes']['class'][] ='exposed_submit_routing_slip';
  }
  if ($form_id == 'routing_slip_node_form' || $form_id == 'my_proposal_node_form') {
  	if(empty($form['nid']['#value']) && isset($_GET['cm'])){
      $form['field_cm_type']['und'][0]['value']['#default_value'] = $_GET['cm'];
      $form['field_cm_type']['und'][0]['#default_value'] = $_GET['cm'];
    }
  }
}

function routing_save_draft_node_form(&$form,&$form_state){
  $form_state['values']['status']=0;
  $form_state['values']['field_routing_status']['und'][0]['value']='draft';
}

function routing_save_node_form(&$form,&$form_state){
  $form_state['values']['status']=1;
  $form_state['values']['field_routing_status']['und'][0]['value']='in_route';
}

/**
 * Implements hook_form_FORM_ID_alter.
 */

function m6connect_routing_form_routing_slip_node_form_alter(&$form, &$form_state, $form_id){
  global $user, $company;
  if(isset($form['field_routing_slip_serial_markup'])){
    if(empty($form['nid']['#value'])){
	  $form['field_routing_slip_serial_markup']['#access']= FALSE; 
	  $form['field_routing_slip_no']['#access']= FALSE;  
    }else{
	  $form['field_routing_slip_serial_markup']['#access']= FALSE;
	  /*$serial = 'RS'.str_pad($nodeRouting->field_routing_serial['und'][0]['value'], 5, '0', STR_PAD_LEFT).'-'.date('Y',$nodeRouting->created);
	  $form['field_routing_slip_serial_markup']['und'][0]['markup']['#markup']= '<label>Routing Slip #:</label>&nbsp;<span>'.$serial.'</span>';*/
	  $form['field_routing_slip_no']['#access']= TRUE; 
	  $nodeRouting = $form['#node'];
	  
    }
  }
	
  $form['field_routing_type_setting']['und']['#attributes']['title']='To create your Routing Slip Type under seetings tab contact your company admin .';
  
  if(isset($form['og_group_ref']['und'][0]['default'])){
    $form['og_group_ref']['und'][0]['default']['#default_value']=$company->nid;	
  }
  
  $form['field_date_requested']['#attached']['js'] = array(
    array(
      'data' => 'jQuery(function() { jQuery(".form-field-name-field-date-requested input.stanford-datepicker").datepicker({ minDate: 0 }); });',
      'type' => 'inline',
    ),
  );
  
  if(isset($form['field_routing_controls'],$form['field_routing_controls']['und'])){
	$form['field_routing_controls']['und']['#attributes']['class'][] = 'routing-controls';
  }
 
  $form['#after_build'][] = 'custom_routing_slip_after_build';
  $form['field_routing_description']['#after_build'][] = 'description_field_remove_format_filter_after_build';
  $form['actions']['submit']['#submit'][] = 'custom_routing_slip_workflow_submit_handler';
  $form['actions']['submit']['#submit'][] = 'custom_routing_slip_workflow_invite_handler';
  $form['actions']['submit']['#validate'][]='routing_workflow_action_validate_handler';
  $form['actions']['submit']['#attributes']['class'][] = 'routing-slip-node-save';
  if(empty($form['nid']['#value']) || (isset($_REQUEST['action']) && $_REQUEST['action']=='create')){
    $form['actions']['submit']['#submit'][] = 'custom_routing_slip_submit_handler';
  }
  array_unshift($form['actions']['submit']['#submit'],'routing_save_node_form');
  
  $form['actions']['save-as-draft']= array(
    '#type'=>'submit',
	'#value' => 'Save as Draft',
	'#name' => 'save_as_draft',
	'#validate'=> array('routing_workflow_action_validate_handler'),
	'#submit' => array('routing_save_draft_node_form','node_form_submit','custom_routing_slip_workflow_submit_handler'),
  );
  
  
  //New Routing Slip Work
  //modifiy form and form state
  routing_slip_modidy_form_state($form,$form_state);

  if(isset($form['field_routing_slip_type']['und']['#options']['_none'])){
	$form['field_routing_slip_type']['und']['#options']['_none']='Select template or create new using quick route';  
  }
  
  $form['field_routing_description']['und'][0]['#attributes']['class'][]='routing-type-description';
  $form['field_routings_project']['und']['#attributes']['class'][]='select_field_routings_project';
  $form['field_routing_type_setting']['und']['#attributes']['class'][]='select_field_routing_type_setting';
  
  if(isset($form['field_routing_access_control']['und'])){
	$form['field_routing_access_control']['und']['#title_display'] = 'invisible';
	$form['field_routing_access_control']['und']['#options']['sequential'] ='<span data-toggle="popover" data-trigger="hover" data-placement="auto right" data-content="Sequential routing will follow the \'order\' noted below. Selecting this will send emails to users in the order of approval.">'.$form['field_routing_access_control']['und']['#options']['sequential'].'</span>';
	$form['field_routing_access_control']['und']['#options']['parallel'] ='<span data-toggle="popover" data-trigger="hover" data-placement="auto right" data-content="Parallel routing does not require use of the \'order\' fields below. Selecting this will send emails to users immediately requesting their approval.">'.$form['field_routing_access_control']['und']['#options']['parallel'].'</span>'; 
  }
  
  if(isset($form['field_routings_project']['und']['#options']['_none'])){
	$form['field_routings_project']['und']['#options']['_none']='Select Project';  
  }
 
  if(isset($form['field_my_routing_type']['und']['#options']['_none'])){
	$form['field_my_routing_type']['und']['#options']['_none']='-Select-';  
  }
  
  if(isset($form['field_shared_routing_type']['und']['#options']['_none'])){
	$form['field_shared_routing_type']['und']['#options']['_none']='-Select-';  
  }
  
  if(isset($form['field_routings_project']['und']['#title'])){
    $form['field_routings_project']['und']['#title'] = 'Select Project';
  }
  
  if(empty($form_state['project_listing'])){
	$form_state['project_listing']= $form['field_routings_project']['und']['#options'];  
  }
  
  
  $form['field_routing_slip_type']['und']['#ajax'] = array(
    'event' => 'change',
	'callback' => 'routing_slip_type_option_change_callback',
	'wrapper' => 'workflow-container-section',
	'method' => 'replace',
	'effect' => 'fade',
  );
  
  $form['field_my_routing_type']['und']['#attributes']['class'][] = 'select_field_my_routing';
  $form['field_my_routing_type']['und']['#ajax'] = array(
    'event' => 'change',
	'callback' => 'routing_slip_type_change_callback',
	'wrapper' => 'workflow-container-section',
	'method' => 'replace',
	'effect' => 'fade',
  );
  
  $form['field_shared_routing_type']['und']['#attributes']['class'][] = 'select_field_shared_routing';
  $form['field_shared_routing_type']['und']['#ajax'] = array(
    'event' => 'change',
	'callback' => 'routing_slip_type_change_callback',
	'wrapper' => 'workflow-container-section',
	'method' => 'replace',
	'effect' => 'fade',
  );
	
  $form['workflow_container']= array(
	'#type'=>'container',
	'#title' => 'Workflow',
	'#theme' => 'routing_option_theme',
	'#tree' => TRUE,
	'#attributes' => array('class'=>array('workflow-container-section')),
	'#prefix' => '<div id="workflow-container-section" class="margin-bottom-10"><div class="workflow-container-label routing-table-label">Workflow</div>',
	'#suffix' => '</div>',
	'#process' => array('routing_workflow_process_callback'),
	'#after_build'=> array('routing_workflow_container_after_build'),
  );
  $form['workflow_action_container'] = array(
	'#type'=> 'container',
	'#prefix' => '<div id="action-container-section" class="action-container-section pull-left">',
	'#suffix' => '</div>',
	'#process' => array('routing_slip_action_process_callback'),
  );
  
  $form['routing_dialog_container'] = array(
	'#type'=> 'markup',
	'#markup'=>'',
	'#prefix' => '<div id="routing-dialog-container">', 
	'#suffix' => '</div>',
  );
  
  $form['#step_children']['workflow_container']='step_add_documents';
  $form['#group_children']['workflow_container'] ='group_workflow_sction';
	
  $form['#step_children']['workflow_action_container']='step_add_documents';
  $form['#group_children']['workflow_action_container'] ='group_workflow_sction';
  
  $form['#step_children']['routing_dialog_container']='step_add_documents';
  $form['#group_children']['routing_dialog_container'] ='group_workflow_sction';
}

function m6connect_routing_node_presave($node){
  if($node->type == 'routing_slip'){
  	if (!empty($_GET['cm'])) {
  		if (empty($node->field_cm_type['und'][0]['value'])) {
  			$node->field_cm_type['und'][0]['value'] = $_GET['cm'];
  		}
  	}
    if($node->status==1 && !(isset($node->field_date_requested['und']) && !empty($node->field_date_requested['und'][0]['value']))){	
	  	$date_object = new DateObject(time(), new DateTimeZone(drupal_get_user_timezone()));
      $date_object->setTimezone(new DateTimeZone('UTC'));
	  	$node->field_date_requested['und'][0]['value'] = date_format_date($date_object, 'custom', 'Y-m-d h:i:s');
		}
  }
  if ($node->type == 'routing_type') {
  	if((arg(0) == 'routing-slip-settings') && !empty(arg(1))){
  		$node->field_cm_type['und'][0]['value'] = arg(1);     	
    }
  }
}

function m6connect_routing_node_insert($node){
  if($node->type=='routing_slip'){
	$prefixdefault =  'RS'; 
	$serialDefault = $node->field_routing_serial['und'][0]['value'];
	$serial = 'RS '.str_pad($node->field_routing_serial['und'][0]['value'], 5, '0', STR_PAD_LEFT).'-'.date('Y',$node->created);
	if(isset($node->field_routing_type_setting['und']) && !empty($node->field_routing_type_setting['und'][0]['target_id'])){
	  $rsNode = node_load($node->field_routing_type_setting['und'][0]['target_id']);
	  $prefix = (isset($rsNode->field_rs_prifix['und']) && !empty($rsNode->field_rs_prifix['und'][0]['value']))?$rsNode->field_rs_prifix['und'][0]['value']:'';
	  if(!empty($prefix)){
		$prefixdefault = $prefix;  
	  }
	  //$yearExtention = (isset($rsNode->field_year_extention['und']) && !empty($rsNode->field_year_extention['und'][0]['value']))?'-'.date('Y'):'';
	  $yearExtention ='-'.date('Y');
	  $startingNumber = (isset($rsNode->field_rs_stating_number['und']) && is_numeric($rsNode->field_rs_stating_number['und'][0]['value']))?$rsNode->field_rs_stating_number['und'][0]['value']:'';
	  if(is_numeric($startingNumber)){
		$serialDefault = $startingNumber;
		$currentNumber = (isset($rsNode->field_rs_current_number['und']) && !empty($rsNode->field_rs_current_number['und'][0]['value']))?$rsNode->field_rs_current_number['und'][0]['value']:0; 
		$NextNumber = $startingNumber + $currentNumber + 1;
		$serial = $prefix.' '.str_pad($NextNumber, 5, '0', STR_PAD_LEFT).$yearExtention;
		$rsNode->field_rs_current_number['und'][0]['value']= $currentNumber + 1;
		node_save($rsNode);
	  }
	}
	$node->field_routing_slip_no['und'][0]['value'] = $serial; 
	field_attach_update('node',$node);
	/*if(db_table_exists('m6connect_routing_serial')){
	  $insert = array(
	    'entity_id'=>$node->nid,
		'prefix' => $prefixdefault,
		'number_value' => (int)$serialDefault,
		'type' => 'system',
	  );	
	}*/
  }
}

/*function m6connect_routing_node_update($node){
  if($node->type == 'routing_slip'){
	//$originalSerial = $node->original->field_routing_slip_no['und'][0][]
	drup_msg($node);  
  }
}*/

function custom_routing_slip_after_build($form,&$form_state){

  if(isset($form['field_approval_neededby']['und'][0]['value']['date'])){
	$form['field_approval_neededby']['und'][0]['value']['date']['#attributes']['onkeydown']='return false;';
	$form['field_approval_neededby']['und'][0]['value']['date']['#description']='';  
  }
  if(isset($form['field_approval_neededby']['und'][0]['value']['time'])){
	$form['field_approval_neededby']['und'][0]['value']['time']['#attributes']['onkeydown']='return false;'; 
	$form['field_approval_neededby']['und'][0]['value']['time']['#description']='';   
  }
		
  if(isset($form['field_date_requested']['und'][0]['value']['date'])){
	$form['field_date_requested']['und'][0]['value']['date']['#attributes']['onkeydown']='return false;';
	$form['field_date_requested']['und'][0]['value']['date']['#description']='';  
  }
  if(isset($form['field_date_requested']['und'][0]['value']['time'])){
	$form['field_date_requested']['und'][0]['value']['time']['#attributes']['onkeydown']='return false;'; 
	$form['field_date_requested']['und'][0]['value']['time']['#description']='';   
  }
  if(empty($form['nid']['#value']) || (isset($_REQUEST['action']) && $_REQUEST['action']=='create')){
    $form['actions']['submit']['#value']='Send Routing Slip';
  }else{
	$form['actions']['submit']['#value']='Save';  
  }
  if(isset($form['actions']['draft'])){
	if(!in_array($form['actions']['draft']['#submit'],'custom_routing_slip_workflow_submit_handler')){
	  $form['actions']['draft']['#submit'][] = 'custom_routing_slip_workflow_submit_handler';
	}
	if(!in_array($form['actions']['draft']['#validate'],'routing_workflow_action_validate_handler')){
	  $form['actions']['draft']['#validate'][] = 'routing_workflow_action_validate_handler';
	}
  }
  return $form;	
}

function custom_routing_slip_submit_handler(&$form,&$form_state){
  //$form_state['redirect'] = array('approval-type/' . $form_state['nid'], array('query' => array('action' => 'create')));
  $form_state['redirect'] = array('approver-feedback/' . $form_state['nid'], array('query' => array('action' => 'create')));	
 	
}

/**
 * Implements hook_field_widget_form_alter.
 */
function m6connect_routing_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name']) && $element['#field_name'] == 'field_routing_documents' && $context['instance']['bundle'] == 'routing_slip') {
	//kpr($element);
	$element['#group_children']['remove_button'] = 'group_document_desc_section';
	if(isset($element['field_routing_document_file']['und'])){
	  $element['field_routing_document_file']['und']['#title'] = '';
	}
  }
}

/**
 * Implements hook_block_info.
 */

function m6connect_routing_block_info() {
   $blocks['routing-document-content'] = array(
    'info' => t('Routing Document tab content'),
  );
  $blocks['routing-invite-companies'] = array(
    'info' => t('Routing Invite Companies tab content'),
  );
  $blocks['routing-approval-feedback'] = array(
    'info' => t('Routing Approval Feedback tab content'),
  );
  $blocks['routing-approval-type'] = array(
    'info' => t('Routing Approval type tab content'),
  );
  return $blocks;
}

function m6connect_routing_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;
  if ((!isset($user->roles[3])) && $user->uid != 0 && (arg(0) == 'node' && is_numeric(arg(1)))) {
	$node = menu_get_object();
	if ($node->type == 'routing_slip') {
	  if ($data['tabs'][0]['output'][0]['#link']['path'] == 'node/%/view') {
		  unset($data['tabs'][0]['output'][0]);
	  }
	  if ($data['tabs'][0]['output'][1]['#link']['path'] == 'node/%/edit') {
		  unset($data['tabs'][0]['output'][1]);
	  }
	}
  }
}


/**
 * Implements hook_block_view.
 */

function m6connect_routing_block_view($delta='') {
  global $user;	
  $block = array();
  switch ($delta) {
  	case 'routing-document-content':
	  $block['subject'] = t('');
	  $block['content'] = drupal_get_form('get_routing_document_download');
	break;
	case 'routing-approval-type':
	  $content ='';
	  if(arg(0)=='node' && is_numeric(arg(1)) && empty(arg(2))){
		$node = menu_get_object(); 
		$cmpcall = in_array($user->uid, _get_current_company_users($node->uid)); 
		if ($node->uid == $user->uid || $cmpcall) {
		  $content = drupal_get_form('add_new_routing_approval_type_form', $node, 'node');
		}
	  }
	  $block['subject'] = t('');
	  $block['content'] = $content;
	break;
	case 'routing-invite-companies':
	  $content ='';
	  if(arg(0)=='node' && is_numeric(arg(1)) && empty(arg(2))){
		$node = menu_get_object(); 
		$cmpcall = in_array($user->uid, _get_current_company_users($node->uid)); 
		if ($node->uid == $user->uid || $cmpcall) {
		  $content = routing_slip_find_companies();
		}
	  }
	  $block['subject'] = t('');
	  $block['content'] = $content;
	break;
	case 'routing-approval-feedback':
	  $block['subject'] = t('');
	  $block['content'] = routing_slip_approval_feedback_content();
	break;
  }
  return $block;
}

function routing_slip_move_callback($move,$node){
  global $user,$base_url,$base_path;
  $move_has_data =  array('in_route','draft','approved','rejected','deleted','archived');
  if (in_array($move, $move_has_data)) {
    $node->field_routing_status['und'][0]['value']= $move;
	if($move == 'draft'){
	  $node->status = 0;
	}else{
	  $node->status = 1;
	}
    node_save($node);
	$routingSlipNodePathAlias = drupal_lookup_path('alias','node/'.$node->nid);
	$RoutingNodePath = l('here',$base_url.$base_path.$routingSlipNodePathAlias,array('external'=>TRUE));
	$imagePath = $base_url . $base_path . drupal_get_path('module', 'm6connect_misc') . '/images/';
	$m6logoForMail = 'm6-logo-rfp-award.png';
	$nodeuser = user_load($node->uid);
	$replace = array(
	  '[Routing:Title]' => $node->title,
	  '[Site:SignUplink]' => $RoutingNodePath,
	  '[Routing:OwnerName]' => $nodeuser->realname,
	  '[Routing:M6Logo]' => '<img src="'.$imagePath.$m6logoForMail.'"/>',
	);
	$message = '[Routing:OwnerName],<p>This is a notification that the status of the Routing Slip named [Routing:Title] has changed.</p><p>Click [Site:SignUplink] to log into M6Connect to see more details.</p><p>M6Connect Corporation<br/>[Routing:M6Logo]</p>';
	$params = array(
	  'subject' => 'Status of the Routing Slip - '.$node->title.' has changed',
	  'body' => str_replace(array_keys($replace),array_values($replace),$message),
	  'sender' => $user->mail,
	  'language' => language_default(),
	  'module' => 'm6connect_misc',
	  'key' => 'routing_mail___routing_status_notify',
	  'build' => TRUE,
	);
	drupal_mail($params['module'], $params['key'], $nodeuser->mail, $params['language'], $params); 
  }
  drupal_goto($_REQUEST['destination']);
}

function get_routing_document_download($form,$form_state){
  global $user;	
  $node =  node_load(arg(1));
  $nid = arg(1);
  $entered = 0;
  $options = array();
  $header = array(
	'document_name' => array('data' => t('Document Name')),
	//'document_type' => array('data' => t('Document Type')),
	'document_comment' => array('data' => t('Document Comment')),
	'document_timestamp'=> array('data' => t('Uploaded At')),
  );
  if(isset($node->field_routing_documents['und']) && is_array($node->field_routing_documents['und']) && !empty($node->field_routing_documents['und'])){
	foreach($node->field_routing_documents['und'] as $deleta => $itemVal){
	  $item = field_collection_item_load($itemVal['value']);
	  if(isset($item->field_routing_document_file['und']) && !empty($item->field_routing_document_file['und'])){
		$entered = 1;
		$documentcomment = isset($item->field_routing_document_comment['und'])?$item->field_routing_document_comment['und'][0]['value']:'';
		//$documentType = isset($item->field_routing_document_type['und'])?$item->field_routing_document_type['und'][0]['value']:'';
		foreach($item->field_routing_document_file['und'] as $index => $data){
		  $options[$data['fid']] = array(
			'document_name' => $data['filename'],
			//'document_type' => $documentType,
			'document_comment' => $documentcomment,
			'document_timestamp' => date('F d, Y H:i A T',$data['timestamp']),
			'#attributes' => array('class' => array('document-view-row')),
		  );
		}
	  }
	}
  } 
  if($entered){
	$form['tableselet'] = array(
	  '#type' => 'tableselect',
	  '#header' => $header,
	  '#options' => $options,
	  '#empty' => t('No Document available.'),
	  '#attributes' => array('class'=> array('table','document-view-rfp','m6connect-custom-table')),
	  '#prefix' => '<label>Documents:&nbsp;</label>'
	);
    $form['download-selected'] = array(
      '#markup' => '<input type="button" value="Download Selected documents" class="btn btn-default form-submit download-selected-documents is-rfp-documents" onclick="jQuery(this).focusout();" /><span class="rfpNode-nid-hidden"><input type="hidden" value="'.$node->nid.'" class="rfpNode-nid"><input type="hidden" value="'.$user->uid.'" class="agreeduser-uid"></span>',
      '#prefix' => '<div class="download-document-section">',
      '#suffix' => '</div>',
    );
  }
  return $form;
}

function routing_slip_find_companies($onlyComanyListing = FALSE) {
	global $company;
	drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery-ias.min.js'); 
	drupal_add_js(drupal_get_path('module', 'm6connect_rfp') . '/m6connect_rfp_custom.js');
    global $base_url, $user;
    assign_bid_package_ctools_popup_style();
    drupal_add_library('system', 'ui.draggable');
    drupal_add_library('system', 'ui.droppable');
    drupal_add_library('system', 'ui.sortable');
    drupal_add_library('system', 'ui.dialog');
    drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/m6connect_bookmark.js');
    drupal_add_js(array('m6connect_company' => array('company' => 1)), 'setting');
    drupal_add_css('.bookmarkorganizer-rename-item-form input.form-submit{ display:none; }', 'inline');
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');

    $invitedCompanies = array();
    $output = '';
    $current_node = '';
    if (!$onlyComanyListing) {
        $current_node = node_load(arg(1));
        $inid = arg(1);
        $inode = node_load($inid);

        //************************** Start New Look **************************//
        //Start Pending Invitations And Add Individuals by Email Form
        $output .= '<div class="rfp-invite-companies-form">';
        $output .= drupal_render(drupal_get_form('routing_slip_invite_companies_form', $inode->nid));
        $output .= '</div>';
        //End Pending Invitations And Add Individuals by Email Form
        //*************************** End New Look ***************************//

        $output .= '<label class="find-companies-title">Find Companies</label>';
        $output .= '<div class="custom-companies-lists">';
        $output .= '<div class="row">';
        $output .= '<div class="cust-company-search-form col-md-3 col-sm-12 col-xs-12">';
        $favSpanText = '?favorite=1';
        $favChecked = '';
        if (isset($_REQUEST['favorite']) && $_REQUEST['favorite'] != '') {
            $favSpanText = '';
            $favChecked = 'checked="checked"';
        }
        // Shared Functionality
        $shareCheckbox = '';
        $companyAdminUid = '';
        $shareContent = '';
        $companyNid = '';
        $showCompanySahre = FALSE;
        $companyStates = get_company_og_user_status();
        $companyUid = $companyStates['company-uid'];
        $companyNid = $companyStates['company-nid'];
        if ($companyStates['company-admin']) {
            $shareChecked = ($companyStates['shared-checked']) ? 'checked="checked"' : '';
            $shareCheckbox = '<label class="checkbox-inline"> <input type="checkbox" value="' . $companyNid . '" name="share-favorite" class="share-favorite-checkbox" ' . $shareChecked . '/>Share</label>';
        } else {
            $companyAdminUid = $companyStates['company-uid'];
            $showCompanySahre = $companyStates['company-share'];
            // Share Start
            if ($companyAdminUid && $showCompanySahre) {
                $shareContent = _generate_share_fav_block_content($companyAdminUid, $companyNid);
            }
            //Share End
        }
        // End Share Functionality
        $output .= '<div class="main-container-favorite non-company-page-favorite">
						  <label>Favorites</label>
						  <span class="sahre-company-nid" style="display:none;">' . $companyNid . '</span>
						<span class="sahre-company-uid" style="display:none;">' . $companyUid . '</span>
						  <div class="custom-favorite-container">
							  <div class="text-right clearfix"><div class="pull-left">' . $shareCheckbox . '
								<label class="checkbox-inline">
								 <input type="checkbox" value="1" name="show-favorite" class="show-favorite-checkbox" id="show-favorite-checkbox" ' . $favChecked . '/>Show Favorites</label></div><div class="pull-right">
								 <span class="show-favorite-checkbox-link-query" style="display:none;">' . $favSpanText . '</span>
								<a href="/bookmarkorganizer/add/folder/' . $user->uid . '" title="" class="action action-addfolder"><i class="fa fa-plus fa-2"></i> Add Folder</a></div>
							  </div>' . _generate_bookmark_fav_block_content() . $shareContent . '
						  </div>
					  </div><div id="dialog"></div>';
        $output .= drupal_render(drupal_get_form('rfp_company_search_form'));
        $output .= '</div>';
    } else {
        if ($_REQUEST['nid'] && !empty($_REQUEST['nid'])) {
            $inode = $current_node = node_load($_REQUEST['nid']);
        }
    }
    $co_name = isset($_REQUEST ['co_name']) ? $_REQUEST ['co_name'] : '';
    $co_filter = isset($_REQUEST ['co_filter']) ? $_REQUEST ['co_filter'] : '';
    $co_facilities = isset($_REQUEST ['co_facilities']) ? $_REQUEST ['co_facilities'] : '';
    $co_region = isset($_REQUEST ['co_region']) ? $_REQUEST ['co_region'] : '';
    $co_industries = isset($_REQUEST ['co_industries']) ? $_REQUEST ['co_industries'] : '';
    $co_pservices = isset($_REQUEST ['co_pservices']) ? $_REQUEST ['co_pservices'] : '';
    $co_diversity = isset($_REQUEST ['co_diversity']) ? $_REQUEST ['co_diversity'] : ''; //pre($pro_diversity);
    $co_div_arr = array(0);
    if (!empty($co_diversity)) {
        $co_div_arr = explode(',', $co_diversity); //pre($co_div_arr);
    }
    $co_div_arr = array_filter($co_div_arr);

    $type = array('organization');
    $counter = 0;
    $or = db_or();
    $query = db_select('node', 'n')->extend('PagerDefault')->element(5);
    $query->fields('n', array('nid'));
    $query->condition('type', $type, 'IN');
	//************************** Start (Not Show Company When they are Inctive) **************************/
	if (db_table_exists('field_data_field_company_inactive')) {
	  $ic_or = db_or();
	  $query->leftJoin('field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid');
	  $ic_or->condition('ic.field_company_inactive_value', 1, '!=')->condition('ic.field_company_inactive_value', NULL);
	  $query->condition($ic_or);
	}
    //*************************** End (Not Show Company When they are Inctive) ***************************/
    //************************** Start (Show Company When Company Search Flag is active) **************************/
	if (db_table_exists('field_data_field_show_company_in_search')) {
	  $query->leftJoin('field_data_field_show_company_in_search', 'isa', 'isa.entity_id = n.nid');
	  $query->condition('isa.field_show_company_in_search_value', 1, '=');
	}
    //*************************** End (Show Company When Company Search Flag is active) ***************************/
    //************************** Start (Not Show Company When they are not company type (not show Individual)) **************************/
	if (db_table_exists('field_data_field_type_of_company')) {
      $query->leftJoin('field_data_field_type_of_company', 'tc', 'tc.entity_id = n.nid');
      $query->condition('tc.field_type_of_company_value', 'company', '=');
	}
    //*************************** End (Not Show Company When they are not company type) ***************************/
    if (!empty($co_name)) {
        $query->leftjoin('field_data_field_keywords', 'k', 'k.entity_id = n.nid');
        $query->leftjoin('field_data_field_description', 'd', 'd.entity_id = n.nid');
        $query->fields('k');
        $query->fields('d');

        $or->condition('title', '%' . db_like($co_name) . '%', 'LIKE');
        $or->condition('k.field_keywords_value', '%' . db_like($co_name) . '%', 'LIKE');
        $or->condition('d.field_description_value', '%' . db_like($co_name) . '%', 'LIKE');
        $query->condition($or);
    }
    if (!empty($co_facilities)) {
        $query->Join('field_data_field_facilities_construction', 'cf', 'cf.entity_id = n.nid');
        $query->fields('cf');
        $co_facilities_tids = taxonomy_get_children_all($co_facilities);
        $fctids = array();
        if (!empty($co_facilities_tids)) {
            $rctids[] = $co_facilities;
            foreach ($co_facilities_tids as $fk => $fv) {
                $fctids[] = $fv->tid;
            }
        } else {
            $fctids[] = $co_facilities;
        }
        $query->condition('cf.field_facilities_construction_tid', $fctids, 'IN');
    }
    if (!empty($co_region)) {
        $query->Join('field_data_field_regions', 'cr', 'cr.entity_id = n.nid');
        $query->fields('cr');
        $region_or = db_or();
        $query->leftjoin('field_data_field_org_address', 'oa', 'oa.entity_id = n.nid');
        $region_term = taxonomy_term_load($co_region);
        $region_or->condition('oa.field_org_address_locality', db_like($region_term->name), 'LIKE');
        $co_region_tids = taxonomy_get_children_all($co_region);
        $rctids = array();
        if (!empty($co_region_tids)) {
            $rctids[] = $co_region;
            foreach ($co_region_tids as $rk => $rv) {
                $rctids[] = $rv->tid;
                $region_or->condition('oa.field_org_address_locality', db_like($rv->name), 'LIKE');
            }
        } else {
            $rctids[] = $co_region;
        }
        $region_or->condition('cr.field_regions_tid', $rctids, 'IN');
        $query->condition($region_or);
    }
    if (!empty($co_industries)) {
        $query->Join('field_data_field_industry_naicss', 'ci', 'ci.entity_id = n.nid');
        $query->fields('ci');
        $co_industries_tids = taxonomy_get_children_all($co_industries);
        $ictids = array();
        if (!empty($co_industries_tids)) {
            $ictids[] = $co_industries;
            foreach ($co_industries_tids as $ik => $iv) {
                $ictids[] = $iv->tid;
            }
        } else {
            $ictids[] = $co_industries;
        }
        $query->condition('ci.field_industry_naicss_tid', $ictids, 'IN');
    }
    if (!empty($co_pservices)) {
        $query->Join('field_data_field_products_service_unspsc', 'cp', 'cp.entity_id = n.nid');
        $query->fields('cp');
        $co_pservices_tids = taxonomy_get_children_all($co_pservices);
        $sctids = array();
        if (!empty($co_pservices_tids)) {
            $sctids[] = $co_pservices;
            foreach ($co_pservices_tids as $sk => $sv) {
                $sctids[] = $sv->tid;
            }
        } else {
            $sctids[] = $co_pservices;
        }
        $query->condition('cp.field_products_service_unspsc_tid', $sctids, 'IN');
    }
    if ($co_div_arr) {
        $query->Join('field_data_field_diversity_credentials', 'dt', 'dt.entity_id = n.nid');
        $query->fields('dt');
        $query->condition('dt.field_diversity_credentials_target_id', $co_div_arr, 'IN');
    }

    //Favorites Filter Start
    $favoriteFolderID = '';
    $foldername = '';
    if (isset($_REQUEST['favorite']) && $_REQUEST['favorite'] != '') {
        $favoriteFolderID = trim($_REQUEST['favorite']);
        $item = bookmarkorganizer_get_item($favoriteFolderID);
        if ($item->type == 'node') {
            $query->condition('n.nid', array($item->content_id), 'IN');
        } else {
            //$foldername = $item->label;
            $foldername = ($item && is_object($item)) ? $item->label : 'My Favorites';
            $companyuid = '';
            if ($_REQUEST['cpmpany_uid'] && !empty($_REQUEST['cpmpany_uid'])) {
                $companyuid = trim($_REQUEST['cpmpany_uid']);
                $foldername = 'Shared Favorites';
            }
            $favnodeIds = get_favorites_nodes_by_folder_id($favoriteFolderID, $companyuid);
            if (is_array($favnodeIds) && count($favnodeIds) > 0) {
                $query->condition('n.nid', $favnodeIds, 'IN');
            } else {
                $query->condition('n.nid', array(0), 'IN');
            }
        }
    }
    //************************** Remove Own Company **************************/
	/***** changed *****/
    $currentCompanyNid = _get_user_company_nid();
	/*$currentCompanyNid = $company->nid;
    if (!empty($currentCompanyNid) && is_numeric($currentCompanyNid)) {
        //$query->condition('n.nid', array($currentCompanyNid), 'NOT IN');
    }*/
    //************************************************************************/
    //End Favorites Filter
    $query->orderBy('created', 'DESC');
    $query->groupBy('n.nid');
    $query->limit(15);//Get Invited Company User Mapping (used in select List of company's users)7
    $result = $query->execute();
    drupal_add_js(array('m6connect_rfp' => array('current_node_type' => $current_node->type)), 'setting');

    //Get Invited Company User Mapping (used in select List of company's users)
    //$invitedCompanyUserMapping = get_invited_companies_invitedusers_list($inode);
	$invitedCompanyUserMapping = array();

    ////////////////////////////////*********** Filter Selection Start************/////////////////////////
    if (!$onlyComanyListing) {
        $output .= '<div class="col-md-9 col-sm-12 col-xs-12 company-select-filter-list">';
    }
    $querystring = $_SERVER['QUERY_STRING'];
    if (!empty($co_name) || !empty($co_facilities) || !empty($co_region) || !empty($co_industries) || !empty($co_pservices) || !empty($co_div_arr) || (($favoriteFolderID != '') && $onlyComanyListing === FALSE)) {
        $output .= '<input type="hidden" class="site_base_url" value="' . $base_url . '">';
        $output .= '<label class="select-title">Your Selections:</label>';
        if ($favoriteFolderID != '') { 
            $output .= '<span class="cust-selection-list cust-rfp-favorite-filter"><span class="sfilter-label">Favorite: <span class="sfilter-value">' . $foldername . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">favorite</span><span class="sfilter-val">' . $favoriteFolderID . '</span><span class="filter-qstr"></span></span></span>';
        }
        if (!empty($co_name)) {
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Name: <span class="sfilter-value">' . $co_name . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_name</span><span class="sfilter-val">' . $co_name . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if ($co_facilities) {
            $term = taxonomy_term_load($co_facilities);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">M6 Company Types: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_facilities</span><span class="sfilter-val">' . $co_facilities . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if (!empty($co_region)) {
            $term = taxonomy_term_load($co_region);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Region: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_region</span><span class="sfilter-val">' . $co_region . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if (!empty($co_industries)) {
            $term = taxonomy_term_load($co_industries);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Industry NAICS: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_industries</span><span class="sfilter-val">' . $co_industries . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if (!empty($co_pservices)) {
            $term = taxonomy_term_load($co_pservices);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Products & Services UNSPSC: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_pservices</span><span class="sfilter-val">' . $co_pservices . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }

        if ($co_div_arr) {
            $output .= '<span class="cust-select-list-dives">Diversity Types:</span>';
            foreach ($co_div_arr as $k => $v) {
                if ($v != '_none') {
                    $dnod = node_load($v);
                    $dname = $dnod->title;
                    $output .= '<span class="cust-selection-list"><span class="sfilter-label"><span class="sfilter-value">' . $dname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_diversity</span><span class="sfilter-val">' . $v . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
                }
            }
        }
    }
    if (!$onlyComanyListing) {
        $output .= '</div>';
    }
    ////////////////////////////////*********** Filter Selection End *************/////////////////////////

    $output .= '<div id="cust-company-listings" class="col-md-9 col-sm-12 col-xs-12 pro-invite-co-scroll"><span class="current-node-nid" style="display:none;">' . $current_node->nid . '</span>
	            <span class="current-type" style="display:none;">' . $current_node->type . '</span>';
    $output .= '<div class="cust-slect-all-invite" style="display:none;"><input type="checkbox" name="select-all-invite-co"> Select All</div>';
    while ($record = $result->fetchAssoc()) {
        $node = node_load($nid = $record['nid'], $vid = NULL, $reset = FALSE);
        $desc = isset($node->field_description['und']['0']['value']) ? $node->field_description['und']['0']['value'] : '';
		$desc = strip_tags($desc);
        $length_body = strlen($desc);
        if ($length_body > 50) {
            $body = substr($desc, 0, 50) . '...';
        } else {
            $body = $desc;
        }

        $pimagepath = '';
        $pimgpath = (isset($node->field_logo['und']) && !empty($node->field_logo['und'][0]['uri'])) ? $node->field_logo['und'][0]['uri'] : 0;
        if ($pimgpath) {
            $pimagepath = image_style_url('thumbnail', $pimgpath);
            //$pimagepath = image_style_url('user_pic_32x32', $pimgpath);	
        }
        $fa = _get_company_region_address($node);
        $fa = (!empty($est)) ? '<i class="fa fa-map-marker"></i> ' . $fa : '';
        $est = '';
        if (isset($node->field_year_founded['und'])) {
            $est = $node->field_year_founded['und'][0]['value'];
        }
        $est = (!empty($est)) ? '<i class="fa fa-calendar"></i> Est. ' . $est : '';
        $arev = '';
        if (isset($node->field_annual_revenue['und'])) {
            $arev = $node->field_annual_revenue['und'][0]['value'];
        }

        if ($counter % 2 == 0) {
            $cls = 'even';
        } else {
            $cls = 'odd';
        }
        //pre($node);
        $output .='<div class="project-box odd project-dragable">';
        $output .='<div class="row">';
        if ($pimgpath) {
            $output .= '<div class="col-md-2 col-sm-2 col-xs-12 company-image text-center"><img src="' . $pimagepath . '" /></div>';
        } else {
            $output .= '<div class="col-md-2 col-sm-2 col-xs-12 company-image text-center"><i class="fa fa-fw fa-building"></i></div>';
        }
        $output .= '<div class="col-md-6 col-sm-6 col-xs-12 company-summary">';
        $output .= '<h2>' . l($node->title, 'node/' . $node->nid, array('attributes' => array('class' => array('cust-proj-title'), 'target' => '_blank'))) . '</h2>';
        $output .='<span class="company-nid" style="display:none;">' . $node->nid . '</span>';
        $output .= '<div class="company-about">' . $body . '</div>';
        $output .= '<div class="company-meta"> <span>' . $fa . '</span> <span>' . $est . '</span> <span></i> ' . $arev . '</span> </div>'; 
        $output .= '</div>';

        
            $inviteStyle = '';
            $addedStyle = 'style="display:none;"';
            $addedText = ' Added';
            

            $output .= '<div class="col-md-4 col-sm-4 col-xs-12 project-box-actions" id="nid-' . $node->nid . '">';
            if ($currentCompanyNid != $node->nid) {
                $output .= '<div class="form-group"><a ' . $inviteStyle . ' href="/" class="invite-to-rfp btn btn-default" id="' . $node->nid . '"><i class="fa fa-envelope"></i> Invite to Routing Slip</a><span class="btn btn-success added-to-rfp" ' . $addedStyle . '><i class="fa fa-ok"></i> ' . $addedText . '</span></div>';
                $gmlist = og_get_group_members_properties($node, array(), 'members__' . OG_STATE_ACTIVE, 'node');
                $output .= '<select class="co_invite-manager" id="co_invite_manager_' . $node->nid . '" multiple="multiple">';
                $output .= '<option value="">Select Company Contact(s)</option>'; //
                $userUidNameMapping = _get_user_uid_name_mapping(array_values($gmlist));
                foreach ($userUidNameMapping as $invitedUid => $invitedName) {
                    $invitedText = (isset($invitedCompanyUserMapping[$node->nid][$invitedUid])) ? ' (Invited)' : '';
                    $output .= '<option value="' . $invitedUid . '" data="' . $invitedName . '">' . $invitedName . $invitedText . '</option>';
                }
                $output .= '</select>';
                $output .= '<span class="invite-proj-managerid invite-proj-managerid-' . $node->nid . '" style="display:none"></span>';
                $output .= '<span class="invite-proj-managername invite-proj-managername-' . $node->nid . '" style="display:none"></span>';
            }
            $output .= '</div>';

        $output .='</div>';
        $output .='</div>';
        $counter++;
    }
    $output .='<div class="clear"></div>';
    $output .= theme('pager', array('tags' => NULL, 'element' => 5, 'parameters' => array('route-invite' => 1)));
		
    if ($counter < 1)
        $output .='<div Class="messages status">' . t('No Results available. Please try later.') . '</div>';

    $output .='</div>';
    if (!$onlyComanyListing) {
        $output .='</div>';
        $output .= '</div>';
    }
	
    return $output;
}

function routing_slip_invite_companies_form($form, &$form_state, $nodeNid) {
	$form['#attributes']['id'] = 'rfp-invite-companies-form';
	drupal_add_js(array('m6connect_rfp' => array('custom_dialog_js' => 1)), 'setting');
	drupal_add_js(drupal_get_path('module', 'm6connect_routing').'/m6connect_routing_invite_form.js');
	
	/*$form['#attached']['js'] = array(
      drupal_get_path('module', 'ajax_example') . '/ajax_example.js',
    );*/
	
    $form['companies_hidden'] = array(
        '#type' => 'hidden',
        '#title' => 'Companies',
        '#attributes' => array('class' => 'companies_hidden'),
    );
    $form['companies_manager_hidden'] = array(
        '#type' => 'hidden',
        '#title' => 'Company Project Manager',
        '#attributes' => array('class' => 'companies_manager_hidden'),
    );
    $form['invite_later_hidden'] = array(
        '#type' => 'hidden',
        '#title' => 'Company Invite Later',
        '#attributes' => array('class' => 'invite_later_hidden'),
    );
    $form['invite_nodeid_hidden'] = array(
        '#type' => 'hidden',
        '#title' => 'Company Invite Later',
        '#attributes' => array('class' => 'invite_nodeid_hidden'),
        '#value' => arg(1),
    );
	
	$form['invited_nodeid'] = array(
        '#type' => 'value',
        '#value' => arg(1),
    );
    
    $form['companies_by_email'] = array(
        '#type' => 'textarea',
        '#title' => t('Add Individuals by Email :'),
		'#title_display' => 'invisible',
        '#resizable' => FALSE,
        //'#description' => '<b>Maximum number of invite at a time is 25</b>',
        '#prefix' => '<div class="row rfp-invite-companies-form-item"><div class="col-md-4 invite-companies-blocks"><label>Add Individuals by Email :</label>',
        '#suffix' => '</div>'
    );
    $form['companies'] = array(
        '#type' => 'markup',
        //'#markup' => '<div class="-invitees-title">Companies</div><div class="invitees-list"></div>',
        '#markup' => '<label>Pending Invitations :</label><div class="invitees-list"></div>',
        '#prefix' => '<div class="col-md-4 invite-companies-blocks">',
        '#suffix' => '</div>'
    );

    $currentNode = node_load(arg(1));

    //Start Invited Companies/Individuals
    $form['invited-companies'] = array(
        '#type' => 'markup',
        '#markup' => get_routing_slip_invited_companies_or_individuals_list($currentNode),
        '#prefix' => '<div class="col-md-4 invite-companies-blocks">',
        '#suffix' => '</div></div>'
    );
	
	$form['invite_js_triggered'] = array(
        '#type' => 'hidden',
        '#title' => 'Js Click',
        '#attributes' => array('class' => 'invite_js_triggered'),
        '#value' => '0',
    );
    $form['reinvite_js_triggered'] = array(
        '#type' => 'hidden',
        '#title' => 'Js Click',
        '#attributes' => array('class' => 'reinvite_js_triggered'),
        '#value' => '0',
    );
    $form['invite_later_js_triggered'] = array(
        '#type' => 'hidden',
        '#title' => 'Invite later Js Click',
        '#attributes' => array('class' => 'invite_later_js_triggered'),
        '#value' => '0',
    );
	
	if(arg(0)=='invite-approvers'){
	  $actionQuery= array();
	  if(isset($_REQUEST['action']) && $_REQUEST['action']=='create'){
		$actionQuery = array('action'=>'create');  
	  }
	  $form['back'] = array(
        '#type' => 'markup',
        '#markup' => l('<input type="button" value="Back" class="btn btn-primary" alt ="Back", title ="Back" />', 'approval-type/'.$currentNode->nid, array('html' => true,'query'=>$actionQuery)),
      );
	}

    $form['add_individual_by_email'] = array(
        '#type' => 'button',
        '#value' => 'Add Emails',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'add-individual-by-email'), 'alt' => array('Add Emails'), 'title' => array('Add Emails')),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Send Invitations',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'send-invitations-submit'), 'alt' => array('Send Invitations'), 'title' => array('Send Invitations')),
    );

    $form['resubmit'] = array(
        '#type' => 'submit',
        '#value' => 'Resend Invitations',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'resend-invitations-submit'), 'alt' => array('Resend Invitations'), 'title' => array('Resend Invitations')),
    );
    $form['later'] = array(
        '#type' => 'submit',
        '#value' => 'Invite Later',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'invite-later-submit'), 'alt' => array('Invite Later'), 'title' => array('Invite Later')),
    );
	
	if(arg(0)=='invite-approvers'){
	  $form['next'] = array(
		  '#type' => 'markup',
		  '#markup'=> l('<input type="button" value="Next" class="btn btn-primary"/>','routing-slip/in-route',array('html'=>TRUE)),
	  );
	}
	
    $nodeTypeDialog = 'Routing Slip';
    $form['invite-confirm-dialog'] = array(
        '#markup' => '<div class="text-center"><strong>Are you sure you want to send out this ' . $nodeTypeDialog . '?</strong></div>',
        '#prefix' => '<div id="invite-confirm">',
        '#suffix' => '</div>',
    );

    $form['reinvite-confirm-dialog'] = array(
        '#markup' => '<div class="text-center"><strong>Are you sure you want to resend out this ' . $nodeTypeDialog . '?</strong></div>',
        '#prefix' => '<div id="reinvite-confirm">',
        '#suffix' => '</div>',
    );

    $form['invite-later-dialog'] = array(
        '#markup' => '<div class="text-center"><strong>Saved as Draft</strong></div>',
        '#prefix' => '<div id="invite-later-dialog">',
        '#suffix' => '</div>',
    );

    $form['co-persion-dialog'] = array(
        '#markup' => '<div class="co-persion-dialog-text text-center"><strong>Select Contact Person First.</strong></div>',
        '#prefix' => '<div id="co-persion-dialog">',
        '#suffix' => '</div>',
    );

    $form['company-already-invited'] = array(
        '#markup' => '<div class="company-already-invited-text text-center"></div>',
        '#prefix' => '<div id="company-already-invited">',
        '#suffix' => '</div>',
    );
    return $form;
}

function routing_slip_invite_companies_form_submit(&$form, &$form_state){
  global $base_url,$base_path;
  $values = $form_state['values'];
  $routingSlipNid = $values['invited_nodeid'];
  $routingSlipNodePathAlias = drupal_lookup_path('alias','node/'.$routingSlipNid);
  $m6connect_notification_table_exist = db_table_exists('m6connect_notification');
  if ($values['op'] == 'Invite Later') {
	drupal_set_message("The companies that you have selected have been saved however, the invitations have not been sent at this time.");
	$form_state['redirect'] =  $routingSlipNodePathAlias; 
  }else if($form_state['values']['op'] == 'Send Invitations'){
	$invitedUsers =0;
	$routingSlipNode = node_load($routingSlipNid);
	$message='[Routing:ApproverName],<br/><br/>Your approval is required on the Routing Slip - [Routing:Title].<p>Please click [Site:SignUplink] to log into M6Connect to see the document(s) and provide your approval.</p><p>Thank you,<br/>[Routing:OwnerName]<br/>[Routing:OwnerComapnyName]</p>';
	$nodeUserDetail = get_user_real_name_email(array($routingSlipNode->uid));
	$RoutingNodePath = l('here',$base_url.$base_path.$routingSlipNodePathAlias,array('external'=>TRUE));
	$ownerComapnyName = '';
	$ownerCompanyNid = _get_user_company_nid($routingSlipNode->uid);
	if($ownerCompanyNid && is_numeric($ownerCompanyNid)){
	  $ownerCompanyNode = node_load($ownerCompanyNid);
	  $ownerComapnyName = $ownerCompanyNode->title;
	}
	$replace = array(
	  '[Routing:Title]' => $routingSlipNode->title,
	  '[Site:SignUplink]' => $RoutingNodePath,
	  '[Routing:OwnerName]' => $nodeUserDetail[$routingSlipNode->uid]['realname'],
	  '[Routing:OwnerComapnyName]'=> $ownerComapnyName,
	);
	$message = str_replace(array_keys($replace),array_values($replace),$message);
    $companies_array = explode(',', $form_state['values']['companies_hidden']);
	$companies_array = array_map('trim',$companies_array);
	$companies_array = array_filter($companies_array);
	$co_manager_array = $form_state['values']['companies_manager_hidden'];
	$companyUserMapping = array();
	if (!empty($co_manager_array)) {
	  $co_manager_arr = explode(';', $co_manager_array);
	  $co_manager_arr = array_map('trim',$co_manager_arr);
	  $co_manager_arr = array_filter($co_manager_arr);
	  foreach ($co_manager_arr as $k => $v) {
		$cmngr = explode('_', $v);
		$companyUserMapping[$cmngr[0]] = trim($cmngr[1]);
	  }
	}
	if(!empty($companies_array)){
	  foreach($companies_array as $delta => $nidOrEmail){
	    $managerIDs = isset($companyUserMapping[$nidOrEmail])?$companyUserMapping[$nidOrEmail]:'';
	    if(is_numeric($nidOrEmail) || valid_email_address($nidOrEmail)){
		  $invitedUsers++;
		  $routingSlipItemId = get_routing_slip_invite_approver_by_nidoremail($routingSlipNode->nid,$nidOrEmail);
		  $collectionItem = '';
		  if(is_numeric($nidOrEmail)){
			  $existingMangerUids=array();
			  if($routingSlipItemId){
				$collectionItem = field_collection_item_load($routingSlipItemId);	
				$collectionWrapper = entity_metadata_wrapper('field_collection_item', $collectionItem);
				$invitedUerids = $collectionWrapper->field_routing_invited_user_uids->value();	
				$existingMangerUids = explode(',',$invitedUerids);
			  }else{
				$collectionItem = entity_create('field_collection_item', array('field_name' => 'field_invited_approvers'));
				$collectionItem->setHostEntity('node', $routingSlipNode);
				$collectionWrapper = entity_metadata_wrapper('field_collection_item', $collectionItem);
				$collectionWrapper->field_routing_company_nid_email->set($nidOrEmail);
				$collectionWrapper->field_approval_reminder_count->set(0);	
			  }
			  $requestMangerUids = explode(',',$managerIDs);
			  $finalMangerUids  = array_merge($existingMangerUids,$requestMangerUids);
			  $finalMangerUids = array_unique($finalMangerUids);
			  $finalMangerUids = array_filter($finalMangerUids);
			  if(!empty($finalMangerUids)){
				$collectionWrapper->field_routing_invited_user_uids->set(implode(',',$finalMangerUids)); 
			  }
			  $collectionWrapper->save(TRUE);
			  if(!empty($finalMangerUids)){
				$nodeInvitedUserDetail = get_user_real_name_email(array_values($finalMangerUids));
				foreach($nodeInvitedUserDetail as $deltaUid => $userData){
				  $replace = array('[Routing:ApproverName]' => $userData['realname']); 
				  $messagebody = str_replace(array_keys($replace),array_values($replace),$message);
				  $params = array(
					'subject' => 'Your approval is required on the '.$routingSlipNode->title,
					'body' => $messagebody,
					'sender' => $nodeUserDetail[$routingSlipNode->uid]['mail'],
					'language' => language_default(),
					'module' => 'm6connect_misc',
					'key' => 'routing_mail___approval_invite_notify',
					'build' => TRUE,
				  ); 
				  drupal_mail($params['module'], $params['key'], $userData['mail'], $params['language'], $params);
				  if ($m6connect_notification_table_exist) {
				    $m6connect_notification = array(
					  'type' => 'routing_slip',
					  'event' => 'invite',
					  'entity_id' => $routingSlipNode->nid,
					  'company_nid' => $nidOrEmail,
					  'message' => NULL,
					  'request_from' => $routingSlipNode->uid,
					  'request_to' => $deltaUid,
					  'status' => 1,
					  'timestamp' => time(),
					);
					entity_save('m6connect_notification', (object) $m6connect_notification);
				  }
				}  
			  }
			  
		  }else{
			if(empty($routingSlipItemId)){
			  $collectionItem = entity_create('field_collection_item', array('field_name' => 'field_invited_approvers'));
			  $collectionItem->setHostEntity('node', $routingSlipNode);
			  $collectionWrapper = entity_metadata_wrapper('field_collection_item', $collectionItem);
			  $collectionWrapper->field_routing_company_nid_email->set($nidOrEmail);
			  $collectionWrapper->field_approval_reminder_count->set(0);
			  if (!empty($managerIDs)) {
				$collectionWrapper->field_routing_invited_user_uids->set(trim($managerIDs));
			  }
			  $collectionWrapper->save(TRUE);
			  $mailTo=$nidOrEmail;
			  $replace =array();
			  $requestTo = $nidOrEmail;
			  $company_nid = 0;
			  if($userOject = user_load_by_mail($nidOrEmail)){
				$requestTo=$userOject->uid;
				//$nodeInvitedUserDetail = get_user_real_name_email(array_values($userOject->uid));
				$individualCmpNid = _get_individual_company_by_uid($userOject->uid);
				$company_nid = ($individualCmpNid && is_numeric($individualCmpNid))?$individualCmpNid:0;
		     	$mailTo = $userOject->mail;
				$replace = array('[Routing:ApproverName]' => $userOject->realname); 
			  }else{
				$replace = array('[Routing:ApproverName]' => $nidOrEmail); 
			  }
			  $messagebody = str_replace(array_keys($replace),array_values($replace),$message);
			  $params = array(
				'subject' => 'Your approval is required on the '.$routingSlipNode->title,
				'body' => $messagebody,
				'sender' => $nodeUserDetail[$routingSlipNode->uid]['mail'],
				'language' => language_default(),
				'module' => 'm6connect_misc',
				'key' => 'routing_mail___approval_invite_notify',
				'build' => TRUE,
              );
			  drupal_mail($params['module'], $params['key'], $mailTo, $params['language'], $params);
			  if ($m6connect_notification_table_exist) {
				    $m6connect_notification = array(
					  'type' => 'routing_slip',
					  'event' => 'invite',
					  'entity_id' => $routingSlipNode->nid,
					  'company_nid' => $company_nid,
					  'message' => NULL,
					  'request_from' => $routingSlipNode->uid,
					  'request_to' => $requestTo,
					  'status' => 1,
					  'timestamp' => time(),
					);
					entity_save('m6connect_notification', (object) $m6connect_notification);
			  }
			}
		  }
		}
	  }
	}
	if($invitedUsers){
	  drupal_set_message('Invitation sent succesfully');
	}
  }else if($form_state['values']['op'] == 'Resend Invitations'){
	 $routingSlipNode = node_load($routingSlipNid);
	 resend_routing_invitation($routingSlipNode); 
  }
  
}

function resend_routing_invitation($routingSlipNode){
  global $base_url,$base_path;
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_routing_status', 'frs', 'n.nid = frs.entity_id');
  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
  $query->fields('ria',array('field_invited_approvers_value'));
  $query->fields('rcne',array('field_routing_company_nid_email_value'));
  $query->fields('rcimu',array('field_routing_invited_user_uids_value'));
  $query->condition('n.nid',$routingSlipNode->nid,'=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $result = $query->execute()->fetchAll();
  if($result && !empty($result)){
	$routingSlipNodePathAlias = drupal_lookup_path('alias','node/'.$routingSlipNode->nid);
	$message='[Routing:ApproverName],<br/><br/>Your approval is required on the Routing Slip - [Routing:Title].<p>Please click [Site:SignUplink] to log into M6Connect to see the document(s) and provide your approval.</p><p>Thank you,<br/>[Routing:OwnerName]<br/>[Routing:OwnerComapnyName]</p>';
	$nodeUserDetail = get_user_real_name_email(array($routingSlipNode->uid));
	$RoutingNodePath = l('here',$base_url.$base_path.$routingSlipNodePathAlias,array('external'=>TRUE));
	$ownerComapnyName = '';
	$ownerCompanyNid = _get_user_company_nid($routingSlipNode->uid);
	if($ownerCompanyNid && is_numeric($ownerCompanyNid)){
	  $ownerCompanyNode = node_load($ownerCompanyNid);
	  $ownerComapnyName = $ownerCompanyNode->title;
	}
	$replace = array(
	  '[Routing:Title]' => $routingSlipNode->title,
	  '[Site:SignUplink]' => $RoutingNodePath,
	  '[Routing:OwnerName]' => $nodeUserDetail[$routingSlipNode->uid]['realname'],
	  '[Routing:OwnerComapnyName]'=> $ownerComapnyName,
	);
	$message = str_replace(array_keys($replace),array_values($replace),$message);
	$params_all = array(
	  'subject' => 'Your approval is required on the '.$routingSlipNode->title,
	  'body' => '',
	  'sender' => $nodeUserDetail[$routingSlipNode->uid]['mail'],
	  'language' => language_default(),
	  'module' => 'm6connect_misc',
	  'key' => 'routing_mail___approval_invite_notify',
	  'build' => TRUE,
	);
	foreach($result as $delta => $dataObj){
	  $nidOrMail = 	$dataObj->field_routing_company_nid_email_value;
	  $managerUids = explode(',',$dataObj->field_routing_invited_user_uids_value);
	  if(is_numeric($nidOrMail)){
		if(!empty($managerUids)){
		  $nodeInvitedUserDetail = get_user_real_name_email(array_values(array_values($managerUids)));
		  foreach($managerUids as $index => $mgrUid){
			$params = $params_all;
			$replace = array('[Routing:ApproverName]' => $nodeInvitedUserDetail[$mgrUid]['realname']); 
			$params['body'] = str_replace(array_keys($replace),array_values($replace),$message);
		    drupal_mail($params['module'], $params['key'], $nodeInvitedUserDetail[$mgrUid]['mail'], $params['language'], $params); 
			//drup_msg($ret); 
		  }
		}
	  }else{
		$mailTo = $nidOrMail;
		$params = $params_all;
	    $replace = array('[Routing:ApproverName]' => $mailTo); 
		$params['body'] = str_replace(array_keys($replace),array_values($replace),$message);
		drupal_mail($params['module'], $params['key'], $mailTo, $params['language'], $params);    
	  }
	}
  }
  drupal_set_message('Resend Invitation Susscessfully');
}


function get_user_real_name_email($uids){
  $data = array();
  if(!empty($uids)){
    $query3 = db_select('users', 'u');
    $query3->leftjoin('realname', 'r', 'r.uid=u.uid');
    $query3->fields('u', array('uid','mail'));
    $query3->fields('r', array('realname'));
    $query3->condition('u.uid', array_values($uids), 'IN');
    $result = $query3->execute()->fetchAll();
	if($result && !empty($result)){
	  foreach($result as $delta => $obj){
		$data[$obj->uid]= array('mail'=>$obj->mail,'realname'=>$obj->realname);  
	  }
	}
  }
  return $data;	
}

function get_routing_slip_invite_approver_by_nidoremail($nid, $nidOrEmail){
  $result=FALSE;
  if(!empty($nidOrEmail)){
    $query = db_select('field_data_field_invited_approvers', 'ria');
    $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
    $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
	$query->fields('ria', array('field_invited_approvers_value'));
	$query->condition('rcne.field_routing_company_nid_email_value',$nidOrEmail,'=');
	$query->condition('ria.entity_id',$nid,'=');
	$result = $query->execute()->fetchColumn(0);
  }
  return $result; 
}

function get_routing_slip_invited_companies_or_individuals_list($node) {
    $output = '';
	assign_bid_package_ctools_popup_style();
    $invitedCompanies = array();
    $dfg = 1;
    $awardedFC = array();
    $assigned = array();
    $output .= '<div class="invited-co-list" rpnid="' . $node->nid . '">';
    $output .= '<label>' . t('Invited Companies/Individuals :') . '</label>';
    $output .= '<div class="invited-companies-lists">';

    $query = db_select('field_data_field_invited_approvers', 'ric');
    $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ric.field_invited_approvers_value = rcne.entity_id');
    $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ric.field_invited_approvers_value = rcimu.entity_id');
    $query->leftJoin('node', 'n', 'n.nid = rcne.field_routing_company_nid_email_value');
    $query->fields('ric', array('field_invited_approvers_value'));
    $query->fields('rcne', array('field_routing_company_nid_email_value'));
    $query->fields('rcimu', array('field_routing_invited_user_uids_value'));
    $query->fields('n', array('title'));
    $query->condition('ric.entity_id', $node->nid, '=');
    $query->isNotNull('rcne.field_routing_company_nid_email_value');
    $result = $query->execute()->fetchAll();
	
	$assigned =get_approval_type_invitess_fc_item($node->nid);
	
    if ($result && !empty($result)) {
        foreach ($result as $delta => $resultObj) {
            $awardedClass = '';
            $CompanyName = '';
            $companyUsersName = array();
            $FCitemId = $resultObj->field_invited_approvers_value;
            $inviteddata = $resultObj->field_routing_company_nid_email_value;
            if (!empty($inviteddata) && is_numeric($inviteddata)) {
                $compMgrUids = explode(',', $resultObj->field_routing_invited_user_uids_value);
                $cnode = node_load($inviteddata);
                $CompanyName = $resultObj->title;
                $invitedCompanies[] = $inviteddata;
                if (!empty($compMgrUids)) {
                    $companyUsersName = _get_user_uid_name_mapping(array_values($compMgrUids));
                }
                $output .= '<div id="invited-companies-done-' . $FCitemId . '" class="invited-companies-done company-registered clearfix">';
                $output .= '<div class="invited-companies-link-sec"><a href="javascript:void(0);" class="remove-routing-invited-company" cnid="' . $inviteddata . '" itemid="' . $FCitemId . '">[X]</a>';
                $output .= '<span class="invited-companies-name">' . $CompanyName . '&nbsp;-&nbsp;' . implode(', ', $companyUsersName) . '</span></div>';         
				$assignBtnClass = (in_array($FCitemId, $assigned)) ? 'btn-success' : 'btn-primary';
			    $output .= '<span class="add-assign-bid-btn"><a href="/assign-approval-types/nojs/' . $FCitemId . '/' . $node->nid . '" class="ctools-use-modal ctools-modal-assign-bid-package-popup-style"><input type="button" value="Assign to Approval Type" class="btn ' . $assignBtnClass . ' assign-approval-type-btn-'.$FCitemId.'"></a></span>';
                $output .= '</div>';
            } else {
                $output .= '<div id="invited-companies-done-' . $FCitemId . '" class="invited-companies-done company-not-registered clearfix">';
                $output .= '<div class="invited-companies-link-sec"><a href="javascript:void(0);" class="remove-routing-invited-company" cnid="' . $inviteddata . '" itemid="' . $FCitemId . '">[X]</a>';
                $output .= '<span class="invited-companies-name">' . $inviteddata . '</span></div>';
				$assignBtnClass = (in_array($FCitemId, $assigned)) ? 'btn-success' : 'btn-primary';
			    $output .= '<span class="add-assign-bid-btn"><a href="/assign-approval-types/nojs/' . $FCitemId . '/' . $node->nid . '" class="ctools-use-modal ctools-modal-assign-bid-package-popup-style"><input type="button" value="Assign to Approval Type" class="btn ' . $assignBtnClass . ' assign-approval-type-btn-'.$FCitemId.'"></a></span>';
                $output .= '</div>';
            }
        }
    }
    $output .= '</div>';
    $output .= '</div>';
    return $output;
}

function get_approval_type_invitess_fc_item($entity_id){
  $assigned = array();
  if (db_table_exists('m6connect_routing_approval_types')) {
	$query2 = db_select('m6connect_routing_approval_type_invitess', 'mbpi');
	$query2->fields('mbpi', array('fc_item_id'));
	$query2->distinct();
	$query2->condition('mbpi.entity_id', $entity_id, '=');
	$assigned = $query2->execute()->fetchCol();	
  }
  return $assigned;
}

function remove_routing_invited_company_callback($node, $deleteItemId) {
    $return = array('msg' => 0);
    if ($deleteItemId && isset($node)) {
        if (isset($node->field_invited_approvers['und']) && !empty($node->field_invited_approvers['und'])) {
            foreach ($node->field_invited_approvers['und'] as $delta => $item) {
                if ($item['value'] == $deleteItemId) {
                    unset($node->field_invited_approvers['und'][$delta]);
                    $node->field_invited_approvers['und'] = array_values($node->field_invited_approvers['und']);
                    node_save($node);
                    entity_delete_multiple('field_collection_item', $deleteItemId);
                    $return = array('msg' => 1);
                    break;
                }
            }
        }
    }
    drupal_json_output($return);
    exit(0);
}

function routing_slip_anticipated_approval_date_form($form,&$form_state,$nodeNid,$fieldCollectionId,$defaultDate,$nodeUid){
  global $user;
  $form = array();
  $form['#attributes']= array('class'=>array('routing_slip_anticipated_approval_date_form'),'id'=>'routing_slip_anticipated_approval_date_form');
  $form['node_nid']= array(
    '#type' => 'value',
    '#value'=> $nodeNid,
  );
  
  $form['fc_item_id']= array(
    '#type' => 'value',
    '#value'=> $fieldCollectionId,
  );
  
  if($user->uid == $nodeUid){
	$form['anticipited_date'] = array(
	  '#type' => 'date_popup',
	  '#date_type' => DATE_DATETIME,
	  '#date_timezone' => date_default_timezone(),
	  '#date_label_position' => 'none',
	  '#date_format' => 'm/d/y',
	  '#date_increment' => 1,
	  '#date_year_range' => '0:+3',
	  '#attributes'=> array('onchange'=>'jQuery(".anticipated_approval_date_submit_'.$fieldCollectionId.'").click();'),
	);
	
	  $form['add'] = array(
		'#type' => 'submit',
		'#value' => 'Update',
		'#attributes' => array('class' => array('abc_message','anticipated_approval_date_submit_'.$fieldCollectionId),'style'=>'display:none;'),
		'#executes_submit_callback' => FALSE,
		'#limit_validation_errors' => array(),
		'#href' => '',
		'#ajax' => array(
			'callback' => 'update_anticipated_approval_date_callback',
			'effect' => 'fade',
			'event' => 'click',
			'progress' => array('type' => 'throbber','message'=>'please wait'),
		),
	);
  }else{
    $form['anticipited_date'] = array(
	  '#type' => 'textfield',
	  '#title_display' => 'invisible',
	  '#disabled' =>TRUE,
	);  
  }
  if(!empty($defaultDate)){
	$form['anticipited_date']['#default_value'] = date('Y-m-d',strtotime($defaultDate));  
  }
	
  return $form;	
}

function update_anticipated_approval_date_callback(&$form,&$form_state){
  $values = $form_state['values'];
  if(is_numeric($values['node_nid']) && is_numeric($values['fc_item_id']) && isset($values['anticipited_date']['date'])){
	$collectionItem = field_collection_item_load($values['fc_item_id']);
	if(!empty($values['anticipited_date']['date'])){
	  $collectionItem->field_anticipated_approval_date['und'][0]['value'] = $values['anticipited_date']['date'];
	}else{
	  unset($collectionItem->field_anticipated_approval_date['und']);	
	}
	entity_save('field_collection_item', $collectionItem);  
  }
}



function get_user_details_by_uids($managerUids,$companyNid) {
    $return = array();
    $query = db_select('users', 'u');
	$query->leftjoin('m6connect_og_membership_email','om','om.user_uid=u.uid AND om.entity_id=:CompanyNid', array(':CompanyNid'=>$companyNid));
    $query->leftjoin('realname', 'r', 'r.uid=u.uid');
    $query->leftjoin('field_data_field_phone', 'p', 'p.entity_id=u.uid');
    $query->fields('u', array('uid')); //'mail'
	$query->addField('om','company_email','mail');
    $query->fields('r', array('realname'));
    $query->fields('p', array('field_phone_value'));
    $query->condition('u.uid', $managerUids, 'IN');
    $result = $query->execute()->fetchAll();
    if (!empty($result)) {
        foreach ($result as $delta => $userObj) {
            $return[$userObj->uid] = array(
                'uid' => $userObj->uid,
                'mail' => $userObj->mail,
                'name' => $userObj->realname,
                'phone' => $userObj->field_phone_value,
            );
        }
    }
    return $return;
}





function get_approval_feedback_message($nodeNid,$fieldCollectionId,$approvalTypeid){
  global $user;
  ctools_include('ajax');
  ctools_include('modal');
  $output = '<div class="bidder-feedback-msg-list">';
  if (db_table_exists('m6connect_routing_feedback_message')) {
	  $query = db_select('m6connect_routing_feedback_message', 'rfm');
	  $query->leftjoin('node','n','n.nid=rfm.node_nid');
	  $query->join('realname', 'r', 'r.uid=rfm.user_uid');
	  $query->fields('rfm', array('id', 'message','message_prefix', 'timestamp','user_uid'));
	  $query->fields('n', array('uid'));
	  $query->fields('r', array('realname'));
	  $query->condition('rfm.node_nid', $nodeNid, '=');
	  $query->condition('rfm.fc_item_id', $fieldCollectionId, '=');
	  $query->condition('rfm.approval_type_id', $approvalTypeid, '=');
	  $query->orderBy('rfm.timestamp', 'ASC');
	  //$isNodeCompanyUser = in_array($user->uid, _get_current_company_users($node->uid));
	  $result = $query->execute()->fetchAll();
	  if ($result && !empty($result)) {
		foreach ($result as $delta => $msgObj) {
		  $messagePrifix =$msgObj->message_prefix;
		  if(!empty($messagePrifix)){
			$messagePrifix = ' '.$messagePrifix;  
		  }
		  $output .= '<div class="bidder-feedback-msg routing-feedback-msg-' . $msgObj->id . ' clearfix">';
		  $output .= '<div class="bidder-feedback-msg-attr pull-left">';
		  $output .= '<span class="bidder-feedback-msg-time"><strong>' . date('m/d/Y h:i A', $msgObj->timestamp) . ' (' . $msgObj->realname . ')'.$messagePrifix.'</strong> - </span>';
		  $output .= '<span class="bidder-feedback-msg-msg">' . $msgObj->message . '</span>';
		  $output .= '</div>';
          if($user->uid == $msgObj->uid || $user->uid == $msgObj->user_uid){
		    $output .= '<div class="bidder-feedback-msg-delete pull-right">';
		    $output .= l('<i class="fa fa-times-circle"></i>', 'remove-routing-feedback-message/' . $msgObj->id . '/nojs', array('html' => TRUE, 'attributes' => array('class' => array('bidder-feedback-msg-delete-link', 'use-ajax'))));
		    $output .= '</div>';
		  }
		  $output .= '</div>';
		}
	  }
  }
  $output .= '</div>';
  return $output;	
}

function remove_routing_feedback_message_callback($messageId, $ajax = NULL){
  ctools_include('ajax');
    $commands = array();
    if (db_table_exists('m6connect_routing_feedback_message') && is_numeric($messageId)) {
        db_delete('m6connect_routing_feedback_message')->condition('id', $messageId, '=')->execute();
        $commands[] = ajax_command_remove('.routing-feedback-msg-' . $messageId);
    }
    print ajax_render($commands);
    exit;	
}

function get_routing_node_approval_status($nodeNid){
  $data = array();
  $query = db_select('m6connect_routing_approval_status','mras');
  $query->fields('mras', array('user_uid','fc_item_id','approval_status'));
  $query->condition('mras.node_nid',$nodeNid,'=');
  $result = $query->execute()->fetchAll();
  if($result && !empty($result)){
	foreach($result as $delta => $obj){
	  $data[$obj->fc_item_id][$obj->user_uid] = $obj->approval_status;	
	}
  }
  return $data;
}



function get_request_approval_reminder_form_callback($routingNode, $fcitemID) {
    $form = drupal_get_form('request_approval_reminder_dialog_form', $routingNode->nid, $fcitemID);
    $output = drupal_render($form);
    $json = array('html' => $output, 'data' => $form);
    drupal_json_output($json);
    drupal_exit();
}

function request_approval_reminder_dialog_form($form, &$form_state, $nodeNid, $fcitemId) {
    $form['#attributes'] = array('class' => array('request_approval_reminder_dialog_form'));
    $form['markup'] = array(
        '#markup' => '<div class="text-center"><strong>Would you like to send an Approval Email Reminder? If so, please add a special note that will be included in email body.<span class="data-fc-item-id" style="display:none;">' . $fcitemId . '</span><span class="data-routing" style="display:none;">' . $nodeNid . '</span></strong></div>'
    );
    $form['message'] = array(
        '#title' => 'Message',
        '#type' => 'textarea',
        '#rows' => 3,
        '#required' => TRUE,
        '#prefix' => '<div class="request-approval-reminder-message">',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('request-approval-reminder-message-text')),
    );

    $form['node-nid'] = array(
        '#type' => 'value',
        '#value' => $nodeNid,
    );
    $form['fc-item-id'] = array(
        '#type' => 'value',
        '#value' => $fcitemId,
    );
    return $form;
}


function request_approval_reminder_callback($node,$fcitemId){
  global $base_url,$base_path,$user;
  $comment_box_data = array('selector'=>'','html'=>'');
  $values = '';
  $clientMessage = '';
  if(isset($_REQUEST['values']) && !empty($_REQUEST['values'])){
    parse_str($_REQUEST['values'], $values); 
	$clientMessage = 'Message: '.$values['message'];
  }
  $reminderCount=0;
  $collection = field_collection_item_load($fcitemId);
  if($collection && is_object($collection)){
    $routingNode = $collection->hostEntity();
	$nidOrMail = isset($collection->field_routing_company_nid_email['und'])?$collection->field_routing_company_nid_email['und'][0]['value']:'';
	$managerUids = isset($collection->field_routing_invited_user_uids['und'])?$collection->field_routing_invited_user_uids['und'][0]['value']:'';
	$reminderCount = isset($collection->field_approval_reminder_count['und'])?$collection->field_approval_reminder_count['und'][0]['value']:0;
	$message ='[Routing:ApproverName],<br/><br/>This is a reminder, your approval is required on Routing Slip - [Routing:Number] [Routing:Title].<p>[Routing:ClientMessage]</p><p>Please click [Site:SignUplink] to log into M6Connect to see the document and provide your approval.</p><p>Thank you,<br/>[Routing:OwnerName]<br/>[Routing:OwnerComapnyName]</p>';
	$messageSubject ='[Routing:Number] [Routing:Title] - Reminder Notification';
	$routingSlipNodePathAlias = drupal_lookup_path('alias','node/'.$routingNode->nid);
	$nodeUserDetail = get_user_real_name_email(array($routingNode->uid));
	$RoutingNodePath = l('here',$base_url.$base_path.$routingSlipNodePathAlias,array('external'=>TRUE));
	$ownerComapnyName = '';
	$ownerCompanyNid = _get_company_nid_by_group_content($routingNode);
	$isCompanyIndividual = FALSE;
	if($ownerCompanyNid && is_numeric($ownerCompanyNid)){
	  $ownerCompanyNode = node_load($ownerCompanyNid);
	  $ownerComapnyName = $ownerCompanyNode->title;
	  if(isset($ownerCompanyNode->field_type_of_company['und']) && $ownerCompanyNode->field_type_of_company['und'][0]['value']=='individual'){
		$ownerComapnyName = '';  
	  }
	  
	}
	$replace = array(
	  '[Routing:Title]' => $routingNode->title,
	  '[Site:SignUplink]' => $RoutingNodePath,
	  '[Routing:OwnerName]' => $nodeUserDetail[$routingNode->uid]['realname'],
	  '[Routing:ClientMessage]' => $clientMessage,
	  '[Routing:OwnerComapnyName]' => $ownerComapnyName, 
	  '[Routing:Number]' => (isset($routingNode->field_routing_slip_no['und']) && !empty($routingNode->field_routing_slip_no['und'][0]['value']))?$routingNode->field_routing_slip_no['und'][0]['value']:'',
	);
	$params = array(
	  'subject' => str_replace(array_keys($replace),array_values($replace),$messageSubject),
	  'body' => '',
	  'sender' => $nodeUserDetail[$routingNode->uid]['mail'],
	  'language' => language_default(),
	  'module' => 'm6connect_misc',
	  'key' => 'routing_mail___approval_reminder_notify',
	  'build' => TRUE,
	 );
	$message = str_replace(array_keys($replace),array_values($replace),$message); 
	if(is_numeric($nidOrMail)){
	  $managerUids = explode(',',$managerUids);
	  $managerUids = array_filter($managerUids);
	  if(!empty($managerUids)){
		//$mgrUserDetail = get_user_real_name_email($managerUids);
		$mgrUserDetail = get_user_details_by_uids($managerUids,$nidOrMail);
		foreach($managerUids as $delta => $mgrUid){
		  $mailTo=$mgrUserDetail[$mgrUid]['mail'];
		  //$replace = array('[Routing:ApproverName]'=>$mgrUserDetail[$mgrUid]['realname']);
		  $replace = array('[Routing:ApproverName]'=>$mgrUserDetail[$mgrUid]['name']);
		  $messagebody = str_replace(array_keys($replace),array_values($replace),$message);
		  $paramsTemp = $params;
		  $paramsTemp['body'] = $messagebody;
		  drupal_mail($paramsTemp['module'], $paramsTemp['key'], $mailTo, $paramsTemp['language'], $paramsTemp);
		}
	  }
	}else{
	  $mailTo = $nidOrMail;
	  $paramsTemp = $params;
	  $replace = array('[Routing:ApproverName]'=>$nidOrMail);
	  if($invitedUser = user_load_by_mail($nidOrMail)){
		$mgrUserDetail = get_user_real_name_email(array($invitedUser->uid));
		$replace = array('[Routing:ApproverName]'=>$mgrUserDetail[$invitedUser->uid]['realname']);
	  }
	  $messagebody = str_replace(array_keys($replace),array_values($replace),$message);
	  $paramsTemp['body'] = $messagebody; 
	  drupal_mail($paramsTemp['module'], $paramsTemp['key'], $mailTo, $paramsTemp['language'], $paramsTemp); 
	}
	$reminderCount++;
	$collection->field_approval_reminder_count['und'][0]['value']=$reminderCount;
    entity_save('field_collection_item', $collection); 
	if(!empty($values['message']) && db_table_exists('m6connect_routing_feedback_message')){
	  $approval_type_id =0;
	  $approval_message= array(
	    'node_nid' => $routingNode->nid,
	    'fc_item_id' => $fcitemId,
	    'user_uid' => $user->uid,
	    'approval_type_id' => $approval_type_id,
	    'message' => strip_tags($values['message']),
		'message_prefix'=> 'Email Reminder Sent',
	    'timestamp' => time(),
	  );
	  $id = db_insert('m6connect_routing_feedback_message')->fields($approval_message)->execute(); 
	  $output = get_approval_feedback_message($routingNode->nid,$fcitemId,0);	
	  $comment_box_data = array('selector'=>'#approval_feedback_message_container_'.$fcitemId. '_' .$approval_type_id,'html'=>$output);		
	}
  }
  drupal_json_output(array('status' => 1,'approval_reminder_count'=>$reminderCount,'comment_box'=> $comment_box_data));
  drupal_exit(0);
}

/*function routing_slip_approver_action_callback($action ,$fieldCollectionId){
  global $base_path,$bas_url,$user;
  if(in_array($action , array('approved','denied'))){
    $collection = field_collection_item_load($fieldCollectionId);
	drup_msg($collection);
    if($collection && is_object($collection)){
      $routingNode = $collection->hostEntity();
	  $routingSlipNodePathAlias = drupal_lookup_path('alias','node/'.$routingNode->nid); 
	  $userDetails = get_user_real_name_email(array($routingNode->uid,$user->uid));
	  $RoutingNodePath = l('hear',$base_url.$base_path.$routingSlipNodePathAlias,array('external'=>TRUE)); 
	  $approverStatus = ($action=='approved')?1:0;
	  $collection->field_approver_status['und'][0]['value']=$approverStatus;
	  entity_save('field_collection_item', $collection);
	  $approverStatus = ($action=='approved')?'Approved':'Denied'; 
	  
	  $message = 'Hello [Routing:OwnerName],<br/>This is a notification that [Routing:ApproverName] has [Routing:ApproverStatus] your request for approval on the M6Connect Routing Slip named [Routing:Title].<br/>Click [Site:SignUplink] to log into M6Connect to see more details.<br/>
M6Connect';
	  $replace = array(
	    '[Routing:Title]' => $routingSlipNode->title,
	    '[Site:SignUplink]' => $RoutingNodePath,
	    '[Routing:OwnerName]' => $userDetails[$routingNode->uid]['realname'],
	    '[Routing:ApproverName]' => $userDetails[$user->uid]['realname'],
		'[Routing:ApproverStatus]' => $approverStatus,
	  );
	  $mailTo = $userDetails[$routingNode->uid]['mail'];
	  $message = str_replace(array_keys($replace),array_values($replace),$message);
	  $params = array(
		'subject' => 'Approver Status Changed for '.$routingNode->title,
		'body' => $message,
		'sender' => $userDetails[$user->uid]['mail'],
		'language' => language_default(),
		'module' => 'm6connect_misc',
		'key' => 'routing_mail___approver_update_approval_notify',
		'build' => TRUE,
	  );
	  $return = drupal_mail($params['module'], $params['key'], $mailTo, $params['language'], $params); 
	}
  }
  drupal_goto($_REQUEST['destination']);
}*/

function routing_slip_approver_action_callback($action, $fieldCollectionId, $routingNode){
  global $user;
  $commands = array();
  $routingStatus = array('approve'=>1,'reject'=>0,'pending'=>2);
  if(in_array($action,array_keys($routingStatus))){
    $key = $fields = array(
	  'node_nid'=>$routingNode->nid,
	  'user_uid'=>$user->uid,
	  'fc_item_id'=>$fieldCollectionId,
		);
		$key1 = $fields1 = array(
	  'node_nid'=>$routingNode->nid,
	  'user_uid'=>$user->uid,
	  'fc_item_id'=>$fieldCollectionId,
		'timestamp' => time(),
		);
		
	$fields['approval_status']  = $routingStatus[$action];
	$fields1['approval_status']  = $routingStatus[$action];
	if(db_table_exists('m6connect_routing_approval_status') && db_table_exists('m6connect_routing_approval_status_log')) {
	  db_merge('m6connect_routing_approval_status')->key($key)->fields($fields)->execute();	
		db_insert('m6connect_routing_approval_status_log')->fields($fields1)->execute();
		//db_insert('m6connect_routing_approval_status_log')->fields($fields1)->execute();	
	  $nodeInvitedUserDetail = get_user_real_name_email(array($user->uid,$routingNode->uid));
	  $routingSlipNodePathAlias = drupal_lookup_path('alias','node/'.$routingNode->nid);
	  $RoutingNodePath = l('Here',$base_url.$base_path.$routingSlipNodePathAlias,array('external'=>TRUE));
	  $ApproverStatus = array(0=>'Rejected',1=>'Approved',2=>'Not Sure Yet');
	  $mailTo = $nodeInvitedUserDetail[$routingNode->uid]['mail'];
	  /*$message = 'Hello [Routing:OwnerName],<br/>This is a notification that the status of the M6Connect Routing Slip named [Routing:Title] has changed.<br/>Click [Site:SignUplink] to log into M6Connect to see more details.<br/>M6Connect';*/
	  
	  $message = '<p>[Routing:OwnerName],</p><p>[Routing:ApproverName] has changed the status of Routing Slip - [Routing:Title] has changed to: [Routing:ApproverStatus].</p> <p>Click [Site:SignUplink] to log into M6Connect to see more details.</p><p>[Routing:ApproverName]</p>';
      $replace = array(
	    '[Routing:Title]' => $routingNode->title,
	    '[Site:SignUplink]' => $RoutingNodePath,
	    '[Routing:OwnerName]' => $nodeUserDetail[$routingNode->uid]['realname'],
		'[Routing:ApproverName]'=> $nodeUserDetail[$user->uid]['realname'],
		'[Routing:ApproverStatus]' => $ApproverStatus[$fields['approval_status']],
	  );
      $message = str_replace(array_keys($replace),array_values($replace),$message);
	  $params = array(
		'subject' => 'Routing Slip Status Change - '.$routingNode->title,
		'body' => $message,
		'sender' => $nodeInvitedUserDetail[$user->uid]['mail'],
		'language' => language_default(),
		'module' => 'm6connect_misc',
		'key' => 'routing_mail___approved_status_notify',
		'build' => TRUE,
	   );
	   drupal_mail($params['module'], $params['key'], $mailTo, $params['language'], $params);  
	}
  }
  drupal_goto($_REQUEST['destination']);
}

function _get_invited_approvers_by_nid($routingSlipnodeNid){
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
  $query->fields('n',array('uid'));
  $query->fields('ria',array('field_invited_approvers_value'));
  $query->fields('rcne',array('field_routing_company_nid_email_value'));
  $query->fields('rcimu',array('field_routing_invited_user_uids_value'));
  $query->condition('n.nid',$routingSlipnodeNid,'=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $result = $result = $query->execute()->fetchAll();
  if($result && !empty($result)){
	foreach($result as $delta => $dataObj){
		
	}
  }
}

/********** Start Routing Slip Approval Tab Content Callback  **********/

/**
 *Popup’s setings function.
 */
function update_approval_type_ctools_popup_style() {
  static $updateApprovalType = FALSE;
  if ($updateApprovalType == FALSE) {
    $updateApprovalType = TRUE;
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();
	$update_approval_type_popup_style = array(
	  'update-approval-type-popup-style' => array(
		 'modalSize' => array(
			 'type' => 'fixed',
			 'width' => 430,
			 'height' => 'auto',
		 ),
		 'modalOptions' => array(
			 'opacity' => (float) 0.85, 
			 'background-color' => '#000000',
		 ),
		 'closeText' => '', 
		 'loadingText' => '',
		 'animation' => 'fadeIn', 
		 'modalTheme' => 'UpdateApprovalTypePopup',
		 'animationSpeed' => 'fast',
	   ),
	 );
	 drupal_add_js($update_approval_type_popup_style, 'setting');
     ctools_add_js('m6connect_routing_modal', 'm6connect_routing');
   }	
}

function add_new_routing_approval_type_form($form,$form_state,$routingNode=NULL,$view='page'){
  global $user;
  $form= array();
  update_approval_type_ctools_popup_style();
  $entity_id = $routingNode->nid;
  $form['#attributes'] = array('class' => array('routing-approval-type-form'), 'id' => 'routing-approval-type-form-'.$entity_id);    
  $form['add_approval_type_start']['#markup'] = '<div class="row"><div class="col-md-6">';
  $form['add_approval_type_errors']['#markup']='<div id="add_approval_type_errors"></div>';
  
  if($view =='page'){
	$form['entity_id'] =array(
      '#type' => 'value',
	  '#value' => $entity_id,
    );
    $form['user_uid'] =array(
	  '#type' => 'value',
	  '#value' => $user->uid,
    );
	$form['approval_type_name'] = array(
	  '#type' => 'textfield',
	  '#title' => 'Approval Type',
	  //'#title_display' => 'invisible',
	  '#required' => TRUE,
	  '#attributes' => array('placeholder'=>'Add Approval Type','id'=>'approval-type-name-'.$entity_id, 'class'=>array('approval-type-name')),
	);
	
	$form['approval_type_date'] = array(
	  '#type' => 'date_popup',
	  '#title' => 'Approval Type Due Date',
	  //'#title_display' => 'invisible',
	  '#date_type' => DATE_DATETIME,
	  '#date_timezone' => date_default_timezone(),
	  '#date_label_position' => 'none',
	  '#date_format' => 'm/d/y h:i:s A',
	  '#date_increment' => 1,
	  '#date_year_range' => '0:+3',
	  '#required' => TRUE,
	  //'#attributes' => array('placeholder'=>'Approval Type Date'),
	  '#prefix' => '<div class="form-item approval-type-date-field">',
	  '#suffix' => '</div>',
	  '#after_build' => array('routing_approval_type_date_after_build'), 
	);
	
	
	$actionQuery = array();
	if(isset($_REQUEST['action']) && $_REQUEST['action']=='create'){
	 $actionQuery = array('action'=>$_REQUEST['action']);
	}
	
	$form['back'] = array(
      '#type' => 'markup',
      '#markup' => l('<input type="button" value="Back" class="form-submit" alt ="Back" title ="Back" />', 'node/'.$entity_id.'/edit', array('html' => true,'query'=>$actionQuery)),
    );
	
	$form['add'] = array(
	  '#type' => 'submit',
	  '#value' => 'Add Approval Type',
	  '#attributes' => array('class' => array('add_new_approval-type')),
	  '#executes_submit_callback' => FALSE,
	  '#limit_validation_errors' => array(array('approval_type_name'),array('approval_type_date')),
	  '#href' => '',
	  '#ajax' => array(
		  'callback' => 'add_new_approval_type',
		  'effect' => 'fade',
		  'event' => 'click',
		  'progress' => array(
			  'type' => 'throbber',
			  'message' => NULL,
		  ),
	  ),
	);
	
	$form['next'] = array(
	  '#type' => 'markup',
	  '#markup' => l('<input type="button" value="Next" class="form-submit">','invite-approvers/'.$entity_id,array('html'=>TRUE,'query'=>$actionQuery)),
	);
  }
  
  $form['approval_types_data'] = array(
	'#markup' => get_approval_type_data($entity_id,$view),
	'#prefix' => '<div id="approval-types-date-content">',
	'#suffix' => '</div>',
  );
  $form['add_approval_type_end']['#markup'] = '</div></div>';
  return $form;	
}

function routing_approval_type_date_after_build($element,&$form_state){
  $element['date']['#attributes']['placeholder'] ='Choose Date';
  $element['time']['#attributes']['placeholder'] ='Choose Time';
  return $element;
}

function add_new_approval_type(&$form,&$form_state){
  $commands = array();
  $errors = form_get_errors();
  if(!empty($errors)){
	$commands[] = ajax_command_html('#add_approval_type_errors', theme('status_messages'));
	return array('#type' => 'ajax', '#commands' => $commands);
  }
  $values = $form_state['values'];
  $inputs = $form_state['input'];
  $approverDate = $inputs['approval_type_date']['date'].' '.$inputs['approval_type_date']['time'];
  $approval_type = array(
    'entity_id' => $values['entity_id'],
	'user_uid' => $values['user_uid'],
	'approval_type' => $values['approval_type_name'],
	'approval_date' => strtotime($approverDate),
  );
  if (db_table_exists('m6connect_routing_approval_types')) {
    db_insert('m6connect_routing_approval_types')->fields($approval_type)->execute();
	$data = get_approval_type_data($values['entity_id'],'page');
	$commands[] = ajax_command_html('#approval-types-date-content', $data);  
  }
  $commands[] = ajax_command_invoke('input.approval-type-name', val, array('')); 
  $commands[] = ajax_command_invoke('.approval-type-date-field input', val, array('')); 
  return array('#type' => 'ajax', '#commands' => $commands);
}

function get_approval_type_data($entity_id,$view='page'){
  $output = '';
  //$header = array('Approval Type', 'Due Date', 'Action');
  
  $header = array(
    array('data' => 'Approval Type', 'class' => array('text-left')),
    array('data' => 'Due Date', 'class' => array('text-center')),
  );
  if($view =='page'){
	$header[] = array('data' => 'Action', 'class' => array('text-center'));  
  }
  $rows = array();
  $index =0;
  if (db_table_exists('m6connect_routing_approval_types')) {
	$result = db_select('m6connect_routing_approval_types','mrat')->fields('mrat')->condition('mrat.entity_id',$entity_id,'=')->execute()->fetchAll();
	if($result && !empty($result)){
	  foreach($result as $delta => $approvalObj){
		$editLink = l('<i class="fa fa-pencil"></i>','approval-type-action/update/'.$entity_id.'/'.$approvalObj->id.'/nojs',array('html'=>TRUE,'attributes'=>array('class'=> array('ctools-use-modal','ctools-modal-update-approval-type-popup-style'))));
		$deleteLink =l('<i class="fa fa-trash-o"></i>','approval-type-action/remove/'.$entity_id.'/'.$approvalObj->id.'/nojs',array('html'=>TRUE,'attributes'=> array('class'=>array('use-ajax'))));
		$rows[$index] = array(
		  'data' => array(
		    array('data' => $approvalObj->approval_type, 'class' => array('view-approval-field-name')),
	        array('data' => date('m/d/y h:iA T',$approvalObj->approval_date), 'class' => array('view-approval-field-date text-center')),
	        //array('data' => $editLink.'&nbsp;&nbsp;&nbsp;&nbsp;'.$deleteLink, 'class' => array('view-approval-field-action text-center')),
		  ),
		  'id' => 'view-row-approval-type-'.$approvalObj->id,
		  'class' => array('view-row-approval-type','view-row-approval-type-'.$approvalObj->id),
		);
		if($view == 'page'){
		  $rows[$index]['data'][] =array('data' => $editLink.'&nbsp;&nbsp;&nbsp;&nbsp;'.$deleteLink, 'class' => array('view-approval-field-action text-center'));
		}
		
		$index++;
	  }
	}
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Approval Type Created Yet.','attributes'=>array('class'=>array('m6connect-custom-table','approval-type-list-table','table','table-hover','table-bordered'))));
  return $output;
}

function approval_type_action_callback($action,$routingNode,$approvalTypeId, $ajax=NULL){
  $commands = array();
  ctools_include('ajax');
  ctools_include('modal');
  if($action=='remove'){
	 if (db_table_exists('m6connect_routing_approval_types')) {
	   db_delete('m6connect_routing_approval_types')
	     ->condition('id',$approvalTypeId,'=')
		 ->condition('entity_id',$routingNode->nid,'=')
		 ->execute();
	   $data = get_approval_type_data($routingNode->nid,'page');
	   $commands[] = ajax_command_html('#approval-types-date-content', $data);  
	 }
	 print ajax_render($commands);
     exit;	  
  }else if($action =='update'){
	 if (db_table_exists('m6connect_routing_approval_types')) {
	   $approvalObj = db_select('m6connect_routing_approval_types','mrat')
	     ->fields('mrat')
	     ->condition('id',$approvalTypeId,'=')
		 ->condition('entity_id',$routingNode->nid,'=')
		 ->execute()->fetchAssoc(); 
	 }
	 if($ajax){
	   $form_state = array(
		'ajax' => TRUE,
		'action' => $action,
		'approvalObj' => $approvalObj,
	   );
	  $output = ctools_modal_form_wrapper('update_routing_approval_type_form', $form_state);
	  if (!empty($form_state['ajax_commands'])) {
		$output = $form_state['ajax_commands'];
	  }
	  print ajax_render($output);
	  drupal_exit();
	 }else{
		return drupal_get_form('update_routing_approval_type_form',$approvalObj); 
	 }
  }
}

function update_routing_approval_type_form($form,&$form_state,$approvalObj=array()){
  global $user;
  $form= array();
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();

  if((!(isset($form_state['approvalObj']) && !empty($form_state['approvalObj'])) && empty($approvalObj))){
    drupal_access_denied();
	drupal_exit(); 
  }
  if(isset($form_state['approvalObj']) && !empty($form_state['approvalObj'])){
	$approvalObj = $form_state['approvalObj'];;	
  }
  $entity_id = $approvalObj['entity_id'];
  $routingNode = node_load($entity_id);
  $approval_type_id = $approvalObj['id'];
  $defaultApprovalName=$approvalObj['approval_type'];
  $defaultApprovalDate=$approvalObj['approval_date'];
  $user_uid = $approvalObj['user_uid'];
  
  $form['#attributes']=array('class'=>array('update-routing-approval-type-form'),'id' =>'update-routing-approval-type-form-'.$approval_type_id);

  $form['#attached']['js'] = array(
	drupal_get_path('module', 'date_popup') .'/jquery.timeentry.pack.js' => array(
	'type' => 'file',
	),
  );
  
  $form['approval_type_id'] =array(
    '#type' => 'value',
	'#value' => $approval_type_id,
  );
  
  $form['entity_id'] =array(
    '#type' => 'value',
	'#value' => $entity_id,
  );
  
  $form['user_uid'] =array(
	'#type' => 'value',
	'#value' => $user_uid,
  );
  
  //$form['add_approval_type_start']['#markup'] = '<div class="row"><div class="col-md-6">';
  $form['update_approval_type_markup']['#markup'] = '<div class="form-title text-center"><label>Update Approval Type</label></div>';
  
  $form['update_approval_type_errors']['#markup']='<div id="update_approval_type_errors"></div>';
  
  $form['approval_type_name'] = array(
	'#type' => 'textfield',
	'#title' => 'Approval Type Name',
	//'#title_display' => 'invisible',
	'#default_value'=> $defaultApprovalName,
	'#required' => TRUE,
	'#attributes' => array('placeholder'=>'Add Approval Type','id'=>'approval-type-name-'.$entity_id, 'class'=>array('approval-type-name')),
  );
  $form['approval_type_date'] = array(
	'#type' => 'date_popup',
	'#title' => 'Approval Due Date',
	//'#title_display' => 'invisible',
	'#default_value' => date('Y-m-d h:i:s',$defaultApprovalDate),
	'#date_type' => DATE_DATETIME,
	'#date_timezone' => date_default_timezone(),
	'#date_label_position' => 'none',
	'#date_format' => 'm/d/y h:i:s A',
	'#date_increment' => 1,
	'#date_year_range' => '0:+3',
	'#required' => TRUE,
	//'#attributes' => array('placeholder'=>'Approval Type Date'),
	'#prefix' => '<div class="form-item approval-type-date-field">',
	'#suffix' => '</div>',
	'#after_build' => array('routing_approval_type_date_after_build'), 
  );

  $form['submit'] = array(
	'#type' => 'submit',
	'#value' => 'Save',
	'#attributes' => array('class' => array('add_new_approval-type')),
	'#executes_submit_callback' => FALSE,
	'#limit_validation_errors' => array(array('approval_type_name'),array('approval_type_date')),
	'#href' => '',
	'#ajax' => array(
	  'callback' => 'uddate_new_approval_type',
	  'effect' => 'fade',
	  'event' => 'click',
	  'progress' => array(
		'type' => 'throbber',
		'message' => NULL,
	  ),
	),
	'#prefix' => '<div class="form-action pull-right">',
  ); 
  $form['cancel']= array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
	'#suffix' => '</div>',
  ); 
  
  //$form['add_approval_type_end']['#markup'] = '</div></div>';
  return $form;		
}

function uddate_new_approval_type(&$form,&$form_state){
  $commands = array();
  ctools_include('modal');
  ctools_include('ajax');
  $errors = form_get_errors();
  if(!empty($errors)){
	$commands[] = ajax_command_html('#update_approval_type_errors', theme('status_messages'));
	return array('#type' => 'ajax', '#commands' => $commands);
  }
  $values = $form_state['values'];
  $inputs = $form_state['input'];
  $approverDate = $inputs['approval_type_date']['date'].' '.$inputs['approval_type_date']['time'];
  $approval_type_update =  array(
	'approval_type' => $values['approval_type_name'],
	'approval_date' => strtotime($approverDate),
  );
  if (db_table_exists('m6connect_routing_approval_types')) {
    db_update('m6connect_routing_approval_types')
	  ->fields($approval_type_update)
	  ->condition('id',$values['approval_type_id'],'=')
	  ->condition('entity_id',$values['entity_id'],'=')
	  ->execute();
  }
  if((isset($form_state['ajax']))?(($form_state['ajax']==1)?true:false):false) {
	$data = get_approval_type_data($values['entity_id'],'page');
	$commands[] = ajax_command_html('#approval-types-date-content', $data);  
    $commands[] = ctools_modal_command_dismiss();
  }else {
	$commands[] = ctools_ajax_command_redirect('approval-type/'.$values['entity_id']);
  }
  return array('#type' => 'ajax', '#commands' => $commands);	
}

/********** End Routing Slip Approval Tab Content Callback  **********/

/********** Start Routing Slip Invite Tab Content Callback  **********/

function assign_approval_types_callback($ajax = NULL, $field_collection_id, $entity){
  global $user;
  if ($ajax) {
	ctools_include('ajax');
	ctools_include('modal');
	$form_state = array(
		'ajax' => TRUE,
		'field_collection_id' => $field_collection_id,
		'entity_id' => $entity->nid,
	);
	$output = ctools_modal_form_wrapper('assign_approval_type_form', $form_state);
	if (!empty($form_state['ajax_commands'])) {
		$output = $form_state['ajax_commands'];
	}
	print ajax_render($output);
	drupal_exit();
  }
  return drupal_get_form('assign_approval_type_form', $field_collection_id, $entity->nid);	
}

function get_approval_types_invitess($field_collection_id) {
    $output = array();
    if (db_table_exists('m6connect_routing_approval_type_invitess')) {
        $query = db_select('m6connect_routing_approval_type_invitess', 'mrati');
        $query->fields('mrati', array('approval_type_id'))->condition('fc_item_id', $field_collection_id, '=');
        $result = $query->execute()->fetchCol();
        if ($result && !empty($result)) {
            return $result;
        }
    }
    return $output;
}

function get_approval_type_listing_options($entity_id) {
    $output = array();
    if (db_table_exists('m6connect_routing_approval_types')) {
        $query = db_select('m6connect_routing_approval_types', 'mrat');
        $query->fields('mrat', array('id', 'approval_type'))->condition('entity_id', $entity_id, '=');
        $result = $query->execute()->fetchAllKeyed(0, 1);
        if ($result && !empty($result)) {
            $output = $result;
        }
    }
    return $output;
}

function assign_approval_type_form($form, $form_state, $field_collection_id = '', $entity_id = ''){
  $form = array();
  $cmpTitle = '';
  if (isset($form_state['field_collection_id']) && is_numeric($form_state['field_collection_id'])) {
	  $field_collection_id = $form_state['field_collection_id'];
  }
  if (isset($form_state['entity_id']) && is_numeric($form_state['entity_id'])) {
	  $entity_id = $form_state['entity_id'];
  }

  $form['#attributes'] = array('class' => array('assign_bid_packages_form'), 'id' => 'assign_bid_packages_form');
    $form['startup-text'] = array(
        '#markup' => '<div class="assign-bid-header-title"><h4>Assign to Approval Type</h4></div><div class="assign-bid-header-desc">Select All of the Approval Type that this individual/company is related too.</div>',
        '#prefix' => '<div class="assign-bid-header">',
        '#suffix' => '</div>',
    );

    $form['fc_item_id'] = array(
        '#type' => 'value',
        '#value' => $field_collection_id,
    );

    $form['entity_id'] = array(
        '#type' => 'value',
        '#value' => $entity_id,
    );

    $form['approval_type'] = array(
        '#type' => 'select',
        '#title' => 'Bid Packages List',
        '#title_display' => 'invisible',
        '#options' => get_approval_type_listing_options($entity_id),
        '#default_value' => get_approval_types_invitess($field_collection_id),
        '#multiple' => TRUE,
        '#attributes' => array('class' => array('assign_bid_packages_list')),
    );

    $form['action_container'] = array(
        '#type' => 'container',
        '#prefix' => '<div id="action_container" class="action_container pull-right">',
        '#suffix' => '</div>',
    );

    $form['action_container']['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
        '#weight' => 10,
    );
    $form['action_container']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Assign Approval Type'
    );
  return $form;	
}

function assign_approval_type_form_submit(&$form, &$form_state){
  if (db_table_exists('m6connect_routing_approval_type_invitess')) {
      $values = $form_state['values'];
	  if ($values['fc_item_id'] && is_numeric($values['fc_item_id'])) {
		  $old_approval_type = get_approval_types_invitess($values['fc_item_id']);
		  $new_approval_type = $values['approval_type'];
		  if (empty($new_approval_type)) {
			  db_delete('m6connect_routing_approval_type_invitess')->condition('fc_item_id', $values['fc_item_id'])->execute();
		  } else {
			  $fcItemFlag =0;
			  foreach ($new_approval_type as $delta => $approval_type_id) {
				  if (!in_array($approval_type_id, $old_approval_type)) {
					  $approval_type_invitee = array(
					      'entity_id' => $values['entity_id'],
						  'fc_item_id' => $values['fc_item_id'],
						  'approval_type_id' => $approval_type_id,
					  );
					  db_insert('m6connect_routing_approval_type_invitess')->fields($approval_type_invitee)->execute();
					  $fcItemFlag++;
				  }
			  }
			  if($fcItemFlag){
			    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
				  $form_state['ajax_commands'][] = ajax_command_invoke('.assign-approval-type-btn-'.$values['fc_item_id'], 'removeClass', array('btn-primary'));
				  $form_state['ajax_commands'][] = ajax_command_invoke('.assign-approval-type-btn-'.$values['fc_item_id'], 'addClass', array('btn-success'));
			    }
			  }
			  db_delete('m6connect_routing_approval_type_invitess')->condition('approval_type_id', $new_approval_type, 'NOT IN')
			     ->condition('fc_item_id', $values['fc_item_id'], '=')->execute();
		  }
	  }
  }
  if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
	  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
  }
}
/********** Start Routing Slip Invite Tab Content Callback  **********/

/********** Start Routing Slip Approval Feedback Tab Content Callback  **********/

function routing_slip_approval_feedback_content(){
   $elements = array();

   $libpath = libraries_get_path('signature-pad');
   $modpath = drupal_get_path('module', 'signaturefield');
   
   /*$routingSlipNode = menu_get_object('node',1);
   $description = field_get_items('node', $routingSlipNode, 'field_routing_description');
   $descriptionField = field_view_field('node', $routingSlipNode, 'field_routing_description',array('label'=>'inline'));
   if(isset($descriptionField[0]) && isset($descriptionField[0]['#markup']) && !empty($descriptionField[0]['#markup'])){
	 $elements['description'] = array(
	   '#markup' => render($descriptionField),
	   '#prefix' => '<div class="approver-feedback-description clearfix">',
	   '#suffix' => '</div><hr/>'
	 );
   }*/

    drupal_add_js($libpath.'/build/jquery.signaturepad.min.js');
    drupal_add_js($modpath.'/signaturefield.js');
       
   drupal_add_js(drupal_get_path('module', 'm6connect_routing').'/m6connect_routing_invite_form.js');
   drupal_add_library('system', 'ui.dialog');
   drupal_add_js(array('m6connect_routing' => array('request_approval_reminder_dialog' => 1,'change_approver_status_dialog'=>1)), 'setting');
   $header = array('Organization', 'M6Notes', 'Approval Needed By Date', 'Invitee', 'Phone#', 'Approved', 'Rejected', 'Not Sure Yet');
   
   $header = array(
     array('data'=>'Approval Type','class'=> array('text-center')),
	 array('data'=>'Order','class'=> array('text-center')),
     array('data'=>'Company','class'=> array('text-center')),
	 array('data'=>'M6Notes','class'=> array('text-center')),
	 array('data'=>'Approval Needed By Date','class'=> array('text-center')),
	 array('data'=>'Invitee','class'=> array('text-center')),
	 //array('data'=>'Phone#','class'=> array('text-center')),
	 array('data'=>'Approval Stage','class'=> array('text-center')),
	 array('data'=>'Approved','class'=> array('text-center')),
	 array('data'=>'Rejected','class'=> array('text-center')),
	 array('data'=>'Not Sure Yet','class'=> array('text-center')),
   );
   $rows =array();
   $entity_id = arg(1);
   $approvalTypes = $approvalTypes2 = get_approval_type_listing_options($entity_id);
   $approvalTypes2[0] = 'Unassigned';
   //$info = get_approval_feedback_table($entity_id,$approvalTypes);
   $rows = check_feedback($entity_id);
   $elements['start'] = array(
        '#markup' => '<div class="cust-bidder-fb-content clearfix"><div id="cust-bidder-fb-lists">'
   );
   /*if(!empty($approvalTypes)){
     foreach($approvalTypes2 as $approval_type_id => $approval_type_name){
	   if(isset($info[$approval_type_id]) && !empty($info[$approval_type_id])){
		 $rows = $info[$approval_type_id];
		 $elements['approval_type_' . $approval_type_id] = array(
		   '#type' => 'fieldset',
		   '#title' => $approval_type_name,
		   '#collapsible' => TRUE,
		   '#collapsed' => FALSE,
		   '#attributes' => array('class' => array('collapsible','bid-package-fieldset')),
		   '#attached' => array('js' => array('misc/form.js','misc/collapse.js')),
		 );
		 $elements['approval_type_' . $approval_type_id]['package-content'] = array(
		   '#markup' => theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Approval Feedback yet','attributes'=>array('class'=>array('m6connect-custom-table','table','table-hover','table-bordered','custom-approval-feedback-table')))),
		   '#prefix' => '<div class="rfp-bidder-fb-section" id="rfp-bidder-fb-section_' . $approval_type_id . '">',
		   '#suffix' => '</div>',
		 );
	   }
	 }
   }else{
	  $rows = array();
	  if(isset($info[$approval_type_id]) && !empty($info[$approval_type_id])){
	    $rows = $info[$approval_type_id];
	  }
	  $elements['bid_package_0'] = array(
        '#type' => 'container',
      );
	  $elements['bid_package_0']['package-content'] = array(
		 '#markup' => theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Approval Feedback yet','attributes'=>array('class'=>array('m6connect-custom-table','table','table-hover','table-bordered')))),
		 '#prefix' => '<div class="rfp-bidder-fb-section" id="rfp-bidder-fb-section_0">',
		 '#suffix' => '</div>',
	   );  
   }*/
   
   $elements['bid_package_0']['package-content'] = array(
	 '#markup' => theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Approval Feedback yet','sticky'=>FALSE,'attributes'=>array('class'=>array('m6connect-custom-table','table',/*'table-hover',*/'table-bordered','approval-feedback-table')))),
	 '#prefix' => '<div class="rfp-bidder-fb-section approval-fb-main-section" id="rfp-bidder-fb-section_0">',
	 '#suffix' => '</div>',
   );  
   $elements['end'] = array(
     '#markup' => '</div></div>'
   );
   
   $elements['request_to_intent_dialog'] = array(
     '#markup' => '',
     '#prefix' => '<div id="request-approval-reminder-dialog">',
     '#suffix' => '</div>',
    ); 
	
	$elements['change_approver_status_dialog'] = array(
     '#markup' => '',
     '#prefix' => '<div id="change-approver-status-dialog">',
     '#suffix' => '</div>',
    );
   return $elements; 
}

function get_routing_company_details_by_nid($CompanyNid,&$masterCompanyDetails){
  if(isset($masterCompanyDetails[$CompanyNid])){
	return $masterCompanyDetails[$CompanyNid];  
  }
  if($CompanyNid && is_numeric($CompanyNid)){
    $CompanyNode = node_load($CompanyNid);
	$companyLogo = (isset($CompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $CompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
    $masterCompanyDetails[$CompanyNode->nid] = array('nid' => $CompanyNode->nid, 'title' => $CompanyNode->title, 'image' => $companyLogo);
	return $masterCompanyDetails[$CompanyNode->nid]; 
  }
  return FALSE;
}

function get_approval_type_due_date_by_entity_id($entity_id){
  $output = array();
  $query = db_select('m6connect_routing_approval_types','mrat');
  $query->fields('mrat',array('id','approval_date'));
  $query->condition('mrat.entity_id',$entity_id,'=');
  $result = $query->execute()->fetchAllKeyed(0,1);
  if(!empty($result)){
	return $result;  
  }
  return $output;
}



function get_routing_user_details_feedback($managerUids,$masterUserDetail,$CompanyDetail,$dataObj,$ApproverStatus){

  global $user;
	
  $collectionItemId = $dataObj->field_invited_approvers_value;
  //$approval_type_id =  $dataObj->approval_type_id;
  $approval_type_id =  0;
  $userDetails = $userphone = $acceptApproval = $rejectApproval = $reviewApproval = array();
  $collectionCompanyNid = 0;
  if(isset($CompanyDetail['nid']) && !empty($CompanyDetail['nid'])){
	$collectionCompanyNid = $CompanyDetail['nid'];  
  }
  if(!empty($managerUids)){
	foreach($managerUids as $delta => $uid){
	  $userObj = $masterUserDetail[$uid];
	  $userApprovalStatus = array(0=>'',1=>'',2=>'');
	  $optionSelected =$dataObj->approval_status;
	  if(is_numeric($optionSelected)){
		$userApprovalStatus[$optionSelected] =  'checked="checked"'; 
	  }
	  //if(isset($ApproverStatus[$collectionItemId][$approval_type_id][$userObj['uid']])){
	//	$userApprovalStatus[$ApproverStatus[$collectionItemId][$approval_type_id][$userObj['uid']]] = 'checked="checked"';
	//	$optionSelected = $ApproverStatus[$collectionItemId][$approval_type_id][$userObj['uid']];
	//  }
	  
	  $radioDisabled = 'disabled="disabled"';
	  $radioClass= 'approval_feedback_radio_not';
	  $acceptedFormTab='';
	  if($userObj['uid'] == $user->uid && $dataObj->field_routing_status_value=='in_route' && $dataObj->is_approvar_notified==1){
	    $acceptedFormTab = drupal_render(drupal_get_form('routing_accepted_rejected_radio_form',$dataObj));
		$radioClass= 'approval_feedback_radio';
		$radioDisabled='';	
	  }
	  $signature = '';
	  if($dataObj->action !='N/O' && $dataObj->node_uid == $user->uid){
		  if($dataObj->approval_status!=1){
		    $signature = l('<input type="button" value="Signature" ' . $inputButtonStyle . ' class="form-submit" />', '/signature-rfp/nojs/'. $collectionItemId.'/'.$collectionCompanyNid, array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style ctools-use-modal'))))
			.'</div>';
		  }
	  }
	  if(!empty($dataObj->field_approver_signature_data)){
	    $signature = '<div class="signature-image">'.theme('signaturefield_display', array('data'=>$dataObj->field_approver_signature_data)).'</div>';
	  }
	  $userDetails[] = '<div class="signature-button" id="signature-button-'.$collectionItemId.'-'.$userObj['uid'].'">'.$signature .'</div><div class="bidder-fb-invitee-name">'.$userObj['name'].'</div><div class="bidder-fb-invitee-email bidder_feedback_blank">' . $userObj['mail'].'</div>';

	  $userphone[] = '<div class="bidder_feedback_phone_section"><div class="bidder_feedback_phone">' . $userObj['phone'] . '</div><div class="bidder_feedback_blank">&nbsp;</div></div>';
	  
	  if($dataObj->action !='N/O'){
	  
	    $acceptApproval[] = ' <div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox"><input type="radio" '.$radioDisabled.' '.$userApprovalStatus[1].' data-id="routing_acceptance_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'"  class="'.$radioClass.'" data-selected="'.$optionSelected.'" name="approval_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'" value="1" class="form-radio"><label><span><span></span></span></label></div> <div class="bidder_feedback_blank">&nbsp;</div></div>';
	  
        $rejectApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox"><input type="radio" '.$radioDisabled.' '.$userApprovalStatus[0].' data-id="routing_acceptance_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'" class="'.$radioClass.'" data-selected="'.$optionSelected.'" name="approval_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'" value="0" class="form-radio"><label><span><span></span></span></label></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
	  
        $reviewApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox"><input type="radio" '.$radioDisabled.' '.$userApprovalStatus[2].' data-id="routing_acceptance_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'" class="'.$radioClass.'" data-selected="'.$optionSelected.'" name="approval_action_'.$collectionItemId.'_'.$approval_type_id.'_'.$userObj['uid'].'" value="2" class="form-radio"><label><span><span></span></span></label></div><div class="bidder_feedback_blank">&nbsp;</div></div>'.$acceptedFormTab;
	  }else{
		$acceptApproval[] = ' <div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox">N/A</div> <div class="bidder_feedback_blank">&nbsp;</div></div>'; 
		$rejectApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox">N/A</div><div class="bidder_feedback_blank">&nbsp;</div></div>';
        $reviewApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox">N/A</div><div class="bidder_feedback_blank">&nbsp;</div></div>'.$acceptedFormTab; 
	  }
	  
	}
  }else{
  	  $signature = '';
	  if($dataObj->action !='N/O' && $dataObj->node_uid == $user->uid){
	  	$signature = l('<input type="button" value="Signature" ' . $inputButtonStyle . ' class="form-submit" />', '/signature-rfp/nojs/'. $collectionItemId.'/'.$collectionCompanyNid, array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style ctools-use-modal'))))
		.'</div>';
	  }
	  if(!empty($dataObj->field_approver_signature_data)){
	    $signature = '<div class="signature-image">'.theme('signaturefield_display', array('data'=>$dataObj->field_approver_signature_data)).'</div>';
	  }
	 $userDetails[] = '<div class="signature-button" id="signature-button-'.$collectionItemId.'-'.$userObj['uid'].'">'.$signature .'</div><div class="bidder-fb-invitee-name">' . $dataObj->field_routing_company_nid_email_value . '</div><div class="bidder-fb-invitee-email bidder_feedback_blank"></div>';
	 $userphone[] = '<div class="bidder_feedback_phone_section"><div class="bidder_feedback_phone"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
	 if($dataObj->action !='N/O'){
	   $acceptApproval[] = ' <div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox"><input type="radio" disabled="disabled" data-id="routing_acceptance_action_'.$collectionItemId.'"  class="approval_feedback_radio_not" name="approval_action_'.$collectionItemId.'" value="1" class="form-radio"><label><span><span></span></span></label></div> <div class="bidder_feedback_blank">&nbsp;</div></div>';
       $rejectApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox"><input type="radio" disabled="disabled" data-id="routing_acceptance_action_'.$collectionItemId.'" class="approval_feedback_radio_not" name="approval_action_'.$collectionItemId.'" value="0" class="form-radio"><label><span><span></span></span></label></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
       $reviewApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox"><input type="radio" disabled="disabled" data-id="routing_acceptance_action_'.$collectionItemId.'" class="approval_feedback_radio_not" name="approval_action_'.$collectionItemId.'" value="2" class="form-radio"><label><span><span></span></span></label></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
	 }else{
		$acceptApproval[] = ' <div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox">N/A</div> <div class="bidder_feedback_blank">&nbsp;</div></div>';
       $rejectApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox">N/A</div><div class="bidder_feedback_blank">&nbsp;</div></div>';
       $reviewApproval[] = '<div class="approval_feedback_checkboxes_section bidder_feedback_checkboxes_section"><div class="form-item form-type-checkbox">N/A</div><div class="bidder_feedback_blank">&nbsp;</div></div>'; 
	 }
  }
  return array(
   'userDetailsTab'=> '<div class="bidder-fb-invitee-section">'.implode('</div><div class="bidder-fb-invitee-section">',$userDetails).'</div>',
   'userphoneTab' => implode('', $userphone),
   'acceptApprovalTab' => implode('', $acceptApproval),
   'rejectApprovalTab' => implode('', $rejectApproval),
   'reviewApprovalTab' => implode('', $reviewApproval),
  );
}

function routing_accepted_rejected_radio_form($form,&$form_state,$dataObj){
  global $user;
  $nodeNid =  $dataObj->node_nid;
  $fieldCollectionId = $dataObj->field_invited_approvers_value;
  //$approval_type_id =  $dataObj->approval_type_id;
  $approval_type_id = 0;
  
  $form['#attributes']['style'] = 'display:none;';
  
  $options = array(1=>'Accepted',0=>'Rejected',2=>'In Revies');
  $form['routing_action'] = array(
	'#type' => 'radios',
	'#title' => t('Aouting Action'),
	'#title_display' => 'invisible',
	'#attributes'=> array('class'=>array('routing_acceptance_action_'.$fieldCollectionId.'_'.$approval_type_id.'_'.$user->uid)),
	'#options' => $options,
	'#ajax' => array(
	  'callback' => 'routing_accepted_rejected_radio_callback',
	  'event' => 'change',
	 ),
  );
  
  $form['routing_message'] = array(
	'#type' => 'textarea',
	'#title' => t('Message'),
	'#title_display' => 'invisible',
	'#attributes'=> array('class'=>array('message_routing_acceptance_action_'.$fieldCollectionId.'_'.$approval_type_id.'_'.$user->uid),'style'=>'display:none;'),
  );
  
  $form['routing_trigger'] = array(
	'#type' => 'hidden',
	'#title' => t('Message trigger'),
	'#title_display' => 'invisible',
	'#attributes'=> array('class'=>array('trigger_routing_acceptance_action_'.$fieldCollectionId.'_'.$approval_type_id.'_'.$user->uid),'style'=>'display:none;'),
  );
  
  $form['user_uid'] = array(
    '#type' => 'value',
	'#value' => $user->uid,
  );
  $form['node_nid']= array(
	'#type' => 'value',
	'#value'=> $nodeNid,
  );
  $form['fc_item_id']= array(
	'#type' => 'value',
	'#value'=> $fieldCollectionId,
  );
  $form['approval_type_id']= array(
	'#type' => 'value',
	'#value'=> $approval_type_id,
  );
  return $form;	
}

function routing_accepted_rejected_radio_callback(&$form,&$form_state){
  global $base_url,$base_path, $user;
  $commands= array();
  $commentMessagePrefix ='';
  $specialMessage = '';
  $values = $form_state['values'];
  if(in_array($values['routing_action'], array(0,1,2))){
	$routing_message = trim($values['routing_message']);
	$routing_trigger = $values['routing_trigger'];
	$key = $fields = array(
	  'node_nid'=>$values['node_nid'],
	  'user_uid'=>$values['user_uid'],
	  'fc_item_id'=>$values['fc_item_id'],
	  'approval_type_id'=>$values['approval_type_id'],
	);
	$fields['approval_status']  = $values['routing_action'];
	$key1 = $fields1 = array(
	  'node_nid'=>$values['node_nid'],
	  'user_uid'=>$values['user_uid'],
	  'fc_item_id'=>$values['fc_item_id'],	
		'timestamp' => time(),
	);
	$fields1['approval_status']  = $values['routing_action'];
	if(db_table_exists('m6connect_routing_approval_status') && db_table_exists('m6connect_routing_approval_status_log')) {
	  db_merge('m6connect_routing_approval_status')->key($key)->fields($fields)->execute();
		db_insert('m6connect_routing_approval_status_log')->fields($fields1)->execute();
	  $routingNode = node_load($values['node_nid']);
	  
      $collectionItem = field_collection_item_load($values['fc_item_id']);	
      $collectionWrapper = entity_metadata_wrapper('field_collection_item', $collectionItem);
      $collectionWrapper->field_is_approvar_processed->set(1);
      $collectionWrapper->field_approval_status->set($values['routing_action']);
      $collectionWrapper->save(TRUE);	  
	  
	  $nodeInvitedUserDetail = get_user_real_name_email(array($values['user_uid'],$routingNode->uid));
	  $routingNodeCmpNid = _get_company_nid_by_group_content($routingNode);
	  $nodeAuthorDetail = get_user_details_by_uids(array($routingNode->uid),$routingNodeCmpNid);
	  $routingSlipNodePathAlias = drupal_lookup_path('alias','node/'.$routingNode->nid);
	  $RoutingNodePath = l('here',$base_url.$base_path.$routingSlipNodePathAlias,array('external'=>TRUE));
	  $ApproverStatus = array(0=>'Rejected',1=>'Approved',2=>'Not Sure Yet');
	  //$mailTo = $nodeInvitedUserDetail[$routingNode->uid]['mail'];
	  $mailTo = $nodeAuthorDetail[$routingNode->uid]['mail'];
	  if(!empty($routing_trigger)){
		$specialMessage = '<p><strong>Special Message: </strong>'.$routing_message.'</p>';  
	  }
	  //$message = '[Routing:OwnerName],<br/><br/>This is a notification that [Routing:ApproverName] has [Routing:ApproverStatus] your request for approval on the Routing Slip named [Routing:Title].<p>Click [Site:SignUplink] to log into M6Connect to see more details.</p><p>M6Connect</p>';
	  
	  $message = '[Routing:OwnerName],<br/><br/>This is a notification that the status of the Routing Slip ([Routing:Title]) has been [Routing:ApproverStatus] by [Routing:ApproverName].[Routing:ApproverMessage]<p>Click [Site:SignUplink] to log into M6Connect to see more details.</p><p>M6Connect</p>';
	  
      $replace = array(
	    '[Routing:Title]' => $routingNode->title,
	    '[Site:SignUplink]' => $RoutingNodePath,
	    '[Routing:OwnerName]' => $nodeInvitedUserDetail[$routingNode->uid]['realname'],
		'[Routing:ApproverName]'=> $nodeInvitedUserDetail[$values['user_uid']]['realname'],
		'[Routing:ApproverStatus]' => $ApproverStatus[$values['routing_action']], 
		'[Routing:ApproverMessage]' => $specialMessage,
	  );
	  $commentMessagePrefix = $ApproverStatus[$values['routing_action']];
      $message = str_replace(array_keys($replace),array_values($replace),$message);
	  $params = array(
		//'subject' => 'Routing Slip Status Change - '.$routingNode->title. ' is changed',
		'subject' => 'M6Routing Slip ('.$routingNode->title.') was '.$ApproverStatus[$values['routing_action']].' by '.$nodeInvitedUserDetail[$values['user_uid']]['realname'],
		'body' => $message,
		'sender' => $nodeInvitedUserDetail[$values['user_uid']]['mail'],
		'language' => language_default(),
		'module' => 'm6connect_misc',
		'key' => 'routing_mail___approved_status_notify',
		'build' => TRUE,
	   );
	   if($routing_trigger=='send_email'){
	     $return = drupal_mail($params['module'], $params['key'], $mailTo, $params['language'], $params);
			 
			 $m6connect_notification_table_exist = db_table_exists('m6connect_notification');
			if ($m6connect_notification_table_exist) {	
				$notificationcompany_nid = _get_company_nid_by_group_content($routingNode->nid);
				$m6connect_notification = array(
				'type' => 'routing_slip',
				'event' => '',
				'entity_id' => $routingNode->nid,
				'company_nid' => $notificationcompany_nid,
				'message' => $ApproverStatus[$values['routing_action']],
				'request_from' => $user->uid,
				'request_to' =>$routingNode->uid,
				'status' => 1,
				'timestamp' => time(),
				);
				if(isset($ApproverStatus[$values['routing_action']])&& $ApproverStatus[$values['routing_action']]== 'Not Sure Yet' ){
					$m6connect_notification['event'] = 'not_sure_yet';
				}else if(isset($ApproverStatus[$values['routing_action']])&& $ApproverStatus[$values['routing_action']]== 'Rejected' ){
					$m6connect_notification['event'] = 'rejected';
				}else if(isset($ApproverStatus[$values['routing_action']])&& $ApproverStatus[$values['routing_action']]== 'Approved' ){
					$m6connect_notification['event'] = 'approved';
				}
				
				entity_save('m6connect_notification', (object) $m6connect_notification);
			}
	   }
	   //drup_msg($return);
	   drupal_register_shutdown_function('routing_slip_cron_invite_handler', $routingNode->nid);
	   //routing_slip_cron_invite_handler($routingNode->nid); 
	}
	if(!empty($routing_message)){
	  $approval_message= array(
	    'node_nid' => $values['node_nid'],
	    'fc_item_id' => $values['fc_item_id'],
	    'user_uid' => $values['user_uid'],
	    'approval_type_id' => $values['approval_type_id'],
	    'message' => $routing_message,
		'message_prefix' =>$commentMessagePrefix,
	    'timestamp' => time(),
	  );
	  $id = db_insert('m6connect_routing_feedback_message')->fields($approval_message)->execute();
	  $output = get_approval_feedback_message($values['node_nid'],$values['fc_item_id'],$values['approval_type_id']);
	  $commands[] = ajax_command_html('#approval_feedback_message_container_'.$values['fc_item_id']. '_' .$values['approval_type_id'], $output);
	}
	$viewTdClassMapping = array(
	  0=>array('selector'=>'.view-reject-field-'.$values['fc_item_id'].'-td','class'=>'bg-danger'),
	  1=>array('selector'=>'.view-accept-field-'.$values['fc_item_id'].'-td','class'=>'bg-success'),
	  2=>array('selector'=>'.view-notsure-field-'.$values['fc_item_id'].'-td','class'=>'bg-warning'),
	);
	
	$approval_status_log = get_approval_status_log($values['node_nid'],$values['fc_item_id']);
	
	$commands[] = ajax_command_invoke('.view-accept-field-'.$values['fc_item_id'].'-td', 'removeClass', array('bg-success'));
	$commands[] = ajax_command_invoke('.view-reject-field-'.$values['fc_item_id'].'-td', 'removeClass', array('bg-danger'));
	$commands[] = ajax_command_invoke('.view-notsure-field-'.$values['fc_item_id'].'-td', 'removeClass', array('bg-warning'));
	//$values['node_nid']
	$commands[] = ajax_command_html('.approval-status-log-list-'.$values['fc_item_id'], $approval_status_log);
	
	$commands[] = ajax_command_invoke($viewTdClassMapping[$values['routing_action']]['selector'], 'addClass', array($viewTdClassMapping[$values['routing_action']]['class']));
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function routing_slip_feedback_message_form($form, $form_state,$dataObj,$managerUids) {
    global $user;
	$fieldCollectionId = $dataObj->field_invited_approvers_value;
	//$approvalTypeid = $dataObj->approval_type_id;
	$approvalTypeid = 0;
	$nodeNid = $dataObj->node_nid;
	$nodeUid = $dataObj->node_uid; 
	$nodeRoutingStatus=$dataObj->field_routing_status_value;
    $form = array();
    $form['#attributes'] = array('class' => array('routing_feedback_message_form','rfp_bidder_feedback_message_form'), 'id' => 'routing_feedback_message_form_' . $fieldCollectionId.'_'.$approvalTypeid);

    $form['message-list'] = array(
        '#markup' => get_approval_feedback_message($nodeNid,$fieldCollectionId,$approvalTypeid),
        '#prefix' => '<div id="approval_feedback_message_container_' . $fieldCollectionId . '_' . $approvalTypeid . '">',
        '#suffix' => '</div>',
    );
	if($user->uid == $nodeUid || in_array($user->uid,$managerUids) && $nodeRoutingStatus=='in_route'){
	  $form['message'] = array(
		  '#type' => 'textfield',
		  '#title' => 'Message',
		  '#title_display' => 'invisible', 
			'#maxlength' => 256,                                 //here
		  '#attributes' => array('placeholder' => 'Please provide comments', 'id' => 'approval_feedback_message_' . $fieldCollectionId . '_' . $approvalTypeid, 'class' => array('approval_feedback_message_msg','bidder_feedback_message_msg', 'onkeypress' => array('if(event.keyCode==13){this.form.submit();}'))),
		  '#prefix' => '<div>',
			
		  '#suffix' => '</div>',
	  );
	  $form['user_uid'] = array(
		  '#type' => 'value',
		  '#value' => $user->uid,
	  );
	  $form['node_nid']= array(
		'#type' => 'value',
		'#value'=> $nodeNid,
	  );
	  $form['fc_item_id']= array(
		'#type' => 'value',
		'#value'=> $fieldCollectionId,
	  );
	  $form['approval_type_id']= array(
		'#type' => 'value',
		'#value'=> $approvalTypeid,
	  );
	  $form['add'] = array(
		  '#type' => 'submit',
		  '#value' => 'Add',
		  '#attributes' => array('class' => array('add_new_approval_feedback_message','add_new_bidder_feedback_message')),
		  '#executes_submit_callback' => FALSE,
		  '#limit_validation_errors' => array(),
		  '#href' => '',
		  '#ajax' => array(
			  'callback' => 'add_new_approval_feedback_message',
			  'effect' => 'fade',
			  'event' => 'click',
			  'progress' => array('type' => 'none'),
		  ),
		  '#prefix' => '<div id="bidder-feedback-message-button" class="approval_feedback-message-button">',
		  '#suffix' => '</div>',
	  );
	}
    return $form;
}

function add_new_approval_feedback_message(&$form,&$form_state){
  $commands = array();
  $output = '';
  $values = $form_state['values'];
  $message = trim($values['message']);
  if (!empty($message) && is_numeric($values['node_nid']) && is_numeric($values['fc_item_id'])) {
	$approval_message= array(
	 'node_nid' => $values['node_nid'],
	 'fc_item_id' => $values['fc_item_id'],
	 'user_uid' => $values['user_uid'],
	 'approval_type_id' => $values['approval_type_id'],
	 'message' => $message,
	 'timestamp' => time(),
	);
	$id = db_insert('m6connect_routing_feedback_message')->fields($approval_message)->execute();
	$output = get_approval_feedback_message($values['node_nid'],$values['fc_item_id'],$values['approval_type_id']);
	$commands[] = ajax_command_invoke('#approval_feedback_message_'.$values['fc_item_id'].'_'.$values['approval_type_id'],'val', array(''));
    $commands[] = ajax_command_html('#approval_feedback_message_container_'.$values['fc_item_id']. '_' .$values['approval_type_id'], $output);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}



function get_request_approval_reminder_button($dataObj){
  global $user;
  ctools_include('ajax');
  ctools_include('modal');
  $output ='';
  $nodeNid= $dataObj->node_nid;;
  $fieldCollectionId = $dataObj->field_invited_approvers_value;
  $notificationCount;
  $nodeUid = $dataObj->node_uid;
  $notificationCount = $dataObj->field_approval_reminder_count_value;
  $notificationCount = ($notificationCount)?$notificationCount:'';
  $inputButtonStyle = ($notificationCount)?'style="background:#419641;"':'';
  $spanNotificationStyle = ($notificationCount)?' notification-count':'';
  if($user->uid == $nodeUid){
	$output= '<div class="request-bid-intent-link-section request-approval-reminder-link-section margin-bottom-10">' . l('<input type="button" value="Send Reminder" '.$inputButtonStyle.' class="form-submit request-approval-reminder-link-button request-approval-reminder-link-button-'.$fieldCollectionId.'" /><span class="request-bid-intent-link-count'.$spanNotificationStyle.'">'.$notificationCount.'</span>', 'javascript:void(0);', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('title'=>'Only the issuer is allowed to send reminders','class' => array('request-approval-reminder-link','request-approval-reminder-link-'.$fieldCollectionId), 'data-fc' => $fieldCollectionId, 'data-routing' => $nodeNid))) 		
	. '</div>';
  }/*else{
	$output= '<div class="request-bid-intent-link-section request-approval-reminder-link-section margin-bottom-10">' . l('<input type="button" value="Send Reminder" '.$inputButtonStyle.' class="form-submit request-approval-reminder-link-button" disabled="disabled" /><span class="request-bid-intent-link-count'.$spanNotificationStyle.'">'.$notificationCount.'</span>', 'javascript:void(0);', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('title'=>'Only the issuer is allowed to send reminders','class' => array('request-approval-link')))) 		
	. '</div>';  
  }*/
  return $output;
}


function get_user_approval_status_by_entity_id($entity_id){
  $output=array();
  $query = db_select('m6connect_routing_approval_status','mras');
  $query->fields('mras', array('user_uid','fc_item_id','approval_type_id','approval_status'));
  $query->condition('mras.node_nid',$entity_id,'=');
  $result = $query->execute()->fetchAll();
  if($result && !empty($result)){
	foreach($result as $delta => $obj){
	  $output[$obj->fc_item_id][$obj->approval_type_id][$obj->user_uid] = $obj->approval_status;	
	}
  }
  return $output;
}

/*function get_approval_feedback_table($entity_id,$approvalTypes){
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_routing_status', 'frs', 'n.nid = frs.entity_id');
  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
  $query->leftJoin('m6connect_routing_approval_type_invitess','mrati','mrati.fc_item_id=ria.field_invited_approvers_value');
  $query->leftJoin('field_data_field_approval_reminder_count', 'rarc', 'ria.field_invited_approvers_value = rarc.entity_id');
  $query->leftJoin('field_data_field_approver_signature', 'rasf', 'ria.field_invited_approvers_value = rasf.entity_id');
  $query->addField('n','uid','node_uid');
  $query->addField('n','nid','node_nid');
  $query->fields('frs',array('field_routing_status_value'));
  $query->fields('ria',array('field_invited_approvers_value'));
  $query->fields('rcne',array('field_routing_company_nid_email_value'));
  $query->fields('rcimu',array('field_routing_invited_user_uids_value'));
  $query->addExpression('IFNULL(mrati.approval_type_id,0)','approval_type_id');
  $query->addField('mrati','id','invite_id');
  $query->fields('rarc',array('field_approval_reminder_count_value'));
  $query->fields('rasf',array('field_approver_signature_data'));
  $query->condition('n.nid',$entity_id,'=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $query->orderBy('mrati.approval_type_id', 'ASC');
  $result = $query->execute()->fetchAll(); 

  if($result && !empty($result)){
	$masterCompanyDetails = array();
	$masterUserDetail = array();
	$mailUsermapping = array();
	$CompanyNid ='';
	$approvalDueDates = get_approval_type_due_date_by_entity_id($entity_id);
	$ApproverStatus = get_user_approval_status_by_entity_id($entity_id);
    foreach($result as $delta => $dataObj){ //drup_msg(pre($dataObj));
	  $managerUids = array();
	  $CompanyDetail ='';
	  $approvalDate ='';
	  if(is_numeric($dataObj->field_routing_company_nid_email_value)){
		$managerUids = explode(',', $dataObj->field_routing_invited_user_uids_value);
		$managerUids = array_filter(array_values($managerUids));
		$managerUids = array_unique(array_values($managerUids));
		$diffManagerUids = array_diff($managerUids,array_keys($masterUserDetail));
		if(!empty($diffManagerUids)){
		  $diffManagerDetail = get_user_details_by_uids($diffManagerUids);
		  $masterUserDetail = array_replace($masterUserDetail,$diffManagerDetail);
		}
		$CompanyNid =$dataObj->field_routing_company_nid_email_value;
	  }else{
	    if(in_array($dataObj->field_routing_company_nid_email_value,array_keys($mailUsermapping))){
		  $managerUids = array($mailUsermapping[$dataObj->field_routing_company_nid_email_value]['uid']); 
		  $CompanyNid = $mailUsermapping[$dataObj->field_routing_company_nid_email_value]['compnyNid'];
		}else if($mailUser = user_load_by_mail($dataObj->field_routing_company_nid_email_value)){
		   $phone = (isset($mailUser->field_phone['und']) && !empty($mailUser->field_phone['und'][0]['value']))?$mailUser->field_phone['und'][0]['value']:'';
		   $CompanyNid = _get_user_company_nid($mailUser->uid);
		   $masterUserDetail[$mailUser->uid] = array('uid'=>$mailUser->uid,'name'=>$mailUser->realname,'mail'=>$mailUser->mail,'phone'=>$phone);
		   $mailUsermapping[$mailUser->mail] = array('uid'=>$mailUser->uid,'compnyNid'=>$CompanyNid);
		   $managerUids = array($mailUser->uid);
		}
	  }
	  
	  //Company Detail
	  if(!empty($managerUids)){
		$CompanyDetail = get_routing_company_details_by_nid($CompanyNid,$masterCompanyDetails);
	    if(!$CompanyDetail){
		  $CompanyDetail = array('nid' => '', 'title' => '', 'image' => '');
		}
	  }else{
		$CompanyDetail = array('nid' => '', 'title' => '', 'image' => '');
	  }
	  
	  //Approval Needed By Date
	  if(isset($approvalDueDates[$dataObj->approval_type_id]) && !empty($approvalDueDates[$dataObj->approval_type_id])){
		$approvalDate='<div class="approval-needed-by-date margin-bottom-10"><strong>'.date('m/d/Y',$approvalDueDates[$dataObj->approval_type_id]).'<strong></div>';
	  }
	  
	  //User Details
	  $UserInfoDetails =  get_routing_user_details_feedback($managerUids,$masterUserDetail,$dataObj,$ApproverStatus);
	  $remiderButton = get_request_approval_reminder_button($dataObj);	  
	  $companyTab = $CompanyDetail['title'] . '<br/>' . $CompanyDetail['image'];
	  $m6notesTab = drupal_render(drupal_get_form('routing_slip_feedback_message_form',$dataObj,$managerUids));
	  $anticipatedDateTab =$approvalDate.$remiderButton;
	  $inviteeTab = $UserInfoDetails['userDetailsTab'];
	  $phoneTab = $UserInfoDetails['userphoneTab'];
	  $acceptApprovalTab = $UserInfoDetails['acceptApprovalTab'];
	  $rejectApprovalTab = $UserInfoDetails['rejectApprovalTab'];
	  $reviewApprovalTab = $UserInfoDetails['reviewApprovalTab'];
	  
	  $rows[$dataObj->approval_type_id][] = array(
	    array('data' => $companyTab, 'class' => array('views-field', 'views-field-php')),
	    array('data' => $m6notesTab, 'class' => array('views-field', 'views-field-php-2')),
	    array('data' => $anticipatedDateTab, 'class' => array('views-field', 'views-field-php-3','text-center')),
	    array('data' => $inviteeTab, 'class' => array('views-field', 'views-field-php-8')),
	    array('data' => $phoneTab, 'class' => array('views-field', 'views-field-php-4')),
	    array('data' => $acceptApprovalTab, 'class' => array('views-field', 'views-field-php-5', 'text-center')),
	    array('data' => $rejectApprovalTab, 'class' => array('views-field', 'views-field-php-6', 'text-center')),
	    array('data' => $reviewApprovalTab, 'class' => array('views-field', 'views-field-php-7', 'text-center')),
      );
	}
  }
  return $rows;  	
}*/


function approval_user_approval_feedback_popup($entity_id,$fieldCollectionId){
  global $user;
  $html ='';
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_routing_status', 'frs', 'n.nid = frs.entity_id');
  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
  $query->leftJoin('m6connect_routing_approval_type_invitess','mrati','mrati.fc_item_id=ria.field_invited_approvers_value');
  $query->leftJoin('field_data_field_approval_reminder_count', 'rarc', 'ria.field_invited_approvers_value = rarc.entity_id');
  $query->leftJoin('m6connect_routing_approval_types','mrat','mrat.id=mrati.approval_type_id');
  $query->addField('n','uid','node_uid');
  $query->addField('n','nid','node_nid');
  $query->fields('frs',array('field_routing_status_value'));
  $query->fields('ria',array('field_invited_approvers_value'));
  $query->fields('rcne',array('field_routing_company_nid_email_value'));
  $query->fields('rcimu',array('field_routing_invited_user_uids_value'));
  $query->addExpression('IFNULL(mrati.approval_type_id,0)','approval_type_id');
  $query->addField('mrat','approval_type','approval_type_name');
  $query->fields('rarc',array('field_approval_reminder_count_value'));
  $query->condition('n.nid',$entity_id,'=');
  $query->condition('ria.field_invited_approvers_value',$fieldCollectionId,'=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $query->orderBy('mrati.approval_type_id', 'ASC');
  $result = $query->execute()->fetchAll(); 
  if($result && !empty($result)){
	$ApproverStatus =  get_routing_approver_status_user($entity_id,$fieldCollectionId,$user->uid);
	$html .='<div class="bidder-tab-heading form-group"></div>';
	$managerUids = array($user->uid);
	foreach($result as $delta => $dataObj){
	  $html .= '<div class="bid-user-package-status-bidder form-group">';
	  $html .= '<div class="row"><div class="bidding-section-bidder col-md-12 col-sm-12 col-xs-12">';
	  $html .= drupal_render(drupal_get_form('approver_type_status_forms_for_user', $dataObj,$ApproverStatus));
	  $html .= drupal_render(drupal_get_form('routing_slip_feedback_message_form',$dataObj,$managerUids));
	  $html .= '</div>';
	  $html .= '</div>';
	  $html .= '</div>';
	}
  }
  return $html; 	
}

function approver_type_status_forms_for_user($form,$form_state,$dataObj,$ApproverStatus){
  global $user;
  $form = array();
  $defaultApprovalStatus = isset($ApproverStatus[$dataObj->approval_type_id])?$ApproverStatus[$dataObj->approval_type_id]:'';
  $approvalOptions = array(1=>'Approved',0=>'Rejected',2=>'Not Sure Yet');
  $form['approval_type_id'] = array(
    '#type' => 'value',
    '#value' => $dataObj->approval_type_id,
  );

  $form['node_nid'] = array(
	'#type' => 'value',
	'#value' => $dataObj->node_nid,
  );
  
  $form['fc_item_id'] = array(
	'#type' => 'value',
	'#value' => $dataObj->field_invited_approvers_value,
  );

  $form['user_uid'] = array(
	'#type' => 'value',
	'#value' => $user->uid,
  );
  $form['routing_action'] = array(
	'#type' => 'radios',
	'#options' => $approvalOptions,
	'#title' => $dataObj->approval_type_name,
	'#title_display' => 'invisible',
	'#prefix' => '<div id="bidder-package-status-options_' . $dataObj->approval_type_id . '" class="approval-type-status-options"><div class ="bid-package-option-title package-colored" style="color:#205081;"><strong>' . $dataObj->approval_type_name . '</strong></div>',
	'#suffix' => '</div>',
	'#disabled' => TRUE,
  );
  if (is_numeric($defaultApprovalStatus)) {
    $form['routing_action']['#default_value'] = $defaultApprovalStatus;
  }
  if($dataObj->field_routing_status_value == 'in_route'){
	$form['routing_action']['#disabled'] = FALSE;
	$form['routing_action']['#ajax'] = array(
	  'callback' => 'routing_accepted_rejected_radio_callback',
	  'event' => 'change',
	  'progress' => array('type' => 'none'),
	);  
  }
  return $form;
}

function approval_type_user_response_callback($ajax=NULL,$entity,$fieldCollectionId){
  $content =  approval_user_approval_feedback_popup($entity->nid,$fieldCollectionId);
  $html = '<div class="assign-bid-header"><div class="assign-bid-header-title"><h4>Approval Feedback</h4></div></div>';
  $html .='<div class="bidder-tab-heading form-group"></div>';
  $html .= '<div class="bidding_pakages_invitee_response form-group">' . $content . '</div>';
  if($ajax){
    $html .= '<div id="action_container" class="action_container pull-right">' . l('<input type="button" class="cancel-button" value="Close" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('onclick' => 'jQuery("span.popups-close").click();'))) . '</div>';
	$output[] = ctools_modal_command_display(t('Approval Feedback'), $html);
	print ajax_render($output);
    drupal_exit();
  }
  $path = drupal_lookup_path('alias', 'node/' . $entity->nid);
  $html .= '<div id="action_container" class="action_container pull-right">' . l('<input type="button" class="cancel-button" value="Close" />', $path, array('html' => TRUE)) . '</div>';
  return $html;
}

function get_routing_approver_status_user($entity_id,$fieldCollectionId,$userUid){
  $output=array();
  $query = db_select('m6connect_routing_approval_status','mras');
  $query->fields('mras', array('approval_type_id','approval_status'));
  $query->condition('mras.node_nid',$entity_id,'=');
  $query->condition('mras.fc_item_id',$fieldCollectionId,'=');
  $query->condition('mras.user_uid',$userUid,'=');
  $result = $query->execute()->fetchAllKeyed(0,1);
  return $result;	
}

function get_routing_slip_due_date($entity_id){
  $date = db_select('m6connect_routing_approval_types','mt')->fields('mt', array('approval_date'))->condition('mt.entity_id',$entity_id,'=')->execute()->fetchColumn(0);
  if($date){
	$date = date('F d, Y h:iA T',$date);  
  }else{
	$date ='';  
  }
  return $date;	
}


/********** End Routing Slip Approval Feedback Tab Content Callback  **********/

function _get_user_companies($account){
  $companies = array();
  $group = og_get_groups_by_user($account, $group_type = 'node');
  if(!empty($group)){
    $companies = db_select('node','n')->fields('n',array('nid'))->condition('n.type','organization','=')->condition('n.nid',array_values($group),'IN')->execute()->fetchCol(0);
  }
  return $companies;
}

/**************************** Routing slip - settings ****************************/

function m6connect_routing_theme() {
    return array(
		'routing_option_theme'=> array(
			'render element' => 'form',
		),
		'routing_type_theme'=> array(
			'render element' => 'form',
		),
    );
}

function _get_routing_type_list($uid, $cm = 0){	
	$RoutingTypeList = db_select('node','n');
	$RoutingTypeList->leftjoin('field_data_field_cm_type', 'fdfct', 'fdfct.entity_id = n.nid');
	$RoutingTypeList->fields('n', array('nid','title'));
	$RoutingTypeList->condition('n.status',1,'=');
	$RoutingTypeList->condition('n.uid',$uid,'=');
	$RoutingTypeList->condition('n.type','routing_type','=');
	if(!empty($cm)){
		$RoutingTypeList->condition('fdfct.field_cm_type_value',$cm,'=');
	}
	$result = $RoutingTypeList->execute()->fetchAllKeyed(0,1);
  	return $result;
}

function routing_slip_settings_form($form, &$form_state){
  global $user, $company;  
  if(empty($form_state['routing_workflow_setting_form'])){
	$form_state['routing_workflow_setting_form'] =1;  
  }
  $cm = '';
  if(arg(0) == 'routing-slip-settings' && !empty(arg(1))){
  	$cm = arg(1);
  }  
  $isCompanyIndividual = (isset($company->field_type_of_company['und']) && $company->field_type_of_company['und'][0]['value']=='individual')?1:0;
  $RoutingTypeList = _get_routing_type_list($user->uid, $cm);  
  $projectQuery = db_select('node','n');
  $projectQuery->leftjoin('og_membership','og','og.etid=n.nid AND og.entity_type=:entityType', array(':entityType'=>'node'));
  $projectQuery->leftjoin('field_data_field_cm_type', 'fdfct', 'fdfct.entity_id = n.nid');
  $projectQuery->fields('n', array('nid','title'));
  $projectQuery->condition('n.status',1,'=');
  //$projectQuery->condition('n.uid',$user->uid,'=');
  $projectQuery->condition('n.type','project','=');
  $projectQuery->condition('og.gid',$company->nid,'=');
  if(!empty($cm)){
  	$projectQuery->condition('fdfct.field_cm_type_value',$cm,'=');
  }
  $projectList=$projectQuery->execute()->fetchAllKeyed(0,1);
  
  $rsettingQuery = db_select('node','n');
  $rsettingQuery->leftjoin('og_membership','og','og.etid=n.nid AND og.entity_type=:entityType', array(':entityType'=>'node'));
  $rsettingQuery->leftjoin('field_data_field_cm_type', 'fdfct', 'fdfct.entity_id = n.nid');
  $rsettingQuery->fields('n', array('nid','title'));
  $rsettingQuery->condition('n.status',1,'=');
  $rsettingQuery->condition('n.type','routing_type_setting','=');
  $rsettingQuery->condition('og.gid',$company->nid,'=');
  if(!empty($cm)){
  	$rsettingQuery->condition('fdfct.field_cm_type_value',$cm,'=');
  }
  $rsSettingsList=$rsettingQuery->execute()->fetchAllKeyed(0,1);
  //drup_msg($rsSettingsList);
  
  $ruleoptions = array(
	'routing_rule_1' =>'Issuer can not change anything.', 
	'routing_rule_2' =>'Issuer may change the routing sequence, delete, add approvers and/or actions.', 
	'routing_rule_3' =>'Issuer may add "notification only", for any new user.',
	'routing_rule_4' =>'Issuer may add required approvers and/or notification only, for any new user.'
  );
  
  //modifiy form and form state
  routing_slip_modidy_form_state($form,$form_state);
  
  $form['#attributes']['class'][] = 'modify-routing-type-form'; 
  $form['heading'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="routing-senting-headding routing-table-label">Edit or Add Routing Slip Templates:</div>',
  );
  
  $form['routing-type'] = array(
    '#type' => 'select',
	'#options' => $RoutingTypeList,
	'#title' => 'Routing Template:',
	'#empty_option' => 'Add New Template or Select one to edit from the drop down',
	'#empty_value' =>'',
	//'#attributes' => array('class'=> array('select-routing-type')),
	'#ajax' => array(
	  'event' => 'change',
	  'callback' => 'routing_type_change_callback',
	  'wrapper' => 'workflow-container-section',
	  'method' => 'replace',
	  'effect' => 'fade',
	  '#required' => TRUE,
	),
  );
  
  $form['routing-type-title'] = array(
    '#type' => 'textfield',
	'#attributes' => array('placeholder'=>'Name Template - choose a name that describes the project, workflow or approval type', 'class'=> array('routing-title'),'required'=>'required'),
	'#title' => 'Template Title:',
	//'#title_display' => 'invisible',
	//'#attributes' => array('class'=> array('routing-title')),
	/*'#states'=> array(
	  'visible'=> array('select[name="routing-type"]'=> array('value'=>'')),
	),*/
  );
  
  $dispaltOptions = array(
    'display_approver_feedback_to_all_approvers' => 'Display approver feedback to all invitee.',
	'share_with_all_company_users' => 'Share with all company users - if checked all '.$company->title.' users will have access this template.'
  );
  if($isCompanyIndividual){
	$dispaltOptions = array(
      'display_approver_feedback_to_all_approvers' => 'Display approver feedback to all invitee.',
    ); 
  }
  
  $form['routing-rule'] = array(
    '#type' => 'select',
	'#title' => 'Rules:',
	'#options' => $ruleoptions,
	'#empty_option' => 'Select the level of customization allowed for this template',
	'#empty_value' =>'',
	'#attributes' => array('class'=> array('routing-rule')),
	'#prefix' => '<div class="routing-rule-section">',
	'#suffix' => '</div>',
	//'#required' => TRUE,
  );
  
  $form['routing-setting'] = array(
    '#type' => 'select',
	'#title' => 'Routing Slip Type:',
	'#options' => $rsSettingsList,
	'#empty_option' => 'Select Routing Slip Type',
	'#empty_value' =>'',
	
	'#attributes' => array('class'=> array('routing-setting'),'title' => t('To create your Routing Slip Type under seetings tab contact your company admin .') ),
	//'#required' => TRUE,
  );
  
  $form['routing-display-option'] = array(
    '#type' => 'checkboxes',
	'#title' => 'Controls:',
    '#options' => $dispaltOptions,
	'#attributes' => array('class'=> array('routing-display-option')),
  );
  
  $form['routing-project'] = array(
    '#type' => 'select',
	'#title' => 'Project:',
	'#options' => $projectList,
	'#empty_option' => 'Select Project',
	'#empty_value' =>'',
	'#attributes' => array('class'=> array('routing-project')),
	//'#required' => TRUE,
  );
  
  $form['description_container'] = array(
    '#type' => 'fieldset', 
    '#title' => 'Description', 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
	'#prefix' => '<div id="routing-type-desc-container" class="routing-type-desc-container">',
	'#suffix' => '</div>',
  );
  
  $form['description_container']['description'] = array(
    '#type' => 'text_format',
    '#title' => 'Description',
	'#title_display' => 'invisible',
    '#default_value' => '',
	'#resizable' => FALSE,
    '#format' => 'filtered_html',
	'#attributes' => array('class'=> array('routing-type-description')),
	'#rows'=>3,
	'#after_build' => array('description_custom_field_remove_format_filter_after_build'),
  );
  
  $form['workflow_container']= array(
    '#type'=>'container',
	'#title' => 'Workflow',
	'#theme' => 'routing_option_theme',
	'#tree' => TRUE,
	'#attributes' => array('class'=>array('workflow-container-section')),
	'#prefix' => '<div id="workflow-container-section"><div class="workflow-container-label routing-table-label">Workflow</div>',
    '#suffix' => '</div>',
	'#process' => array('routing_workflow_process_callback'),
	'#after_build'=> array('routing_workflow_container_after_build')
  );
  
  $form['action_container'] = array(
    '#type'=> 'container',
	'#prefix' => '<div class="action-container-section pull-left">',
	'#suffix' => '</div>',
	'#process' => array('routing_action_process_callback'),
  );
  
  $form['routing_dialog_container'] = array(
	'#type'=> 'markup',
	'#markup'=>'',
	'#prefix' => '<div id="routing-dialog-container">', 
	'#suffix' => '</div>',
  );
  
  $form['routing_type_dialog_container'] = array(
	'#type'=> 'markup',
	'#markup'=>'',
	'#prefix' => '<div id="routing-type-dialog-container">', 
	'#suffix' => '</div>',
  );
  return $form;				
}

function routing_workflow_container_after_build($element, &$form_state){
	$storage = $element['#storage'];
	foreach($element['#storage'] as $uniqueId => $data){
		if(isset($element['approval_date_time'][$uniqueId]['date'])){
			$element['approval_date_time'][$uniqueId]['date']['#attributes']['onkeydown']='return false;'; 
			$element['approval_date_time'][$uniqueId]['date']['#description']='';   
  	}
		if(isset($element['approval_date_time'][$uniqueId]['time'])){
			$element['approval_date_time'][$uniqueId]['time']['#attributes']['onkeydown']='return false;'; 
			$element['approval_date_time'][$uniqueId]['time']['#description']='';   
  	}
	}	
  return $element;
}

function description_custom_field_remove_format_filter_after_build($element, &$form_state){
  if($element['#type'] =='text_format'){
	$element['format']['#attributes']['style'] = 'display:none';  
  }
  return $element;	
}

function routing_slip_modidy_form_state(&$form, &$form_state){
 // kpr($form_state);
  $form['#attached']['library'][] = array('system', 'ui.dialog');
  $form['#attached']['js'][] = array(
    'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing_type_slip_form.js',
	'type'=>'file'
  );
  $form['#attached']['js'][] = array(
    'data' => array('m6connect_routing' => array('routing_save_dialog'=>1)),
    'type' => 'setting',
  );
  
  if(isset($_SESSION['coppied_routing_type']) && is_numeric($_SESSION['coppied_routing_type']) ){
	$form['#attached']['js'][] = array(
      'data' => array('m6connect_routing' => array('routing_type_select'=>$_SESSION['coppied_routing_type'])),
      'type' => 'setting',
    );
    unset($_SESSION['coppied_routing_type']);  
  }
  
  if(empty($form_state['comapny_listing'])){
    $form_state['comapny_listing'] = _get_all_organigation_mapping();
	$_SESSION['comapny_listing'] = $form_state['comapny_listing'];
  }
  
  if(empty($form_state['field_collection_mapping'])){
	$form_state['field_collection_mapping']= array();  
  }
  
  $companyListing = $form_state['comapny_listing'];
  if(empty($form_state['workflow_storage'])){
	$form_state['workflow_storage'] = array();
	$form_state['storage_order'] = array();
	$tempIdentifer = uniqid();
	$form_state['workflow_storage'][$tempIdentifer]['invite_type'] = 'invite_by_company';
	$form_state['workflow_storage'][$tempIdentifer]['company_user'] = array();
	$form_state['workflow_storage'][$tempIdentifer]['default_needed_by_date'] = '';
	$form_state['storage_order'][] = $tempIdentifer; 
  }
  $form_state['modify_routing_default_values'] = array();
  if(empty($form_state['initialize_workflow'])){
	$form_state['initialize_workflow']=1;
	if(!empty($form['nid']['#value'])){
	  $routingSlipNode = $form['#node'];
	  $myRoutingNid = (isset($routingSlipNode->field_my_routing_type['und']) && is_numeric($routingSlipNode->field_my_routing_type['und'][0]['target_id']))?$routingSlipNode->field_my_routing_type['und'][0]['target_id']:'';
	  
	  $sharedRoutingNid = (isset($routingSlipNode->field_shared_routing_type['und']) && is_numeric($routingSlipNode->field_shared_routing_type['und'][0]['target_id']))?$routingSlipNode->field_shared_routing_type['und'][0]['target_id']:'';
	  $RoutingTypeNid = ($myRoutingNid)?$myRoutingNid:'';
	  $RoutingTypeNid = ($RoutingTypeNid)?$RoutingTypeNid:$sharedRoutingNid;
	  if($RoutingTypeNid){
		$form_state['routing_type_rule'] = _get_routing_rule_values($RoutingTypeNid);  
	  }
	  $invitedData = _get_approver_workflow_data_by_entity_id($form['nid']['#value']);
	  $form_state['workflow_storage'] = array();
	  $form_state['storage_order'] = array();
	  if(!empty($invitedData)){
		$KeyOrder = array();
		foreach($invitedData as $index33 => $item33){
		  foreach($item33 as $index44 => $item44){
			$tempIdentifer = uniqid();
			$form_state['workflow_storage'][$tempIdentifer]['invite_type'] = $index33;
			$form_state['workflow_storage'][$tempIdentifer]['company_user'] = array();
			$form_state['workflow_storage'][$tempIdentifer]['default_needed_by_date'] = '';
			$form_state['field_collection_mapping'][$tempIdentifer] = $item44->field_collection_id;
			$KeyOrder[$tempIdentifer] = $item44->order_id;
			$form_state['storage_order'][] = $tempIdentifer;
			$form_state['modify_routing_default_values'][$tempIdentifer] = (array)$item44;
			if(!isset($form_state['inserted_by_roting_type'])){
			  $form_state['inserted_by_roting_type']= array();  
			}
			
			if($item44->approver_invite_by=='routing_type'){
			  $form_state['inserted_by_roting_type'][] = $tempIdentifer;
			}
			if($index33 =='invite_by_company'){	
			  $form_state['modify_routing_default_values'][$tempIdentifer]['autocompany'] = $companyListing[$item44->company_nid];
			  $companyNode = node_load($item44->company_nid);
			  $companyUsers = og_get_group_members_properties($companyNode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
			  $form_state['workflow_storage'][$tempIdentifer]['company_user'] = _get_routing_user_name_mapping($companyUsers,$companyNode->nid);  
			}else{
			  $form_state['company-user-mapping'][$tempIdentifer] = $item44->company_email;
			  $form_state['workflow_storage'][$tempIdentifer]['company_user'] = $item44->company_email;
			}
		  }
		}
		_sort_routing_order_by_mapping($KeyOrder,$form_state['storage_order']);
	  }
	}
  }
  
  if(isset($form_state['values']) && isset($form_state['input']) && isset($form_state['triggering_element']) && isset($form_state['triggering_element']['#type'])){
	$triggering_element = $form_state['triggering_element'];
	$input = $form_state['input'];
	$values = $form_state['values'];
	if($triggering_element['#type']=='select'){
      if(count($triggering_element['#parents'])==3 && $triggering_element['#parents'][0]=='invite_by_company' && $triggering_element['#parents'][2]=='company'){
		$identifier = $triggering_element['#parents'][1];
		$companyNid = $triggering_element['#value'];
		if(!empty($companyNid) && is_numeric($companyNid)){
		  $companyNode = node_load($companyNid);
		  $companyUsers = og_get_group_members_properties($companyNode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
		  $form_state['workflow_storage'][$identifier]['company_user'] = _get_routing_user_name_mapping($companyUsers,$companyNode->nid);
		}else{
		  $form_state['workflow_storage'][$identifier]['company_user'] = array();	
		}
	  }else if(($triggering_element['#name']=='routing-type') || (isset($triggering_element['#field_name']) && in_array($triggering_element['#field_name'],array('field_my_routing_type','field_shared_routing_type'))) ){
		//$formValues = $form_state['values'];
		//$routingNodeNid = $formValues['routing-type'];
		$form_state['routing-type-despription'] ='';
		$routingNodeNid = $triggering_element['#value'];
		if(!is_numeric($routingNodeNid)){
		  $form_state['workflow_storage'] = array();
		  $form_state['storage_order'] = array();
		  $tempIdentifer = uniqid();
		  $form_state['workflow_storage'][$tempIdentifer]['invite_type'] = 'invite_by_company';
		  $form_state['workflow_storage'][$tempIdentifer]['company_user'] = array();
		  $form_state['workflow_storage'][$tempIdentifer]['default_needed_by_date'] = '';
		  $form_state['storage_order'][] = $tempIdentifer;
		  $form_state['routing_type_rule']='';
		  $form_state['routing-type-despription']='';
		}else{
		  $form_state['workflow_storage'] = array();
		  $form_state['storage_order'] = array();
		  $invitedData = _get_routing_invited_values($routingNodeNid);
		  $form_state['routing_type_rule'] = _get_routing_rule_values($routingNodeNid);
		  if(!empty($invitedData)){
			$KeyOrder = array();
			foreach($invitedData as $index33 => $item33){
			  foreach($item33 as $index44 => $item44){
				$tempIdentifer = uniqid();
				$form_state['workflow_storage'][$tempIdentifer]['invite_type'] = $index33;
		        $form_state['workflow_storage'][$tempIdentifer]['company_user'] = array();
				$form_state['workflow_storage'][$tempIdentifer]['default_needed_by_date'] = '';		
				$KeyOrder[$tempIdentifer] = $item44->order_id;
		        $form_state['storage_order'][] = $tempIdentifer;
				$form_state['modify_routing_default_values'][$tempIdentifer] = (array)$item44;
				if(in_array($triggering_element['#field_name'],array('field_my_routing_type','field_shared_routing_type'))){
				  if(!isset($form_state['inserted_by_roting_type'])){
					$form_state['inserted_by_roting_type']= array();  
				  }
				  $form_state['inserted_by_roting_type'][] = $tempIdentifer;
				}
				if($index33 =='invite_by_company'){	
				  $form_state['modify_routing_default_values'][$tempIdentifer]['autocompany'] = $companyListing[$item44->company_nid];
				  $companyNode = node_load($item44->company_nid);
		          $companyUsers = og_get_group_members_properties($companyNode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
				  $form_state['workflow_storage'][$tempIdentifer]['company_user'] = _get_routing_user_name_mapping($companyUsers,$companyNode->nid); 
				}else{
				  $form_state['company-user-mapping'][$tempIdentifer] = $item44->company_email;
				  $form_state['workflow_storage'][$tempIdentifer]['company_user'] = $item44->company_email;
				}
				$form_state['workflow_storage'][$tempIdentifer]['default_needed_by_date'] = ''; 
			  }
			}
			_sort_routing_order_by_mapping($KeyOrder,$form_state['storage_order']);
		  }
		}
	  }else if(isset($triggering_element['#field_name']) && $triggering_element['#field_name']=='field_routing_slip_type'){
		 if(isset($form_state['inserted_by_roting_type'])){
			unset($form_state['inserted_by_roting_type']); 
		 }
		 $form_state['workflow_storage']= array();
		 $form_state['storage_order']= array();
		 $form_state['routing_type_rule'] = '';
		 $tempIdentifer = uniqid();
		 $form_state['workflow_storage'][$tempIdentifer]['invite_type'] = 'invite_by_company';
		 $form_state['workflow_storage'][$tempIdentifer]['company_user'] = array();
		 $form_state['workflow_storage'][$tempIdentifer]['default_needed_by_date'] = ''; 
		 $form_state['storage_order'][] = $tempIdentifer;  
	  }
	}else if($triggering_element['#type']=='textfield'){
	  if(count($triggering_element['#parents'])==3 && $triggering_element['#parents'][2]=='autocompany'){
	    $identifier = $triggering_element['#parents'][1];
		$companyName = $triggering_element['#value'];
		$companyListingFlip = array_flip($form_state['comapny_listing']);
		$companyNid = isset($companyListingFlip[$companyName])?$companyListingFlip[$companyName]:'';
		if(!empty($companyNid) && is_numeric($companyNid)){
		  $companyNode = node_load($companyNid);
		  $companyUsers = og_get_group_members_properties($companyNode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
		  $form_state['workflow_storage'][$identifier]['company_user'] = _get_routing_user_name_mapping($companyUsers,$companyNode->nid);
		}else{
		  $form_state['workflow_storage'][$identifier]['company_user'] = array();	
		}
	  }
	}
  }
}


function update_routing_type_validate_handler(&$form, &$form_state){
  $typeName = trim($form_state['values']['routing-type-title']);
  if(empty($typeName)){
	form_set_error('routing-type-title', t('Enter Valid Routuing Type Name'));  
  }
}

function _get_routing_invited_values($entity_id){
  $return = array();
  if(db_table_exists('m6connect_routing_type_invite')){
	$result = db_select('m6connect_routing_type_invite','mi')->fields('mi')->condition('mi.entity_id',$entity_id,'=')->execute()->fetchAll();  
	if($result && !empty($result)){
	  foreach($result as $delta => $item){
		if(is_numeric($item->company_nid)){
		  $return['invite_by_company'][$item->id] = $item;	
		}else if(!empty($item->company_email)){
		  $return['invite_by_email'][$item->id] = $item;
		}
	  }
	}
  }
  return $return;
}

function _get_routing_rule_values($entity_id){
  if(is_numeric($entity_id)){
    $query = db_select('node','n');
    $query->leftjoin('field_data_field_routing_rules','rr','rr.entity_id=n.nid');
    $query->fields('rr',array('field_routing_rules_value'));
    $query->condition('n.type','routing_type','=');
    $query->condition('n.nid',$entity_id,'=');
    return $query->execute()->fetchColumn(0);
  }
  return '';
}

function routing_type_change_callback($form,&$form_state){
  $values = $form_state['values'];
  ctools_include('ajax');
  $commands = array();
  $commands[] = mymodule_ajax_command_console_log($form_state);
  $commands[] = ajax_command_replace("#workflow-container-section", render($form['workflow_container']));
  if(!empty($values['routing-type'])){
	$node= node_load($values['routing-type']);
	$routingInvitedValues = _get_routing_invited_values($node->nid);
	$routingRule= (isset($node->field_routing_rules['und']) && !empty($node->field_routing_rules['und'][0]['value']))?$node->field_routing_rules['und'][0]['value']:'';
	$routingProject=(isset($node->field_routings_project['und']) && !empty($node->field_routings_project['und'][0]['target_id']))?$node->field_routings_project['und'][0]['target_id']:'';
	$routingSetting=(isset($node->field_routing_type_setting['und']) && !empty($node->field_routing_type_setting['und'][0]['target_id']))?$node->field_routing_type_setting['und'][0]['target_id']:'';
	$routingDescription = (isset($node->field_routing_description['und']) && !empty($node->field_routing_description['und'][0]['value']))?$node->field_routing_description['und'][0]['value']:'';
	$commands[] = mymodule_ajax_command_checkbox_action('input.routing-display-option.form-checkbox',false); 
	$commands[] = mymodule_ajax_command_insertInCkeditor('.routing-type-description',$routingDescription);
	if(isset($node->field_routing_display_option['und']) && !empty($node->field_routing_display_option['und'])){
	  foreach($node->field_routing_display_option['und'] as $index1 => $item1){
		$commands[] = mymodule_ajax_command_checkbox_action('input[value="'.$item1['value'].'"]',true);  
	  }
	}
	$commands[] = ajax_command_invoke(".routing-title", 'val', array($node->title));
    $commands[] = ajax_command_invoke(".routing-rule", 'val', array($routingRule));
    $commands[] = ajax_command_invoke(".routing-project", 'val', array($routingProject));
	$commands[] = ajax_command_invoke(".routing-setting", 'val', array($routingSetting));
	$commands[] = ajax_command_invoke('input[name="routing-type-title"]', 'removeAttr', array('required'));
  }else{
	$commands[] = mymodule_ajax_command_insertInCkeditor('.routing-type-description','');
	$commands[] = mymodule_ajax_command_checkbox_action('input.routing-display-option.form-checkbox',false); 
    $commands[] = ctools_ajax_command_attr('input[name="routing-type-title"]', 'required', 'required');
	$commands[] = ajax_command_invoke(".routing-title", 'val', array(''));
	$commands[] = ajax_command_invoke(".routing-rule", 'val', array(''));
    $commands[] = ajax_command_invoke(".routing-project", 'val', array(''));
    $commands[] = ajax_command_invoke(".routing-company", 'val', array(''));
	$commands[] = ajax_command_invoke(".workflow-order", 'val', array(''));
    $commands[] = ajax_command_invoke(".workflow-name", 'val', array(''));
    $commands[] = ajax_command_invoke(".workflow-action", 'val', array(''));
	$commands[] = ajax_command_invoke(".workflow-item-id", 'val', array(''));
	$commands[] = ajax_command_invoke(".workflow-approval-stage", 'val', array(''));
  }
  return array('#type' => 'ajax','#commands' => $commands);
}

function routing_change_company_callback(&$form,&$form_state){
  $commands = array();
  $commands[] = ajax_command_replace("#workflow-container-section", render($form['workflow_container']));
  //$commands[] = mymodule_ajax_command_console_log($form_state);
  return array('#type' => 'ajax','#commands' => $commands);
}

function routing_change_company_callback2(&$form,&$form_state){
  $commands = array();
  //$commands[] = ajax_command_replace("#workflow-container-section", render($form['workflow_container']));
  $commands[] = mymodule_ajax_command_console_log($form_state);
  return array('#type' => 'ajax','#commands' => $commands);
}

function routing_add_email_field_callback(&$form,&$form_state){
  $commands = array();
  $triggerElemant = $form_state['triggering_element'];
  $identifer = $triggerElemant['#parents'][1];
  $values = $form_state['values']['invite_by_email'][$identifer];
  $selector = 'span.invite_by_email_'.$identifer.'_user_error';
  if(valid_email_address($values['user'])){
    $commands[] = ajax_command_replace("#workflow-container-section", render($form['workflow_container']));
	$commands[] = ajax_command_html($selector, '');
  }else{
	 $commands[] = ajax_command_html($selector, 'Enter valid Email Address');
  }
  //$commands[] = mymodule_ajax_command_console_log($form_state);
  return array('#type' => 'ajax','#commands' => $commands);	
}

function routing_slip_settings_form_submit(&$form, &$form_state){
  $values = $form_state['values'];
  //pre($values,1);
}

function create_or_update_routing_type(&$form, &$form_state){	
  global $user,$company;
  $errors = form_get_errors();
  if(!empty($errors)){
	return;  
  }
  $values = $form_state['values'];
  if(empty($values['routing-type']) && !empty($values['routing-type-title'])){
	$node = new stdClass();
	$node->type = 'routing_type';
	node_object_prepare($node);
	$node->og_group_ref['und'][0]['target_id'] =$company->nid;
	$node->comment =0;
	$node->uid = $user->uid;
	$node->title =$values['routing-type-title'];
	$node->field_routing_description['und'][0] = array(
	  'value'=> $values['description']['value'],
	  'format' => $values['description']['format'],
	);
	$delta =0; 
	foreach($values['routing-display-option'] as $key => $data){
	  if(!empty($data)){
		$node->field_routing_display_option['und'][$delta]['value'] = $key; 
		$delta++;
	  }
	}
	
	if(!empty($values['routing-rule'])){
	  $node->field_routing_rules['und'][0]['value']	= $values['routing-rule'];
	}
	if(!empty($values['routing-setting'])){
	  $node->field_routing_type_setting['und'][0]['target_id']	= $values['routing-setting'];
	}
	if(!empty($values['routing-project'])){
	  $node->field_routings_project['und'][0]['target_id']	= $values['routing-project'];
	}
	node_save($node);
	$_SESSION['routing_type_save_dialog'] = 'Your new routing template - '.$node->title.' has been saved.  It can be accessed when you create a new Routing Slip by selecting My Templates in the drop down.';
	if(isset($node->nid) && is_numeric($node->nid) && db_table_exists('m6connect_routing_type_invite')){
		$firstbidDueDate = array();
		if(!empty($form_state['storage_order'])){
			foreach($form_state['storage_order'] as $delta =>$uniqueId){		
			  $inviteType = $form_state['workflow_storage'][$uniqueId]['invite_type'];
				$inviteDatail = $values[$inviteType][$uniqueId];
				if($inviteType == 'invite_by_company'){
					if(!empty($inviteDatail['user']) && !empty($inviteDatail['company'])){
						$firstkey = $inviteDatail['company'].'_'.$inviteDatail['user'];			
						if(!isset($firstbidDueDate[$firstkey])){						
							$pre_val =  strtotime($inviteDatail['approval_date_time']);
						 	$user_timezone = drupal_get_user_timezone();
							$date_object = new DateObject($pre_val, new DateTimeZone('UTC'));
							//$date_object->setTimezone(new DateTimeZone($user_timezone));
							$approval_date_time_new =  date_format_date($date_object, 'custom', 'Y-m-d H:i:s');							
							$firstbidDueDate[$firstkey] = $approval_date_time_new;							
						}						
						$insertData = array(
							'entity_id' => $node->nid,
							'company_nid' => $inviteDatail['company'],
							'company_email' => NULL,
							'order_id' => (is_numeric($inviteDatail['order']))?$inviteDatail['order']:NULL,
							'user_uid' => $inviteDatail['user'],
							'action' => $inviteDatail['action'],
							'approval_stage' => $inviteDatail['approval_stage'],
							'approval_needed_by_date' => $firstbidDueDate[$firstkey],
			      );
			     db_insert('m6connect_routing_type_invite')->fields($insertData)->execute();	
					}
				}else if($inviteType=='invite_by_email'){
					if(!empty($inviteDatail['user']) && valid_email_address($inviteDatail['user'])){
						$firstkey = $inviteDatail['user'];
						if(!isset($firstbidDueDate[$firstkey])){
							$pre_val =  strtotime($inviteDatail['approval_date_time']);
						 	$user_timezone = drupal_get_user_timezone();
							$date_object = new DateObject($pre_val, new DateTimeZone('UTC'));
							//$date_object->setTimezone(new DateTimeZone($user_timezone));
							$approval_date_time_new =  date_format_date($date_object, 'custom', 'Y-m-d H:i:s');							
							$firstbidDueDate[$firstkey] = $approval_date_time_new;	
						}
						$insertData = array(
							'entity_id' => $node->nid,
							'company_nid' => NULL,
							'company_email' =>$inviteDatail['user'],
							'order_id' => (is_numeric($inviteDatail['order']))?$inviteDatail['order']:NULL,
							'user_uid' => NULL,
							'action' => $inviteDatail['action'],
							'approval_stage' => $inviteDatail['approval_stage'],
							'approval_needed_by_date' => $firstbidDueDate[$firstkey],
						);
						db_insert('m6connect_routing_type_invite')->fields($insertData)->execute();	
					}
				}
			}
		}
		
	 /* if(!empty($values['invite_by_company'])){
		foreach($values['invite_by_company'] as $index => $item){
			if(!empty($item['user']) && !empty($item['company'])){
			$date = $item['approval_date_time'];
			$approval_date_time_new =  date('Y-m-d H:i:s', strtotime($date));//date_format($date,"m/d/Y - h:i:s");
			$insertData = array(
			  'entity_id' => $node->nid,
			  'company_nid' => $item['company'],
			  'company_email' =>NULL,
			  'order_id' => (is_numeric($item['order']))?$item['order']:NULL,
			  'user_uid' => $item['user'],
			  'action' => $item['action'],
			  'approval_stage' => $item['approval_stage'],
				'approval_needed_by_date' => $approval_date_time_new,
			);
			db_insert('m6connect_routing_type_invite')->fields($insertData)->execute();	
		  }
		}
	  } 
		if(!empty($values['invite_by_email'])){		
		foreach($values['invite_by_email'] as $index => $item){
		  if(!empty($item['user']) && valid_email_address($item['user'])){
			$date = $item['approval_date_time'];
			$approval_date_time_new =  date('Y-m-d H:i:s', strtotime($date));//date_format($date,"m/d/Y - h:i:s");
			$insertData = array(
			  'entity_id' => $node->nid,
			  'company_nid' => NULL,
			  'company_email' =>$item['user'],
			  'order_id' => (is_numeric($item['order']))?$item['order']:NULL,
			  'user_uid' => NULL,
			  'action' => $item['action'],
			  'approval_stage' => $item['approval_stage'],
				'approval_needed_by_date' => $approval_date_time_new,
			);
			db_insert('m6connect_routing_type_invite')->fields($insertData)->execute();	
		  }
		}
	  }*/
	}
  }else if(!empty($values['routing-type'])){
	$node = node_load($values['routing-type']);
	$node->title =$values['routing-type-title'];
	$node->field_routing_description['und'][0] = array(
	  'value'=> $values['description']['value'],
	  'format' => $values['description']['format'],
	);
	$displayOption = array();
	$delta=0;
	foreach($values['routing-display-option'] as $key => $data){
	  if(!empty($data)){
		$displayOption[$delta]['value']=$key;
		$delta++;
	  }
	}
	if(!empty($displayOption)){
	  $node->field_routing_display_option['und']= $displayOption; 	
	}else if(isset($node->field_routing_display_option['und'])){
	  unset($node->field_routing_display_option['und']);	
	}
	if(!empty($values['routing-rule'])){
	  $node->field_routing_rules['und'][0]['value']	= $values['routing-rule'];
	}else if(isset($node->field_routing_rules['und'])){
	  unset($node->field_routing_rules['und']);
	}
	if(!empty($values['routing-setting'])){
	  $node->field_routing_type_setting['und'][0]['target_id']	= $values['routing-setting'];
	}else if(isset($node->field_routing_type_setting['und'])){
	  unset($node->field_routing_type_setting['und']);
	}
	if(!empty($values['routing-project'])){
	  $node->field_routings_project['und'][0]['target_id']	= $values['routing-project'];
	}
	node_save($node);
	$_SESSION['routing_type_save_dialog'] = 'Your routing template - '.$node->title.' has been updated.  It can be accessed when you create a new Routing Slip by selecting My Templates in the drop down.';
	$currentInvited = array();
	if(isset($node->nid) && is_numeric($node->nid) && db_table_exists('m6connect_routing_type_invite')){
		if(!empty($form_state['storage_order'])){
			foreach($form_state['storage_order'] as $delta =>$uniqueId){		
			  $inviteType = $form_state['workflow_storage'][$uniqueId]['invite_type'];
				$inviteDatail = $values[$inviteType][$uniqueId];
				if($inviteType == 'invite_by_company'){
					if(!empty($inviteDatail['user']) && !empty($inviteDatail['company'])){
						$firstkey = $inviteDatail['company'].'_'.$inviteDatail['user'];						
						if(!isset($firstbidDueDate[$firstkey])){								
							$pre_val =  strtotime($inviteDatail['approval_date_time']);
						 	$user_timezone = drupal_get_user_timezone();
							$date_object = new DateObject($pre_val, new DateTimeZone('UTC'));
							//$date_object->setTimezone(new DateTimeZone($user_timezone));
							$approval_date_time_new =  date_format_date($date_object, 'custom', 'Y-m-d H:i:s');							
							$firstbidDueDate[$firstkey] = $approval_date_time_new;	
						}						
						$insertData = array(
							'entity_id' => $node->nid,
							'company_nid' => $inviteDatail['company'],
							'company_email' => NULL,
							'order_id' => (is_numeric($inviteDatail['order']))?$inviteDatail['order']:NULL,
							'user_uid' => $inviteDatail['user'],
							'action' => $inviteDatail['action'],
							'approval_stage' => $inviteDatail['approval_stage'],
							'approval_needed_by_date' => $firstbidDueDate[$firstkey],
			      );
			      if(empty($inviteDatail['item_id'])){
							$insetId = db_insert('m6connect_routing_type_invite')->fields($insertData)->execute();
							$currentInvited[] =$insetId;  
						}else{
							db_update('m6connect_routing_type_invite')->fields($insertData)->condition('id',$inviteDatail['item_id'],'=')->execute();
							$currentInvited[] =$inviteDatail['item_id'];  
						}		
					}
				}else if($inviteType=='invite_by_email'){
					if(!empty($inviteDatail['user']) && valid_email_address($inviteDatail['user'])){
						$firstkey = $inviteDatail['user'];
						if(!isset($firstbidDueDate[$firstkey])){
							$pre_val =  strtotime($inviteDatail['approval_date_time']);
						 	$user_timezone = drupal_get_user_timezone();
							$date_object = new DateObject($pre_val, new DateTimeZone('UTC'));
							//$date_object->setTimezone(new DateTimeZone($user_timezone));
							$approval_date_time_new =  date_format_date($date_object, 'custom', 'Y-m-d H:i:s');							
							$firstbidDueDate[$firstkey] = $approval_date_time_new;	
						}
						$insertData = array(
							'entity_id' => $node->nid,
							'company_nid' => NULL,
							'company_email' =>$inviteDatail['user'],
							'order_id' => (is_numeric($inviteDatail['order']))?$inviteDatail['order']:NULL,
							'user_uid' => NULL,
							'action' => $inviteDatail['action'],
							'approval_stage' => $inviteDatail['approval_stage'],
							'approval_needed_by_date' => $firstbidDueDate[$firstkey],
						);
						if(empty($inviteDatail['item_id'])){
							$insetId = db_insert('m6connect_routing_type_invite')->fields($insertData)->execute();
							$currentInvited[] =$insetId;  
						}else{
							db_update('m6connect_routing_type_invite')->fields($insertData)->condition('id',$inviteDatail['item_id'],'=')->execute();
							$currentInvited[] =$inviteDatail['item_id'];  
						}		
					}
				}
			}
		}
		
		
		
	  /*if(!empty($values['invite_by_company'])){
		foreach($values['invite_by_company'] as $index => $item){
			if(!empty($item['user']) && !empty($item['company'])){
			$date = $item['approval_date_time'];
			$approval_date_time_new =  date('Y-m-d H:i:s', strtotime($date));//date_format($date,"m/d/Y - h:i:s");
			$insertData = array(
			  'entity_id' => $node->nid,
			  'company_nid' => $item['company'],
			  'company_email' => NULL,
			  'order_id' => (is_numeric($item['order']))?$item['order']:NULL,
			  'user_uid' => $item['user'],
			  'action' => $item['action'],
			  'approval_stage' => $item['approval_stage'],
				'approval_needed_by_date' => $approval_date_time_new,
			);
			if(empty($item['item_id'])){
			  $insetId = db_insert('m6connect_routing_type_invite')->fields($insertData)->execute();
			  $currentInvited[] =$insetId;  
			}else{
			  db_update('m6connect_routing_type_invite')->fields($insertData)->condition('id',$item['item_id'],'=')->execute();
			  $currentInvited[] =$item['item_id'];  
			}	
		  }
		}
	  }
		
		if(!empty($values['invite_by_email'])){			
		foreach($values['invite_by_email'] as $index => $item){	
		  if(!empty($item['user'])){			
			$date = $item['approval_date_time'];
			$approval_date_time_new =  date('Y-m-d H:i:s', strtotime($date));		
			$insertData = array(
			  'entity_id' => $node->nid,
			  'company_nid' => NULL,
			  'company_email' => $item['user'],
			  'order_id' => (is_numeric($item['order']))?$item['order']:NULL,
			  'user_uid' => NULL,
			  'action' => $item['action'],
			  'approval_stage' => $item['approval_stage'],
				'approval_needed_by_date' => $approval_date_time_new,
			);
			if(empty($item['item_id'])){
			  $insetId = db_insert('m6connect_routing_type_invite')->fields($insertData)->execute();
			  $currentInvited[] =$insetId;  
			}else{
			  db_update('m6connect_routing_type_invite')->fields($insertData)->condition('id',$item['item_id'],'=')->execute();
			  $currentInvited[] =$item['item_id'];  
			}	
		  }
		}
	  }*/
	  if(!empty($currentInvited)){
	    db_delete('m6connect_routing_type_invite')->condition('id',array_values($currentInvited),'NOT IN')->condition('entity_id',$node->nid,'=')->execute();
	  }else{
		db_delete('m6connect_routing_type_invite')->condition('entity_id',$node->nid,'=')->execute();  
	  }
	}
  }
}

function mymodule_ajax_command_js_eval($script) {
  return array(
    'command' => 'js_eval',
    'script' => $script,
    'my_custom' => 'my custom value',
  );
}
function mymodule_ajax_command_console_log(&$var) {
  return array(
    'command' => 'console_log',
    'var1' => $var,
  );
}

function mymodule_ajax_command_insertInCkeditor($selector,$arg) {
  return array(
    'command' => 'insertInCkeditor',
	'selector' => $selector,
    'arguments' => $arg,
  );
}

function mymodule_ajax_command_checkbox_action($selector,$action) {
  return array(
    'command' => 'checkbox_action',
    'selector' => $selector,
	'action' => $action,
  );
}



function _get_routing_user_name_mapping($usersUid,$cmpNid){
  $output = array();
  if(!empty($usersUid) && is_numeric($cmpNid)){
    $query = db_select('users','u');
	$query->leftjoin('m6connect_og_membership_email','om','om.user_uid=u.uid AND om.entity_id=:CompanyNid', array(':CompanyNid'=>$cmpNid));
	$query->leftjoin('realname','r','r.uid=u.uid');
	$query->fields('u',array('uid'));
	$query->addField('om','company_email','mail');
	$query->fields('r',array('realname'));
	$query->condition('u.uid',array_values($usersUid),'IN');
	$result = $query->execute()->fetchAllAssoc('uid');
	if(!empty($result)){
	  foreach($result as $uid => $data){
		$output[$uid] = $data->realname.' <'.$data->mail.'>';  
	  }
	}
  }
  return $output;	
}

function routing_action_process_callback($element, &$form_state){
  $element['workflow_sort'] = array(
    '#type'=>'submit',
	'#value' => 'Sort',
	'#name' => 'workflow_sort',
	'#attributes'=> array('class'=>array('routing-workflow-action','routing-workflow-action-sort'),'title'=>'Organize in Chronological order'),
	"#limit_validation_errors" => array(),
	'#submit'=> array('routing_workflow_action_submit_handler'),
	'#ajax' => array(
	  'callback' => 'routing_workflow_action_callback',
	  'wrapper' => 'workflow-container-section',
	  'method' => 'replace',
	  'effect' => 'fade',
	  'progress' => array('type'=> 'throbber', 'message'=> NULL),
	 ),
  );
  $element['workflow_add_company'] = array(
    '#type'=>'submit',
	'#value' => 'Add Company',
	'#name' => 'workflow_add_company',
	'#attributes'=> array('class'=>array('routing-workflow-action','routing-workflow-action-add-company'),'title'=>'Add M6 User by Company'),
	"#limit_validation_errors" => array(),
	'#submit'=> array('routing_workflow_action_submit_handler'),
	'#ajax' => array(
	  'callback' => 'routing_workflow_action_callback',
	  'wrapper' => 'workflow-container-section',
	  'method' => 'replace',
	  'effect' => 'fade',
	  'progress' => array('type'=> 'throbber', 'message'=> NULL),
	 ),
  );
  $element['workflow_add_email'] = array(
    '#type'=>'submit',
	'#value' => 'Add Email',
	'#name' => 'workflow_add_email',
	'#attributes'=> array('class'=>array('routing-workflow-action','routing-workflow-action-add-email'),'title'=>'Add non-M6 User by email'),
	"#limit_validation_errors" => array(),
	'#submit'=> array('routing_workflow_action_submit_handler'),
	'#ajax' => array(
	  'callback' => 'routing_workflow_action_callback',
	  'wrapper' => 'workflow-container-section',
	  'method' => 'replace',
	  'effect' => 'fade',
	  'progress' => array('type'=> 'throbber', 'message'=> NULL),
	 ),
  );
  
  $element['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
	'#submit' => array('create_or_update_routing_type'),
	'#validate' => array('update_routing_type_validate_handler',
		'routing_workflow_action_validate_handler'),
	'#attributes'=> array('class'=> array('save-button')),
  );
  
  $element['workflow_copy'] = array(
    '#type'=>'submit',
	'#value' => 'Copy',
	'#name' => 'workflow_copy',
	'#attributes'=> array('class'=>array('routing-workflow-action','routing-workflow-action-copy'),'title'=>'Copy Routing Template'),
	'#states'=> array(
	  'invisible'=> array('select[name="routing-type"]'=> array('value'=>'')),
	),
	'#validate' => array('update_routing_type_validate_handler','routing_workflow_action_validate_handler'),
	'#submit'=> array('routing_workflow_action_copy_submit_handler'),
  );
  
  $element['delete'] = array(
    '#type' => 'submit',
    '#value' => 'Delete',
	'#attributes'=> array('class'=> array('cancel-button','routing-type-node-delete')),
	'#states'=> array(
	  'invisible'=> array('select[name="routing-type"]'=> array('value'=>'')),
	),
	'#submit' => array('routing_type_node_delete_callback'),
  );
  $element['cancel'] = array(
    '#type' => 'submit',
    '#value' => 'Cancel',
	'#attributes'=> array('class'=> array('cancel-button')),
  );
  return $element;
}

function routing_type_node_delete_callback(&$form, &$form_state){
  if(!empty($form_state['values']['routing-type']) && is_numeric($form_state['values']['routing-type'])){
	node_delete($form_state['values']['routing-type']);  
  }
}



function routing_slip_action_process_callback($element, &$form_state){
  $element['workflow_sort'] = array(
    '#type'=>'submit',
	'#value' => 'Sort',
	'#name' => 'workflow_sort',
	'#attributes'=> array('class'=>array('routing-workflow-action','routing-workflow-action-sort'),'title'=>'Organize in Chronological order'),
	"#limit_validation_errors" => array(),
	'#submit'=> array('routing_workflow_action_submit_handler'),
	'#ajax' => array(
	  'callback' => 'routing_workflow_action_callback',
	  'wrapper' => 'workflow-container-section',
	  'method' => 'replace',
	  'effect' => 'fade',
	  'progress' => array('type'=> 'throbber', 'message'=> NULL),
	 ),
  );
  $element['workflow_add_company'] = array(
    '#type'=>'submit',
	'#value' => 'Add Company',
	'#name' => 'workflow_add_company',
	'#attributes'=> array('class'=>array('routing-workflow-action','routing-workflow-action-add-company'),'title'=>'Add M6 User by Company'),
	"#limit_validation_errors" => array(),
	'#submit'=> array('routing_workflow_action_submit_handler'),
	'#ajax' => array(
	  'callback' => 'routing_workflow_action_callback',
	  'wrapper' => 'workflow-container-section',
	  'method' => 'replace',
	  'effect' => 'fade',
	  'progress' => array('type'=> 'throbber', 'message'=> NULL),
	 ),
  );
  $element['workflow_add_email'] = array(
    '#type'=>'submit',
	'#value' => 'Add Email',
	'#name' => 'workflow_add_email',
	'#attributes'=> array('class'=>array('routing-workflow-action','routing-workflow-action-add-email'),'title'=>'Add non-M6 User by email'),
	"#limit_validation_errors" => array(),
	'#submit'=> array('routing_workflow_action_submit_handler'),
	'#ajax' => array(
	  'callback' => 'routing_workflow_action_callback',
	  'wrapper' => 'workflow-container-section',
	  'method' => 'replace',
	  'effect' => 'fade',
	  'progress' => array('type'=> 'throbber', 'message'=> NULL),
	 ),
  );
  $routingRule = isset($form_state['routing_type_rule'])?$form_state['routing_type_rule']:'';
  $checkRoutingSlip = (isset($form_state['node']))?TRUE:FALSE;
  if($checkRoutingSlip){
	if($routingRule == 'routing_rule_1'){
	  $element['workflow_sort']= array('#markup'=>'');
	  $element['workflow_add_company']= array('#markup'=>'');
	  $element['workflow_add_email']= array('#markup'=>'');
	}else if(in_array($routingRule,array('routing_rule_3','routing_rule_4'))){
	  //$element['workflow_sort']= array('#markup'=>'');
	}
  }
  return $element;	
}

function routing_workflow_process_callback($element, &$form_state){	//drup_msg($form_state);

  $storage = $form_state['workflow_storage'];
  $companyListing = $form_state['comapny_listing'];
  $routingRule = isset($form_state['routing_type_rule'])?$form_state['routing_type_rule']:'';
  $checkRoutingSlip = (isset($form_state['node']))?TRUE:FALSE;
  $element['#storage']= $storage;
  $element['#storage_order'] = $form_state['storage_order'];
	$approval_needed_by_date_default ='';
	$contNeeded =0;
	$disable_approval_neededby = array();
	if(!empty($form_state['disable_approval_neededby'])){
		$disable_approval_neededby = $form_state['disable_approval_neededby'];
	}
	$firstbidDueDate = array();
	if(isset($form_state['modify_routing_default_values']) && !empty($form_state['modify_routing_default_values']) && !empty($form_state['storage_order'])){
	  foreach($form_state['storage_order'] as $index => $identifier){
		  if(isset($form_state['modify_routing_default_values'][$identifier])){
			  $inviteType = $form_state['workflow_storage'][$identifier]['invite_type'];
			  $inviteDatail = $form_state['modify_routing_default_values'][$identifier];
			  if($inviteType == 'invite_by_company'){
			  $firstkey = $inviteDatail['company_nid'].'_'.$inviteDatail['user_uid'];
		  }else{
			  $firstkey = $inviteDatail['company_email'];
		  }
			  if(!isset($firstbidDueDate[$firstkey])){
				$firstbidDueDate[$firstkey] = ''; 	
			  }
			  else{
				$disable_approval_neededby[] = $identifier;
			  }	
		  }
	  }
  }
//  drup_msg($form_state);
//  drup_msg($storage);
  foreach($storage as $uniqueId => $inviteData){ 
	$inviteType= $inviteData['invite_type'];
	$companyUsers = $inviteData['company_user'];
	$neededByDateDefault = $inviteData['default_needed_by_date']; 
	
	//drup_msg($neededByDateDefault01);
	$invitedValues = array();
  if(isset($form_state['modify_routing_default_values'][$uniqueId])){
	  $invitedValues = $form_state['modify_routing_default_values'][$uniqueId];
	  $neededByDateDefault01 = $form_state['modify_routing_default_values'][$uniqueId]['approval_needed_by_date'];
  }
	$element['item_id'][$uniqueId]= array(
	  '#type'=> 'hidden',
	  '#attributes'=> array('class'=> array('workflow-item-id')),
	  '#parents' => array($inviteType,$uniqueId,'item_id'),
	  '#default_value' => (isset($invitedValues['id']))?$invitedValues['id']:'',
	);
	$element['order'][$uniqueId]= array(
	  '#type'=> 'textfield',
	  '#title_display' => 'invisible',
	  '#title' => 'Order',
	  '#attributes'=> array('class'=> array('form-control','workflow-order'),'onkeyup'=>'this.value=this.value.replace(/[^0-9]/g,"");'),
	  '#parents' => array($inviteType,$uniqueId,'order'),
	  '#number_type'=>'integer',
	  '#size' =>2,
	  '#default_value' => (isset($invitedValues['order_id']))?$invitedValues['order_id']:'',
	  //'#required' => TRUE,
	);
	if($inviteType=='invite_by_company'){
	  $element['company'][$uniqueId]= array(
		'#type' => 'select',
		'#title' => $uniqueId,
		//'#chosen' => TRUE,
		'#title_display' => 'invisible',
		'#options' => $companyListing,
		'#attributes'=> array('class'=> array('form-control','routing-company'),'style'=>'display:none;'),
		'#parents' => array($inviteType,$uniqueId,'company'),
		'#empty_option' => 'Select Company',
		'#empty_value' =>'',
		/*'#ajax' => array(
		  'event' => 'change',
		  'callback' => 'routing_change_company_callback',
		  'wrapper' => 'workflow-container-section',
		  'method' => 'replace',
		  'effect' => 'fade',
		),*/
		'#default_value' => (isset($invitedValues['company_nid']))?$invitedValues['company_nid']:'',
		//'#required' => TRUE,
	  );
	  
	  $element['autocompany'][$uniqueId]= array(
		'#type' => 'textfield',
		'#title' => 'Company Autocomplete',
		'#title_display' => 'invisible',
		'#attributes'=> array('class'=> array('form-control','workflow-auto'),'placeholder'=>'Enter company'),
		'#parents' => array($inviteType,$uniqueId,'autocompany'),
		'#autocomplete_path' => 'routing-company/autocomplete',
		'#ajax' => array(
		  'callback' => 'routing_autocomplete_callback',
		  'event' => 'blur',
		  'wrapper' => 'workflow-container-section',
		  'method' => 'replace',
		  'effect' => 'fade',
		), 
		'#default_value' => (isset($invitedValues['autocompany']))?$invitedValues['autocompany']:'',
		//'#required' => TRUE,
	  );
	  
	  $element['user'][$uniqueId]= array(
		'#type' => 'select',
		'#title' => 'Name',
		'#title_display' => 'invisible',
		'#options' => $companyUsers,
		'#empty_option' => '- SELECT -',
		'#empty_value' =>'',
		'#attributes'=> array('class'=> array('form-control','workflow-name')),
		'#parents' => array($inviteType,$uniqueId,'user'),
		'#default_value' => (isset($invitedValues['user_uid']))?$invitedValues['user_uid']:'',
		//'#required' => TRUE,
		//'#ajax' => array(
		//  'callback' => 'routing_select_user_callback',
		//), 
	  );  
	}else{
	  $element['company'][$uniqueId]= array(
		'#type' => 'textfield',
		'#title' => 'Company',
		'#title_display' => 'invisible',
		'#attributes'=> array('class'=> array('form-control','routing-company'),'placeholder'=>'Email'),
		'#disabled' => TRUE,
		'#parents' => array($inviteType,$uniqueId,'company'),
		'#ajax' => array(
		  'callback' => 'routing_select_user_callback',			
		),
	  );
	  
	  $element['autocompany'][$uniqueId]= array(
		'#type' => 'markup',
		'#markup' => '',
	  );
	
	  $element['user'][$uniqueId]= array(
		'#type' => 'textfield',
		'#title' => 'Name',
		'#title_display' => 'invisible',
		'#attributes'=> array('class'=> array('form-control','workflow-name'),'placeholder'=>'Invite by email if not a member of M6'),
		'#parents' => array($inviteType,$uniqueId,'user'),
		'#field_prefix' => '<span class="invite_by_email_'.$uniqueId.'_user_error"></span>',
		'#default_value' => (isset($invitedValues['company_email']))?$invitedValues['company_email']:'',
		'#ajax' => array(
		  'callback' => 'routing_select_user_callback',
			'event' => 'blur',
			'method' => 'replace',
		  'effect' => 'fade',
		),
		//'#required' => TRUE,
	  );  
	}
	  
	$element['action'][$uniqueId]= array(
	  '#type' => 'select',
	  '#title' => 'Action',
	  '#title_display' => 'invisible',
	  '#options' => array(''=> '-SELECT-','A/R'=>'Approval Required','N/O'=>'Notification Only'),
	  '#attributes'=> array('class'=> array('form-control','workflow-action')),
	  '#parents' => array($inviteType,$uniqueId,'action'),
	  '#default_value' => (isset($invitedValues['action']))?$invitedValues['action']:'',
	 // '#required' => TRUE,
	);
	
	$element['approval_stage'][$uniqueId]= array(
	  '#type' => 'select',
	  '#title' => 'Action',
	  '#title_display' => 'invisible',
	  '#options' => array(''=> '-SELECT-','Initial Planning'=>'Initial Planning','Prior to Shutdown'=>'Prior to Shutdown','Back in Service'=>'Back in Service'),
	  '#attributes'=> array('class'=> array('form-control','workflow-approval-stage')),
	  '#parents' => array($inviteType,$uniqueId,'approval_stage'),
	  '#default_value' => (isset($invitedValues['approval_stage']))?$invitedValues['approval_stage']:'',
	 // '#required' => TRUE,
	);
	
	/*$Approval_attr_is_same = '';
	if($element['action'][$uniqueId]['default_value'] == $element['action'][$uniqueId]['default_value'] && $element['approval_stage'][$uniqueId]['default_value'] == $element['approval_stage'][$uniqueId]['default_value']){
		$Approval_attr_is_same = 1;
	}*/
	
	
	/*$attr_is_same =array();
	if($Approval_attr_is_same == TRUE){
		drup_msg($Approval_attr_is_same);
		$attr_is_same['autocomplete'] ='off';
		$attr_is_same['readonly'] ='readonly';		
	}*/	
	
	
	$element['approval_date_time'][$uniqueId] = array(
		'#type' => 'date_popup', 
		'#title' => 'Date',
		'#title_display' => 'invisible',
		'#date_format' => 'm/d/Y - h:i A',
		'#date_label_position' => 'within',
		'#date_timezone' => drupal_get_user_timezone(), 
		'#datepicker_options' => array('minDate' => 0),	
		'#parents' => array($inviteType,$uniqueId,'approval_date_time'),
		'#default_value' => isset($neededByDateDefault01)?$neededByDateDefault01:'', //(!empty($approval_needed_by_date)) ? $approval_needed_by_date : '', 	
		//'#attributes' => (!empty($attr_is_same))?$attr_is_same:'',	
		//'#date_increment' => 15, 
		//'#date_year_range' => '0:+2', 
		
 	);
	/*if(!empty($invitedValues['approval_needed_by_date'])){
	  $pre_val =$invitedValues['approval_needed_by_date'];
	  $user_timezone = drupal_get_user_timezone();
	  $date_object = new DateObject($pre_val, new DateTimeZone('UTC'));
	  $date_object->setTimezone(new DateTimeZone($user_timezone));
	  $approval_needed_by_date =  date_format_date($date_object, 'custom', 'Y-m-d H:i:s');
	  $element['approval_date_time'][$uniqueId]['#default_value'] = $approval_needed_by_date; 	
	}
	if(in_array($uniqueId,$disable_approval_neededby)){
	  $element['approval_date_time'][$uniqueId]['#attributes']['class'][] = 'form-disabled-field';
	}*/
	$element['remove'][$uniqueId]= array(
	  '#type' => 'submit',
	  '#value' => decode_entities('&#xf014;'),
	  '#name' => $uniqueId,
	  '#attributes'=> array('style'=> array('font-family:FontAwesome;'),'class'=>array('workflow-remove-submit')),
	  '#parents' => array('invite_by_company',$uniqueId,'remove'),
	  "#limit_validation_errors" => array(),
	  '#submit'=> array('routing_remove_invited_submit_handler'),
	  '#ajax' => array(
		'callback' => 'routing_remove_invited_callback',
		'wrapper' => 'workflow-container-section',
		'method' => 'replace',
		'effect' => 'fade',
		'progress' => array('type'=> 'throbber', 'message'=> NULL),
	   ),
	);
	if(isset($form_state['inserted_by_roting_type'])){
	  if(in_array($routingRule,array('routing_rule_1','routing_rule_3','routing_rule_4'))){
		if($routingRule == 'routing_rule_1' || (in_array($routingRule,array('routing_rule_3','routing_rule_4')) && in_array($uniqueId,$form_state['inserted_by_roting_type']))){
		  $element['action'][$uniqueId]['#attributes']['class'][]='form-disabled-field' ; 
		  $element['approval_stage'][$uniqueId]['#attributes']['class'][]='form-disabled-field' ;
		  $element['remove'][$uniqueId]= array('markup'=> ''); 
		  $element['user'][$uniqueId]['#attributes']['class'][]='form-disabled-field' ;  
		  $element['company'][$uniqueId]['#attributes']['class'][]='form-disabled-field' ; 
		  $element['autocompany'][$uniqueId]['#attributes']['class'][]='form-disabled-field' ; 
		  $element['order'][$uniqueId]['#attributes']['class'][]='form-disabled-field' ; 
		  $element['item_id'][$uniqueId]['#attributes']['class'][]='form-disabled-field' ; 
		  if(isset($element['autocompany'][$uniqueId]['#ajax'])){
			unset($element['autocompany'][$uniqueId]['#ajax']);	
		  }
		  if(isset($element['autocompany'][$uniqueId]['#autocomplete_path'])){
			unset($element['autocompany'][$uniqueId]['#autocomplete_path']);	
		  }
		  if(isset($element['company'][$uniqueId]['#ajax'])){
			unset($element['autocompany'][$uniqueId]['#ajax']);	
		  }
		  
		}else if(in_array($routingRule,array('routing_rule_3')) && !in_array($uniqueId,$form_state['inserted_by_roting_type'])){
		  $element['action'][$uniqueId]['#options'] = array(''=> '-None-','N/O'=>'Notification Only');
		}
	  }
	}
  }
  return $element;	
}

function routing_company_autocomplete($string = ''){
  $matches = array();
  if(!empty($string)){
	$comppanyListing = array();
	if(isset($_SESSION['comapny_listing']) && !empty($_SESSION['comapny_listing'])){
	  $comppanyListing = $_SESSION['comapny_listing'];
	}else{
	  $comppanyListing = _get_all_organigation_mapping();	
	}
    //$comppanyListing = array_flip($comppanyListing);
    $matchedOwner = preg_grep("/^{$string}/i",array_values($comppanyListing));
    foreach($matchedOwner as $index => $userVal){
      $matches[$userVal] = $userVal; 
    }
  }
  drupal_json_output($matches);
}

function routing_autocomplete_callback($form,&$form_state){
  $commands = array();
  $companyListing = $form_state['comapny_listing'];
  $companyListing = array_flip($companyListing);
  $triggering_element = $form_state['triggering_element'];
  $identifer = $triggering_element['#parents'][1];
  $commands[] = ajax_command_replace("#workflow-container-section", render($form['workflow_container']));
  $companyNid='';
  if(isset($companyListing[$triggering_element['#value']])){
    $companyNid = $companyListing[$triggering_element['#value']];
  }
  $commands[] = ajax_command_invoke('select[name="invite_by_company['.$identifer.'][company]"]', 'val' ,array($companyNid));
  //$commands[] = ajax_command_invoke('select[name="invite_by_company['.$identifer.'][company]"]', 'trigger' ,array('change'));
  return array('#type' => 'ajax','#commands' => $commands);
}

function routing_select_user_callback($form,&$form_state){
	$commands = array();
	$values = $form_state['values'];	
	$triggering_element = $form_state['triggering_element'];	
	$triggering_inviteType = $triggering_element['#parents'][0];
  $triggering_identifier = $triggering_element['#parents'][1];
	$triggering_row = $values[$triggering_inviteType][$triggering_identifier];
	//$commands[] = mymodule_ajax_command_console_log($form_state['values']);
	//$commands[] = mymodule_ajax_command_console_log($form_state['input']);
	//$commands[] = mymodule_ajax_command_console_log($triggering_element);
	//$commands[] = mymodule_ajax_command_console_log($form_state);
	$firstInvitedBYCompany = 0;
	foreach($form_state['storage_order'] as $index => $uniqueID){
		/*if($uniqueID == $triggering_identifier){
			break;
		}*/
		$inviteType = $form_state['workflow_storage'][$uniqueID]['invite_type'];	
		if($inviteType == 'invite_by_company'){
			$previous_row = $values[$inviteType][$uniqueID];
			if($previous_row['company']==$triggering_row['company'] && $previous_row['user']==$triggering_element['#value']){
				if($firstInvitedBYCompany){
				  $commands[] = ajax_command_invoke('input[name="invite_by_company['.$uniqueID.'][approval_date_time][date]"]','addClass',array('form-disabled-field'));
				  $commands[] = ajax_command_invoke('input[name="invite_by_company['.$uniqueID.'][approval_date_time][time]"]','addClass',array('form-disabled-field'));
					//$commands[] = ajax_command_invoke('input[name="invite_by_company['.$uniqueID.'][order]"]','val',array('jQuery('')'));
					$date = $form_state['input']['invite_by_company'][$firstInvitedBYCompany]['approval_date_time']['date'];
          $time = $form_state['input']['invite_by_company'][$firstInvitedBYCompany]['approval_date_time']['time'];
					$commands[] = ajax_command_invoke('input[name="invite_by_company['.$uniqueID.'][approval_date_time][date]"]','val',array($date));
					$commands[] = ajax_command_invoke('input[name="invite_by_company['.$uniqueID.'][approval_date_time][time]"]','val',array($time));
					
				}else{
				  $firstInvitedBYCompany=$uniqueID;
				}
			}
		} else if($inviteType == 'invite_by_email'){
			$previous_row = $values[$inviteType][$uniqueID];
			if($previous_row['user']== $triggering_element['#value']){
				if($firstInvitedBYCompany){
				  $commands[] = ajax_command_invoke('input[name="invite_by_email['.$uniqueID.'][approval_date_time][date]"]','addClass',array('form-disabled-field'));
				  $commands[] = ajax_command_invoke('input[name="invite_by_email['.$uniqueID.'][approval_date_time][time]"]','addClass',array('form-disabled-field'));
					//$commands[] = ajax_command_invoke('input[name="invite_by_company['.$uniqueID.'][order]"]','val',array('jQuery('')'));
					$date = $form_state['input']['invite_by_email'][$firstInvitedBYCompany]['approval_date_time']['date'];
          $time = $form_state['input']['invite_by_email'][$firstInvitedBYCompany]['approval_date_time']['time'];
					$commands[] = ajax_command_invoke('input[name="invite_by_email['.$uniqueID.'][approval_date_time][date]"]','val',array($date));
					$commands[] = ajax_command_invoke('input[name="invite_by_email['.$uniqueID.'][approval_date_time][time]"]','val',array($time));					
				}else{
				  $firstInvitedBYCompany=$uniqueID;
				}
			}			
		}
	}
	
	if($triggering_element['#type']=='select'){
		
	}else if($triggering_element['#type']=='textfield'){
		
	}
  return array('#type' => 'ajax','#commands' => $commands);
}


function theme_routing_option_theme($variables) {
  $element = $variables['form'];
  $output = '';
  $header = array('Order','Company','Name','Approval Type','Approval Stage','Approval Needed By',''); 
  $storage = $element['#storage'];
  $storageOrder = $element['#storage_order'];
	foreach($storageOrder as $index => $uniqueId){
	$orderRow = drupal_render($element['item_id'][$uniqueId]).drupal_render($element['order'][$uniqueId]);
	$companyRow = drupal_render($element['autocompany'][$uniqueId]).drupal_render($element['company'][$uniqueId]);
	if($storage[$uniqueId]['invite_type']=='invite_by_company'){
	  $rows[] = array(
	    'data'=> array(
	      array('data'=>$orderRow,'class'=> array('workflow-order-td')),
	      array('data'=>$companyRow,'class'=> array('workflow-company-td')),
	      array('data'=>drupal_render($element['user'][$uniqueId]),'class'=> array('workflow-user-td')),
	      array('data'=>drupal_render($element['action'][$uniqueId]),'class'=> array('workflow-action-td')),
		  	array('data'=>drupal_render($element['approval_stage'][$uniqueId]),'class'=> array('workflow-approval-stage-td')),
				array('data'=>drupal_render($element['approval_date_time'][$uniqueId]),'class'=> array('workflow-approval-stage-td-date-time')),
	      array('data'=>drupal_render($element['remove'][$uniqueId]),'class'=> array('workflow-remove-td')),
		),
		'class'=>array('even'),
	  );	
	}else{
	  $rows[] = array(
	    'data'=> array(
		  array('data'=>$orderRow,'class'=> array('workflow-order-td')),
		  array('data'=>drupal_render($element['user'][$uniqueId]),'class'=> array('workflow-col2-user-td'),'colspan' => 2),
		  array('data'=>drupal_render($element['action'][$uniqueId]),'class'=> array('workflow-action-td')),
		  array('data'=>drupal_render($element['approval_stage'][$uniqueId]),'class'=> array('workflow-approval-stage-td')),
			array('data'=>drupal_render($element['approval_date_time'][$uniqueId]),'class'=> array('workflow-approval-stage-td-date-time')),
		  array('data'=>drupal_render($element['remove'][$uniqueId]),'class'=> array('workflow-remove-td')),
		),
		'class'=>array('even'),
	  );
	}
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows,'attributes'=> array('class'=> array('routing-workflow-table'))));
  $output .= drupal_render_children($element);
  return $output;
}

function routing_remove_invited_callback(&$form,&$form_state){
  return $form['workflow_container'];  
}

function routing_remove_invited_submit_handler(&$form,&$form_state){
  $triggering_element = $form_state['triggering_element'];
  $identifier = $triggering_element['#parents'][1]; 
  if(isset($form_state['workflow_storage'][$identifier])){
    unset($form_state['workflow_storage'][$identifier]); 
	  $form_state['storage_order'] = array_diff($form_state['storage_order'], array($identifier));
  }
	$values = $form_state['input'];
  $form_state['disable_approval_neededby']= array();
  $firstbidDueDate = array();
  if(!empty($form_state['storage_order'])){
    foreach($form_state['storage_order'] as $delta =>$uniqueId){		
      $inviteType = $form_state['workflow_storage'][$uniqueId]['invite_type'];
      $inviteDatail = $values[$inviteType][$uniqueId];
      if($inviteType == 'invite_by_company'){
        if(!empty($inviteDatail['user']) && !empty($inviteDatail['company'])){
          $firstkey = $inviteDatail['company'].'_'.$inviteDatail['user'];					
          if(!isset($firstbidDueDate[$firstkey])){						
            $firstbidDueDate[$firstkey] = ''; 						
          }else{
            $form_state['disable_approval_neededby'][] = $uniqueId;
          }
        }
      }else if($inviteType=='invite_by_email'){
        if(!empty($inviteDatail['user']) && valid_email_address($inviteDatail['user'])){
          $firstkey = $inviteDatail['user'];
          if(!isset($firstbidDueDate[$firstkey])){
            $firstbidDueDate[$firstkey] = ''; 	
          }
          else{
            $form_state['disable_approval_neededby'][] = $uniqueId;
          }						
        }
      }
    }
  }
  $form_state['rebuild'] = TRUE;
}

function routing_workflow_action_callback(&$form, &$form_state){
//	pre($form_state['values'],1);
  return $form['workflow_container'];
}

function routing_workflow_action_copy_submit_handler(&$form, &$form_state){
  $values = $form_state['input'];
  if(!empty($values['routing-type']) && is_numeric($values['routing-type'])){
    $originalRoutingTypeNode = node_load($values['routing-type']);
	$CopiedNode = routing_type_node_clone($originalRoutingTypeNode);
	if(is_numeric($CopiedNode->nid)){
	  $_SESSION['coppied_routing_type'] = $CopiedNode->nid;
	}
  }
  drupal_goto('routing-slip-settings');
}

function routing_workflow_action_validate_handler($form,&$form_state){
	//pre($form_state['values'],1);
  $isSettingForm = isset($form_state['routing_workflow_setting_form'])?1:0;
  $elementErrorCount = array('order'=>0,'company'=>0,'action'=>0,'user'=>0,'email'=>0,'approval_date_time'=>0);
  $allInvitedBy = array('invite_by_company','invite_by_email');
  foreach($allInvitedBy as $index => $invitedBy){ 
    foreach($form_state['values'][$invitedBy] as $uniqueId => $elements){
			//pre($elements,1);
	  if(!isset($elements['order'])){
		continue;  
	  }
	  $orderData = trim($elements['order']);
	  if(empty($orderData)){
		$message = ($elementErrorCount['order']==0)?'Enter Valid Order.':'';
	    form_set_error($invitedBy.']['.$uniqueId.'][order',$message);	
		$elementErrorCount['order']++;
	  }
	  $userData = trim($elements['user']);
	  if($invitedBy=='invite_by_company' && empty($userData)){
		$message = ($elementErrorCount['user']==0)?'Choose valid User.':'';
		form_set_error($invitedBy.']['.$uniqueId.'][user',$message);	
		$elementErrorCount['user']++;
	  }else if($invitedBy=='invite_by_email' && !valid_email_address($userData)){
		$message = ($elementErrorCount['email']==0)?'Enter valid Email.':'';
		form_set_error($invitedBy.']['.$uniqueId.'][user',$message);	
		$elementErrorCount['email']++;
	  }
	  if(empty($elements['action'])){
		$message = ($elementErrorCount['action']==0)?'Choose valid Action.':'';
	    form_set_error($invitedBy.']['.$uniqueId.'][action',$message);	
		$elementErrorCount['action']++;
	  }
	  if(($invitedBy=='invite_by_company') && empty($elements['company'])){
		$message = ($elementErrorCount['company']==0)?'Enter valid Company Name.':'';
		form_set_error($invitedBy.']['.$uniqueId.'][autocompany',$message); 
		$elementErrorCount['company']++; 
	  }
	  if(!$isSettingForm && empty($elements['approval_date_time'])){
		$message = ($elementErrorCount['approval_date_time']==0)?'A valid date is required for Approval Needed By.':'';
	    form_set_error($invitedBy.']['.$uniqueId.'][approval_date_time',$message);	
		$elementErrorCount['approval_date_time']++;
	  }
    }
  }
}

function routing_workflow_action_submit_handler(&$form, &$form_state){
	//pre($form_state['values'],1);
  $triggerElement = $form_state['triggering_element'];
  $form_state['disable_approval_neededby']= array();
	//disable approval needed by start
	$values = $form_state['input'];
	if(in_array($triggerElement['#name'], array('workflow_add_company','workflow_add_email','workflow_sort'))){
		$form_state['disable_approval_neededby']= array();
		$firstbidDueDate = array();
		if(!empty($form_state['storage_order'])){
			foreach($form_state['storage_order'] as $delta =>$uniqueId){		
			  $inviteType = $form_state['workflow_storage'][$uniqueId]['invite_type'];
				$inviteDatail = $values[$inviteType][$uniqueId];
				if($inviteType == 'invite_by_company'){
					if(!empty($inviteDatail['user']) && !empty($inviteDatail['company'])){
						$firstkey = $inviteDatail['company'].'_'.$inviteDatail['user'];					
						if(!isset($firstbidDueDate[$firstkey])){						
							$firstbidDueDate[$firstkey] = ''; 						
						}else{
							$form_state['disable_approval_neededby'][] = $uniqueId;
						}
					}
				}else if($inviteType=='invite_by_email'){
					if(!empty($inviteDatail['user']) && valid_email_address($inviteDatail['user'])){
						$firstkey = $inviteDatail['user'];
						if(!isset($firstbidDueDate[$firstkey])){
							$firstbidDueDate[$firstkey] = ''; 	
						}
						else{
							$form_state['disable_approval_neededby'][] = $uniqueId;
						}						
					}
				}
			}
		}
	}
	//disable approval needed by end
	
  if($triggerElement['#name'] =='workflow_add_company'){
		$firstKey = key($form_state['workflow_storage']);
		$firstInviteType = $form_state['workflow_storage'][$firstKey]['invite_type'];
		$approval_date_time = $form_state['input'][$firstInviteType][$firstKey]['approval_date_time'];		
		$approval_date_time1 = $approval_date_time['date']. ' ' . $approval_date_time['time'];				
		$approval_date_time2 = date("Y-m-d H:i:s", strtotime($approval_date_time1));
		$approval_date_time3 = strtotime($approval_date_time2);
		$neededByDate = (!empty($approval_date_time1)) ? $approval_date_time3 : '';		
        $tempIdentifer = uniqid();
	    $form_state['workflow_storage'][$tempIdentifer]['invite_type'] = 'invite_by_company';
	    $form_state['workflow_storage'][$tempIdentifer]['company_user'] = array(); 
		$form_state['workflow_storage'][$tempIdentifer]['default_needed_by_date'] = $neededByDate; 
	    $form_state['storage_order'][] = $tempIdentifer;
  }else if($triggerElement['#name'] =='workflow_add_email'){
		$firstKey = key($form_state['workflow_storage']);
		$firstInviteType = $form_state['workflow_storage'][$firstKey]['invite_type'];
		$approval_date_time = $form_state['input'][$firstInviteType][$firstKey]['approval_date_time'];
		$approval_date_time1 = $approval_date_time['date']. ' ' . $approval_date_time['time'];				
		$approval_date_time2 = date("Y-m-d H:i:s", strtotime($approval_date_time1));
		$approval_date_time3 = strtotime($approval_date_time2);
		$neededByDate = (!empty($approval_date_time1)) ? $approval_date_time3 : '';
		$tempIdentifer = uniqid();
		$form_state['workflow_storage'][$tempIdentifer]['invite_type'] = 'invite_by_email';
		$form_state['workflow_storage'][$tempIdentifer]['company_user'] = array();
		$form_state['workflow_storage'][$tempIdentifer]['default_needed_by_date'] = $neededByDate;
		$form_state['storage_order'][] = $tempIdentifer;
  }else if($triggerElement['#name'] =='workflow_sort'){
	$values = $form_state['input'];
	$KeyOrder = array();
	$storageOrder = array();
	$checkIn = array('invite_by_company','invite_by_email');
	foreach($checkIn as $delta => $inviteBy){
	  foreach($values[$inviteBy] as $uniqueId => $data){
	    if(isset($data['order'])){
	      $KeyOrder[$uniqueId] = $data['order'];  
	    }
	  }
	}
	_sort_routing_order_by_mapping($KeyOrder,$storageOrder);
	$form_state['storage_order'] = $storageOrder;
  }else if($triggerElement['#name'] =='workflow_copy'){
	 $values = $form_state['input'];
	 /*if(!empty($values['routing-type']) && is_numeric($values['routing-type'])){
	   $originalRoutingTypeNode = node_load($values['routing-type']);
	   $CopiedNode = routing_type_node_clone($originalRoutingTypeNode);
	   $form_state['copied_routing_type'] = $CopiedNode->nid;
	 }*/
  }
	
  $form_state['rebuild'] = TRUE;
}

function _sort_routing_order_by_mapping($orderMapping, &$sortOrderArray){
  asort($orderMapping);	
  $storageOrder = array();
  $orderEmpty = array();
  foreach($orderMapping as $uniqueId => $order){	
    if(is_numeric($order)){
      $storageOrder[] = $uniqueId;  
    }else{
	  $orderEmpty[] = $uniqueId;
    } 
  }
  $sortOrderArray = array_merge($storageOrder, $orderEmpty);
}

function routing_slip_type_change_callback($form, &$form_state){
  $commands = array();
  $commands[] = ajax_command_replace("#workflow-container-section", render($form['workflow_container']));
  $commands[] = ajax_command_replace("#action-container-section", render($form['workflow_action_container']));
  $routingDescription = '';
  $routingProject ='';
  $routingControl = array();
  if(is_numeric($form_state['triggering_element']['#value'])){
	$node = node_load($form_state['triggering_element']['#value']);
	$routingDescription = (isset($node->field_routing_description['und']) && !empty($node->field_routing_description['und'][0]['value']))?$node->field_routing_description['und'][0]['value']:'';
	$routingProject =  (isset($node->field_routings_project['und']) && is_numeric($node->field_routings_project['und'][0]['target_id']))?$node->field_routings_project['und'][0]['target_id']:'';
	$routingSetting =  (isset($node->field_routing_type_setting['und']) && is_numeric($node->field_routing_type_setting['und'][0]['target_id']))?$node->field_routing_type_setting['und'][0]['target_id']:'';
	if(isset($node->field_routing_display_option['und']) && !empty($node->field_routing_display_option['und']) ){
	  $routingControl = $node->field_routing_display_option['und'];
	}
  }
  $controlSelected = FALSE;
  if(!empty($routingControl)){
	foreach($routingControl as $delta => $controlValue){
	  if($controlValue['value'] == 'display_approver_feedback_to_all_approvers'){
		$controlSelected = TRUE;  
	  }
	}  
  }
  $commands[] = mymodule_ajax_command_checkbox_action('input.routing-controls',$controlSelected);  
  $commands[] = ajax_command_invoke('select.select_field_routings_project', 'val' ,array($routingProject));
  $commands[] = ajax_command_invoke('select.select_field_routing_type_setting', 'val' ,array($routingSetting));
  if(is_numeric($routingProject)){
	$commands[] = ajax_command_invoke('select.select_field_routings_project', 'addClass' ,array('form-disabled-field'));  
  }else{
	$commands[] = ajax_command_invoke('select.select_field_routings_project', 'removeClass' ,array('form-disabled-field'));  
  }
  $commands[] = mymodule_ajax_command_insertInCkeditor('.routing-type-description',$routingDescription);  
  return array('#type' => 'ajax','#commands' => $commands);
}

function routing_slip_type_option_change_callback($form, &$form_state){
  $commands = array();
  $commands[] = ajax_command_replace("#workflow-container-section", render($form['workflow_container']));
  $commands[] = ajax_command_replace("#action-container-section", render($form['workflow_action_container']));
  $commands[] = ajax_command_invoke('select.select_field_my_routing', 'val' ,array(''));
  $commands[] = ajax_command_invoke('select.select_field_shared_routing', 'val' ,array(''));
  $commands[] = ajax_command_invoke('select.select_field_routings_project', 'val' ,array(''));
  $commands[] = ajax_command_invoke('.action-container-section', 'show' ,array(''));
  //$commands[] = ajax_command_invoke('input.routing-controls', 'attr' ,array('checked'=>FALSE));
  $commands[] = mymodule_ajax_command_checkbox_action('input.routing-controls',false);
  $commands[] = mymodule_ajax_command_insertInCkeditor('.routing-type-description','');
  return array('#type' => 'ajax','#commands' => $commands);
}

function custom_routing_slip_workflow_submit_handler(&$form,&$form_state){ //drup_msg($form_state);
  $values = $form_state['values'];
	//pre($values,1);
  $inserted_by_roting_type = isset($form_state['inserted_by_roting_type'])?$form_state['inserted_by_roting_type']:array();
  $checkWorkflowIn = array('invite_by_company','invite_by_email');
  $insertOrUpdate= array();
  $routingSlipNode = node_load($values['nid']);
  $field_collection_mapping = $form_state['field_collection_mapping'];
  $fieldCollectionUpdated = array();	
	
	$firstbidDueDate = array();
	if(!empty($form_state['storage_order'])){
		foreach($form_state['storage_order'] as $delta =>$uniqueId){
			$inviteType = $form_state['workflow_storage'][$uniqueId]['invite_type'];
			$inviteDatail = $values[$inviteType][$uniqueId];
			if($inviteType == 'invite_by_company'){
				if(!empty($inviteDatail['user']) && !empty($inviteDatail['company'])){
					$firstkey = $inviteDatail['company'].'_'.$inviteDatail['user'];						
					if(!isset($firstbidDueDate[$firstkey])){								
						$date = $inviteDatail['approval_date_time'];
						$approval_date_time_new =  date('Y-m-d H:i:s', strtotime($date));							
						$firstbidDueDate[$firstkey] = $approval_date_time_new;
					}
				}
			}
			else if($inviteType=='invite_by_email'){
				if(!empty($inviteDatail['user']) && valid_email_address($inviteDatail['user'])){
					$firstkey = $inviteDatail['user'];
					if(!isset($firstbidDueDate[$firstkey])){
						$date = $inviteDatail['approval_date_time'];
						$approval_date_time_new =  date('Y-m-d H:i:s', strtotime($date));
						$firstbidDueDate[$firstkey] = $approval_date_time_new;
					}						
				}
			}
		}
	}

  foreach($checkWorkflowIn as $index => $inviteBy){
	foreach($values[$inviteBy] as $uniqueId => $invitedValue){
	  if(!empty($invitedValue['user'])){
		$type = $companyNidOrEmail =  $userUid = '';
		$type = (in_array($uniqueId, $inserted_by_roting_type))?'routing_type':'routing_owner';  
		if($inviteBy=='invite_by_company'){
		  $companyNidOrEmail = $invitedValue['company'];
		  $userUid = $invitedValue['user'];
		}else{
		  $companyNidOrEmail = $invitedValue['user'];
		}
		if(!empty($companyNidOrEmail)){
			$firstbidDueDateApproval = array();
			if(is_numeric($companyNidOrEmail)){
				$invite_comnid_uid = $companyNidOrEmail.'_'.$userUid;	
				$firstbidDueDateApproval = $firstbidDueDate[$invite_comnid_uid];	
			}
			else
			{
				$firstbidDueDateApproval = $firstbidDueDate[$companyNidOrEmail];	
			}
			
		  if(isset($field_collection_mapping[$uniqueId])){
			$fieldCollectionUpdated[] = $uniqueId;
			$collectionItem = field_collection_item_load($field_collection_mapping[$uniqueId]); 
			$collectionWrapper = entity_metadata_wrapper('field_collection_item', $collectionItem);
			$collectionWrapper->field_routing_company_nid_email->set($companyNidOrEmail);
			$collectionWrapper->field_routing_invited_user_uids->set($userUid);	
			$collectionWrapper->field_approvar_order_id->set(trim($invitedValue['order']));
			$collectionWrapper->field_approval_action->set($invitedValue['action']);
			$collectionWrapper->field_approval_stage->set($invitedValue['approval_stage']);
			$collectionWrapper->field_approval_neededby->set(strtotime($firstbidDueDateApproval));//(strtotime($invitedValue['approval_date_time']));
			$collectionWrapper->save(TRUE); 
		  }else{
		    $collectionItem = entity_create('field_collection_item', array('field_name' => 'field_invited_approvers'));
		    $collectionItem->setHostEntity('node', $routingSlipNode);
		    $collectionWrapper = entity_metadata_wrapper('field_collection_item', $collectionItem);
		    $collectionWrapper->field_routing_company_nid_email->set($companyNidOrEmail);
		    $collectionWrapper->field_routing_invited_user_uids->set($userUid);	
		    $collectionWrapper->field_approval_reminder_count->set(0);
		    $collectionWrapper->field_approvar_order_id->set(trim($invitedValue['order']));
		    $collectionWrapper->field_approval_action->set($invitedValue['action']);
			$collectionWrapper->field_approval_stage->set($invitedValue['approval_stage']);
		    $collectionWrapper->field_approver_invite_by->set($type);
			$collectionWrapper->field_approval_neededby->set(strtotime($firstbidDueDateApproval)); //(strtotime($invitedValue['approval_date_time']));
		    $collectionWrapper->save(TRUE);
		  }
		}
	  }
	}
  }
  $removeFieldCollection = array_diff(array_keys($form_state['field_collection_mapping']), array_values($fieldCollectionUpdated));
  if(!empty($removeFieldCollection)){
	foreach($removeFieldCollection as $index => $deleteUniqueId){
	  $deleteItemId[] = $form_state['field_collection_mapping'][$deleteUniqueId];
	}
	$field_invited_approvers = $routingSlipNode->field_invited_approvers['und'];
	foreach($field_invited_approvers as $delta => $item){
	  if(in_array($item['value'],$deleteItemId)){
	    unset($routingSlipNode->field_invited_approvers['und'][$delta]); 
		entity_delete_multiple('field_collection_item', $item['value']);  
	  }
	}
	$routingSlipNode->field_invited_approvers['und'] = array_values($routingSlipNode->field_invited_approvers['und']);
	node_save($routingSlipNode);
  }
	
}

function custom_routing_slip_workflow_invite_handler(&$form,&$form_state){
  $values = $form_state['values'];
  $routingSlipNid = $values['nid'];
  routing_slip_cron_invite_handler($routingSlipNid);
}

function _get_approver_workflow_data_by_entity_id($entity_id){
  $return = array();
  $query = db_select('node','n');
  $query->leftjoin('field_data_field_invited_approvers','ia','ia.entity_id=n.nid');
  $query->leftjoin('field_data_field_routing_company_nid_email','rcne','rcne.entity_id=ia.field_invited_approvers_value');
  $query->leftjoin('field_data_field_routing_invited_user_uids','riuu','riuu.entity_id=ia.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approvar_order_id','aoi','aoi.entity_id=ia.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_action','aa','aa.entity_id=ia.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approver_invite_by','aib','aib.entity_id=ia.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_stage','fag','fag.entity_id=ia.field_invited_approvers_value');
	$query->leftjoin('field_data_field_approval_neededby','fanb','fanb.entity_id=ia.field_invited_approvers_value');
  $query->fields('n',array('nid','uid'));
  $query->addField('ia','field_invited_approvers_value','field_collection_id');
  $query->addField('aoi','field_approvar_order_id_value','order_id');
  $query->addField('aa','field_approval_action_value','action');
  $query->addField('fag','field_approval_stage_value','approval_stage');
  $query->addField('aib','field_approver_invite_by_value','approver_invite_by');
	$query->addField('fanb','field_approval_neededby_value','approval_needed_by_date');
  $query->fields('rcne',array('field_routing_company_nid_email_value'));
  $query->fields('riuu',array('field_routing_invited_user_uids_value'));
  $query->condition('n.nid',$entity_id,'=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $result = $query->execute()->fetchAll();
  if($result && !empty($result)){
	foreach($result as $delta => $data){
	  if(is_numeric($data->field_routing_company_nid_email_value)){
		$data->company_nid = $data->field_routing_company_nid_email_value;
		$data->user_uid = $data->field_routing_invited_user_uids_value;
		$data->company_email = '';
		$return['invite_by_company'][$data->field_collection_id] = $data;  
	  }else{
		$data->company_nid = '';
		$data->user_uid = '';
		$data->company_email = $data->field_routing_company_nid_email_value;
		$return['invite_by_email'][$data->field_collection_id] = $data; 
	  }
	}
  }
  return $return;	
}



function check_feedback($entity_id){
  global $user, $company;
  $display_to_all = 0;
  $currentUserComapnyDetail= array();
  $routingSlipNode = node_load($entity_id);
  if($user->uid != $routingSlipNode->uid && (isset($routingSlipNode->field_routing_slip_type['und']) && in_array($routingSlipNode->field_routing_slip_type['und'][0]['value'],array('My Routing Type','Shared Routing Type')))){
    $routingTemplate = $routingSlipNode->field_routing_slip_type['und'][0]['value'];
	$routingTypeNid='';
	if($routingTemplate=='My Routing Type'){
      $routingTypeNid = (isset($routingSlipNode->field_my_routing_type['und']) && is_numeric($routingSlipNode->field_my_routing_type['und'][0]['target_id']))?$routingSlipNode->field_my_routing_type['und'][0]['target_id']:'';
	}else{
	  $routingTypeNid = (isset($routingSlipNode->field_shared_routing_type['und']) && is_numeric($routingSlipNode->field_shared_routing_type['und'][0]['target_id']))?$routingSlipNode->field_shared_routing_type['und'][0]['target_id']:'';
	}
	/*if(is_numeric($routingTypeNid)){
	  $routingTypeNode = node_load($routingTypeNid);
	  if(isset($routingTypeNode->field_routing_display_option['und'])){
		foreach($routingTypeNode->field_routing_display_option['und'] as $index1 => $option1){
		  if($option1['value'] == 'display_approver_feedback_to_all_approvers'){
			$display_to_all=1;
			break;  
		  }
		}
	  }
	}*/
  }
  $company_email = db_select('m6connect_og_membership_email','om')->fields('om',array('company_email'))->condition('om.entity_id',$company->nid,'=')->condition('om.user_uid',$user->uid,'=')->execute()->fetchColumn(0);
  $currentUserComapnyDetail = array(
	'company_nid' => $company->nid,
	'comapany_mail' => strtolower($company_email),
	'company_user_uid' => $user->uid,
  );
  
  $rows= array();
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_routing_controls', 'frc', 'n.nid = frc.entity_id AND frc.field_routing_controls_value=:display', array(':display'=>'display_approver_feedback_to_all_approvers'));
  $query->leftJoin('field_data_field_routing_status', 'frs', 'n.nid = frs.entity_id');
  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
 // $query->leftJoin('field_data_field_approval_neededby', 'anb', 'n.nid = anb.entity_id');
  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
  $query->leftJoin('field_data_field_approval_reminder_count', 'rarc', 'ria.field_invited_approvers_value = rarc.entity_id');
  $query->leftjoin('field_data_field_approvar_order_id','aoi','aoi.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_action','aa','aa.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approver_invite_by','aib','aib.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_status','fas','fas.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_is_approvar_notified','ian','ian.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_is_approvar_processed','iap','iap.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_stage','fag','fag.entity_id=ria.field_invited_approvers_value');
	$query->leftjoin('field_data_field_approval_neededby','fanb','fanb.entity_id=ria.field_invited_approvers_value');

	$query->leftJoin('field_data_field_approver_signature', 'rasf', 'ria.field_invited_approvers_value = rasf.entity_id');

  $query->addField('n','uid','node_uid');
  $query->addField('n','nid','node_nid');
  //$query->fields('frc', array('field_routing_controls_value'));
  $query->addExpression('IFNULL(frc.field_routing_controls_value,0)','display_to_all');
  $query->fields('frs',array('field_routing_status_value'));
 // $query->fields('anb',array('field_approval_neededby_value'));
  $query->fields('ria',array('field_invited_approvers_value'));
  $query->fields('rcne',array('field_routing_company_nid_email_value'));
  $query->fields('rcimu',array('field_routing_invited_user_uids_value'));
  $query->addField('aa','field_approval_action_value','action');
  $query->addField('aib','field_approver_invite_by_value','approver_invite_by');
  $query->addField('fas','field_approval_status_value','approval_status');
  $query->addField('fag','field_approval_stage_value','approval_stage');
	$query->fields('fanb',array('field_approval_neededby_value'));
	$query->fields('rasf',array('field_approver_signature_data'));
  $query->fields('rarc',array('field_approval_reminder_count_value'));
  $query->addExpression('IF(aoi.field_approvar_order_id_value=\'\',9999999999,field_approvar_order_id_value)','order_id');
  $query->addExpression('IFNULL(ian.field_is_approvar_notified_value,0)','is_approvar_notified');
  $query->addExpression('IFNULL(iap.field_is_approvar_processed_value,0)','is_approvar_processed');
  $query->condition('n.nid',$entity_id,'=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $query->orderBy('cast(order_id AS UNSIGNED)','ASC');
  $result = $query->execute()->fetchAllAssoc('field_invited_approvers_value'); 
  if($result && !empty($result)){
	$masterOrderIdMapping = array();
	$masterOrderId =0;
	$masterCompanyDetails = array();
	$masterUserDetail = array();
	$mailUsermapping = array();
	$CompanyNid ='';
	$approvalDueDates=array();
	$ApproverStatus = get_user_approval_status_by_entity_id($entity_id);
	$currentTime = time();
    $currentDay = date('Y-m-d');
	foreach($result as $delta => $dataObj){ //drup_msg(pre($dataObj));
	  //$dataObj->display_to_all = $display_to_all;
	  if($user->uid != $routingSlipNode->uid && empty($dataObj->display_to_all)){
		if(is_numeric($dataObj->field_routing_company_nid_email_value)){
		  if($company->nid!=$dataObj->field_routing_company_nid_email_value || (($company->nid==$dataObj->field_routing_company_nid_email_value)&& ($user->uid != $dataObj->field_routing_invited_user_uids_value))){
		    continue;
		  }
		}else if(strtolower($dataObj->field_routing_company_nid_email_value)!=$currentUserComapnyDetail['comapany_mail']){
		  continue;
		}
	  }
	  $managerUids = array();
	  $CompanyDetail ='';
	  $approvalDate ='';
	  $orderId='';
	  $viewFieldCollectionID = $dataObj->field_invited_approvers_value;
	  if(is_numeric($dataObj->field_routing_company_nid_email_value)){
	    $CompanyNid =$dataObj->field_routing_company_nid_email_value;
		$managerUids = trim($dataObj->field_routing_invited_user_uids_value);
		$managerUids = array($managerUids);
		$diffManagerUids = array_diff($managerUids,array_keys($masterUserDetail));
		if(!empty($diffManagerUids)){
		  $diffManagerDetail = get_user_details_by_uids($diffManagerUids,$CompanyNid);
		  $masterUserDetail = array_replace($masterUserDetail,$diffManagerDetail);
		}
	  }else{
			if(in_array($dataObj->field_routing_company_nid_email_value,array_keys($mailUsermapping))){
				$managerUids = array($mailUsermapping[$dataObj->field_routing_company_nid_email_value]['uid']);
				$CompanyNid = $mailUsermapping[$dataObj->field_routing_company_nid_email_value]['compnyNid'];
			}else{
        $company_nid_user_email = trim($dataObj->field_routing_company_nid_email_value);
        $userDetailByMail = _get_comapny_details_by_og_email($company_nid_user_email);
        if(!empty($userDetailByMail)){
          $phone = $userDetailByMail['field_phone_value'];
          $CompanyNid = $userDetailByMail['entity_id'];
          $managerUids = array($userDetailByMail['user_uid']); 
          $masterUserDetail[$userDetailByMail['user_uid']] = array('uid'=>$userDetailByMail['user_uid'],'name'=>$userDetailByMail['realname'],'mail'=>      $company_nid_user_email,'phone'=>$phone);
          $mailUsermapping[$company_nid_user_email] = array('uid'=>$userDetailByMail['user_uid'],'compnyNid'=>$userDetailByMail['entity_id']);
       }
     }
			/*else if($mailUser = user_load_by_mail($dataObj->field_routing_company_nid_email_value)){
				 $phone = (isset($mailUser->field_phone['und']) && !empty($mailUser->field_phone['und'][0]['value']))?$mailUser->field_phone['und'][0]['value']:'';
				 $CompanyNid = _get_user_company_nid($mailUser->uid);
				 $masterUserDetail[$mailUser->uid] = array('uid'=>$mailUser->uid,'name'=>$mailUser->realname,'mail'=>$mailUser->mail,'phone'=>$phone);
				 $mailUsermapping[$mailUser->mail] = array('uid'=>$mailUser->uid,'compnyNid'=>$CompanyNid);
				 $managerUids = array($mailUser->uid);
			} */ 
	  }
	  //Company Detail
	  if(!empty($managerUids)){
		$CompanyDetail = get_routing_company_details_by_nid($CompanyNid,$masterCompanyDetails);
	    if(!$CompanyDetail){
		  $CompanyDetail = array('nid' => '', 'title' => '', 'image' => '');
		}
	  }else{
		$CompanyDetail = array('nid' => '', 'title' => '', 'image' => '');
	  }
	  //Approval Needed By Date
	  $approvalDateValue =$dataObj->field_approval_neededby_value;
		if(!empty($dataObj->field_approval_neededby_value)){
		$approvalDateValue=date('m/d/Y',strtotime($dataObj->field_approval_neededby_value));  
	  }
			
	  if(isset($masterOrderIdMapping[$dataObj->order_id])){
		$orderId = $masterOrderIdMapping[$dataObj->order_id];   
	  }else{
		$masterOrderId++;
		$masterOrderIdMapping[$dataObj->order_id] =  $masterOrderId; 
		$orderId = $masterOrderIdMapping[$dataObj->order_id]; 
	  }
	  $purposeTab='';
	  if($dataObj->action=='N/O'){
		$purposeTab = '<i class="fa fa-info approval-feedback-action-icon" title="Informational"></i>';  
	  }else if($dataObj->action=='A/R'){
		$purposeTab = 'Approval Required'; 
	  }
	  
	  $approvalDate='<div class="approval-needed-by-date margin-bottom-10 test"><strong>'.$approvalDateValue.'</strong></div>';
	  $UserInfoDetails =  get_routing_user_details_feedback($managerUids,$masterUserDetail,$CompanyDetail,$dataObj,$ApproverStatus);
	  $remiderButton = get_request_approval_reminder_button($dataObj);
	  
	  $orderNo = '<div class="text-center">'.$orderId.'</div>';
	  $companyTab = $CompanyDetail['title'] . '<br/>' . $CompanyDetail['image'];
	  $m6notesTab =drupal_render(drupal_get_form('routing_slip_feedback_message_form',$dataObj,$managerUids));
	  $anticipatedDateTab =$remiderButton.$approvalDate;
	  $inviteeTab = $UserInfoDetails['userDetailsTab'];
	  $phoneTab = $UserInfoDetails['userphoneTab'];
	  $acceptApprovalTab = $UserInfoDetails['acceptApprovalTab'];
	  $rejectApprovalTab = $UserInfoDetails['rejectApprovalTab'];
	  $reviewApprovalTab = $UserInfoDetails['reviewApprovalTab'];
	  
	  $viewTdClassMapping = array(0=>' bg-danger',1=>' bg-success',2=>' bg-warning');
	  $viewTdMapping = array(
	    0=>array('selector'=>'approve','class'=>''),
	    1=>array('selector'=>'reject','class'=>''),
	    2=>array('selector'=>'notsure','class'=>''),
	  );
	  if(in_array($dataObj->approval_status,array(0,1,2))){
		$viewTdMapping[$dataObj->approval_status]['class'] = $viewTdClassMapping[$dataObj->approval_status];
	  }
		
		$approval_status_log = get_approval_status_log($entity_id,$viewFieldCollectionID);
		$approval_status_log = '<div class="approval-status-log-list-'.$viewFieldCollectionID.'">'.$approval_status_log.'</div>';
	  
	  $rows[] = array(
	    array('data' => '<div class="text-center">'.$purposeTab.'</div>', 'class' => array('views-field', 'views-field-info')),
		array('data' => $orderNo, 'class' => array('views-field', 'views-field-php-1')),
	    array('data' => $companyTab, 'class' => array('views-field', 'views-field-php')),
	    array('data' => $m6notesTab, 'class' => array('views-field', 'views-field-php-2')),
	    array('data' => $anticipatedDateTab.$approval_status_log, 'class' => array('views-field', 'views-field-php-3','text-center')),
	    array('data' => $inviteeTab, 'class' => array('views-field', 'views-field-php-8')),
	    //array('data' => $phoneTab, 'class' => array('views-field', 'views-field-php-4')),
		array('data' => $dataObj->approval_stage,'class' => array('views-field', 'views-field-php-4')),
		
	    array('data' => $acceptApprovalTab, 'class' => array('views-field', 'views-field-php-5', 'text-center','view-accept-field-'.$viewFieldCollectionID.'-td'.$viewTdMapping[1]['class'])),
	    array('data' => $rejectApprovalTab, 'class' => array('views-field', 'views-field-php-6', 'text-center', 'view-reject-field-'.$viewFieldCollectionID.'-td'.$viewTdMapping[0]['class'])),
	    array('data' => $reviewApprovalTab, 'class' => array('views-field', 'views-field-php-7', 'text-center', 'view-notsure-field-'.$viewFieldCollectionID.'-td'.$viewTdMapping[2]['class'])),
      );
	}
  }
 // print_r($rows);
  return $rows;
}

//routing_accepted_rejected_radio_form

function routing_slip_cron_invite_handler($entity_id){
  global $base_url,$base_path;
  $mail= array();
  $query = db_select('node', 'n');
  $query->join('users','u','u.uid=n.uid');
  $query->join('realname','r','r.uid=u.uid');
  $query->leftJoin('og_membership', 'og', 'og.etid=n.nid AND og.entity_type=:EntityType', array(':EntityType'=>'node'));
  $query->leftJoin('node','c','c.nid=og.gid');
  $query->leftJoin('field_data_field_type_of_company', 'ct', 'c.nid = ct.entity_id');
  $query->leftJoin('field_data_field_routing_status', 'frs', 'n.nid = frs.entity_id');
  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
  $query->leftJoin('field_data_field_approval_neededby', 'anb', 'n.nid = anb.entity_id');
  $query->leftJoin('field_data_field_routing_slip_no', 'frsn', 'n.nid = frsn.entity_id'); 
  $query->leftJoin('field_data_field_routing_access_control', 'frac', 'n.nid = frac.entity_id'); 
  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
  $query->leftJoin('node','invn','invn.nid=rcne.field_routing_company_nid_email_value');
  $query->leftJoin('users','einv','LOWER(rcne.field_routing_company_nid_email_value)=LOWER(einv.mail)');
  $query->leftJoin('realname','einvrel','einvrel.uid=einv.uid');
  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
  $query->leftJoin('users','inv','rcimu.field_routing_invited_user_uids_value=inv.uid');
  $query->leftjoin('m6connect_og_membership_email','ome','ome.user_uid=rcimu.field_routing_invited_user_uids_value AND ome.entity_id=invn.nid');
  $query->leftJoin('realname','invrel','invrel.uid=inv.uid');
  $query->leftjoin('field_data_field_approvar_order_id','aoi','aoi.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_stage','ffas','ffas.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_action','aa','aa.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_is_approvar_notified','ian','ian.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_is_approvar_processed','iap','iap.entity_id=ria.field_invited_approvers_value');
  $query->addField('n','uid','node_uid');
  $query->addField('n','nid','node_nid');
  $query->addField('n','title','node_title');
  $query->fields('og', array('gid'));
  $query->addField('c','title','company_title');
  $query->addField('ct','field_type_of_company_value','company_type');
  $query->addField('u','mail','node_user_email');
  $query->addField('u','timezone','node_user_timezone');
  $query->addField('r','realname','node_user_realname');
  $query->fields('frs',array('field_routing_status_value'));
  $query->fields('frac',array('field_routing_access_control_value'));
  $query->fields('anb',array('field_approval_neededby_value'));
  $query->fields('frsn', array('field_routing_slip_no_value'));
  $query->fields('ria',array('field_invited_approvers_value'));
  $query->fields('rcne',array('field_routing_company_nid_email_value'));
  $query->fields('rcimu',array('field_routing_invited_user_uids_value'));
  $query->addField('invn','title','invite_comapny_name');
  //$query->addField('inv','mail','invite_comapny_mail');
  $query->addField('ome','company_email','invite_comapny_mail');
  $query->addField('invrel','realname','invite_comapny_realname');
  $query->addField('einv','uid','invite_email_uid');
  $query->addField('einvrel','realname','invite_email_realname');
  $query->addField('aa','field_approval_action_value','action');
  $query->addField('ffas','field_approval_stage_value','approval_stage');
  $query->addExpression('IF(aoi.field_approvar_order_id_value=\'\',9999999999,field_approvar_order_id_value)','order_id');
  $query->addExpression('IFNULL(ian.field_is_approvar_notified_value,0)','is_approvar_notified');
  $query->addExpression('IFNULL(iap.field_is_approvar_processed_value,0)','is_approvar_processed');
  $query->condition('n.nid',$entity_id,'=');
  $query->condition('frs.field_routing_status_value','in_route','=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $query->orderBy('cast(order_id AS UNSIGNED)','ASC');
  $result = $query->execute()->fetchAllAssoc('field_invited_approvers_value');
  $routingSlipNodePathAlias = '';
  $orderIdProcessing = '';
  $orderAction ='';
  $approvalRequired =0;
  $newResult= array();
  if($result && !empty($result)){
	$AllRoutingSlipApproved =1;
	foreach($result as $fcItemId => $dataObj) {
	  if($dataObj->field_routing_access_control_value == 'parallel'){
		$approvalRequired=0; 
	  }
	  if($approvalRequired ==1 && $dataObj->order_id!=$orderIdProcessing){
	    break;
	  }
	  $routuingNo = $dataObj->field_routing_slip_no_value;
	  $date_object = new DateObject($dataObj->field_approval_neededby_value, new DateTimeZone('UTC'));
      $date_object->setTimezone(new DateTimeZone($dataObj->node_user_timezone));
      $ApprovalNeededByDate =  date_format_date($date_object, 'custom', 'Y/m/d h:i A T');
	  
	  $newResult[$fcItemId] =$dataObj;
	  if(!is_numeric($orderIdProcessing)){
		$orderIdProcessing = $dataObj->order_id;  
	  }
	  $orderAction = $dataObj->action;
	  if($dataObj->action=='A/R' && $approvalRequired==0 && $dataObj->is_approvar_processed==0){
		$approvalRequired =1;  
	  }
	  if($dataObj->is_approvar_notified==0){
		if(empty($routingSlipNodePathAlias)){
		  $routingSlipNodePathAlias = drupal_lookup_path('alias','node/'.$entity_id);
		  if(empty($routingSlipNodePathAlias)){
			 $routingSlipNodePathAlias = 'node/'.$entity_id; 
		  }
		  $routingSlipNodePathAlias = l('here',$base_url.$base_path.$routingSlipNodePathAlias,array('external'=>TRUE));  
		}
		$massage='';
		$messageSubject='';
		if($dataObj->action == 'A/R'){
		 /* $message='[Routing:ApproverName],<br/><br/>[Routing:OwnerName] [Routing:FromOwnerComapnyName] has requested your approval of the Routing Slip titled [Routing:Title].<p>Please click [Site:SignUplink] to log into M6Connect to see the document(s).</p><p>Thank you,<br/>[Routing:OwnerName]<br/>[Routing:OwnerComapnyName]</p>';
		  $messageSubject ='[Routing:CompanyorApprover] has requested your APPROVAL for the [Routing:Title] is Due by [Routing:ApprovalNeededByDate]';*/
		  $message='[Routing:ApproverName],<br/><br/>[Routing:OwnerName] [Routing:FromOwnerComapnyName] has requested your [Routing:ApprovalStage] APPROVAL for routing slip # [Routing:Number] [Routing:Title] by [Routing:ApprovalNeededByDate].<p>Please click [Site:SignUplink] to log into M6Connect to see the document(s).</p><p>Thank you,<br/>[Routing:OwnerName]<br/>[Routing:OwnerComapnyName]</p>';
		  $messageSubject = 'RS# [Routing:Number] [Routing:Title] - Approval Required';
		  
		}else{
		  $message='[Routing:ApproverName],<br/><br/>[Routing:OwnerName] [Routing:FromOwnerComapnyName] has requested your review of the Routing Slip titled [Routing:Title].   This is a Notification only routing slip and you are not required to approve.<p>Please click [Site:SignUplink] to log into M6Connect to see the document(s).</p><p>Thank you,<br/>[Routing:OwnerName]<br/>[Routing:OwnerComapnyName]</p>';
		  $messageSubject='[Routing:CompanyorApprover] has sent you the [Routing:Title] routing slip - this is for your NOTIFICATION ONLY and it is Due by [Routing:ApprovalNeededByDate]';
		}
		$ApproverName ='';
		$approvermail ='';
		$is_use_mail ='';
		if(is_numeric($dataObj->field_routing_company_nid_email_value)){
		  $ApproverName = $dataObj->invite_comapny_realname; 
		  $approvermail = $dataObj->invite_comapny_mail; 
			$is_use_mail =0; 
		}else{ 
		  if(!empty($dataObj->invite_email_realname)){
			$ApproverName = $dataObj->invite_email_realname; 
		  }else{
			$ApproverName = $dataObj->field_routing_company_nid_email_value;   
		  }
		  $approvermail = $dataObj->field_routing_company_nid_email_value;
			$is_use_mail =1;  
		}
		if(!empty($approvermail)){
		  $replace = array(
			'[Routing:Title]' => trim($dataObj->node_title),
			'[Site:SignUplink]' => $routingSlipNodePathAlias,
			'[Routing:OwnerName]' => $dataObj->node_user_realname,
			'[Routing:OwnerComapnyName]'=> $dataObj->company_title,
			'[Routing:ApproverName]' => $ApproverName,
			'[Routing:FromOwnerComapnyName]'=> 'From '.$dataObj->company_title,
			'[Routing:ApprovalNeededByDate]' => $ApprovalNeededByDate,
			'[Routing:CompanyorApprover]' => $dataObj->company_title, 
			'[Routing:Number]' => $routuingNo,
			'[Routing:ApprovalStage]' => empty($dataObj->approval_stage)?$dataObj->approval_stage:' '.$dataObj->approval_stage,
		  );
		  if($dataObj->company_type == 'individual'){
			$replace['[Routing:OwnerComapnyName]'] =''; 
			$replace['[Routing:FromOwnerComapnyName]'] =''; 
			$replace['[Routing:CompanyorApprover]'] =$replace['[Routing:ApproverName]']; 
		  }
		  $messagebody = str_replace(array_keys($replace),array_values($replace),$message);
		  $params = array(
			'subject' => str_replace(array_keys($replace),array_values($replace),$messageSubject),
			'body' => $messagebody,
			'sender' => $dataObj->node_user_email,
			'language' => language_default(),
			'module' => 'm6connect_misc',
			'key' => 'routing_mail___approval_invite_notify',
			'build' => TRUE,
		  ); 
		  $mail[] = drupal_mail($params['module'], $params['key'], $approvermail, $params['language'], $params);
			
			$m6connect_notification_table_exist = db_table_exists('m6connect_notification');
			if ($m6connect_notification_table_exist) {	
				$m6connect_notification = array(
				'type' => 'routing_slip',
				'event' => 'invite',
				'entity_id' => $dataObj->node_nid,
				'company_nid' => $dataObj->field_routing_company_nid_email_value,
				'message' => NULL,
				'request_from' => $dataObj->node_uid,
				'request_to' => $dataObj->field_routing_invited_user_uids_value,
				'status' => 1,
				'timestamp' => time(),
				);
				
				if(isset($is_use_mail)&& $is_use_mail == 1){
					$ulbm = user_load_by_mail($approvermail);
					$nidOrEmail = $ulbm->uid;
					$gicbu = _get_individual_company_by_uid($nidOrEmail);
					$m6connect_notification['request_to'] = $nidOrEmail;
					$m6connect_notification['company_nid'] = $gicbu;
				}
				
				entity_save('m6connect_notification', (object) $m6connect_notification);
			}
			
		  $collectionItem = field_collection_item_load($dataObj->field_invited_approvers_value);	
		  $collectionWrapper = entity_metadata_wrapper('field_collection_item', $collectionItem);
		  $collectionWrapper->field_is_approvar_notified->set(1);
		  if($dataObj->action == 'N/O'){
			$collectionWrapper->field_is_approvar_processed->set(1); 
			/*if($lastArrayKey == $fcItemId){
		      $node = node_load($entity_id);
		      $node->field_routing_status['und'][0]['value'] ='approved';  
		      node_save($node);
	        } */
		  }
		  $collectionWrapper->save(TRUE);
		}
	  }
	}
  }
}
		  
		  
function routing_slip_cron_invite_handler2($entity_id){
  global $base_url,$base_path;
  $mail= array();
  $query = db_select('node', 'n');
  $query->join('users','u','u.uid=n.uid');
  $query->join('realname','r','r.uid=u.uid');
  $query->leftJoin('og_membership', 'og', 'og.etid=n.nid AND og.entity_type=:EntityType', array(':EntityType'=>'node'));
  $query->leftJoin('node','c','c.nid=og.gid');
  $query->leftJoin('field_data_field_routing_status', 'frs', 'n.nid = frs.entity_id');
  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
  $query->leftJoin('field_data_field_approval_neededby', 'anb', 'n.nid = anb.entity_id');
  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
  $query->leftJoin('node','invn','invn.nid=rcne.field_routing_company_nid_email_value');
  $query->leftJoin('users','einv','LOWER(rcne.field_routing_company_nid_email_value)=LOWER(einv.mail)');
  $query->leftJoin('realname','einvrel','einvrel.uid=einv.uid');
  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
  $query->leftJoin('users','inv','rcimu.field_routing_invited_user_uids_value=inv.uid');
  $query->leftJoin('realname','invrel','invrel.uid=inv.uid');
  $query->leftjoin('field_data_field_approvar_order_id','aoi','aoi.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_action','aa','aa.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_is_approvar_notified','ian','ian.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_is_approvar_processed','iap','iap.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_status','fas','fas.entity_id=ria.field_invited_approvers_value');
  $query->addField('fas','field_approval_status_value','approval_status');
  $query->addField('n','uid','node_uid');
  $query->addField('n','nid','node_nid');
  $query->addField('n','title','node_title');
  $query->fields('og', array('gid'));
  $query->addField('c','title','company_title');
  $query->addField('u','mail','node_user_email');
  $query->addField('r','realname','node_user_realname');
  $query->fields('frs',array('field_routing_status_value'));
  $query->fields('anb',array('field_approval_neededby_value'));
  $query->fields('ria',array('field_invited_approvers_value'));
  $query->fields('rcne',array('field_routing_company_nid_email_value'));
  $query->fields('rcimu',array('field_routing_invited_user_uids_value'));
  $query->addField('invn','title','invite_comapny_name');
  $query->addField('inv','mail','invite_comapny_mail');
  $query->addField('invrel','realname','invite_comapny_realname');
  $query->addField('einv','uid','invite_email_uid');
  $query->addField('einvrel','realname','invite_email_realname');
  $query->addField('aa','field_approval_action_value','action');
  $query->addExpression('IF(aoi.field_approvar_order_id_value=\'\',9999999999,field_approvar_order_id_value)','order_id');
  $query->addExpression('IFNULL(ian.field_is_approvar_notified_value,0)','is_approvar_notified');
  $query->addExpression('IFNULL(iap.field_is_approvar_processed_value,0)','is_approvar_processed');
  $query->condition('n.nid',$entity_id,'=');
  $query->condition('frs.field_routing_status_value','in_route','=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $query->orderBy('cast(order_id AS UNSIGNED)','ASC');
  $result = $query->execute()->fetchAllAssoc('field_invited_approvers_value');
  $routingSlipNodePathAlias = '';
  $orderIdProcessing = '';
  $orderAction ='';
  $approvalRequired =0;
  $newResult= array();
  if($result && !empty($result)){
	foreach($result as $fcItemId => $dataObj) {
	  if($approvalRequired ==1 && $dataObj->order_id!=$orderIdProcessing){
	    break;
	  }
	  $newResult[$fcItemId] =$dataObj;
	  if(!is_numeric($orderIdProcessing)){
		$orderIdProcessing = $dataObj->order_id;  
	  }
	  $orderAction = $dataObj->action;
	  if($dataObj->action=='A/R' && $approvalRequired==0 && $dataObj->is_approvar_processed==0){
		$approvalRequired =1;  
	  }
	}
  }
  kpr($result);
  kpr($newResult);
  die;
}

function routing_slip_create_access_by_user_callback($userUid){
	$comnid = $_SESSION['company'];
	$ruserl = user_load($userUid);
	$return_access = '';
	if(isset($userUid)&& isset($ruserl->field_allow_routing_slip_access['und'])){
		if($ruserl->field_allow_routing_slip_access['und'][0]['value']== 1){
			$nodeUserIndividual = _get_individual_company_by_uid($userUid);
				if($comnid == $nodeUserIndividual){
					$return_access = 1;
				}
			}
		}
	return $return_access;
}

/*function m6connect_routing_views_query_alter(&$view, &$query){
   // global $company;
//	kpr($company);
//only alter the view you mean to
if($view->name == 'routing_slip_center' && $view->current_display == 'page'){
    //create the join field_data_field_invited_approvers
    $join = new views_join();
    $join->table = 'field_data_field_invited_approvers';
    $join->field = 'entity_id';
    $join->left_table = 'node';
    $join->left_field = 'nid';
    $join->type = 'left';
    $view->query->add_relationship('ria',$join,'node');
	//create the join field_data_field_routing_company_nid_email
	$join = new views_join();
    $join->table = 'field_data_field_routing_company_nid_email';
    $join->field = 'entity_id';
    $join->left_table = 'ria';
    $join->left_field = 'field_invited_approvers_value';
    $join->type = 'left';
    $view->query->add_relationship('rcne',$join,'ria');
	//create the join field_data_field_routing_invited_user_uids
	$join = new views_join();
    $join->table = 'field_data_field_routing_invited_user_uids';
    $join->field = 'entity_id';
    $join->left_table = 'ria';
    $join->left_field = 'field_invited_approvers_value';
    $join->type = 'left';
    $view->query->add_relationship('rcimu',$join,'ria');
	//create the join field_data_field_approval_status
	$join = new views_join();
    $join->table = 'field_data_field_approval_status';
    $join->field = 'entity_id';
    $join->left_table = 'ria';
    $join->left_field = 'field_invited_approvers_value';
    $join->type = 'left';
    $view->query->add_relationship('rfas',$join,'ria');
	//create the join field_data_field_approval_action
	$join = new views_join();
    $join->table = 'field_data_field_approval_action';
    $join->field = 'entity_id';
    $join->left_table = 'ria';
    $join->left_field = 'field_invited_approvers_value';
    $join->type = 'left';
    $view->query->add_relationship('rfaa',$join,'ria');
	//create the join field_data_field_approval_action
	$join = new views_join();
    $join->table = 'field_data_field_is_approvar_notified';
    $join->field = 'entity_id';
    $join->left_table = 'ria';
    $join->left_field = 'field_invited_approvers_value';
    $join->type = 'left';
    $view->query->add_relationship('rfan',$join,'ria');
	
	$view->query->add_field('ria','field_invited_approvers_value');
	$view->query->add_field('rcne','field_routing_company_nid_email_value');
	$view->query->add_field('rcimu','field_routing_invited_user_uids_value');
	$view->query->add_field('rfaa','field_approval_action_value');
	$view->query->add_field('rfas','field_approval_status_value');
	
	$view->query->add_groupby('node.nid');
	  
}}*/

function routing_slip_node_clone($originalRoutingSlipNode, $account=NULL) {
  global $user, $company;
  if(!$account){
	$account = $user;  
  }
  //Clone Original Node
  $RoutingSlipNode = clone $originalRoutingSlipNode;
  $RoutingSlipNode->nid = NULL;
  $RoutingSlipNode->is_new = 1;
  $RoutingSlipNode->vid = NULL;
  $RoutingSlipNode->tnid = NULL;
  $RoutingSlipNode->log = NULL;
  $RoutingSlipNode->uuid = NULL;
  $RoutingSlipNode->vuuid = NULL;
  $RoutingSlipNode->name = isset($account->name) ? $account->name : NULL;
  $RoutingSlipNode->uid = $account->uid;
  $RoutingSlipNode->created = NULL;
  $RoutingSlipNode->path = NULL;
  $RoutingSlipNode->files = array();
  $RoutingSlipNode->title = t('Copy of !title', array('!title' => $RoutingSlipNode->title));
  $RoutingSlipNode->og_group_ref['und'][0]['target_id'] = $company->nid;
  $RoutingSlipNode->copy_from_original_nid = $originalRoutingSlipNode->nid;
  unset($RoutingSlipNode->field_routing_serial['und']);
  
  if($company->nid != $RoutingSlipNode->og_group_ref['und'][0]['target_id']){
    unset($RoutingSlipNode->field_routings_project['und']);
  }
  if(isset($originalRoutingSlipNode->field_routing_slip_type['und']) && !empty($originalRoutingSlipNode->field_routing_slip_type['und'][0]['value'])){
	if($originalRoutingSlipNode->field_routing_slip_type['und'][0]['value']=='My Routing Type' && isset($originalRoutingSlipNode->field_my_routing_type['und']) && is_numeric($originalRoutingSlipNode->field_my_routing_type['und'][0]['target_id'])) {
	  $originalRoutingTypeNode = node_load($originalRoutingSlipNode->field_my_routing_type['und'][0]['target_id']);
	  $routingTypeNode = routing_type_node_clone($originalRoutingTypeNode, $account);
	  $RoutingSlipNode->field_my_routing_type['und'][0]['target_id']= $routingTypeNode->nid;
	}else if($originalRoutingSlipNode->field_routing_slip_type['und'][0]['value']=='Shared Routing Type' && isset($originalRoutingSlipNode->field_shared_routing_type['und']) && is_numeric($originalRoutingSlipNode->field_shared_routing_type['und'][0]['target_id'])) {
	  $originalRoutingTypeNode = node_load($originalRoutingSlipNode->field_shared_routing_type['und'][0]['target_id']);
	  $routingTypeNode = routing_type_node_clone($originalRoutingTypeNode, $account);
	  $RoutingSlipNode->field_shared_routing_type['und'][0]['target_id']= $routingTypeNode->nid;
	}
  }
  node_save($RoutingSlipNode);
  
  //Change Field Collection Flags
  if(isset($RoutingSlipNode->field_invited_approvers['und'])){
	foreach($RoutingSlipNode->field_invited_approvers['und'] as $delta => $item){
	  $fieldCollection = field_collection_item_load($item['value']);
	  $collectionWrapper = entity_metadata_wrapper('field_collection_item', $fieldCollection);
	  $collectionWrapper->field_is_approvar_notified->set(0);
	  $collectionWrapper->field_is_approvar_processed->set(0);
	  $collectionWrapper->field_approval_reminder_count->set(0);
	  $collectionWrapper->field_approval_status->set(NULL);
	  $collectionWrapper->save(TRUE);	
	}
  }
  drupal_goto('node/'.$RoutingSlipNode->nid.'/edit');
}

function routing_type_node_clone($originalRoutingTypeNode, $account=NULL) {
  global $user, $company;
  if(!$account){
	$account = $user;  
  }
  //Clone Original Node
  $newRoutingType = clone $originalRoutingTypeNode;
  $newRoutingType->nid = NULL;
  $newRoutingType->is_new = 1;
  $newRoutingType->vid = NULL;
  $newRoutingType->tnid = NULL;
  $newRoutingType->log = NULL;
  $newRoutingType->uuid = NULL;
  $newRoutingType->vuuid = NULL;
  $newRoutingType->name = isset($account->name) ? $account->name : NULL;
  $newRoutingType->uid = $account->uid;
  $newRoutingType->created = NULL;
  $newRoutingType->path = NULL;
  $newRoutingType->files = array();
  $newRoutingType->title = t('Copy of !title', array('!title' => $newRoutingType->title));
  $newRoutingType->og_group_ref['und'][0]['target_id'] = $company->nid;
  $newRoutingType->copy_from_original_nid = $originalRoutingTypeNode->nid;
  if($company->nid != $node->og_group_ref['und'][0]['target_id']){
    unset($newRoutingType->field_routings_project['und']);
  }	
  node_save($newRoutingType);
  if(is_numeric($newRoutingType->nid)){
	$invitedResult = db_select('m6connect_routing_type_invite','rti')->fields('rti')->condition('rti.entity_id',$originalRoutingTypeNode->nid,'=')->execute()->fetchAllAssoc('id'); 
	if($invitedResult && !empty($invitedResult)){
	  foreach($invitedResult as $id => $detail){
		$insertData = (array)$detail;
		unset($insertData['id']);
		$insertData['entity_id'] = $newRoutingType->nid;
		$insertId = db_insert('m6connect_routing_type_invite')->fields($insertData)->execute(); 
	  }
	}
  }
  return $newRoutingType;
}

function routing_slip_content_view_icon($node){
  global $user, $company;
  $output = '';
  $currentTime = time();
  $currentDay = date('Y-m-d');
  $node_field_collection_id='';
  $node_field_collection_action = ''; 
  $node_field_collection_status = '';  
  $is_node_owner=0;
  $userCmpNid = $company->nid;
  $nodeUserCompanyNid = _get_company_nid_by_group_content($node);
  if($userCmpNid && is_numeric($userCmpNid)){
	if($userCmpNid == $nodeUserCompanyNid && $node->uid == $user->uid){
	  $is_node_owner=1;  
	}
	$fieldCollectdetail = routing_slip_node_view_action_callback($node,$userCmpNid,$user);
	//drup_msg($fieldCollectdetail);
	if(!empty($fieldCollectdetail)){
	  $node_field_collection_id = $fieldCollectdetail['field_invited_approvers_value']; 
	  $node_field_collection_action = $fieldCollectdetail['field_approval_action_value']; 
	  $node_field_collection_status = $fieldCollectdetail['field_approval_status_value'];  
	}
  }
  
  if(isset($node->field_approval_neededby['und']) && !empty($node->field_approval_neededby['und'][0]['value'])){
	if(is_null($node_field_collection_status) && $node_field_collection_action=='A/R'){
	  $neededBy = strtotime($node->field_approval_neededby['und'][0]['value']);
	  $neededByDay = date('Y-m-d', $neededBy);
	  $oneDayearlier = strtotime("-1 day", $neededBy);
	  $oneDayearlierDay = date('Y-m-d', $oneDayearlierDay);
	  if(in_array($currentDay,array($oneDayearlierDay,$neededByDay))){
		$output .= '<i class="fa fa-hourglass-half routing-slip-view-icon" title="Approver" style="color:#D6C810;;"></i>';
	  }else if($currentTime<$oneDayearlier){
		$output .= '<i class="fa fa-hourglass-start routing-slip-view-icon" title="Approver" style="color:green;"></i>'; 
	  }else if($currentTime>$neededBy){
		$output .= '<i class="fa fa-hourglass-end routing-slip-view-icon" title="Approver"  style="color:red;"></i>';  
	  }
	}else if($node_field_collection_action=='A/R'){
	   $output .= '<i class="fa fa-hourglass-end routing-slip-view-icon" title="Approver" style="color:green;"></i>'; 
	}else if($node_field_collection_action=='N/O'){
	  $output .= '<i class="fa fa-info routing-slip-view-icon" title="Informational"></i>';  
	}
  }
  if($user->uid == $node->uid){
	$output .= (!empty($output))?'&nbsp;':'';
	$output .= '<i class="fa fa-share routing-slip-view-icon" title="Issuer"></i>';
  }
  $fields= field_get_items('node', $node, 'field_approval_neededby'); 
  $output .= (!empty($output))?'&nbsp;':'';
  $output .= render(field_view_value('node', $node, 'field_approval_neededby',$fields[0] , array('settings' => array('format_type' => 'rfp_due_date'))));
  return $output;
}
//------------------------------------------------------------------------------------------//

function routing_type_settings_form($form,&$form_state){
  global $user, $company;
  $form['#attributes']['class'][] = 'modify-routing-type-settings-form'; 
  
  $form['#attached']['js'][] = array(
    'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing-setting-form.js',
	'type'=>'file'
  );
  $cm = '';
  if(arg(0) == 'program' && !empty(arg(1))){
  	$cm = arg(1);
  }
  if(empty($form_state['rs_save_node_storage'])){
	$form_state['rs_save_node_storage'] = array();  
  }
  $form_state['rs_setting_node_storage'] = array();
  if(empty($form_state['rs_type_storage'])){
	$form_state['rs_type_storage'] = array();
	$RoutingSettingNodes = _get_routing_slip_node_details();
	if($RoutingSettingNodes && !empty($RoutingSettingNodes)){
	  foreach($RoutingSettingNodes as $nid => $settObj){
		$tempIdentifer = uniqid();
	    $form_state['rs_type_storage'][$tempIdentifer]=$nid;
		$form_state['rs_setting_node_storage'][$tempIdentifer] = $settObj; 
		$form_state['rs_save_node_storage'][$tempIdentifer] = $settObj;
	  }
	  $tempIdentifer = uniqid();
	  $form_state['rs_type_storage'][$tempIdentifer]='';
	}
	if(empty($form_state['rs_type_storage'])){
	  $tempIdentifer = uniqid();
	  $form_state['rs_type_storage'][$tempIdentifer]='';
	}
  }
  
  if(isset($form_state['values']) && isset($form_state['input']) && isset($form_state['triggering_element']) && isset($form_state['triggering_element']['#type'])){
	$triggering_element = $form_state['triggering_element'];
	$input = $form_state['input'];
	$values = $form_state['values'];
	if($triggering_element['#type'] == 'textfield' && count($triggering_element['#parents'])==3 && $triggering_element['#parents'][0]=='rstype' && $triggering_element['#parents'][2] == 'type_name'){
	  $lastkey = key( array_slice( $values['rstype'], -1, 1, TRUE ) );
	  $lastrow = $values['rstype'][$lastkey];
	  $typeName = trim($lastrow['type_name']);
	  if(!empty($typeName)){
		$tempIdentifer = uniqid();
	    $form_state['rs_type_storage'][$tempIdentifer]=''; 
	  }
	}
  }
  
  $form['type_container']= array(
    '#type'=>'container',
	'#title' => 'Workflow',
	'#theme' => 'routing_type_theme',
	'#tree' => TRUE,
	'#attributes' => array('class'=>array('rs-type-container-section')),
	'#prefix' => '<div id="rstype-container-section"><div class="rstype-container-label routing-table-label">Customize your Routing Slip types:</div>',
    '#suffix' => '</div>',
	'#process' => array('routing_rs_type_process_callback'),
  );
  
  $form['action_container'] = array(
    '#type'=> 'container',
	'#prefix' => '<div class="action-container-section pull-left">',
	'#suffix' => '</div>',
  );
  $form['cm_type'] = array(
  	'#type' => 'hidden',
  	'#value' => $cm,
  );
  /*$form['action_container']['add_new'] = array(
    '#type'=>'submit',
	'#value' => 'Add New',
	'#name' => 'rstype_add_new',
	'#attributes'=> array('class'=>array('routing-rstype-action','routing-rstype-action-add-new')),
	//"#limit_validation_errors" => array(),
	'#submit'=> array('routing_type_add_new_submit_handler'),
	'#validate' => array('routing_type_setting_rstype_validate_handler'),
	'#ajax' => array(
	  'callback' => 'routing_type_setting_ajax_callback',
	  'wrapper' => 'rstype-container-section',
	  'method' => 'replace',
	  'effect' => 'fade',
	  'progress' => array('type'=> 'throbber', 'message'=> NULL),
	 ),
  	);*/
  
  	$form['action_container']['save']= array(
	  '#type' => 'submit',
	  '#value' => 'Save',
	  '#name' => 'rstype_save',
	  '#attributes'=> array('class'=>array('routing-rstype-action','routing-rstype-action-save')),
	  '#validate' => array('routing_type_setting_rstype_validate_handler'),
	  '#submit' => array('routing_type_setting_rstype_submit_handler'),
	);
	
  $form['routing_setting_type_dialog']= array(
	'#markup' => '<div id="routing-setting-type-dialog"></div>',
  );
  return $form;
}

function routing_rs_type_process_callback($element , &$form_state){
  $storage = $form_state['rs_type_storage'];
  $nodeStorage = $form_state['rs_setting_node_storage'];
  $element['#storage']= $storage;
  $currentDateYear = date('Y');
  foreach($storage as $uniqueId => $settingId){
	$nodevalue = array();
	if(isset($nodeStorage[$uniqueId])){
	  $nodevalue = $nodeStorage[$uniqueId];
	}
	$element['type_name'][$uniqueId]= array(
	  '#type'=> 'textfield',
	  '#title' => 'Routing Slip Type:',
	  '#attributes'=> array('class'=> array('form-control','rs-type-name'),'title' => t('To create your Routing Slip Type under seetings tab contact your company admin .')),
	  '#parents' => array('rstype',$uniqueId,'type_name'),
	  '#default_value' => (isset($nodevalue['type_name']))?$nodevalue['type_name']:'',
	  //'#element_validate'=> array('routings_type_validate'),
	  '#ajax' => array(
	    'callback' => 'add_new_rs_type_row_callback',
		'wrapper' => 'rstype-container-section',
		'method' => 'replace',
		'effect' => 'fade',
	  ),
	);
	  
	$element['type_prefix'][$uniqueId]= array(
	  '#type'=> 'textfield',
	  '#title' => 'Prefix:',
	  '#attributes'=> array('class'=> array('form-control','rs-type-prefix'),'maxlength'=>5,'minlength'=>2),
	  '#parents' => array('rstype',$uniqueId,'type_prefix'),
	  '#size' =>5,
	  '#default_value' => (isset($nodevalue['type_prefix']))?$nodevalue['type_prefix']:'',
	  //'#element_validate'=> array('routings_prefix_validate'),
	);
	$element['type_starting_number'][$uniqueId]= array(
	  '#type'=> 'textfield',
	  '#title' => 'Starting Number:',
	  '#attributes'=> array('class'=> array('form-control','rs-type-starting-number'),'maxlength'=>5,'onkeyup'=>'this.value=this.value.replace(/[^0-9]/g,"");'),
	  '#parents' => array('rstype',$uniqueId,'type_starting_number'),
	  '#size' =>7,
	  '#default_value' => (isset($nodevalue['type_starting_number']))?$nodevalue['type_starting_number']:'',
	  //'#element_validate'=> array('routings_startingnumber_validate'),
	);
	/*$element['type_year_extention'][$uniqueId]= array(
	  '#type'=> 'radios',
	  '#title' => 'Year:',
	  //'#title_display' => 'invisible',
	  '#options'=> array(1=>'Yes',0=>'No'),
	  '#attributes'=> array('class'=> array('rs-type-year-extention')),
	  '#parents' => array('rstype',$uniqueId,'type_year_extention'),
	  '#default_value' => (isset($nodevalue['type_year_extention']))?$nodevalue['type_year_extention']:0,
	);*/
	
	$element['type_starting_number_markup'][$uniqueId]= array(
	  '#type'=> 'textfield',
	  '#title' => '&nbsp;',
	  '#attributes'=> array('class'=> array('form-control','rs-type-starting-number-markup','form-disabled-field'),'data-year'=>'-'.$currentDateYear),
	  '#parents' => array('rstype',$uniqueId,'type_starting_number_markup'),
	  '#default_value' => (isset($nodevalue['type_starting_number_markup']))?$nodevalue['type_starting_number_markup']:'',
	);
	
	$element['remove'][$uniqueId]= array(
	  '#type' => 'submit',
	  '#value' => decode_entities('&#xf014;'),
	  '#name' => 'remove_'.$uniqueId,
	  '#attributes'=> array('style'=> array('font-family:FontAwesome;'),'class'=>array('rs-type-save-submit','remove-routing-type-'.$uniqueId)),
	  '#parents' => array('rstype',$uniqueId,'remove'),
	  "#limit_validation_errors" => array(),
	  '#submit'=> array('routing_type_remove_submit_handler'),
	  '#ajax' => array(
		'callback' => 'routing_type_setting_ajax_remove_callback',
		'wrapper' => 'rstype-container-section',
		'method' => 'replace',
		'effect' => 'fade',
		'event' => 'click',
		'progress' => array('type'=> 'throbber', 'message'=> NULL),
	   ),
	);
	
	/*$element['save'][$uniqueId]= array(
	  '#type' => 'submit',
	  '#value' => decode_entities('&#xf0c7;'),
	  '#name' => 'remove_'.$uniqueId,
	  '#attributes'=> array('style'=> array('font-family:FontAwesome;'),'class'=>array('rs-type-save-submit','save-routing-type-'.$uniqueId)),
	  '#parents' => array('rstype',$uniqueId,'save'),
	  "#limit_validation_errors" => array(
	    array('rstype',$uniqueId,'type_name'),
		array('rstype',$uniqueId,'type_prefix'),
		array('rstype',$uniqueId,'type_starting_number'),
	  ),
	  '#submit'=> array('routing_type_save_submit_handler'),
	  '#ajax' => array(
		'callback' => 'routing_type_setting_ajax_save_callback',
		'wrapper' => 'rstype-container-section',
		'method' => 'replace',
		'effect' => 'fade',
		'event' => 'click',
		'progress' => array('type'=> 'throbber', 'message'=> NULL),
	   ),
	);*/
	
	if(!empty($settingId)){
	  $element['remove'][$uniqueId]['#attributes']['style']='display:none;';
	  $element['remove'][$uniqueId]['#prefix'] = l('<i class="fa fa-trash-o"></i>','javascript:void(0);',array('html'=>TRUE,'external'=>TRUE,'attributes'=>array('class'=>array('rs-type-delete-link','rs-type-save-submit','form-submit'),'id'=>'remove-routing-type-'.$uniqueId)));
    }
  }
  return $element;	
}


function routings_type_validate($element, &$form_state, $form) {
  $identifier = $element['#parents'][1];
  if (empty(trim($element['#value']))) {
    form_error($element, 'Enter Valid Routing Slip Type.');
  }
}

function routings_prefix_validate($element, &$form_state, $form) {
  $value = trim($element['#value']);
  if (empty($value) || strlen($value)<5) {
    form_error($element, 'Enter Valid prefix, must contain 5 character.');
  }
}

function routings_startingnumber_validate($element, &$form_state, $form) {
  $value = trim($element['#value']);
  if (empty($value) || !is_numeric($value)) {
    form_error($element, 'Enter Valid Starting Number.');
  }
}

function remove_routing_setting_ajax_callback($node,$ajax=NULL){
  if ($ajax) {
	ctools_include('ajax');
	ctools_include('modal');
	$form_state = array(
	  'ajax' => TRUE,
	  'entity_id' => $node->nid,
	  'entity_title' => $node->title,
	);
	$output = ctools_modal_form_wrapper('remove_routing_setting_type_form', $form_state);
	if (!empty($form_state['ajax_commands'])) {
	  $output = $form_state['ajax_commands'];
	}
	print ajax_render($output);
	drupal_exit();
  }
  drupal_access_denied();
  drupal_exit();	
}


function theme_routing_type_theme($variables) {
  $element = $variables['form'];
  $output = '';
  $storage = $element['#storage'];
  $header = array('','','','Starting Number','');
  $rows = array();
  foreach($storage as $uniqueId => $settingId){
    $rows[] = array(
	  'data'=> array(
	    array('data'=>drupal_render($element['type_name'][$uniqueId]),'class'=> array('rs-type-name-td')),
		array('data'=>drupal_render($element['type_prefix'][$uniqueId]),'class'=> array('rs-type-prefix-td')),
		array('data'=>drupal_render($element['type_starting_number'][$uniqueId]),'class'=> array('rs-type-starting-number-td')),
		//array('data'=>drupal_render($element['type_year_extention'][$uniqueId]),'class'=> array('rs-type-year-extention-td')),
		array('data'=>drupal_render($element['type_starting_number_markup'][$uniqueId]),'class'=> array('rs-type-number-markup-td')),
		array('data'=>drupal_render($element['remove'][$uniqueId]),'class'=> array('rs-type-save-remove-td','text-center')),
		
	  ),
	); 
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows,'attributes'=> array('class'=> array('routing-workflow-table'))));
  $output .= drupal_render_children($element);
  return $output;
}

function routing_type_add_new_submit_handler(&$form,&$form_state){
  global $user,$company;
  if(isset($form_state['error_elements']) && !empty($form_state['error_elements'])){
	unset($form_state['error_elements']);  
  }else{
	 $values = $form_state['values']['rstype'];
	 $insideNodeSave = 0;
	 foreach($values as $uniqueId => $dataArr){
	   $node ='';
	   $dataArr['type_name'] = trim($dataArr['type_name']);
	   $dataArr['type_prefix'] = trim($dataArr['type_prefix']);
	   $dataArr['type_starting_number'] = trim($dataArr['type_starting_number']);
	   if(empty($form_state['rs_type_storage'][$uniqueId])){
	     $node = new stdClass();
	     $node->type = 'routing_type_setting';
	     node_object_prepare($node);
	     $node->og_group_ref['und'][0]['target_id'] =$company->nid;
	     $node->comment =0;
	     $node->uid = $user->uid; 
	     $node->field_rs_current_number['und'][0]['value']=0; 
	   }else{
		  if(isset($form_state['rs_save_node_storage'][$uniqueId])){
			$nodeValues = $form_state['rs_save_node_storage'][$uniqueId][$form_state['rs_type_storage'][$uniqueId]];
			if($dataArr['type_name']!= $nodeValues['type_name'] || $dataArr['type_prefix']!= $nodeValues['type_prefix'] || $dataArr['type_starting_number']!= $nodeValues['type_starting_number']) {
			  $node = node_load($form_state['rs_type_storage'][$uniqueId]);
			}
		  }	
	   }
	   if(is_object($node)){
	     $node->title = $dataArr['type_name'];
		 $node->field_rs_prifix['und'][0]['value'] = $dataArr['type_prefix'];
		 $node->field_rs_stating_number['und'][0]['value'] = $dataArr['type_starting_number'];
		 //$node->field_year_extention['und'][0]['value'] = ($dataArr['type_year_extention'])?1:0;
		 node_save($node);
		 if(empty($form_state['rs_type_storage'][$uniqueId])){
		   $form_state['rs_type_storage'][$uniqueId] = $node->nid;
		 }
		 $form_state['rs_save_node_storage'][$uniqueId][$node->nid] = array(
		   'nid' => $node->nid,
		   'type_name' => $dataArr['type_name'],
		   'type_prefix' => $dataArr['type_prefix'],
		   'type_starting_number' => $dataArr['type_starting_number'],
		   'type_year_extention' => 0,
		   'type_starting_number_markup' => '',
		   'type_current_number' => ''
		 );
	   }
	 }
	 $tempIdentifer = uniqid();
     $form_state['rs_type_storage'][$tempIdentifer]='';
  }
  $form_state['rebuild'] = TRUE; 
}

function routing_type_remove_submit_handler(&$form,&$form_state){
  $triggering_element = $form_state['triggering_element'];
  $identifier = $triggering_element['#parents'][1];
  if(isset($form_state['rs_type_storage'][$identifier])){
	if(!empty($form_state['rs_type_storage'][$identifier])){
	  $node= node_load($form_state['rs_type_storage'][$identifier]);
	  $node->status =0;
	  node_save($node);	
	}
    unset($form_state['rs_type_storage'][$identifier]);
	
  }
  if(!in_array('',array_values($form_state['rs_type_storage']))){
	$tempIdentifer = uniqid();
    $form_state['rs_type_storage'][$tempIdentifer]='';
  }
  $form_state['rebuild'] = TRUE;	
}

function routing_type_save_submit_handler(&$form,&$form_state){
  global $user,$company;
  $node = '';
  $values = $form_state['values']['rstype'];
  $triggering_element = $form_state['triggering_element'];
  $uniqueId = $triggering_element['#parents'][1];
  $dataArr = $values[$uniqueId];
  $dataArr['type_name'] = trim($dataArr['type_name']);
  $dataArr['type_prefix'] = trim($dataArr['type_prefix']);
  $dataArr['type_starting_number'] = trim($dataArr['type_starting_number']);
  if(empty($form_state['rs_type_storage'][$uniqueId])){
	$node = new stdClass();
	$node->type = 'routing_type_setting';
	node_object_prepare($node);
	$node->og_group_ref['und'][0]['target_id'] =$company->nid;
	$node->comment =0;
	$node->uid = $user->uid; 
	$node->field_rs_current_number['und'][0]['value']=0; 
  }else{
	if(isset($form_state['rs_save_node_storage'][$uniqueId])){
	  $nodeValues = $form_state['rs_save_node_storage'][$uniqueId][$form_state['rs_type_storage'][$uniqueId]];
	  if($dataArr['type_name']!= $nodeValues['type_name'] || $dataArr['type_prefix']!= $nodeValues['type_prefix'] || $dataArr['type_starting_number']!= $nodeValues['type_starting_number']) {
		$node = node_load($form_state['rs_type_storage'][$uniqueId]);
	  }
	}	 
  }
  if(is_object($node)){
	$node->title = $dataArr['type_name'];
	$node->field_rs_prifix['und'][0]['value'] = $dataArr['type_prefix'];
	$node->field_rs_stating_number['und'][0]['value'] = $dataArr['type_starting_number'];
	node_save($node);
	$form_state['rs_type_storage'][$uniqueId] = $node->nid; 
  }	
  if(!in_array('',array_values($form_state['rs_type_storage']))){
	$tempIdentifer = uniqid();
    $form_state['rs_type_storage'][$tempIdentifer]='';
  }
  $form_state['rebuild'] = TRUE;
}



function routing_type_setting_ajax_callback($form, &$form_state){
  $commands = array();
  $commands[] = ajax_command_remove('div.messages--error.messages');
  $commands[] = ajax_command_invoke('.form-type-textfield input.error','removeClass',array('error'));
  if (form_get_errors()) {
	//$form_state['rebuild'] = TRUE;
	if(isset($form_state['error_elements']) && !empty($form_state['error_elements'])){
	  $errorElements = implode(',',$form_state['error_elements']);
	  $commands[] = ajax_command_invoke($errorElements,'addClass',array('error'));	
	}
	$commands[] = ajax_command_prepend('#content div.content-page', theme('status_messages'));  
  }else{
	$commands[] = ajax_command_replace("#rstype-container-section", render($form['type_container']));  
  }
  return array('#type' => 'ajax', '#commands' => $commands);	
}

function routing_type_setting_ajax_remove_callback($form, &$form_state){
  return $form['type_container'];		
}

function add_new_rs_type_row_callback($form, &$form_state){
  return $form['type_container'];
}

function routing_type_setting_ajax_save_callback($form, &$form_state){
  return $form['type_container'];
}

function routing_type_setting_rstype_validate_handler($form,&$form_state){
  $values = $form_state['values']['rstype'];
  $elementErrorCount = array('type_name'=>0,'type_prefix'=>0,'type_starting_number'=>0,'type_year_extention'=>0);
  $form_state['error_elements']= array();
  $lastkey = key( array_slice( $values, -1, 1, TRUE ) );
  foreach($values as $identifier => $elements){
	$type_name = trim($elements['type_name']);
    $type_prefix = trim($elements['type_prefix']);
    $type_starting_number = trim($elements['type_starting_number']);
	if($lastkey == $identifier){
	  if(empty($type_name) && empty($type_prefix) && empty($type_starting_number)){
		continue;  
	  }
	}
    if(empty($type_name)){
	  $message = ($elementErrorCount['type_name']==0)?'Enter Valid Routing Slip Type':'';
	  form_set_error('rstype]['.$identifier.'][type_name',$message);
	  $form_state['error_elements'][] = 'input[name="rstype['.$identifier.'][type_name]"]';	
	  $elementErrorCount['type_name']++;
    } 
	
    if(strlen($type_prefix)<1 || strlen($type_prefix)>5){
	  $message = ($elementErrorCount['type_prefix']==0)?'Enter Valid prefix, must contain 5 characters':'';
	  form_set_error('rstype]['.$identifier.'][type_prefix',$message);
	  $form_state['error_elements'][] = 'input[name="rstype['.$identifier.'][type_prefix]"]';
	  $elementErrorCount['type_prefix']++;
    }
	
    if(!is_numeric($type_starting_number)){
	  $message = ($elementErrorCount['type_starting_number']==0)?'Enter Valid Starting Number':'';
	  form_set_error('rstype]['.$identifier.'][type_starting_number',$message);
	  $form_state['error_elements'][] = 'input[name="rstype['.$identifier.'][type_starting_number]"]';
	  $elementErrorCount['type_starting_number']++;	
    }
	/*$type_year_extention = trim($elements['type_year_extention']);
    if(!is_numeric($type_year_extention)){
	  $message = ($elementErrorCount['type_year_extention']==0)?'Enter select Year':'';
	  form_set_error('rstype]['.$identifier.'][type_year_extention',$message);	
    }*/
  }
}

function routing_type_setting_rstype_submit_handler($form,&$form_state){
  global $user,$company;
  $values = $form_state['values']['rstype'];
  $input = $form_state['input'];
  $cm_type = '';
  if(!empty($input['cm_type'])){
  	$cm_type = $input['cm_type'];
  }
  $lastkey = key( array_slice( $values, -1, 1, TRUE ) );
  foreach($values as $uniqueId => $dataArr){
	$node = '';
	$dataArr['type_name'] = trim($dataArr['type_name']);
	$dataArr['type_prefix'] = trim($dataArr['type_prefix']);
	$dataArr['type_starting_number'] = trim($dataArr['type_starting_number']);
	if(empty($dataArr['type_name']) || empty($dataArr['type_prefix']) || empty($dataArr['type_starting_number'])){
	  continue;	
	}
	if(empty($form_state['rs_type_storage'][$uniqueId])){
	  $node = new stdClass();
	  $node->type = 'routing_type_setting';
	  node_object_prepare($node);
	  $node->og_group_ref['und'][0]['target_id'] =$company->nid;
	  $node->comment =0;
	  $node->uid = $user->uid; 
	  $node->field_rs_current_number['und'][0]['value']=0;
	  $node->field_cm_type['und'][0]['value'] = $cm_type;
	}else{
	  if(isset($form_state['rs_save_node_storage'][$uniqueId])){
	    $nodeValues = $form_state['rs_save_node_storage'][$uniqueId][$form_state['rs_type_storage'][$uniqueId]];
		if($dataArr['type_name']!= $nodeValues['type_name'] || $dataArr['type_prefix']!= $nodeValues['type_prefix'] || $dataArr['type_starting_number']!= $nodeValues['type_starting_number']) {
		  $node = node_load($form_state['rs_type_storage'][$uniqueId]);
		}
      }	 
	}	
	if(is_object($node)){
	  $node->title = $dataArr['type_name'];
	  $node->field_rs_prifix['und'][0]['value'] = $dataArr['type_prefix'];
	  $node->field_rs_stating_number['und'][0]['value'] = $dataArr['type_starting_number'];
	  //$node->field_year_extention['und'][0]['value'] = ($dataArr['type_year_extention'])?1:0;
	  node_save($node);
	}
  }
}

function _get_routing_slip_node_details($nodeNid=''){
  global $user, $company;
  $cm = '';
  if((arg(0) == 'routing-settings' || arg(0) == 'program') && !empty(arg(1))){
  	$cm = arg(1);
  }
  $output = array();
  $query = db_select('node','n');
  $query->leftjoin('og_membership','og','og.etid=n.nid AND og.entity_type=:entityType', array(':entityType'=>'node'));
  $query->leftjoin('field_data_field_rs_prifix','rsp','rsp.entity_id=n.nid');
  $query->leftjoin('field_data_field_rs_stating_number','rsn','rsn.entity_id=n.nid');
  $query->leftjoin('field_data_field_year_extention','rye','rye.entity_id=n.nid');
  $query->leftjoin('field_data_field_rs_current_number','rcn','rcn.entity_id=n.nid');
  $query->leftjoin('field_data_field_cm_type', 'fdfct', 'fdfct.entity_id = n.nid');
  $query->fields('n', array('nid','title'));
  $query->fields('rsp', array('field_rs_prifix_value'));
  $query->fields('rsn', array('field_rs_stating_number_value'));
  $query->fields('rye', array('field_year_extention_value'));
  $query->fields('rcn', array('field_rs_current_number_value'));
  $query->condition('n.status',1,'=');
  //$query->condition('n.uid',$user->uid,'=');
  $query->condition('n.type','routing_type_setting','=');
  $query->condition('og.gid',$company->nid,'=');
  if(is_numeric($nodeNid)){
	$query->condition('n.nid',$nodeNid,'=');  
  }
  if(!empty($cm)){
  	$query->condition('fdfct.field_cm_type_value',$cm,'=');
  }
  $query->orderBy('n.created', 'ASC');
  $result=$query->execute()->fetchAllAssoc('nid');
  if($result && !empty($result)){
	foreach($result as $nid => $obj){
	  //$yearExtended = ($obj->field_year_extention_value)?'-'.date('Y'):'';
	  $yearExtended = '-'.date('Y');
	  $output[$nid] = array(
	    'nid'=> $obj->nid,
	    'type_name' => $obj->title,
		'type_prefix' => $obj->field_rs_prifix_value,
		'type_starting_number' => $obj->field_rs_stating_number_value,
		'type_year_extention' => $obj->field_year_extention_value,
		'type_starting_number_markup' => $obj->field_rs_prifix_value.' '.str_pad($obj->field_rs_stating_number_value, 5, "0", STR_PAD_LEFT).$yearExtended,
		'type_current_number' => $obj->field_rs_current_number_value,
	  );
	}
  }
  return $output;	
}

function get_routing_approval_type_stage($entity){
  global $user, $company;
  $output = array();
  $userEmail = _get_user_company_email($user->uid,$company->nid);
  $userEmail = strtolower($userEmail);
  $isCompanyIndividual = (isset($company->field_type_of_company['und']) && $company->field_type_of_company['und'][0]['value']=='individual')?1:0;
  $query = db_select('node', 'n');
  $query->join('users', 'u', 'u.uid=n.uid');
  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
  $query->leftjoin('field_data_field_approvar_order_id','aoi','aoi.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_action','aa','aa.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_status','fas','fas.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_stage','fag','fag.entity_id=ria.field_invited_approvers_value');
  $query->addField('fas','field_approval_status_value','approval_status');
  $query->addField('aa','field_approval_action_value','approval_action');
  $query->addField('fag','field_approval_stage_value','approval_stage');
  $query->addExpression('IF(aoi.field_approvar_order_id_value=\'\',9999999999,field_approvar_order_id_value)','order_id');
  $query->condition('n.nid',$entity->nid,'=');
  $query->condition('n.type','routing_slip','=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $query->where('(((rcne.field_routing_company_nid_email_value=:companyNid) AND (FIND_IN_SET(:UserUid,rcimu.field_routing_invited_user_uids_value)>0)) or (LOWER(rcne.field_routing_company_nid_email_value)=:companyMail))',array(':companyNid'=>$company->nid,':UserUid'=>$user->uid,':companyMail'=>$userEmail));  
  $query->orderBy('cast(order_id AS UNSIGNED)','ASC');
  $result = $query->execute()->fetchAll();
  if($result && !empty($result)){
	foreach($result as $delta => $dataObj){
	  $approvalType = ($dataObj->approval_action=='A/R')?'Approval Required':'Notification Only';
	  $approvalStage = ($dataObj->approval_stage)?' / '.$dataObj->approval_stage:'';
	  $output[$delta] = '<span class="routing-type-stage-detail">'.$approvalType.$approvalStage.'</span>';
	}
  }
  return implode('<br/>',$output);	
}

function get_routing_approval_type_date_time($entity){
  global $user, $company;
  $output = array();
  $userEmail = _get_user_company_email($user->uid,$company->nid);
  $userEmail = strtolower($userEmail);
  $isCompanyIndividual = (isset($company->field_type_of_company['und']) && $company->field_type_of_company['und'][0]['value']=='individual')?1:0;
  $query = db_select('node', 'n');
  $query->join('users', 'u', 'u.uid=n.uid');
  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
  $query->leftjoin('field_data_field_approvar_order_id','aoi','aoi.entity_id=ria.field_invited_approvers_value');
 	$query->leftjoin('field_data_field_approval_neededby','fanb','fanb.entity_id=ria.field_invited_approvers_value');
  $query->addField('u','timezone','timezone_value');
  $query->addField('fanb','field_approval_neededby_value','approval_date_time');
  $query->addExpression('IF(aoi.field_approvar_order_id_value=\'\',9999999999,field_approvar_order_id_value)','order_id');
  $query->condition('n.nid',$entity->nid,'=');
  $query->condition('n.type','routing_slip','=');
	$query->condition('n.uid',$user->uid,'!=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $query->where('(((rcne.field_routing_company_nid_email_value=:companyNid) AND (FIND_IN_SET(:UserUid,rcimu.field_routing_invited_user_uids_value)>0)) or (LOWER(rcne.field_routing_company_nid_email_value)=:companyMail))',array(':companyNid'=>$company->nid,':UserUid'=>$user->uid,':companyMail'=>$userEmail));  
  $query->orderBy('cast(order_id AS UNSIGNED)','ASC');
  $result = $query->execute()->fetchAll();
  if($result && !empty($result)){
		foreach($result as $delta => $dataObj){
			$date_object = new DateObject($dataObj->approval_date_time, new DateTimeZone('UTC'));
			$date_object->setTimezone(new DateTimeZone($dataObj->timezone_value));
			$ApprovalNeededByDate =  date_format_date($date_object, 'custom', 'M d, Y h:i A T');
			$output[$delta] = '<span class="routing-approval-date-time">'.$ApprovalNeededByDate .'</span>';
		}
  }
  return implode('<br/>',$output);
}


function get_routing_approval_icon($entity_nid,$entity_uid){	
	global $user, $company;
	$is_node_owner=0;
	$node_field_collection_id='';
  $output = array();
  $userEmail = _get_user_company_email($user->uid,$company->nid);
  $userEmail = strtolower($userEmail);
  $isCompanyIndividual = (isset($company->field_type_of_company['und']) && $company->field_type_of_company['und'][0]['value']=='individual')?1:0;
  $query = db_select('node', 'n');
  $query->join('users', 'u', 'u.uid=n.uid');
  $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
  $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
  $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
  $query->leftjoin('field_data_field_approvar_order_id','aoi','aoi.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_action','aa','aa.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_status','fas','fas.entity_id=ria.field_invited_approvers_value');
  $query->leftjoin('field_data_field_approval_stage','fag','fag.entity_id=ria.field_invited_approvers_value');
	$query->leftjoin('field_data_field_approval_neededby','fanb','fanb.entity_id=ria.field_invited_approvers_value');
  $query->addField('u','timezone','timezone_value');
	$query->addField('fanb','field_approval_neededby_value','approval_date_time');
  $query->addField('fas','field_approval_status_value','approval_status');
  $query->addField('aa','field_approval_action_value','approval_action');
  $query->addField('fag','field_approval_stage_value','approval_stage');
  $query->addExpression('IF(aoi.field_approvar_order_id_value=\'\',9999999999,field_approvar_order_id_value)','order_id');
  $query->condition('n.nid',$entity_nid,'=');
  $query->condition('n.type','routing_slip','=');
  $query->isNotNull('rcne.field_routing_company_nid_email_value');
  $query->where('(((rcne.field_routing_company_nid_email_value=:companyNid) AND (FIND_IN_SET(:UserUid,rcimu.field_routing_invited_user_uids_value)>0)) or (LOWER(rcne.field_routing_company_nid_email_value)=:companyMail))',array(':companyNid'=>$company->nid,':UserUid'=>$user->uid,':companyMail'=>$userEmail));  
  $query->orderBy('cast(order_id AS UNSIGNED)','ASC');
	$query->range(0,1);
  $result = $query->execute()->fetchAll();

	$output = '';
	$currentTime = time();
	$currentDay = date('Y-m-d');
	if($result && !empty($result)){
		$node_field_collection_id =1;
		foreach($result as $delta => $dataObj){
			if(isset($dataObj->approval_date_time) && !empty($dataObj->approval_date_time)){
				if(is_null($dataObj->approval_status) && $dataObj->approval_action=='A/R'){
				$neededBy = strtotime($dataObj->approval_date_time);
				$neededByDay = date('Y-m-d', $neededBy);
				$oneDayearlier = strtotime("-1 day", $neededBy);
				$oneDayearlierDay = date('Y-m-d', $oneDayearlier);
					if(in_array($currentDay,array($oneDayearlierDay,$neededByDay))){
						$output .= '<i class="fa fa-hourglass-half routing-slip-listing-icon" title="The Requested Approval Needed by Date is within 24 hours.  Select the Routing Slip and Provide Approval or Ask Questions Now." style="color:#D6C810;"></i>';
					}else if($currentTime<$oneDayearlier){
						$output .= '<i class="fa fa-hourglass-start routing-slip-listing-icon" title="Received a Routing Slip.
" style="color:green;"></i>'; 
					}else if($currentTime>$neededBy){
						$output .= '<i class="fa fa-hourglass-end routing-slip-listing-icon" title="Your Approval Needed by Date is Passed. But Still you can Change the Status of Routing Slip."  style="color:red;"></i>';  
					}
				}else if($dataObj->approval_action=='A/R'){
					$output .= '<i class="fa fa-hourglass-start routing-slip-listing-icon" title="Received a routing slip." style="color:green;">&nbsp;</i><i class="fa fa-check-square-o routing-slip-listing-icon" title="Status has been Changed for this Routing Slip." aria-hidden="true"></i>'; 
				}else if($dataObj->approval_action=='N/O'){
					$output .= '<i class="fa fa-info routing-slip-listing-icon" title="Notification Only"></i>';  
				}
			}
		}
	}
	if($user->uid == $entity_uid){
	  $is_node_owner=1;
		$output .= (!empty($output))?'&nbsp;':'';
		$output .= '<i class="fa fa-share routing-slip-listing-icon" title="Issuer of the Routing Slip."></i>';
	}
	return array('output'=>$output,'is_node_owner'=>$is_node_owner,'node_field_collection_id'=>$node_field_collection_id);
}

function signature_rfp_callback($ajax, $collectionItemId = 0, $companyNid=0) {

  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      //'title' => t('Signature'),
      'collectionItemId' => $collectionItemId,
	  'company_nid' => $companyNid,
    );
    $output = ctools_modal_form_wrapper('signature_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }    
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('signature_form', $collectionItemId,$companyNid);
  }
  //return drupal_get_form('signature_form');
}

function signature_form($form, &$form_state, $collectionItemId=0,$companyNid=0)
{ 
    global $user;
    if(!$collectionItemId){
      $collectionItemId = $form_state['collectionItemId'];
    }
	if(!$companyNid){
      $companyNid = $form_state['company_nid'];
    }
    $userId = '';
    $libpath = libraries_get_path('signature-pad');
    $modpath = drupal_get_path('module', 'signaturefield');
    $roupath = drupal_get_path('module', 'm6connect_routing');
	$themepath = drupal_get_path('theme', 'm6connect');
     $fieldCollection = field_collection_item_load($collectionItemId);
	 $hostEntity = $fieldCollection->hostEntity();
    // get user id and company id
    $companyNidEmail = (isset($fieldCollection->field_routing_company_nid_email['und']) && !empty($fieldCollection->field_routing_company_nid_email['und'][0]['value']))?$fieldCollection->field_routing_company_nid_email['und'][0]['value']:'';

    $userId = (isset($fieldCollection->field_routing_invited_user_uids['und']) && !empty($fieldCollection->field_routing_invited_user_uids['und'][0]['value']))?$fieldCollection->field_routing_invited_user_uids['und'][0]['value']:'';



    if(!empty($companyNidEmail)){
    	
    	if(is_numeric($companyNidEmail))
    	{
    		$companyDetail = _get_comapny_details_by_og_uid_entity_id($userId,$companyNidEmail);
    	}
    	else
    	{
			
			$ucmpUri = '';
			$user_uri = '';
			$title = '';
			$realname ='';
			if($mailUser = user_load_by_mail($companyNidEmail)){
			  $user_uri = (isset($mailUser->field_user_profile_photo['und']) && !empty($mailUser->field_user_profile_photo['und'][0]['uri']))?$mailUser->field_user_profile_photo['und'][0]['uri']:'';
			  $realname = $mailUser->realname;
			}else{
			  $realname = $companyNidEmail; 
			}
			if($companyNid!=0){
			  $cmpNode = node_load($companyNid);
			  $title = $cmpNode->title;
			  $ucmpUri = (isset($mailUser->field_logo['und']) && !empty($mailUser->field_logo['und'][0]['uri']))?$mailUser->field_logo['und'][0]['uri']:'';	
			}
			$companyDetail = array(
			  'company_uri' => $ucmpUri,
			  'user_uri' => $user_uri,
			  'title' => $title,
			  'realname' =>$realname,
			);
			$userId = db_select('m6connect_og_membership_email','omg')->fields('omg',array('user_uid'))->condition('omg.company_email',$companyNidEmail)->execute()->fetchField();
    		//$companyDetail = _get_comapny_details_by_og_email($companyNidEmail);
			
			
    	} 


    $form = array(); 
    $form['main-container']= array(
      '#type' => 'container',
      '#attributes' => array('class'=>array('row')),
      '#prefix' => '<div class="clearfix"><div id="signature_main_container" class="signature-detail">', 
    );

    $form['main-container']['left-container']= array(
      '#type' => 'container',
      '#attributes' => array('class'=>array('col-md-8','col-sm-8','col-xs-8','signature-details-left'),),
    );  
    $form['main-container']['right-container']= array(
      '#type' => 'container',
      '#attributes' => array('class'=>array('col-md-4','col-sm-4','col-xs-4','signature-details-right')),
    );


    $form['main-container']['left-container']['m6-logo'] = array(
    		'#markup' => '<img src="/'.$themepath.'/images/icon-42.png" style="width: 25px;">&nbsp;&nbsp;<span class="sign-routing-header">Signature</span>'
    	);
    $form['main-container']['left-container']['issuer-signature-pad'] = array(
        //'#title' => 'Test Form',
        '#type' => 'signaturefield',
        '#color' => '#000',
        '#width' => 300,
        '#height' => 85,
    );

    // add signature module js and css
    $form['main-container']['left-container']['issuer-signature-pad']['#attached']['js'][] = array(
        'data'=>$libpath.'/assets/flashcanvas.js',
        'type' => 'file',
    );
    $form['main-container']['left-container']['issuer-signature-pad']['#attached']['js'][] = array(
        'data'=>$libpath.'/assets/json2.min.js',
        'type' => 'file',
    );
    $form['main-container']['left-container']['issuer-signature-pad']['#attached']['js'][] = array(
        'data'=>$libpath.'/build/jquery.signaturepad.min.js',
        'type' => 'file',
    );    
    $form['main-container']['left-container']['issuer-signature-pad']['#attached']['js'][] = array(
        'data'=>$modpath.'/signaturefield.js',
        'type' => 'file',
    );
    $form['main-container']['left-container']['issuer-signature-pad']['#attached']['js'][] = array(
        'data'=>array(
            'signaturefield' => array(
              'settings' => array(
                'drawOnly' => TRUE,
                'validateFields' => FALSE,
                'penColour' => '#000',
                'lineTop' => 80,
              ),
            ),
        ),
        'type' => 'setting',
    );
    $form['main-container']['left-container']['issuer-signature-pad']['#attached']['css'][] = array(
        'data'=>$modpath.'/signaturefield.css',
        'type' => 'file',
    );

   

    	if(!empty($companyDetail))
    	{	
    		// company image
    		$companyImageUri = '<img src="/sites/all/themes/m6connect/images/default_company_profile.jpg" style="width:30px;height:30px;">';
    		if(!empty($companyDetail['company_uri'])){
    			$companyImageUri = '<img src="'.image_style_url('user_pic_32x32', $companyDetail['company_uri']).'">';
    		}
    		// user image
    		$userImageUri = '<img src="/sites/default/files/styles/find_people/public/images_13.png" style="width:100px;height:100px;">';
    		if(!empty($companyDetail['user_uri'])){
    			$userImageUri = '<img src="'.image_style_url('thumbnail', $companyDetail['user_uri']).'">';
    		}

    		$form['main-container']['right-container']['company-uri'] = array(
    			'#markup' => '<div class="sign-company-uri">'.$companyImageUri.' &nbsp;<span class="sign-company-title">'.$companyDetail['title'].'</span></div>'
    		); 
    		$form['main-container']['right-container']['user-uri'] = array(
    			'#markup' => '<div class="sign-user-uri margin-bottom-10">'.$userImageUri.'</div>'
    		);  		
    		$form['main-container']['right-container']['user-name'] = array(
    			'#markup' => '<div class="sign-user-name">'.$companyDetail['realname'].'</div>'
    		);    		    		
    	}
    }  
  
    $form['collectionItemId'] = array(
        '#type' => 'value',
        '#value' => $collectionItemId,
    ); 
    $form['userObjId'] = array(
        '#type' => 'value',
        '#value' => $userId,
    );
	$form['node_nid'] = array(
        '#type' => 'value',
        '#value' => $hostEntity->nid,
    );     
    $form['user_uid'] = array(
        '#type' => 'value',
        '#value' => $userId,
    );
    $form['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
        '#weight' => 10,
    );
    $form['submit'] = array(
        '#value' => 'Submit',
        '#type' => 'submit',
    );    
    return $form;
}

function signature_form_submit(&$form, &$form_state) {
	$form_values = $form_state['values'];
    $sign_values = $form_state['values']['issuer-signature-pad'];    
    $form_input = $form_state['input']['issuer-signature-pad'];
    $signature ='';
    if(isset($form_input) && !empty($form_input) && isset($form_values['collectionItemId']) && is_numeric($form_values['collectionItemId'])){
    	// load field collection from collection id
    	$collection = field_collection_item_load($form_values['collectionItemId']);
    	// save signature
	    $collection->field_approver_signature['und'][0] = array(
	      'data' => $sign_values,
	      'color' => '#000',
	      'width' => NULL,
	      'height' => NULL,
	    );
	    // save user id
	    $collection->field_signature_by['und'][0]['value'] = $form_values['userObjId'];
		$collection->field_approval_status['und'][0]['value'] = 1;
		$collection->field_is_approvar_processed['und'][0]['value'] =1;
	    // save complete collection
	    entity_save('field_collection_item', $collection);
	    $signature = '<div class="signature-image">'.theme('signaturefield_display', array('data'=>$sign_values)).'</div>';
		drupal_register_shutdown_function('routing_slip_cron_invite_handler', $form_state['values']['node_nid']);
     } 
    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
    	if(!empty($signature)){
    	  $form_state['ajax_commands'][] = ajax_command_html('#signature-button-'.$form_values['collectionItemId'].'-'.$form_values['userObjId'],$signature);
		 $form_state['ajax_commands'][] = ajax_command_invoke('.view-accept-field-'.$form_values['collectionItemId'].'-td', 'addClass', array('bg-success'));
	     $form_state['ajax_commands'][] = ajax_command_invoke('.view-reject-field-'.$form_values['collectionItemId'].'-td', 'removeClass', array('bg-danger'));
	     $form_state['ajax_commands'][] = ajax_command_invoke('.view-notsure-field-'.$form_values['collectionItemId'].'-td', 'removeClass', array('bg-warning'));
		
		 
		 $form_state['ajax_commands'][] = ajax_command_invoke('.view-accept-field-'.$form_values['collectionItemId'].'-td input[type="radio"]', 'attr',array('checked', 'true'));
		 $form_state['ajax_commands'][] = ajax_command_invoke('.view-reject-field-'.$form_values['collectionItemId'].'-td input[type="radio"]', 'removeAttr', array('checked'));
	     $form_state['ajax_commands'][] = ajax_command_invoke('.view-notsure-field-'.$form_values['collectionItemId'].'-td input[type="radio"]', 'removeAttr', array('checked'));
		 
    	}
        $form_state['ajax_commands'][] = ctools_modal_command_dismiss();     
        //ctools_ajax_command_redirect();
    }
}

function get_approval_status_log($nodeNid,$fieldCollectionId){
  global $user;
  ctools_include('ajax');
  ctools_include('modal');
  $output = '';
  if (db_table_exists('m6connect_routing_approval_status_log')) {
	  $query = db_select('m6connect_routing_approval_status_log', 'mrasl');
		//$query->leftjoin('node','n','n.nid=mrasl.node_nid');
		//$query->join('realname', 'r', 'r.uid=mrasl.user_uid');
		$query->fields('mrasl', array('approval_status', 'timestamp'));
		//$query->fields('n', array('uid'));
		//$query->fields('r', array('realname'));
		$query->condition('mrasl.node_nid', $nodeNid, '=');
		$query->condition('mrasl.fc_item_id', $fieldCollectionId, '=');
		//$query->condition('rfm.approval_type_id', $approvalTypeid, '=');
		$query->orderBy('mrasl.timestamp', 'ASC');
		//$isNodeCompanyUser = in_array($user->uid, _get_current_company_users($node->uid));
		$result = $query->execute()->fetchAll();
	  if ($result && !empty($result)) {
			$approval_status = '';
			foreach ($result as $delta => $Obj) {
				if($Obj->approval_status ==1){
					$approval_status = 'Approved';
				}
				else if($Obj->approval_status ==0){
					$approval_status = 'Rejected';
				}
				else if($Obj->approval_status ==2){
					$approval_status = 'Not Sure Yet';
				}
		  	$output .= '<div class="approval-status-log-sap"><strong>' . date('m/d/Y h:i A', $Obj->timestamp) .'</strong>'.' - '.$approval_status.'</div>';		  
		  }
	  }
  }
  return $output;	
}