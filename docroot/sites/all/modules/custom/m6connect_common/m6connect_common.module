<?php

/**
 * Implements hook_init().
 */
function m6connect_common_init() {
  global $user;
  // get Contification count and send to JS.
  // $notification = _get_user_notification_counts();
  // drupal_add_js(array('m6connect_common' => array('notification_user' => $notification)), 'setting');  
  if(current_path() == 'node/36'){
    drupal_add_css('sites/all/themes/m6connect/css/upgrade-membership-css.css');  
    drupal_add_css('sites/all/themes/m6connect/css/color.css');
    drupal_add_css('sites/all/themes/m6connect/css/mediaqueries.css');
  }
}

/**
 * Implements hook_preprocess_page().
 */
function m6connect_common_preprocess_page(&$vars) {
  global $user;
  global $company;
  
  // Change status of notification which are seen.
  $paths = $paths = array (
      'projects',
      'rfps/received',
      'rfps/bid-received',
      'people/pending',
      'proposals/received',
      'proposals/awarded',
      'proposals/rejected' 
  );
  $currentPath = current_path ();
  if (in_array ( current_path (), $paths ) && db_table_exists ( 'm6connect_notification' )) {
    $currentCompanyNid = _get_user_company_nid ();
    if (in_array ( $currentPath, array (
        'rfps/received',
        'rfps/bid-received' 
    ) )) {
      $event = ($currentPath == 'rfps/received') ? 'invite' : 'bidding';
      $dbor = db_or ();
      $dbor->condition ( 'request_to', $user->uid, '=' )->condition ( 'request_to', $user->mail, '=' );
      $query = db_update ( 'm6connect_notification' );
      $query->fields ( array (
          'status' => 0 
      ) )->condition ( 'status', 1, '=' )->condition ( $dbor )->condition ( 'type', 'rfp', '=' )->condition ( 'event', $event, '=' )->execute ();
    } else if ($currentPath == 'people/pending') {
      $user_groups = og_get_groups_by_user ( $user, 'node' );
      if ($user_groups && ! empty ( $user_groups )) {
        $query = db_update ( 'm6connect_notification' );
        $query->fields ( array (
            'status' => 0 
        ) )->condition ( 'status', 1, '=' )->condition ( 'entity_id', array_values ( $user_groups ), 'IN' )->condition ( 'type', 'people', '=' )->condition ( 'event', 'join', '=' )->execute ();
      }
    } else if ($currentPath == 'projects') {
      if ((isset ( $_REQUEST ['myinterested'] ) && ! empty ( $_REQUEST ['myinterested'] )) || (isset ( $_REQUEST ['collaboration'] ) && ! empty ( $_REQUEST ['collaboration'] ))) {
        $event = (isset ( $_REQUEST ['myinterested'] )) ? 'interest' : 'collabarate';
        $dbor = db_or ();
        $dbor->condition ( 'request_to', $user->uid, '=' )->condition ( 'request_to', $user->mail, '=' );
        $result = $query = db_update ( 'm6connect_notification' );
        $query->fields ( array (
            'status' => 0 
        ) )->condition ( 'status', 1, '=' )->condition ( $dbor )->condition ( 'type', 'project', '=' )->condition ( 'event', $event, '=' )->execute ();
      }
    } else if (in_array ( $currentPath, array (
        'proposals/received',
        'proposals/awarded',
        'proposals/rejected' 
    ) )) {
      $proposalPaths = array (
          'proposals/received' => 'receive',
          'proposals/awarded' => 'awarded',
          'proposals/rejected' => 'rejected' 
      );
      $event = $proposalPaths [$currentPath];
      $dbor = db_or ();
      $dbor->condition ( 'request_to', $user->uid, '=' )->condition ( 'request_to', $user->mail, '=' );
      $result = $query = db_update ( 'm6connect_notification' );
      $query->fields ( array (
          'status' => 0 
      ) )->condition ( 'status', 1, '=' )->condition ( $dbor )->condition ( 'type', 'proposal', '=' )->condition ( 'event', $event, '=' )->execute ();
    }
  }
  if (isset ( $vars ['node'], $vars ['node']->type ) && $vars ['node']->type == 'rfp' && arg ( 0 ) == 'node' && is_numeric ( arg ( 1 ) ) && empty ( arg ( 2 ) )) {
    $vars ['title'] = '';
  }
  
  if (isset ( $vars ['node'], $vars ['node']->type ) && $vars ['node']->type == 'onboarding' && arg ( 0 ) == 'node' && is_numeric ( arg ( 1 ) ) && (empty ( arg ( 2 ) ) || arg ( 2 ) == 'edit')) {
    $vars ['title'] = '';
  }
}

/**
 * Implements hook_menu_link_alter().
 */
function m6connect_common_menu_link_alter(&$item) {
  if (isset ( $item ['original_item'] ) && isset ( $item ['original_item'] ['menu_name'] ) && $item ['original_item'] ['menu_name'] == 'main-menu') {
    $paths = array (
        'companies' => 'notification_organization',
        'projects' => 'notification_project',
        'proposals/sent' => 'notification_proposal',
        'rfps/received' => 'notification_rfp',
        'people/member' => 'notification_people' 
    );
    if (in_array ( $item ['link_path'], array_keys ( $paths ) )) {
      if ((isset ( $item ['options'] ['attributes'] ['class'] ) && ! in_array ( 'main-menu-link-notification', $item ['options'] ['attributes'] ['class'] )) || ! (isset ( $item ['options'] ['attributes'] ['class'] ))) {
        $item ['options'] ['attributes'] ['class'] [] = 'main-menu-link-notification';
      }
      $item ['options'] ['attributes'] ['id'] = $paths [$item ['link_path']];
      $item ['options'] ['html'] = TRUE;
    }
    $item ['options'] ['html'] = TRUE;
  }
}
function remove_admin_setting_after_build($form, &$form_state) {
  // hide($form['additional_settings']);
  // hide($form['revision_information']);
  return $form;
}
function m6connect_common_statuses_save($status, $context, $edit, $options) {
  // $_SESSION['statuses_box_sid'] = $status->sid;
  // pre($status);
  $sid = $status->sid;
  $message = $status->message;
  $timestamp = $status->created;
  $sender = $status->sender;
  $recipient = $status->recipient;
  $type = $status->type;
  
  global $user;
  // $values = $form_state['values'];
  if ($type == 'og') {
    // $statuses_box_sid = $_SESSION['statuses_box_sid'];
    if (db_table_exists ( 'm6connect_notification' )) {
      $m6connect_notification = array (
          'type' => 'share_status',
          'event' => $type,
          'entity_id' => $sid,
          'company_nid' => $recipient,
          'message' => $message,
          'request_from' => $sender,
          'status' => 1,
          'timestamp' => time () 
      );
      $ogNode = node_load ( $recipient );
      if ($ogNode->type == 'connection_categories') {
        $m6connect_notification ['entity_id'] = $sid;
      }
      $ogNodeUsers = _get_company_users_by_group_company ( $ogNode );
      if (! empty ( $ogNodeUsers )) {
        foreach ( $ogNodeUsers as $delta => $memberUid ) {
          if ($user->uid != $memberUid) {
            $m6connect_notification ['request_to'] = $memberUid;
            entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
          }
        }
      }
    }
  } else if ($type == 'user' && $recipient != $user->uid) {
    if (db_table_exists ( 'm6connect_notification' )) {
      $m6connect_notification = array (
          'type' => 'share_status',
          'event' => $type,
          'entity_id' => $sid,
          'company_nid' => 0,
          'message' => $message,
          'request_from' => $sender,
          'status' => 1,
          'request_to' => $recipient,
          'timestamp' => time () 
      );
      entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
    }
  }
}
function m6connect_common_statuses_delete($status, $meta = array()) {
  $m6connect_notification_table_exist = db_table_exists ( 'm6connect_notification' );
  $statuses_id = $status->sid;
  $statuses_type = $status->type;
  if ($m6connect_notification_table_exist) {
    db_delete ( 'm6connect_notification' )->condition ( 'entity_id', $statuses_id )->condition ( 'event', $statuses_type )->execute ();
  }
}
function m6connect_common_fbss_comments_delete($cid) {
  $comment = fbss_comments_load ( $cid );
  $m6connect_notification_table_exist = db_table_exists ( 'm6connect_notification' );
  $comment_id = $comment->sid;
  $comment_uid = $comment->uid;
  $comment_message = $comment->comment;
  if ($m6connect_notification_table_exist) {
    db_delete ( 'm6connect_notification' )->condition ( 'entity_id', $comment_id )->condition ( 'request_from', $comment_uid )->condition ( 'type', 'share_comment' )->condition ( 'message', $comment_message )->execute ();
  }
}

/**
 * Implements hook_form_alter().
 */
function m6connect_common_form_alter(&$form, &$form_state, $form_id) { // pre($form);
  global $user, $company;
  
  $removesAdminSettings = array (
      'groups_node_form',
      'connection_categories_node_form' 
  );
  if (in_array ( $form_id, $removesAdminSettings )) {
    
    $form ['actions'] ['submit'] ['#suffix'] = '<span class="share-close-btn">' . l ( '<input type="button" class="btn cancel-button" value="Cancel" />', 'javascript:void(0);', array (
        'external' => TRUE,
        'html' => TRUE,
        'attributes' => array (
            'class' => array (
                'share-popup-close-link' 
            ),
            'onclick' => 'jQuery("span.popups-close").click();' 
        ) 
    ) ) . '</span>';
    $form ['#after_build'] [] = 'remove_admin_setting_after_build';
  }
  
  if ($form_id == 'views_exposed_form' && $form ['#id'] == 'views-exposed-form-find-people-page') {
    // $form['gid']['#attributes']['class'][] = 'group-id-company';
    // $form['#info']['filter-gid']['label'] ='';
    // $form['gid']['#prefix'] = '<div style="display:none;">';
    // $form['gid']['#suffix'] = '</div>';
    // $options = _get_organigation_mapping_list();
    /*
     * $form['company'] = array(
     * '#type' => 'select',
     * '#title' => 'Company Name',
     * '#empty_option' => '- Select -',
     * '#empty_value' => '',
     * '#options' => $options,
     * '#attributes' =>array('onchange'=>'jQuery(".group-id-company").val(jQuery(this).val());','class'=>array('select-company-dropdown')),
     * );
     * $form['#info']['filter-company'] = array (
     * 'operator' => 'event_company',
     * 'value' => 'company',
     * 'label' => '',
     * 'description' => ''
     * );
     */
  }
  
  if ($form_id == 'statuses_box') {
    
    // print "<pre>"; print_r($form);
    // $form['fbss-status']['#attributes']['class'][] = 'lp-no-resize ng-valid ng-dirty ng-touched';
    
    drupal_add_css ( drupal_get_path ( 'module', 'm6connect_common' ) . '/css/liveurl.css' );
    
    /*
     * $form['#attached']['js'][] = array(
     * 'data'=>drupal_get_path('module', 'm6connect_common') . '/js/linkpreview.min.js',
     * 'type'=>'file'
     * );
     * $form['#attached']['js'][] = array(
     * 'data'=>drupal_get_path('module', 'm6connect_common') . '/js/jquery.liveurl.js',
     * 'type'=>'file'
     * );
     */
    
    // $form['fbss-status']['#field_suffix'] = '<div class="liveurl-loader"></div><div class="liveurl"><div class="close" title="Entfernen"></div><div class="inner"><div class="image"> </div><div class="details"><div class="info"><div class="title"> </div><div class="description"> </div> <div class="url"> </div></div><div class="thumbnail"><div class="pictures"><div class="controls"><div class="prev button inactive"></div><div class="next button inactive"></div><div class="count"><span class="current">0</span><span> von </span><span class="max">0</span></div></div></div></div><div class="video"></div></div></div></div>';
    
    // $form['fbss-status']['#attributes']["ng-model"] = "userTyping";
    // $form['fbss-status']['#prefix'] = '<link-preview bclass="success" limage="demo/img/loader.gif" type="left" class="ng-isolate-scope">';
    // $form['fbss-status']['#suffix'] = '</link-preview>';
    
    $form ['fbss-submit'] ['#submit'] [] = 'custom_statuses_box_submit_handler';
  }
  if (strpos ( $form_id, 'fbss_comments_box_' ) !== FALSE) {
    $form ['comment_sid'] = array (
        '#type' => 'value',
        '#value' => $form ['#sid'] 
    );
    $form ['save-' . $form ['#sid']] ['#submit'] [] = 'custom_fbss_comments_box_submit_handler';
  }
  /* * **to change login form text on button **** */
  if ($form_id == 'user_pass') {
    // drupal_set_message("<pre>".print_r($form,1)."</pre>");
    $form ['actions'] ['submit'] ['#value'] = 'Send Email to Reset Password';
  }
  /* * *******************end**************** */
  /* * ********* Unblock the user after being requested for the password ********** */
  if ($form_id == 'user_pass_reset') {
    if (is_numeric ( arg ( 2 ) )) {
      $userID = arg ( 2 );
      db_delete ( 'flood' )->condition ( 'identifier', db_like ( $userID . '-' ) . '%', 'LIKE' )->execute ();
    }
  }
  /* * ********** change message for 5 time block ************************ */
  if ($form_id == 'user_login') { // pre($form);  
    $form ['#validate'] [2] = 'my_login_final_validate';
    // $form['#submit'][] = 'custom_user_login_redirect_form_submit';
  }
  /* * ********** End Change Lable of All "Add Another Button" *********** */
  
  /* * ********* Start Change Lable of All "Add Another Button" ********** */
  if (in_array ( $form_id, array (
      'organization_node_form',
      'rfp_node_form',
      'project_node_form',
      'routing_slip_node_form' 
  ) )) {
    $form ['#after_build'] [] = 'change_add_more_button_text_after_build';
  }
  /* * ********** End Change Lable of All "Add Another Button" *********** */
  if ($form_id == 'my_proposal_node_form') { // pre($form);
    $is_subcription = is_user_or_company_has_subscription ( $user->uid );
    // $is_subcription = 0;
    // $CompNid = _get_user_company_nid();
    // $CompName = node_load($CompNid)->title;
    $CompName = (is_object ( $company ) && isset ( $company->title )) ? $company->title : '';
    drupal_add_js ( array (
        'm6connect_rfp' => array (
            'is_subscription' => $is_subcription 
        ) 
    ), 'setting' );
    drupal_add_js ( array (
        'm6connect_rfp' => array (
            'mupgrade_dialog_js' => 1 
        ) 
    ), 'setting' );
    $form ['#attached'] ['library'] [] = array (
        'system',
        'ui.dialog' 
    );
    $form ['membership-upgrade-confirm-dialog'] = array (
        '#markup' => '',
        '#prefix' => '<div id="membership-upgrade-confirm">',
        '#suffix' => '</div>' 
    );
    $form ['proposal_company_name'] = array (
        '#type' => 'hidden',
        '#title' => '',
        '#attributes' => array (
            'class' => 'proposal_company_name' 
        ),
        '#value' => $CompName 
    );
    $form ['#validate'] [] = 'custom_my_proposal_validate';
  }
  if ($form_id == 'user_register_form') { // pre($form);
                                          
    // print "<pre>"; print_r($form);
                                          // $form_state['no_cache'] = TRUE;
    
    if (isset ( $form ['field_user_company'] ['und'] ['#options'] )) {
      $options = array (
          '_none' => 'Add Your Company' 
      );
      $type = array (
          'organization' 
      );
      $counter = 0;
      $or = db_or ();
      $query = db_select ( 'node', 'n' );
      $query->fields ( 'n', array (
          'nid' 
      ) );
      $query->condition ( 'type', $type, 'IN' );
      
      // ************************** Start (Not Show Company When they are Inctive) **************************/
      $ic_or = db_or ();
      $query->leftJoin ( 'field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid' );
      $ic_or->condition ( 'ic.field_company_inactive_value', 1, '!=' )->condition ( 'ic.field_company_inactive_value', NULL );
      $query->condition ( $ic_or );
      // *************************** End (Not Show Company When they are Inctive) ***************************/
      // ************************** Start (Show Company When show company active) **************************/
      $query->leftJoin ( 'field_data_field_show_company_in_search', 'isa', 'isa.entity_id = n.nid' );
      $is_or = db_or ();
      // $is_or->condition('isa.field_show_company_in_search_value', 1, '=')->condition();
      $query->condition ( 'isa.field_show_company_in_search_value', 1, '=' );
      // *************************** End (Show Company When show company active) ***************************/
      // ************************** Start (Not Show Company When they are not company type) **************************/
      $query->leftJoin ( 'field_data_field_type_of_company', 'tc', 'tc.entity_id = n.nid' );
      $query->condition ( 'tc.field_type_of_company_value', 'company', '=' );
      // *************************** End (Not Show Company When they are not company type) ***************************/
      $query->orderBy ( 'created', 'DESC' );
      $query->groupBy ( 'n.nid' );
      // $query->limit(15);
      $result = $query->execute ();
      while ( $record = $result->fetchAssoc () ) {
        $compnid = $record ['nid'];
        $node = node_load ( $nid = $compnid, $vid = NULL, $reset = FALSE );
        $options [$compnid] = $node->title;
      }
      $form ['field_user_company'] ['und'] ['#options'] = $options;
      // $form['field_user_company']['und']['#options']['_none'] = 'Add Your Company';
    }
    $form ['#submit'] [] = 'common_cust_user_register_submit';
  }
  if ($form_id == 'user_pass_reset') {
    drupal_set_title ( 'Reset Password' );
    $userObj = user_load ( arg ( 2 ) );
    $timeout = variable_get ( 'user_password_reset_timeout', 86400 );
    $timestamp = arg ( 3 ) + $timeout;
    $form ['message'] ['#markup'] = str_replace ( $userObj->name, $userObj->realname, $form ['message'] ['#markup'] );
    // $form['message']['#markup'] = strstr($form['message']['#markup'], 'expire on', true).'expire on '.format_date($timestamp,'custom','m-d-Y');
    $form ['message'] ['#markup'] = strstr ( $form ['message'] ['#markup'], '', true );
    $form ['help'] ['#markup'] = strstr ( $form ['help'] ['#markup'], '', true );
  }
  if ($form_id == 'node_gallery_gallery_node_form' || $form_id == 'node_gallery_item_node_form') { // pre($form,1);
    drupal_add_css ( '#edit-draft {display:none;}', $option ['type'] = 'inline' );
    $form ['#after_build'] [] = 'custom_comm_form_after_build';
  }
  
  if ($form_id == 'project_node_form') {
    if (empty ( $form ['nid'] ['#value'] )) {
      $form ['field_project_number'] ['#access'] = FALSE;
    } else {
      $form ['field_project_number'] ['#access'] = TRUE;
      $form ['field_project_number'] ['und'] [0] ['value'] ['#required'] = TRUE;
      $form ['field_project_number'] ['und'] [0] ['value'] ['#attributes'] ['maxlength'] = '9';
    }
  }
  
  if ($form_id == 'flood_unblock_settings') {
    $form ['table'] ['#header'] = array_merge ( array_slice ( $form ['table'] ['#header'], 0, 3 + 1 ), array (
        'mail' => 'Email' 
    ), array_slice ( $form ['table'] ['#header'], 3 + 1 ) );
    $table_option = $form ['table'] ['#options'];
    foreach ( $table_option as $key => $value ) {
      $form ['table'] ['#options'] [$key] ['mail'] = '';
      $block_key [] = $key;
      $buser_name_0 = $form ['table'] ['#options'] [$key] ['uid'];
      if (isset ( $buser_name_0 )) {
        $buser_name_1 = explode ( '>', $buser_name_0 );
        $buser_name_2 = explode ( '</a', $buser_name_1 [1] );
        $buser_name = $buser_name_2 [0];
        $bluser = user_load_by_name ( $buser_name );
        $block_username = $bluser->realname;
        $form ['table'] ['#options'] [$key] ['uid'] = '<a href="/user/' . $bluser->uid . '">' . $block_username . '</a>';
        $form ['table'] ['#options'] [$key] ['mail'] = $bluser->mail;
      }
    }
  }
  
  if ($form_id == 'privatemsg_new') {
    $form ['recipient'] ['#description'] = 'Enter the recipient, separate recipients with commas.';
  }
  
  
}

/* * *** Statuses Box Notification **** */
function custom_statuses_box_submit_handler(&$form, &$form_state) {
  /*
   * global $user;
   * $values = $form_state['values'];
   * if ($values['type'] == 'og') {
   * $statuses_box_sid = $_SESSION['statuses_box_sid'];
   * if (db_table_exists('m6connect_notification')) {
   * $m6connect_notification = array(
   * 'type' => 'share_status',
   * 'event' => $values['type'],
   * 'entity_id' => $statuses_box_sid,
   * 'company_nid' => $values['recipient'],
   * 'message' => $values['fbss-status'],
   * 'request_from' => $user->uid,
   * 'status' => 1,
   * 'timestamp' => time(),
   * );
   * $ogNode = node_load($values['recipient']);
   * if ($ogNode->type == 'connection_categories') {
   * $m6connect_notification['entity_id'] = $statuses_box_sid;
   * }
   * $ogNodeUsers = _get_company_users_by_group_company($ogNode);
   * if (!empty($ogNodeUsers)) {
   * foreach ($ogNodeUsers as $delta => $memberUid) {
   * if ($user->uid != $memberUid) {
   * $m6connect_notification['request_to'] = $memberUid;
   * entity_save('m6connect_notification', (object) $m6connect_notification);
   * }
   * }
   * }
   * }
   * } else if ($values['type'] == 'user' && $values['recipient'] != $user->uid) {
   * if (db_table_exists('m6connect_notification')) {
   * $m6connect_notification = array(
   * 'type' => 'share_status',
   * 'event' => $values['type'],
   * 'entity_id' => $form_state['statuses']['sid'],
   * 'company_nid' => 0,
   * 'message' => $values['fbss-status'],
   * 'request_from' => $user->uid,
   * 'status' => 1,
   * 'request_to' => $values['recipient'],
   * 'timestamp' => time(),
   * );
   * entity_save('m6connect_notification', (object) $m6connect_notification);
   * }
   * }
   */
}

/* * *** Statuses Box Comment Notification **** */
function custom_fbss_comments_box_submit_handler(&$form, &$form_state) {
  global $user;
  $values = $form_state ['values'];
  $statuses = statuses_load ( $values ['comment_sid'] );
  if ($statuses && $statuses->type == 'og') {
    $ogNode = node_load ( $statuses->recipient );
    $ogNodeUsers = _get_company_users_by_group_company ( $ogNode );
    $m6connect_notification = array (
        'type' => 'share_comment',
        'event' => $statuses->type,
        'entity_id' => $statuses->sid,
        'company_nid' => $statuses->recipient,
        'message' => $values ['status-comment'],
        'request_from' => $user->uid,
        'status' => 1,
        'timestamp' => time () 
    );
    if ($ogNode->type == 'connection_categories') {
      $m6connect_notification ['entity_id'] = $statuses->sid;
    }
    if (! empty ( $ogNodeUsers )) {
      foreach ( $ogNodeUsers as $delta => $memberUid ) {
        if ($user->uid != $memberUid) {
          $m6connect_notification ['request_to'] = $memberUid;
          entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
        }
      }
    }
  } else if ($statuses && $statuses->type == 'user' && $statuses->recipient != $user->uid) {
    if (db_table_exists ( 'm6connect_notification' )) {
      $m6connect_notification = array (
          'type' => 'share_comment',
          'event' => $statuses->type,
          'entity_id' => $statuses->sid,
          'company_nid' => 0,
          'message' => $values ['status-comment'],
          'request_from' => $user->uid,
          'status' => 1,
          'request_to' => $statuses->recipient,
          'timestamp' => time () 
      );
      entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
    }
  }
}
function custom_user_login_redirect_form_submit(&$form, &$form_state) {
  // Redirects to Dashboard.
  // $form_state['redirect'] = '<front>';
}
function custom_comm_form_after_build($form, &$form_state) { // pre($form);
  $form ['actions'] ['submit'] ['#value'] = 'Save';
  return $form;
}

// Change Lable of All "Add Another Button after build callback"
function change_add_more_button_text_after_build($form, &$form_state) {
  if ($form ['#form_id'] == 'organization_node_form') {
    if (isset ( $form ['field_regions'] ['und'] ['add_more'] ['#value'] )) {
      $form ['field_regions'] ['und'] ['add_more'] ['#value'] = 'Add another Region';
      // $form['field_logo']['und'][0]['#upload_location'] = 'public://tmp/filefield_paths';
      // kpr($form['field_logo']);
    }
    if (isset ( $form ['field_facilities_construction'] ['und'] ['add_more'] ['#value'] )) {
      $form ['field_facilities_construction'] ['und'] ['add_more'] ['#value'] = 'Add another M6 Company Type';
    }
    if (isset ( $form ['field_industry_naicss'] ['und'] ['add_more'] ['#value'] )) {
      $form ['field_industry_naicss'] ['und'] ['add_more'] ['#value'] = 'Add another Industry NAICS';
    }
    if (isset ( $form ['field_products_service_unspsc'] ['und'] ['add_more'] ['#value'] )) {
      $form ['field_products_service_unspsc'] ['und'] ['add_more'] ['#value'] = 'Add another Provided Products & Services UNSPSC';
    }
    if (isset ( $form ['field_needed_products_services'] ['und'] ['add_more'] ['#value'] )) {
      $form ['field_needed_products_services'] ['und'] ['add_more'] ['#value'] = 'Add another Needed Products & Services UNSPSC';
    }
    if (isset ( $form ['field_comp_locations'] ['und'] )) {
      if (isset ( $form ['field_comp_locations'] ['und'] ['add_more'] ['#value'] )) {
        $form ['field_comp_locations'] ['und'] ['add_more'] ['#value'] = 'Add another Location';
      }
      foreach ( $form ['field_comp_locations'] ['und'] as $delta => $field ) {
        if (! is_numeric ( $delta )) {
          continue;
        }
        if (isset ( $form ['field_comp_locations'] ['und'] [$delta] ['field_location_service_regions'] ['und'] ['add_more'] ['#value'] )) {
          $form ['field_comp_locations'] ['und'] [$delta] ['field_location_service_regions'] ['und'] ['add_more'] ['#value'] = 'Add another Service Region';
        }
        if (isset ( $form ['field_comp_locations'] ['und'] [$delta] ['field_location_m6_company_types'] ['und'] ['add_more'] ['#value'] )) {
          $form ['field_comp_locations'] ['und'] [$delta] ['field_location_m6_company_types'] ['und'] ['add_more'] ['#value'] = 'Add another M6 Company Type';
        }
        if (isset ( $form ['field_comp_locations'] ['und'] [$delta] ['field_location_industry_naics'] ['und'] ['add_more'] ['#value'] )) {
          $form ['field_comp_locations'] ['und'] [$delta] ['field_location_industry_naics'] ['und'] ['add_more'] ['#value'] = 'Add another Industry NAICS';
        }
        if (isset ( $form ['field_comp_locations'] ['und'] [$delta] ['field_location_products_services'] ['und'] ['add_more'] ['#value'] )) {
          $form ['field_comp_locations'] ['und'] [$delta] ['field_location_products_services'] ['und'] ['add_more'] ['#value'] = 'Add another Products and Service';
        }
        /*
         * if (isset($form['field_comp_locations']['und'][$delta]['field_location_psc_codes']['und']['add_more']['#value'])) {
         * $form['field_comp_locations']['und'][$delta]['field_location_psc_codes']['und']['add_more']['#value'] = 'Add another PSC Code';
         * }
         */
      }
    }
  } else if ($form ['#form_id'] == 'rfp_node_form') {
    if (isset ( $form ['field_rfp_documents'] ['und'] ['add_more'] ['#value'] )) {
      $form ['field_rfp_documents'] ['und'] ['add_more'] ['#value'] = 'Add another Document';
    }
  } else if ($form ['#form_id'] == 'project_node_form') {
    if (isset ( $form ['field_pro_bidding_info'] ['und'] ['add_more'] ['#value'] )) {
      $form ['field_pro_bidding_info'] ['und'] ['add_more'] ['#value'] = 'Add another Anticipated RFP';
    }
  } else if ($form ['#form_id'] == 'routing_slip_node_form') {
    if (isset ( $form ['field_routing_documents'] ['und'] ['add_more'] ['#value'] )) {
      $form ['field_routing_documents'] ['und'] ['add_more'] ['#value'] = 'Add another Document';
    }
  }
  return $form;
}

/**
 * Implements hook_entity_info().
 */
function m6connect_common_entity_info() {
  $info = array ();
  $info ['m6connect_notification'] = array (
      'label' => t ( 'Notification User' ),
      'base table' => 'm6connect_notification',
      'fieldable' => TRUE,
      'controller class' => 'EntityAPIController',
      'views controller class' => 'EntityDefaultViewsController',
      'entity keys' => array (
          'id' => 'id',
          'label' => 'name' 
      ),
      'bundles' => array (
          'm6connect_notification' => array (
              'label' => t ( 'Notification User' ) 
          ) 
      ) 
  );
  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function m6connect_common_entity_property_info_alter(&$info) {
  $info ['m6connect_notification'] ['properties'] ['request_from'] ['type'] = 'user';
}

/**
 * Implements hook_user_login().
 */
function m6connect_common_user_login(&$edit, $account) {
  // get Notifications for logged in user
  m6connect_company_set_current_company ( $cid = 0, $account->uid );
  
  /* * ******* Start Redirect to DashBoard ******** */
  // Don't redirect on password reset.
  /*
   * $current_menu_item = menu_get_item();
   * if ($current_menu_item['path'] == 'user/reset/%/%/%') {
   * return;
   * }
   * // Redirect user to profile page after the login.
   * $_GET['destination'] = 'dashboard';
   */
  /*if(!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
     $_GET['destination'] = 'dashboard';
  }*/
  //watchdog('testing post ',print_r($_POST['form_id'],1));
  
  if(isset($_POST['form_id']) && ( $_POST['form_id'] == 'user_login')) {
     $_GET['destination'] = 'dashboard';
  }
  
  /* * ******* End Redirect to DashBoard ******** */
}

/**
 * Implements hook_user_insert().
 */
function m6connect_common_user_insert(&$edit, $account, $category) {
  global $company;
  if (isset ( $account->field_user_company ['und'] ) && ! empty ( $account->field_user_company ['und'] [0] ['target_id'] )) {
    $cmpNode = node_load ( $account->field_user_company ['und'] [0] ['target_id'] );
    $m6connect_notification = array (
        'type' => 'people',
        'event' => 'join',
        'entity_id' => $cmpNode->nid,
        'company_nid' => $cmpNode->nid,
        'message' => NULL,
        'request_from' => $account->uid,
        'request_to' => $cmpNode->uid,
        'status' => 1,
        'timestamp' => time () 
    );
    if (db_table_exists ( 'm6connect_notification' )) {
      entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
    }
  }
}

/**
 * Get notifiction count for each event.
 */
/*
 * function _get_user_notification_counts($uid = '') {
 * global $user;
 * $currentUser = $user;
 * if ($uid) {
 * $currentUser = user_load($uid);
 * }
 * $return = array(
 * 'notification_organization' => array('count' => 0),
 * 'notification_project' => array('count' => 0),
 * 'notification_rfp' => array('count' => 0),
 * 'notification_proposal' => array('count' => 0),
 * 'notification_people' => array('count' => 0),
 * 'notification_routing' => array('count' => 0),
 * );
 * $_SESSION['notification_user'] = $return;
 * return $return;
 * }
 *
 * function _get_user_notification_counts_2() {
 * global $user;
 * $return = array(
 * 'notification_organization' => array('count' => 0),
 * 'notification_project' => array('count' => 0),
 * 'notification_rfp' => array('count' => 0),
 * 'notification_proposal' => array('count' => 0),
 * 'notification_people' => array('count' => 0),
 * 'notification_routing' => array('count' => 0),
 * );
 * $notification_or = db_or();
 * $notification_or->condition('mn.request_to', $user->uid, '=')->condition('mn.request_to', $user->mail, '=');
 * $notificatios = db_select('m6connect_notification', 'mn');
 * $notificatios->fields('mn', array('type', 'event'));
 * $notificatios->addExpression('count(mn.event)', 'notification_count');
 * $notificatios->condition('mn.status', 1, '=');
 * $notificatios->condition($notification_or);
 * $notificatios->groupBy('mn.type');
 * $notificatios->groupBy('mn.event');
 * $notificatios = $notificatios->execute()->fetchAll();
 * if ($notificatios && !empty($notificatios)) {
 * foreach ($notificatios as $delta => $data) {
 * $return['notification_' . $data->type]['count'] += $data->notification_count;
 * $return['notification_' . $data->type][$data->event]['count'] = $data->notification_count;
 * }
 * }
 * //$_SESSION['notification_user']= $return;
 * return $return;
 * }
 */

/**
 * Implements hook_flag_flag().
 */
function m6connect_common_flag_flag($flag, $content_id, $account, $flagging) {
  global $user, $company;
  /*
   * echo '<pre>';
   * print_r($flag);
   * die();
   */
  if (($flag->entity_type == 'node' || $flag->entity_type == 'user' || $flag->entity_type == 'field_collection_item') && in_array ( $flag->name, array (
      'interested',
      'project_bidding',
      'rfps_bidding',
      'bookmarks',
      'follow_company',
      'people_bookmark',
      'favourite',
      'spam' 
  ) )) {
    $node = node_load ( $content_id );
    if ($flag->entity_type == 'user') {
      $node->type = 'user';
    } elseif ($flag->entity_type == 'field_collection_item') {
      
      $node->type = 'field_collection_item';
    }
    if (in_array ( $node->type, array (
        'rfp',
        'project',
        'field_pro_bidding_info',
        'organization',
        'my_proposal',
        'user',
        'field_collection_item' 
    ) )) {
      $request_to_cnid = _get_company_nid_by_group_content ( $node->nid );
      
      $m6connect_notification = array (
          'type' => $node->type,
          'event' => NULL,
          'entity_id' => $node->nid,
          'company_nid' => $request_to_cnid,
          'message' => NULL,
          'request_from' => $user->uid,
          'request_to' => $node->uid,
          'status' => 1,
          'timestamp' => time () 
      );
      
      if ($flag->name == 'people_bookmark') {
        $m6connect_notification ['request_to'] = $flagging->entity_id;
      } else {
        $m6connect_notification ['request_to'] = $node->uid;
      }
      
      if ($flag->name == 'project_bidding') {
        $fc = $flagging->entity_id;
        $model = entity_load_single ( 'field_collection_item', $fc );
        $node = $model->hostEntity ();
        $node_id = $node->nid;
        $request_to_cnid = _get_company_nid_by_group_content ( $node_id );
        $node = node_load ( $node_id );
        $m6connect_notification ['entity_id'] = $node_id;
        $m6connect_notification ['type'] = 'project';
        $m6connect_notification ['company_nid'] = $request_to_cnid;
        $m6connect_notification ['request_to'] = $node->uid;
        $collbaratedUids = m6connect_projects_uids_from_list ( $node );
        if (! empty ( $collbaratedUids )) {
          foreach ( $collbaratedUids as $delta => $cuid ) {
            if ($cuid == $node->uid) {
              continue;
            }
            $m6connect_notification_temp = $m6connect_notification;
            $m6connect_notification_temp ['request_to'] = $cuid;
            entity_save ( 'm6connect_notification', ( object ) $m6connect_notification_temp );
          }
        }
      }
      
      if ($flag->name == 'interested') {
        $m6connect_notification ['event'] = 'interest';
        $collbaratedUids = m6connect_projects_uids_from_list ( $node );
        if (! empty ( $collbaratedUids )) {
          foreach ( $collbaratedUids as $delta => $cuid ) {
            if ($cuid == $node->uid) {
              continue;
            }
            $m6connect_notification_temp = $m6connect_notification;
            $m6connect_notification_temp ['request_to'] = $cuid;
            entity_save ( 'm6connect_notification', ( object ) $m6connect_notification_temp );
          }
        }
      } else if (($flag->name == 'bookmarks') && ($m6connect_notification ['type'] == 'organization')) {
        $m6connect_notification ['event'] = 'bookmark';
        $m6connect_notification ['company_nid'] = $m6connect_notification ['entity_id'];
      } else if (($flag->name == 'bookmarks') || ($flag->name == 'people_bookmark')) {
        $m6connect_notification ['event'] = 'bookmark';
      } else if ($flag->name == 'project_bidding') {
        $m6connect_notification ['event'] = 'project_bidding';
      } else if ($flag->name == 'follow_company') {
        $m6connect_notification ['event'] = 'follow';
        $m6connect_notification ['company_nid'] = $node->nid;
      } else if (($flag->name == 'favourite') && ($m6connect_notification ['type'] == 'organization')) {
        $m6connect_notification ['event'] = 'favourite';
        $m6connect_notification ['company_nid'] = $m6connect_notification ['entity_id'];
      } else if ($flag->name == 'favourite') {
        $m6connect_notification ['event'] = 'favourite';
        // $m6connect_notification['company_nid']= $node->nid;
      } else if ($flag->name == 'spam') {
        $m6connect_notification ['event'] = 'spam';
      } else {
        $m6connect_notification ['event'] = 'bidding';
      }
      if (db_table_exists ( 'm6connect_notification' )) {
        entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
      }
    }
  }
}

/**
 * Implements hook_flag_unflag().
 */
function m6connect_common_flag_unflag($flag, $content_id, $account, $flagging) {
  global $user, $company;
  
  // $event = '';
  /*
   * if($flag->entity_type =='node' && in_array($flag->name, array('interested','rfps_bidding',''))){
   * $node = node_load($content_id);
   * if(in_array($node->type,array('rfp','project'))){
   * $event = ($flag->name =='interested')?'interest':'bidding';
   * if(db_table_exists('m6connect_notification')){
   * $query = db_update('m6connect_notification');
   * $query->fields(array('status'=>0))
   * ->condition('status',1,'=')
   * ->condition('request_to', $node->uid, '=')
   * ->condition('request_from', $user->uid, '=')
   * ->condition('type', $node->type, '=')
   * ->condition('entity_id', $node->nid, '=')
   * ->condition('event', $event, '=')
   * ->execute();
   * }
   * }
   * }
   */
  
  if (($flag->entity_type == 'node' || $flag->entity_type == 'user' || $flag->entity_type == 'field_collection_item') && in_array ( $flag->name, array (
      'interested',
      'project_bidding',
      'rfps_bidding',
      'follow_company',
      'people_bookmark',
      'favourite',
      'spam' 
  ) )) {
    $node = node_load ( $content_id );
    if ($flag->entity_type == 'user') {
      $node->type = 'user';
    } elseif ($flag->entity_type == 'field_collection_item') {
      
      $node->type = 'field_collection_item';
    }
    if (in_array ( $node->type, array (
        'rfp',
        'project',
        'field_pro_bidding_info',
        'organization',
        'my_proposal',
        'user',
        'field_collection_item' 
    ) )) {
      $request_to_cnid = _get_company_nid_by_group_content ( $node->nid );
      $m6connect_notification = array (
          'type' => $node->type,
          'event' => NULL,
          'entity_id' => $node->nid,
          'company_nid' => $request_to_cnid,
          'message' => NULL,
          'request_from' => $user->uid,
          'request_to' => $node->uid,
          'status' => 1,
          'timestamp' => time () 
      );
      if ($flag->name == 'people_bookmark') {
        $m6connect_notification ['request_to'] = $flagging->entity_id;
      } else {
        $m6connect_notification ['request_to'] = $node->uid;
      }
      
      if ($flag->name == 'people_bookmark') {
        $m6connect_notification ['event'] = 'unbookmark';
      } else if ($flag->name == 'project_bidding') {
        $fc = $flagging->entity_id;
        $model = entity_load_single ( 'field_collection_item', $fc );
        $node = $model->hostEntity ();
        $node_id = $node->nid;
        $request_to_cnid = _get_company_nid_by_group_content ( $node_id );
        $node = node_load ( $node_id );
        $m6connect_notification ['entity_id'] = $node_id;
        $m6connect_notification ['type'] = 'project';
        $m6connect_notification ['company_nid'] = $request_to_cnid;
        $m6connect_notification ['request_to'] = $node->uid;
        $m6connect_notification ['event'] = 'unproject_bidding';
      } else if ($flag->name == 'follow_company') {
        $m6connect_notification ['event'] = 'unfollow';
        $m6connect_notification ['company_nid'] = $node->nid;
      } else if ($flag->name == 'interested') {
        $m6connect_notification ['event'] = 'uninterest';
      } else if ($flag->name == 'spam') {
        $m6connect_notification ['event'] = 'unspam';
      } else if ($flag->name == 'favourite') {
        $m6connect_notification ['event'] = 'unfavourite';
        // $m6connect_notification['company_nid']= $node->nid;
      }
      if (db_table_exists ( 'm6connect_notification' )) {
        entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
      }
    }
  }
  
  if ($flag->entity_type == 'node' && in_array ( $flag->name, array (
      'bookmarks' 
  ) )) {
    $node = node_load ( $content_id );
    /*
     * drup_msg($flagging);
     * $flag1 = flag_get_flag('bookmarks');
     * $abcd = ($flag1->is_flagged($content_id))?'yes':'no';
     * drup_msg($abcd);
     */
    
    if (in_array ( $node->type, array (
        'rfp',
        'project',
        'my_proposal',
        'organization' 
    ) )) {
      $request_to_cnid = _get_company_nid_by_group_content ( $node->nid );
      $m6connect_notification = array (
          'type' => $node->type,
          'event' => 'unbookmark',
          'entity_id' => $node->nid,
          'company_nid' => $request_to_cnid,
          'message' => NULL,
          'request_from' => $user->uid,
          'request_to' => $node->uid,
          'status' => 1,
          'timestamp' => time () 
      );
      
      /*
       * if($flag->name =='bookmarks'){
       * $m6connect_notification['event']='unbookmark';
       * }
       */
      
      if (($flag->name == 'bookmarks') && ($m6connect_notification ['type'] == 'organization')) {
        $m6connect_notification ['event'] = 'unbookmark';
        $m6connect_notification ['company_nid'] = $m6connect_notification ['entity_id'];
      }
      
      if (db_table_exists ( 'm6connect_notification' )) {
        $result = db_select ( 'm6connect_notification', 'n' )->fields ( 'n' )->orderBy ( 'id', 'DESC' )->execute ()->fetchObject ();
        // drup_msg($result);
        // drup_msg($m6connect_notification);
        //
        if ($result->event == 'unbookmark') {
          if ($m6connect_notification ['type'] == $result->type && $m6connect_notification ['entity_id'] == $result->entity_id && $m6connect_notification ['company_nid'] == $result->company_nid && $m6connect_notification ['request_from'] == $result->request_from && $m6connect_notification ['request_to'] == $result->request_to && $m6connect_notification ['status'] == $result->status) {
          } else {
            // entity_save('m6connect_notification', (object) $m6connect_notification);
          }
        } else {
          entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function m6connect_common_node_insert($node) {
  global $company;
  if ($node->type == 'my_proposal' && db_table_exists ( 'm6connect_notification' ) && $node->status == 1) {
    if (isset ( $node->field_choose_from_the_options_li ['und'] ) && ! empty ( $node->field_choose_from_the_options_li ['und'] [0] ['value'] )) {
      $ProjectRequestNid = (isset ( $node->field_field_sub_proposal_pjt ['und'] ) && ! empty ( $node->field_field_sub_proposal_pjt ['und'] [0] ['target_id'] )) ? $node->field_field_sub_proposal_pjt ['und'] [0] ['target_id'] : '';
      $RfpRequestNid = (isset ( $node->field_submit_proposal_in_respons ['und'] ) && ! empty ( $node->field_submit_proposal_in_respons ['und'] [0] ['target_id'] )) ? $node->field_submit_proposal_in_respons ['und'] [0] ['target_id'] : '';
      
      $ComRequestNid = (isset ( $node->field_submit_proposal_to_company ['und'] ) && ! empty ( $node->field_submit_proposal_to_company ['und'] [0] ['target_id'] )) ? $node->field_submit_proposal_to_company ['und'] [0] ['target_id'] : '';
      
      // pre($node,1);
      
      if (is_numeric ( $ProjectRequestNid ) || is_numeric ( $RfpRequestNid ) || is_numeric ( $ComRequestNid )) {
        
        $m6connect_notification = array (
            'type' => 'proposal',
            'event' => 'receive',
            'entity_id' => $node->nid,
            'company_nid' => $request_to_cnid,
            'message' => NULL,
            'request_from' => $node->uid,
            'request_to' => $requestNode->uid,
            'status' => 1,
            'timestamp' => time () 
        );
        
        if (isset ( $ComRequestNid ) && ! empty ( $ComRequestNid )) {
          $requestNode1 = node_load ( $ComRequestNid );
          $m6connect_notification ['company_nid'] = $ComRequestNid;
          $m6connect_notification ['request_to'] = $requestNode1->uid;
        } else {
          
          $requestNid = ($RfpRequestNid) ? $RfpRequestNid : $ProjectRequestNid;
          $requestNode = node_load ( $requestNid );
          $request_to_cnid = _get_company_nid_by_group_content ( $requestNid );
          
          $m6connect_notification ['company_nid'] = $request_to_cnid;
          $m6connect_notification ['request_to'] = $requestNode->uid;
        }
        
        entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
      }
    }
  }
  
  if (($node->type == 'rfp' || $node->type == 'project') && db_table_exists ( 'm6connect_mandrill_node_status' )) {
    $db_insert = array (
        'nid' => $node->nid,
        'notviewed' => 0,
        'viewed' => 0,
        'failed' => 0,
        'status' => 0,
        'queued' => 0,
        'tstamp' => 0 
    );
    $returnedmetadata = db_insert ( 'm6connect_mandrill_node_status' )->fields ( $db_insert )->execute ();
  }
  
  if ($node->type == 'project' && db_table_exists ( 'm6connect_project_company_initial' ) && isset ( $node->og_group_ref ['und'] ) && ! empty ( $node->og_group_ref ['und'] [0] ['target_id'] )) {
    $cmpInitial = _get_company_initial ( $node->og_group_ref ['und'] [0] ['target_id'] );
    if (! empty ( $cmpInitial )) {
      db_insert ( 'm6connect_project_company_initial' )->fields ( array (
          'project_nid' => $node->nid,
          'company_nid' => $node->og_group_ref ['und'] [0] ['target_id'],
          'company_initial' => $cmpInitial 
      ) )->execute ();
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function m6connect_common_node_update($node) {
  global $company, $user;
  /*
   * if ($node->type == 'organization' && db_table_exists('m6connect_og_membership_email')) {
   * if (isset($node->field_company_email['und']) && !empty($node->field_company_email['und'][0]['email'])) {
   * db_update('m6connect_og_membership_email')->fields(array('company_email' => $node->field_company_email['und'][0]['email']))
   * ->condition('entity_id', $node->nid, '=')->condition('user_uid', $node->uid, '=')->execute();
   * }
   * }
   */
  
  $m6connect_notification_table_exist = db_table_exists ( 'm6connect_notification' );
  if ($node->type == 'my_proposal' && db_table_exists ( 'm6connect_notification' ) && $node->status == 1 && $node->original->status == 0) {
    $requestNode = node_load ( $node->field_submit_proposal_in_respons ['und'] [0] ['target_id'] );
    $request_to_cnid = _get_company_nid_by_group_content ( $requestNode );
    $m6connect_notification = array (
        'type' => 'proposal',
        'event' => 'receive',
        'entity_id' => $node->nid,
        'company_nid' => $request_to_cnid,
        'message' => NULL,
        'request_from' => $node->uid,
        'request_to' => $requestNode->uid,
        'status' => 1,
        'timestamp' => time () 
    );
    entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
  }
  
  /* * **********************noti************** */
  /*
   * if($node->type == 'project'){
   *
   * $sent_notification_datas = _get_invited_user_data_by_entity_id($node->nid);
   * $arr = array();
   * if ($m6connect_notification_table_exist) {
   * foreach($sent_notification_datas as $sent_notification_data){
   * if(is_numeric($sent_notification_data->field_rfp_company_nid_email_value)){
   * if(!empty($sent_notification_data->field_co_invite_manager_uid_value)){
   * $arr[]=$sent_notification_data->field_co_invite_manager_uid_value;
   * $addcomma_arr = implode(',',$arr);
   * $arr_datas = explode(',', $addcomma_arr);
   * foreach($arr_datas as $arr_data){
   * $m6connect_notification = array(
   * 'type' => $node->type,
   * 'event' => 'update',
   * 'entity_id' => $node->nid,
   * 'company_nid' => $sent_notification_data->field_rfp_company_nid_email_value,
   * 'message' => NULL,
   * 'request_from' => $user->uid,
   * 'request_to' => $arr_data,
   * 'status' => 1,
   * 'timestamp' => time(),
   * );
   * entity_save('m6connect_notification', (object) $m6connect_notification);
   * }
   * }
   *
   * }else{
   * $userOject = user_load_by_mail($sent_notification_data->field_rfp_company_nid_email_value);
   * $individualCmpNid = _get_individual_company_by_uid($userOject->uid);
   *
   * $m6connect_notification = array(
   * 'type' => $node->type,
   * 'event' => 'update',
   * 'entity_id' => $node->nid,
   * 'company_nid' => $individualCmpNid,
   * 'message' => NULL,
   * 'request_from' => $user->uid,
   * 'request_to' => $userOject->uid,
   * 'status' => 1,
   * 'timestamp' => time(),
   * );
   * entity_save('m6connect_notification', (object) $m6connect_notification);
   *
   * }
   * }
   * }
   * }
   *
   * if($node->type == 'routing_slip'){
   * $routingSlipnodeNid = $node->nid;
   * $query = db_select('node', 'n');
   * $query->leftJoin('field_data_field_invited_approvers', 'ria', 'n.nid = ria.entity_id');
   * $query->leftJoin('field_data_field_routing_company_nid_email', 'rcne', 'ria.field_invited_approvers_value = rcne.entity_id');
   * $query->leftJoin('field_data_field_routing_invited_user_uids', 'rcimu', 'ria.field_invited_approvers_value = rcimu.entity_id');
   * $query->fields('n',array('uid'));
   * $query->fields('ria',array('field_invited_approvers_value'));
   * $query->fields('rcne',array('field_routing_company_nid_email_value'));
   * $query->fields('rcimu',array('field_routing_invited_user_uids_value'));
   * $query->condition('n.nid',$routingSlipnodeNid,'=');
   * $query->isNotNull('rcne.field_routing_company_nid_email_value');
   * $result = $result = $query->execute()->fetchAll();
   *
   *
   * //$sent_notification_datas = _get_invited_approvers_by_nid($node->nid);
   * $arr = array();
   * if ($m6connect_notification_table_exist) {
   * foreach($result as $sent_notification_data){
   * if(is_numeric($sent_notification_data->field_routing_company_nid_email_value)){
   * if(!empty($sent_notification_data->field_routing_invited_user_uids_value)){
   * $arr[]=$sent_notification_data->field_routing_invited_user_uids_value;
   * $addcomma_arr = implode(',',$arr);
   * $arr_datas = explode(',', $addcomma_arr);
   * foreach($arr_datas as $arr_data){
   * $m6connect_notification = array(
   * 'type' => $node->type,
   * 'event' => 'update',
   * 'entity_id' => $node->nid,
   * 'company_nid' => $sent_notification_data->field_routing_company_nid_email_value,
   * 'message' => NULL,
   * 'request_from' => $user->uid,
   * 'request_to' => $arr_data,
   * 'status' => 1,
   * 'timestamp' => time(),
   * );
   * entity_save('m6connect_notification', (object) $m6connect_notification);
   * }
   * }
   *
   * }else{
   * $userOject = user_load_by_mail($sent_notification_data->field_routing_company_nid_email_value);
   * $individualCmpNid = _get_individual_company_by_uid($userOject->uid);
   *
   * $m6connect_notification = array(
   * 'type' => $node->type,
   * 'event' => 'update',
   * 'entity_id' => $node->nid,
   * 'company_nid' => $individualCmpNid,
   * 'message' => NULL,
   * 'request_from' => $user->uid,
   * 'request_to' => $userOject->uid,
   * 'status' => 1,
   * 'timestamp' => time(),
   * );
   * entity_save('m6connect_notification', (object) $m6connect_notification);
   *
   * }
   * }
   * }
   * }
   */
  
  /* * **********************noti************** */
}

/*
 * Set subscription expiry date when mannually set a user to Silver and Gold service
 */
function m6connect_common_user_update(&$edit, $account, $category) {
  global $user;
  // pre($user->uid); pre($edit); pre($account);
  if ($user->uid != $account->uid) {
    $updatedUserUid = $account->uid;
    $existing_roles = $edit ['original']->roles;
    $updated_roles = $edit ['roles'];
    $result = array_diff_key ( $updated_roles, $existing_roles );
    if (count ( $result ) > 0 && (count ( $updated_roles ) >= count ( $existing_roles ))) {
      $subscribedroles = array ();
      $SilverRole = user_role_load_by_name ( 'Silver Member' );
      $SilverRole_id = $SilverRole ? $SilverRole->rid : NULL;
      $GoldRole = user_role_load_by_name ( 'Gold Member' );
      $GoldRole_id = $GoldRole ? $GoldRole->rid : NULL;
      if ($SilverRole_id) {
        $subscribedroles [] = $SilverRole_id;
      }
      if ($GoldRole_id) {
        $subscribedroles [] = $GoldRole_id;
      }
      foreach ( $result as $k => $v ) {
        if (in_array ( $k, $subscribedroles )) {
          if ($k == $SilverRole_id) {
            // $query = db_select('uc_roles_expirations', 're');
            // $query->fields('re', array('uid'))
            // ->condition('re.uid', $updatedUserUid, '=')
            // ->condition('re.rid', $k, '=');
            // $result = $query->execute()->fetchCol();
            $query = is_alredy_existed_expiration ( $updatedUserUid, $k );
            $result = $query->execute ()->fetchAll ();
            if (! ($result && is_array ( $result ) && ! empty ( $result ) && count ( $result ) > 0)) {
              $tstamp = time ();
              $expiredate = $tstamp + 2592300;
              db_insert ( 'uc_roles_expirations' )->fields ( array (
                  'uid' => $updatedUserUid,
                  'rid' => $k,
                  'expiration' => $expiredate 
              ) )->execute ();
              // insert entry for role expired indication
              $query2 = is_alredy_existed_expiration ( $updatedUserUid, $k );
              $existed = $query2->execute ()->fetchAll ();
              if ($existed && is_array ( $existed ) && ! empty ( $existed ) && count ( $existed ) > 0) {
                foreach ( $existed as $var => $val ) {
                  $reid = $val->reid;
                  $expiration = $val->expiration;
                  $rid = $val->rid;
                }
                db_merge ( 'm6connect_role_expiaration' )->key ( array (
                    'uid' => $updatedUserUid,
                    'rid' => $rid 
                ) )->fields ( array (
                    'uid' => $updatedUserUid,
                    'rid' => $rid,
                    'reid' => $reid,
                    'expiration' => $expiration,
                    'status' => 1 
                ) )->execute ();
              }
              // role exipration indication code end here
            }
          } else if ($k == $GoldRole_id) {
            // $query = db_select('uc_roles_expirations', 're');
            // $query->fields('re', array('uid'))
            // ->condition('re.uid', $updatedUserUid, '=')
            // ->condition('re.rid', $k, '=');
            // $result = $query->execute()->fetchCol();
            $query = is_alredy_existed_expiration ( $updatedUserUid, $k );
            $result = $query->execute ()->fetchAll ();
            if (! ($result && is_array ( $result ) && ! empty ( $result ) && count ( $result ) > 0)) {
              $tstamp = time ();
              // $expiredate = $tstamp + (2592300*365);
              $expiredate = $tstamp + 31536000;
              db_insert ( 'uc_roles_expirations' )->fields ( array (
                  'uid' => $updatedUserUid,
                  'rid' => $k,
                  'expiration' => $expiredate 
              ) )->execute ();
              // insert entry for role expired indication
              $query2 = is_alredy_existed_expiration ( $updatedUserUid, $k );
              $existed = $query2->execute ()->fetchAll ();
              if ($existed && is_array ( $existed ) && ! empty ( $existed ) && count ( $existed ) > 0) {
                foreach ( $existed as $var => $val ) {
                  $reid = $val->reid;
                  $expiration = $val->expiration;
                  $rid = $val->rid;
                }
                db_merge ( 'm6connect_role_expiaration' )->key ( array (
                    'uid' => $updatedUserUid,
                    'rid' => $rid 
                ) )->fields ( array (
                    'uid' => $updatedUserUid,
                    'rid' => $rid,
                    'reid' => $reid,
                    'expiration' => $expiration,
                    'status' => 1 
                ) )->execute ();
              }
              // role exipration indication code end here
            }
          }
        }
      }
    }
  }
}
function is_alredy_existed_expiration($uid, $roleid) {
  $query = db_select ( 'uc_roles_expirations', 're' );
  $query->fields ( 're', array (
      'reid',
      'expiration',
      'rid' 
  ) )->condition ( 're.uid', $uid, '=' )->condition ( 're.rid', $roleid, '=' );
  // $result = $query->execute()->fetchAll();
  // return $result;
  return $query;
}
function get_free_node_access_flag_status($node) {
}

/*
 * check proposal is awarded or not
 */
function check_proposal_is_awarded($nid, $status = '') {
  $awarded = 0;
  $query = db_select ( 'proposal_award', 'p' );
  $query->fields ( 'p', array (
      'award_status' 
  ) )->condition ( 'p.node_id', $nid, '=' )->condition ( 'p.status', '1', '=' );
  $result = $query->execute ()->fetchCol ();
  if ($result && is_array ( $result ) && ! empty ( $result ) && count ( $result ) > 0) {
    $awarded = 1;
    if (! empty ( $status )) { // pre('st');
      foreach ( $result as $k => $v ) {
        $awarded = $v;
      }
    }
  }
  return $awarded;
}
function m6connect_common_menu() {
  $items ['my-proposal/ajax/award/accept/%'] = array (
      'title' => 'Proposal award Callback',
      'page callback' => 'my_proposal_ajax_award_accept_callback',
      'page arguments' => array (
          4 
      ),
      'access arguments' => array (
          'm6connect_authenticate_user' 
      ),
      'type' => MENU_CALLBACK 
  );
  
  // **************** Bidder Feedback Tab Report ****************//
  $items ['rfpfeedbackreportxls/%'] = array (
      'title' => 'Bidder Feedback Report',
      'page callback' => 'rfp_bidder_feedback_report_xls',
      'page arguments' => array (
          1 
      ),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK 
  );
  
  $items ['mandrill_invite-mail/cron'] = array (
      'title' => 'Inviting user on Cron',
      'page callback' => '_cron_mandrill_invite_rfp_project',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK 
  );
  
  // ********** RFP Accrss Callback **********//
  
  $items ['check-rfp-user-ajax/%node'] = array (
      'page callback' => 'check_rfp_user_ajax',
      'page arguments' => array (
          1 
      ),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK 
  );
  
  $items ['check-proposal-popup-show/%node'] = array (
      'page callback' => 'check_proposal_popup_show',
      'page arguments' => array (
          1 
      ),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK 
  );
  
  // ************** Invite Favorite ***************//
  $items ['invite-favorites/%/%'] = array (
      'page callback' => 'get_invite_favorites_data',
      'page arguments' => array (
          1,
          2 
      ),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK 
  );
  
  $items ['manage-statuses/%/%ctools_js'] = array (
      'page callback' => 'manage_statuses_page_view_form',
      'page arguments' => array (
          1,
          2 
      ),
      'access callback' => TRUE,
      'modal' => TRUE 
  );
  
  $items ['revoke-company-access/%node'] = array (
      'page callback' => 'revoke_company_access',
      'page arguments' => array (
          1 
      ),
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK 
  );
  
  $items ['revoke-company-access-content/%node/%'] = array (
      'page callback' => 'revoke_company_access_popup_content',
      'page arguments' => array (
          1,
          2 
      ),
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK 
  );
  
  // ************** Edit Company Email ***************//
  $items ['edit-company-email-content/%node/%'] = array (
      'page callback' => 'edit_company_email_content_callback',
      'page arguments' => array (
          1,
          2 
      ),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK 
  );
  
  $items ['edit-company-email-submit/%node'] = array (
      'page callback' => 'edit_company_email_submit',
      'page arguments' => array (
          1 
      ),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK 
  );
  
  $items ['image-wapper/%/%'] = array (
      'page callback' => 'custom_image_wapper_view_form',
      'page arguments' => array (
          1,
          2 
      ),
      'access callback' => TRUE,
      'modal' => TRUE 
  );
  $items ['primary/company/%node'] = array (
      'title' => t(''),
      'page callback' => 'primary_company_select',
      'page arguments' => array(2),      
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items ['companyname/hideonprofile/%/%node'] = array (
      'title' => t(''),
      'page callback' => 'company_name_hide_onprofile',
      'page arguments' => array(2,3),      
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  /*$items ['hcfm/add/asset'] = array (
      'title' => t(''),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('hcfm_asset_add_form'),
      'access callback' => '_is_m6_user_logged_in',
  );
  $items['hcfm/%/autotitle'] = array(
    'title' => 'asset class',
    'page arguments' => array(1), 
    'page callback' => 'hcfm_asset_class_autotitle',
    'access arguments'=>array('access content'),
    'type'=>MENU_CALLBACK,
  );
  $items['hcfm_asset_brand/autotitle'] = array(
    'title' => 'asset class',
    'page arguments' => array(0), 
    'page callback' => 'hcfm_asset_class_autotitle',
    'access arguments'=>array('access content'),
    'type'=>MENU_CALLBACK,
  );*/
  $items['deletenode/%ctools_js/%'] = array(
    'page callback' => 'delete_node_custom_callback', 
    'page arguments' => array( 1,2), 
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK, 
  );
  $items['get-user-info/%'] = array(
    'page callback' => '_get_user_bio', 
    'page arguments' => array(1), 
    'access callback' => TRUE,
    'type' => MENU_CALLBACK, 
  );
  
  return $items;
}
function _get_user_bio($nid) {
  $getNodeData = node_load($nid);
  // $getImage = image_style_url('thumbnail', $getNodeData->field_team_image['und'][0]['uri']);
  $getImage = file_create_url($getNodeData->field_team_image['und'][0]['uri']);
  $getTitle = $getNodeData->title;
  $designation = $getNodeData->field_team_designation['und'][0]['value'];
  $getBio = $getNodeData->field_team_description['und'][0]['value'];
 /* $content = '<div class="user-info-continer">';
  $content .= '<p><img src="'.$getImage.'"></p>';
  $content .= '<p>'.$getTitle.'</p>';
  $content .= '<p>'.$designation.'</p>';
  $content .= '<p>'.$getBio.'</p>';
  $content .= '</div>';*/


  $content .= '<div class="row margin-0 popup-sp">';
  $content .= '<div class="col-md-3 col-sm-3 col-xs-3 padding-0 padding-right-10"><img src="'.$getImage.'"></div>';
  $content .= '<div class="col-md-9 col-sm-9 col-xs-9 padding-0"><div  class="clearfix text-blue">'.$getTitle.'</div><div class="clearfix text-muted margin-bottom-25">'.$designation.'</div>  <div class="clearfix text-muted about-us-content">'.$getBio.'</div></div></div>';
  
  print $content;
}
function delete_node_custom_callback($ajax, $nodeId = 0) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $nodeUrl = $_GET['redirect_node_url'];
    $form_state = array(
      'ajax' => TRUE,
      'node_id' => $nodeId,
      'node_url' => $_GET['redirect_node_url'],
    );
    $output = ctools_modal_form_wrapper('delete_node_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
  print ajax_render($output);
  drupal_exit();
  }
  return drupal_get_form('delete_node_form', $nodeId,$nodeUrl);
}

function delete_node_form($form, &$form_state, $nodeId = 0,$nodeUrl=0) {
  if(!$nodeId) {
    $nodeId = $form_state['node_id'];
  }
  if(!$nodeUrl) {
    $nodeUrl = $form_state['node_url'];
  }
  $form['node_action_title'] = array(
    '#type' => 'markup',
  '#title' => t('status'),
  '#markup' => '<div class="group-action-status"><p>Are you sure you want to delete this record?</p></div>',  
  );
  $form['node_id'] = array(
    '#type' => 'hidden',
  '#value' => $nodeId, 
  );
  $form['node_url'] = array(
    '#type' => 'hidden',
    '#value' => $nodeUrl, 
  );
  $form['submit_action_dgroup'] = array(
    '#type' => 'submit',
  '#value' => t('Confirm')
  );

  $form['submit_action_cancel']['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('group-delete-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    '#weight' => 10,
  );
  return $form;
}

// function for delete group
function delete_node_form_submit($form, &$form_state) {
  global $company;
  $form_values = $form_state['values'];
  $nodeId = $form_state['node_id'];
  $nodeUrl = $form_state['node_url'];
   if(!empty($nodeId)) {
    node_delete($nodeId);

    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
      $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
      if(isset($nodeUrl) && !empty($nodeUrl)){
        $form_state['ajax_commands'][] = ctools_ajax_command_redirect($nodeUrl);
      }
    }
  }
}


function get_invite_favorites_data($type, $bokmarkID) {
  global $user;
  $output = array ();
  $alreadyInvited = array ();
  $html = '';
  $nodeNids = array ();
  if ($type == 'node') {
    $nodeNids = array (
        $bokmarkID 
    );
  } else {
    $item = bookmarkorganizer_get_item_by_content ( $bokmarkID, $user->uid, $type );
    $nodeNids = get_favorites_nodes_by_folder_id ( $item->id, $user->uid );
  }
  if (isset ( $_REQUEST ['alreadyInvited'] ) && ! empty ( $_REQUEST ['alreadyInvited'] )) {
    $alreadyInvited = explode ( ';', $_REQUEST ['alreadyInvited'] );
  }
  $nodeNids = array_diff ( $nodeNids, $alreadyInvited );
  if (! empty ( $nodeNids )) {
    $query = db_select ( 'node', 'n' );
    $query->leftjoin ( 'og_membership', 'og', "og.gid=n.nid AND og.group_type='node' AND entity_type='user'" );
    $query->leftjoin ( 'realname', 'r', 'r.uid=og.etid' );
    $query->fields ( 'n', array (
        'nid',
        'title' 
    ) );
    $query->addExpression ( 'GROUP_CONCAT(distinct og.etid  separator \',\')', 'mgnid' );
    $query->addExpression ( 'GROUP_CONCAT(distinct r.realname  separator \', \')', 'ogname' );
    $query->condition ( 'n.type', 'organization', '=' );
    $query->condition ( 'n.status', 1, '=' );
    $query->condition ( 'n.nid', array_values ( $nodeNids ), 'IN' );
    $query->groupBy ( 'n.nid' );
    $result = $query->execute ()->fetchAll ();
    if (! empty ( $result )) {
      foreach ( $result as $delta => $item ) {
        $html .= '<div class="selected-company" id="' . $item->title . '">
                     <a href="" class="remove-invitees" id="' . $item->nid . '" mngid="' . $item->mgnid . '">[X]</a>
                     <span class="invitees-name">' . $item->title . ' - ' . $item->ogname . '</span>
                 </div>';
      }
    }
  }
  $output ['html'] = $html;
  drupal_json_output ( $output );
  drupal_exit ( 0 );
}
function check_proposal_popup_show($node) {
  $output = array ('status' => 1);
  $entityids = array ();
  if (in_array ( $node->type, array ('rfp','project','organization') )) {
    if(in_array ( $node->type, array ('rfp','project') )){
      $cmpNid = _get_company_nid_by_group_content ($node);
      if(is_numeric($cmpNid)){
      $entityids [] = $cmpNid;  
      }
      if ($node->type == 'rfp') {
      $rfpProjectNid = (isset ( $node->field_project ['und'] ) && ! empty ( $node->field_project ['und'] [0] ['target_id'] )) ? $node->field_project ['und'] [0] ['target_id'] : '';
      if ($rfpProjectNid) {
        $entityids [] = $rfpProjectNid;
      }
      }else{
      $entityids [] = $node->nid;  
      }
    }else{
      $entityids [] = $node->nid;
    }
    if (is_company_project_freely_accessible ( $entityids )) {
      $output = array ('status' => 0 );
    }
  }
  drupal_json_output ( $output );
  drupal_exit ( 0 );
}
function check_rfp_user_ajax($node, $ajax = TRUE, $free = '') {
  global $user, $company;
  $entity_nids = array ();
  $status = array (
      'status' => 0 
  );
  $isPublic = (isset ( $node->field_public ['und'] ) && $node->field_public ['und'] [0] ['value'] == 1) ? 1 : 0;
  $collabarate_users = m6connect_projects_uids_from_list ( $node );
  $rfpCmpNid = _get_company_nid_by_group_content ( $node );
  $rfpProjectNid = (isset ( $node->field_project ['und'] ) && ! empty ( $node->field_project ['und'] [0] ['target_id'] )) ? $node->field_project ['und'] [0] ['target_id'] : '';
  if ($rfpCmpNid) {
    $entity_nids [] = $rfpCmpNid;
  }
  if ($rfpProjectNid) {
    $entity_nids [] = $rfpProjectNid;
  }
  if ($isPublic || (! empty ( $rfpCmpNid ) && $rfpCmpNid == $company->nid) || in_array ( $user->uid, $collabarate_users )) {
    $status ['status'] = 1;
  }
  if ($status ['status'] != 1 && is_company_project_freely_accessible ( $entity_nids )) {
    $status ['status'] = 1;
  }
  if ($status ['status'] != 1 && $company->nid) {
    $isCompanyIndividual = is_company_individual_flag ( $company->nid );
    if ($isCompanyIndividual) {
      $nodeAceessByuUserRoles = array_intersect ( array_keys ( $user->roles ), array (7,8));
      if (! empty ( $nodeAceessByuUserRoles )) {
        if (m6connect_company_validate_user_license ()) {
          $status ['status'] = 1;
        }
      }
    } else {
      $userCompanyNode = node_load ( $company->nid );
      $rolesRidsToCheck = array (7,8,9);
      if (check_user_roles_exists ( $userCompanyNode->uid, $rolesRidsToCheck )) {
        if (m6connect_company_validate_user_license ()) {
          $status ['status'] = 1;
        }
      }
    }
  }
  if ($status ['status'] != 1 && db_table_exists ( 'm6connect_rfp_agreed_membership_payment' ) && $company->nid) {
    $agreedObject = db_select ( 'm6connect_rfp_agreed_membership_payment', 'ramp' )->fields ( 'ramp', array (
        'id',
        'hide_popup',
        'timestamp' 
    ) )->condition ( 'ramp.uid', $user->uid, '=' )->condition ( 'ramp.entity_id', $node->nid, '=' )->condition ( 'ramp.company_nid', $company->nid, '=' )->execute ()->fetchObject ();
    if ($agreedObject && is_object ( $agreedObject )) {
      $currentTime = REQUEST_TIME;
      $timeSpent = (($currentTime - $agreedObject->timestamp) / 60);
      if (($agreedObject->hide_popup == 1) || ($timeSpent < 2)) {
        $status ['status'] = 1;
      }
    }
  }
  if ($ajax == FALSE) {
    return $status ['status'];
  }
  drupal_json_output ( $status );
  drupal_exit ( 0 );
}
function my_proposal_ajax_award_accept_callback($action) {
  if ($action == 'agree' && isset ( $_REQUEST ['award_data'] )) {
    $awardData = $_REQUEST ['award_data'];
    $explode_data = explode ( "@@", $awardData );
    $award_taker = $explode_data [0];
    $award_page = $explode_data [1];
    $award_giver = $explode_data [2];
    $query = db_update ( 'proposal_award' );
    $query->fields ( array (
        'award_status' => 1 
    ) )->condition ( 'award_taker_id', $award_taker, '=' )->condition ( 'award_giver_id', $award_giver, '=' )->condition ( 'node_id', $award_page, '=' )->execute ();
  } else if ($action == 'disagree' && isset ( $_REQUEST ['award_data'] )) {
    $awardData = $_REQUEST ['award_data'];
    $explode_data = explode ( "@@", $awardData );
    $award_taker = $explode_data [0];
    $award_page = $explode_data [1];
    $award_giver = $explode_data [2];
    $query = db_update ( 'proposal_award' );
    $query->fields ( array (
        'award_status' => 0 
    ) )->condition ( 'award_taker_id', $award_taker, '=' )->condition ( 'award_giver_id', $award_giver, '=' )->condition ( 'node_id', $award_page, '=' )->execute ();
  }
}

/*
 * Validate for if "Submit Proposal For" option selected and not choose any Project/RFP/Company.
 */
function custom_my_proposal_validate(&$form, &$form_state) { // pre($form_state,1);
  $values = $form_state ['values'];
  
  if (isset ( $values ['field_choose_from_the_options_li'] ['und'] [0] ['value'] ) && ! empty ( $values ['field_choose_from_the_options_li'] ['und'] [0] ['value'] )) {
    $option_selected = $values ['field_choose_from_the_options_li'] ['und'] [0] ['value'];
    if ($option_selected == 'Submit Proposal in Response to a RFP') {
      if (! (isset ( $values ['field_submit_proposal_in_respons'] ['und'] [0] ['target_id'] ) && ! empty ( $values ['field_submit_proposal_in_respons'] ['und'] [0] ['target_id'] ))) {
        form_set_error ( 'field_submit_proposal_in_respons', 'Please Select RFP to Submit Proposal For.' );
      }
    }
    if ($option_selected == 'Submit Proposal in Response to a Project') {
      if (! (isset ( $values ['field_field_sub_proposal_pjt'] ['und'] [0] ['target_id'] ) && ! empty ( $values ['field_field_sub_proposal_pjt'] ['und'] [0] ['target_id'] ))) {
        form_set_error ( 'field_field_sub_proposal_pjt', 'Please Select Project to Submit Proposal For.' );
      }
    }
    if ($option_selected == 'Submit Proposal to a company') {
      if (! (isset ( $values ['field_submit_proposal_to_company'] ['und'] [0] ['target_id'] ) && ! empty ( $values ['field_submit_proposal_to_company'] ['und'] [0] ['target_id'] ))) {
        form_set_error ( 'field_submit_proposal_to_company', 'Please Select Company to Submit Proposal For.' );
      }
    }
  }
}
function common_cust_user_register_submit($form, &$form_state) { // pre($form_state,1);
  global $base_url;
  if (isset ( $form_state ['values'] ['field_user_company'] ['und'] [0] ['target_id'] ) && ! empty ( $form_state ['values'] ['field_user_company'] ['und'] [0] ['target_id'] )) {
    $cmpNode = node_load ( $form_state ['values'] ['field_user_company'] ['und'] [0] ['target_id'] );
    if (isset ( $cmpNode->field_company_inactive ['und'] ) && ! empty ( $cmpNode->field_company_inactive ['und'] [0] ['value'] )) {
    } else {
      $GroupAdminUid = _get_company_group_admin ( $cmpNode );
      $GroupAdmin = user_load ( $GroupAdminUid );
      $GroupAdminName = _get_user_full_name ( $GroupAdminUid );
      $to = $GroupAdmin->mail;
      $subject = 'Pending Request Notification';
      $body = "Hello " . $GroupAdminName . "
    There is a pending Request for company " . $cmpNode->title . "

    " . l ( 'Click here to see pending requests', $base_url . '/people/pending' ) . "

    Thanks!";
      $params = array (
          'subject' => $subject,
          'body' => $body 
      );
      $mail = drupal_mail ( 'm6connect_misc', 'location_register', $to, 'en', $params ); // drupal_set_message('<pre>'.print_r($mail,1).'</pre>');
    }
  }
}

/*
 * get group administartor
 */
function _get_company_group_admin($GroupNode) {
  // $gid = 895;
  // $GroupNode = node_load($gid);
  $gid = $GroupNode->nid;
  $GroupAuthorUid = $GroupNode->uid;
  $GroupAdminUid = 0;
  $query = db_select ( 'og_users_roles', 'og' );
  $query->condition ( 'gid', $gid, '=' );
  $query->fields ( 'og', array (
      'uid' 
  ) );
  $result = $query->execute ()->fetchAll ();
  $uids = array ();
  if (! empty ( $result )) {
    foreach ( $result as $k => $row ) {
      $uids [] = $row->uid; // pre($row);
    }
    foreach ( $uids as $k => $v ) {
      if ($v != $GroupAuthorUid) {
        $GroupAdminUid = $v;
        break;
      } else {
        $GroupAdminUid = $v;
      }
    }
  }
  return $GroupAdminUid; // pre($GroupAdminUid);
}

// ////////////////////////////////////////////////////////////////////////////////////////////
// /////////////////////Start New Company Requirement Global Function//////////////////////////
// ////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Assign user's active company to node group content
 */
function m6connect_common_node_presave($node) {
  global $user, $company;
  if(in_array( $node->type, array ('project','clarification','my_proposal','rfp','routing_slip','insurance_certificates'))){
    if(!(isset($node->og_group_ref['und'],$node->og_group_ref['und'][0]['target_id']) && !empty($node->og_group_ref['und'][0]['target_id']))){
      if(isset($node->original) && isset($node->original->og_group_ref['und'],$node->original->og_group_ref['und'][0]['target_id']) && !empty($node->original->og_group_ref['und'][0]['target_id'])){
      $node->og_group_ref ['und'] [0] ['target_id'] = $node->original->og_group_ref['und'][0]['target_id']; 
    }else{
      $node->og_group_ref ['und'] [0] ['target_id'] = $company->nid;
    }
      
    }
  }
  if (isset ( $node->is_new ) && $node->is_new == 1 && in_array ( $node->type, array (
      'project','clarification','my_proposal','rfp','routing_slip' 
  ) )) {
    if (empty ( $node->og_group_ref ['und'] [0] ['target_id'] )) {
      if (is_object ( $company ) && isset ( $company->nid )) {
        $node->og_group_ref ['und'] [0] ['target_id'] = $company->nid;
      }
    }
  }
  if (isset ( $node->is_new ) && $node->type == 'groups') {
    $node->status = 1;
  }
  if ($node->type == 'organization' && isset ( $node->is_new ) && $node->is_new == 1) {
    $node->field_company_initial ['und'] [0] ['value'] = _generate_company_initial ( $node->title );
  }
  if ($node->type == 'project' && isset ( $node->is_new ) && $node->is_new == 1 && db_table_exists ( 'm6connect_project_company_initial' )) {
    $cmpInitial = _get_company_initial ( $node->og_group_ref ['und'] [0] ['target_id'] );
    if (! empty ( $cmpInitial )) {
      $existingRowCount = db_select ( 'm6connect_project_company_initial', 'ci' )->fields ( 'ci', array (
          'id' 
      ) )->condition ( 'ci.company_initial', $cmpInitial, '=' )->execute ()->rowCount ();
      $existingRowCount ++;
      $node->field_project_number ['und'] [0] ['value'] = $cmpInitial . '-' . str_pad ( $existingRowCount, 5, '0', STR_PAD_LEFT );
    }
  } 
}

// Find out company form group content (project,clarification,my_proposal,rfp)
function _get_company_nid_by_group_content($node) {
  $ogcontent = og_get_entity_groups ( 'node', $node );
  if (isset ( $ogcontent ['node'] )) {
    $ogNodesNids = array_values ( $ogcontent ['node'] );
    return $ogNodesNids [0];
  }
  return '';
}

// Find out company users form group content
function _get_company_users_by_group_content($node) {
  $companyUsers = array ();
  $cmpNid = _get_company_nid_by_group_content ( $node );
  if ($cmpNid && is_numeric ( $cmpNid )) {
    $CompanyNode = node_load ( $cmpNid );
    $companyUsers = _get_company_users_by_group_company ( $CompanyNode );
  }
  return $companyUsers;
}
function _get_company_users_by_group_company($companyNode) {
  $companyUsers = og_get_group_members_properties ( $companyNode, array (), 'members__' . OG_STATE_ACTIVE, 'node' );
  return $companyUsers;
}

// Get User Full Name
function _get_user_full_name($uid, $cmpuser = '') {
  if ($cmpuser == '') {
    $cmpuser = user_load ( $uid );
  }
  $fullName = (isset ( $cmpuser->field_first_name ['und'] )) ? $cmpuser->field_first_name ['und'] [0] ['value'] : '';
  $mname = (isset ( $cmpuser->field_middle_name ['und'] )) ? $cmpuser->field_middle_name ['und'] [0] ['value'] : '';
  $lname = (isset ( $cmpuser->field_last_name ['und'] )) ? $cmpuser->field_last_name ['und'] [0] ['value'] : '';
  $fullName .= ! empty ( $mname ) ? ' ' . $mname : '';
  $fullName .= ! empty ( $lname ) ? ' ' . $lname : '';
  return ucwords ( $fullName );
}

// get title of the Node
function _get_title_of_node($nid) {
  $query = db_select ( 'node', 'n' );
  $query->fields ( 'n', array (
      'title' 
  ) )->condition ( 'n.nid', $nid );
  $result = $query->execute ()->fetchCol ();
  if ($result && is_array ( $result ) && count ( $result ) == 1) {
    return $result [0];
  }
  return '';
}

// get author of the Node
function _get_author_by_node_nid($nid = false) {
  $query = db_select ( 'node', 'n' );
  $query->leftjoin ( 'users', 'u', 'u.uid=n.uid' );
  $query->leftjoin ( 'realname', 'r', 'r.uid=u.uid' );
  $query->fields ( 'r', array (
      'realname' 
  ) );
  $query->condition ( 'n.nid', $nid );
  $result = $query->execute ()->fetchCol ( 0 );
  if ($result && is_array ( $result ) && count ( $result ) == 1) {
    return $result [0];
  }
  
  return '';
}
function _get_project_serial_number($nid) {
  $query = db_select ( 'node', 'n' );
  $query->leftjoin ( 'field_data_field_project_number', 'pn', 'pn.entity_id=n.nid' );
  $query->fields ( 'pn', array (
      'field_project_number_value' 
  ) );
  $query->condition ( 'n.type', 'project', '=' );
  $query->condition ( 'n.nid', $nid, '=' );
  return $query->execute ()->fetchColumn ( 0 );
}
function is_user_administrator() {
  global $user;
  if (isset ( $user->roles [3] ) || isset ( $user->roles [6] )) {
    return TRUE;
  }
  return FALSE;
}
function _get_company_region_address($node) {
  $region = '';
  if (isset ( $node->field_regions ['und'] ) && ! empty ( $node->field_regions ['und'] [0] ['tid'] )) {
    $termall = taxonomy_get_parents_all ( $node->field_regions ['und'] [0] ['tid'] );
    foreach ( $termall as $delta => $term ) {
      $cleanString = filter_var ( $term->name, FILTER_SANITIZE_STRING );
      $region .= ($region) ? ', ' . $cleanString : $cleanString;
    }
  }
  return $region;
}
function is_company_individual_flag($cmpNid) {
  $query = db_select ( 'node', 'n' );
  $query->leftJoin ( 'field_data_field_type_of_company', 'ind', 'ind.entity_id=n.nid' );
  $query->fields ( 'n', array (
      'nid' 
  ) );
  $query->condition ( 'n.nid', $cmpNid, '=' );
  $query->condition ( 'n.type', 'organization', '=' );
  $query->condition ( 'ind.field_type_of_company_value', 'individual', '=' );
  $return = $query->execute ()->fetchColumn ( 0 );
  return $return;
}
function is_company_individual_by_group($company) {
  if (isset ( $company->field_type_of_company ['und'], $company->field_type_of_company ['und'] [0] ['value'] ) && $company->field_type_of_company ['und'] [0] ['value'] == 'individual') {
    return TRUE;
  }
  return FALSE;
}
function _get_company_mapping_by_user($uids) {
  $companyMapping = array ();
  if (is_array ( $uids ) && ! empty ( $uids )) {
    $query = db_select ( 'og_membership', 'om' );
    $query->join ( 'node', 'n', 'n.nid=om.gid' );
    $query->leftjoin ( 'field_data_field_type_of_company', 'tc', 'tc.entity_id=n.nid' );
    $query->leftjoin ( 'field_data_field_type_of_company', 'tc', 'tc.entity_id=n.nid' );
    $query->leftjoin ( 'field_data_field_company_email', 'ec', 'ec.entity_id=n.nid' );
    $query->fields ( 'om', array (
        'etid',
        'gid' 
    ) );
    $query->condition ( 'om.entity_type', 'user', '=' );
    $query->condition ( 'om.group_type', 'node', '=' );
    $query->condition ( 'om.state', 1, '=' );
    $query->condition ( 'om.etid', array_values ( $uids ), 'IN' );
    $query->condition ( 'n.type', 'organization', '=' );
    $companyMapping = $query->execute ()->fetchAll ();
  }
  return $companyMapping;
}
function m6connect_common_og_membership_delete($og_membership) {
  global $user;
  if (db_table_exists ( 'm6connect_og_membership_email' ) && $og_membership->entity_type == 'user' && $og_membership->group_type == 'node') {
    db_delete ( 'm6connect_og_membership_email' )->condition ( 'membership_id', $og_membership->id )->execute ();
    
    //unset primary company and reassign primary company --start
    $dentity = user_load($user->uid);
    $subquery = db_select('m6connect_og_membership_email','oge');
    $subquery->addExpression('MIN(oge.membership_id)','min_memid');
    $subquery->condition('oge.company_type', 'individual', '!=');
    $subquery->condition('oge.user_uid', $dentity->uid, '=');
    $subquery->groupBy('oge.user_uid');
    
    $query= db_select('m6connect_og_membership_email','oge');
    $query->join($subquery,'sub','sub.min_memid=oge.membership_id');
    $query->fields('oge',array('entity_id'));
    $result = $query->execute()->fetchColumn(0);
    if($result && is_numeric($result)){
      $dentity->field_primary_company['und'][0]['value'] = $result;
      
    }else{
      unset($dentity->field_primary_company['und']);
    }
    user_save($dentity);
    //unset primary company and reassign primary company --end    
  }
}
function m6connect_common_og_membership_insert($og_membership) {
  global $user;
  if (db_table_exists ( 'm6connect_og_membership_email' ) && $og_membership->entity_type == 'user' && $og_membership->group_type == 'node') {
    $nodeDetail = _get_company_detail_for_og_by_nid ( $og_membership->gid );
    if (isset ( $nodeDetail [$og_membership->gid] )) {
      $companyEvent = '';
      $companyEmail = '';
      if ($nodeDetail [$og_membership->gid]->uid == $og_membership->etid) {
        $companyEvent = 'new';
        $companyEmail = $nodeDetail [$og_membership->gid]->field_company_email_email;
        $companyEmail = (empty ( $companyEmail )) ? $og_membership->entity->mail : $companyEmail;
      } else {
        $companyEvent = 'join';
        if (isset ( $og_membership->entity->field_organization_mail ['und'] ) && ! empty ( $og_membership->entity->field_organization_mail ['und'] [0] ['email'] )) {
          $companyEmail = $og_membership->entity->field_organization_mail ['und'] [0] ['email'];
        } else {
          $companyEmail = $og_membership->entity->mail;
        }
      }
      $cmcr = '';
      $getCR = db_select('m6connect_onboarding_invited_employee', 'moie')
              ->fields('moie', array('cm_type'))
              ->condition('moie.email', $companyEmail, '=')
              ->execute()->fetchCol();
      if(!empty($getCR)){
        $cmcr = $getCR[0];
      }
      $insertID = db_insert ( 'm6connect_og_membership_email' )->fields ( array (
          'membership_id' => $og_membership->id,
          'user_uid' => $og_membership->etid,
          'entity_id' => $og_membership->gid,
          'company_email' => $companyEmail,
          'company_type' => $nodeDetail [$og_membership->gid]->field_type_of_company_value,
          'company_event' => $companyEvent,
          'status' => 1,
          'cm_type' => $cmcr
      ) )->execute ();
      //assign primary company --start
            $CompanyType = $nodeDetail [$og_membership->gid]->field_type_of_company_value;
      if($CompanyType != 'individual'){
        $existing = user_load($og_membership->etid);
        if(!(isset($existing->field_primary_company['und']) && !empty($existing->field_primary_company['und'][0]['value']))){
          $edit = array();
                  $edit['field_primary_company']['und'][0]['value'] = $og_membership->gid;
          $edit['field_user_company']['und'] = array();
                  $edit['field_organization_mail']['und'] = array();
                user_save($existing, $edit);
        }               
        } 
      //assign primary company --end    
    }
  }
}
function _get_company_detail_for_og_by_nid($nid) {
  $query = db_select ( 'node', 'n' );
  $query->leftJoin ( 'field_data_field_type_of_company', 'ind', 'ind.entity_id=n.nid' );
  $query->leftJoin ( 'field_data_field_company_email', 'ce', 'ce.entity_id=n.nid' );
  $query->fields ( 'n', array (
      'nid',
      'uid' 
  ) );
  $query->fields ( 'ind', array (
      'field_type_of_company_value' 
  ) );
  $query->fields ( 'ce', array (
      'field_company_email_email' 
  ) );
  $query->condition ( 'n.nid', $nid, '=' );
  $query->condition ( 'n.type', 'organization', '=' );
  $return = $query->execute ()->fetchAllAssoc ( 'nid' );
  return $return;
}
function _get_individual_company_by_uid($uid) {
  $query = db_select ( 'node', 'n' );
  $query->leftJoin ( 'field_data_field_type_of_company', 'ind', 'ind.entity_id=n.nid' );
  $query->fields ( 'n', array (
      'nid' 
  ) );
  $query->condition ( 'n.uid', $uid, '=' );
  $query->condition ( 'n.type', 'organization', '=' );
  $query->condition ( 'ind.field_type_of_company_value', 'individual', '=' );
  $return = $query->execute ()->fetchColumn ( 0 );
  return $return;
}
function check_user_roles_exists($useruid, $rolesRidsToCheck) {
  $result = FALSE;
  if (is_numeric ( $useruid ) && is_array ( $rolesRidsToCheck ) && ! empty ( $rolesRidsToCheck )) {
    $query = db_select ( 'users', 'u' );
    $query->join ( 'users_roles', 'r', 'u.uid=r.uid' );
    $query->fields ( 'u', array (
        'uid' 
    ) );
    $query->condition ( 'r.rid', $rolesRidsToCheck, 'IN' );
    $query->condition ( 'u.uid', $useruid, '=' );
    $return = $query->execute ()->fetchCol ( 0 );
    if ($return) {
      $result = TRUE;
    }
  }
  return $result;
}
function is_company_project_freely_accessible($entity_nids) {
  $result = 0;
  $dbor = db_or ();
  if ($entity_nids && is_array ( $entity_nids ) && ! empty ( $entity_nids )) {
    $dbor = db_or ()->condition ( 'aff.field_available_for_free_value', 1, '=' )->condition ( 'paff.field_available_for_free_proj_value', '1', '=' )->condition ( 'pp.field_project_public_value', '1', '=' );
    $query = db_select ( 'node', 'n' );
    $query->leftjoin ( 'field_data_field_available_for_free', 'aff', 'aff.entity_id = n.nid' );
    $query->leftjoin ( 'field_data_field_available_for_free_proj', 'paff', 'paff.entity_id = n.nid' );
    $query->leftjoin ( 'field_data_field_project_public', 'pp', 'pp.entity_id = n.nid' );
    $query->fields ( 'n', array (
        'nid' 
    ) );
    $query->condition ( 'n.nid', $entity_nids, 'IN' );
    $query->condition ( 'n.type', array (
        'organization',
        'project' 
    ), 'IN' );
    $query->condition ( $dbor );
    $result = $query->execute ()->rowCount ();
  }
  return $result;
}
function get_bidding_companies_from_rfpNid($entity_id) {
  $companies = array ();
  $query = db_select ( 'm6connect_bid_package_invitee_interested', 'mbpii' );
  $query->leftJoin ( 'field_data_field_type_of_company', 'ind', 'ind.entity_id=mbpii.company_nid' );
  $query->leftJoin ( 'node', 'n', 'n.nid=mbpii.company_nid' );
  $query->leftJoin ( 'users', 'u', 'u.uid=mbpii.user_id' );
  $query->fields ( 'mbpii', array (
      'company_nid' 
  ) );
  $query->fields ( 'n', array (
      'title' 
  ) );
  $query->fields ( 'ind', array (
      'field_type_of_company_value' 
  ) );
  $query->fields ( 'u', array (
      'uid',
      'mail' 
  ) );
  $query->distinct ();
  $query->condition ( 'mbpii.company_nid', 0, '!=' );
  $query->condition ( 'mbpii.entity_id', $entity_id, '=' );
  $query->condition ( 'mbpii.bidding_status', 1, '=' );
  $result = $query->execute ()->fetchAll ();
  if ($result && is_array ( $result ) && ! empty ( $result )) {
    return $result;
  } else {
    return array ();
  }
  return array ();
}
function _get_all_organigation_mapping($searchString = NULL, $queryModifyBy = NULL) {
  global $user;
  $query = db_select ( 'node', 'n' );
  $query->distinct ();
  $query->fields ( 'n', array (
      'nid',
      'title' 
  ) );
  // ************************** Start (Not Show Company When they are Inctive) **************************/
  $ic_or = db_or ();
  $query->leftJoin ( 'field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid' );
  $ic_or->isNull ( 'ic.field_company_inactive_value' )->condition ( 'ic.field_company_inactive_value', 0 );
  $query->condition ( $ic_or );
  // *************************** End (Not Show Company When they are Inctive) ***************************/
  // ************************** Start (Show Company When show company active) **************************/
  $query->leftJoin ( 'field_data_field_show_company_in_search', 'isa', 'isa.entity_id = n.nid' );
  $query->condition ( 'isa.field_show_company_in_search_value', 1, '=' );
  // *************************** End (Show Company When show company active) ***************************/
  // ************************** Start (Not Show Company When they are not company type) **************************/
  $query->leftJoin ( 'field_data_field_type_of_company', 'tc', 'tc.entity_id = n.nid' );
  $query->condition ( 'tc.field_type_of_company_value', 'company', '=' );
  // ************************** End (Not Show Company When they are not company type) **************************/
  
  if ($queryModifyBy && $queryModifyBy == 'company_has_ob_manager') {
    $companyRoles = og_roles ( 'node', 'organization' );
    $companyAdminRoleRid = array_search ( 'M6ID Manager', $companyRoles );
    if ($companyAdminRoleRid === FALSE) {
      $companyAdminRoleRid = - 1;
    }
    $query->join ( 'og_membership', 'om', 'om.gid=n.nid AND om.entity_type=:entityType', array (
        ':entityType' => 'user' 
    ) );
    $query->join ( 'og_users_roles', 'ogur', 'ogur.gid = n.nid AND om.etid=ogur.uid AND ogur.group_type=:gropType AND ogur.rid=:companyRoleRid', array (
        ':gropType' => 'node',
        ':companyRoleRid' => $companyAdminRoleRid 
    ) );
  }
  
  if (! empty ( $searchString )) {
    $query->condition ( 'n.title', db_like ( $searchString ) . '%', 'LIKE' );
  }
  
  $query->condition ( 'n.type', 'organization', '=' );
  $result = $query->execute ()->fetchAllKeyed ( 0, 1 );
  return $result;
}
function _get_company_initial($cmpNid) {
  $query = db_select ( 'node', 'n' );
  $query->leftjoin ( 'field_data_field_company_initial', 'ci', 'ci.entity_id=n.nid' );
  $query->fields ( 'ci', array (
      'field_company_initial_value' 
  ) );
  $query->condition ( 'n.type', 'organization', '=' );
  $query->condition ( 'n.nid', $cmpNid, '=' );
  $result = $query->execute ()->fetchColumn ( 0 );
  return $result;
}
function _generate_company_initial($nodeTitle) {
  $titlearr = explode ( ' ', $nodeTitle );
  $titlewordCount = count ( $titlearr );
  $titleInitial = '';
  if ($titlewordCount >= 3) {
    $titleInitial = substr ( $titlearr [0], 0, 1 ) . substr ( $titlearr [1], 0, 1 ) . substr ( $titlearr [2], 0, 1 );
  } else if ($titlewordCount == 2) {
    if (strlen ( $titlearr [1] ) > 1) {
      $titleInitial = substr ( $titlearr [0], 0, 1 ) . substr ( $titlearr [1], 0, 2 );
    } else if (strlen ( $titlearr [0] ) > 1) {
      $titleInitial = substr ( $titlearr [0], 0, 2 ) . substr ( $titlearr [1], 0, 1 );
    } else {
      $titleInitial = substr ( $titlearr [0], 0, 1 ) . substr ( $titlearr [1], 0, 1 );
    }
  } else {
    $titleInitial = substr ( $nodeTitle, 0, 3 );
  }
  return strtoupper ( $titleInitial );
}
function _get_user_company_email($userUid, $companyNid) {
  $companyEmail = '';
  if (is_numeric ( $userUid ) && is_numeric ( $companyNid )) {
    $companyEmail = db_select ( 'm6connect_og_membership_email', 'om' )->fields ( 'om', array (
        'company_email' 
    ) )->condition ( 'om.entity_id', $companyNid, '=' )->condition ( 'om.user_uid', $userUid, '=' )->execute ()->fetchColumn ( 0 );
  }
  return $companyEmail;
}
function _get_multiple_user_company_email_realname_mapping($userUids, $companyNid) {
  $companyEmails = array ();
  if (is_array ( $userUids ) && ! empty ( $userUids )) {
    $query = db_select ( 'm6connect_og_membership_email', 'om' );
    $query->join ( 'realname', 'r', 'om.user_uid=r.uid' );
    $query->fields ( 'om', array (
        'company_email' 
    ) );
    $query->fields ( 'r', array (
        'realname' 
    ) );
    $query->condition ( 'om.entity_id', $companyNid, '=' );
    $query->condition ( 'om.user_uid', $userUids, 'IN' );
    $companyEmails = $query->execute ()->fetchAllKeyed ( 0, 1 );
  }
  return $companyEmails;
}
function _get_companies_details_by_user_uid($uid) {
  $result = array ();
  $query = db_select ( 'node', 'n' );
  $query->join ( 'og_membership', 'om', 'om.gid=n.nid AND om.entity_type=:type', array (
      ':type' => 'user' 
  ) );
  $query->join ( 'm6connect_og_membership_email', 'ogm', 'n.nid=ogm.entity_id' );
  $query->leftJoin ( 'field_data_field_type_of_company', 'ind', 'ind.entity_id=n.nid' );
  $query->leftJoin ( 'field_data_field_logo', 'ffl', 'ffl.entity_id=n.nid AND ffl.bundle=:bundle', array (
      ':bundle' => 'organization' 
  ) );
  $query->leftJoin ( 'file_managed', 'fm', 'fm.fid=ffl.field_logo_fid' );
  $query->fields ( 'n', array (
      'nid',
      'title' 
  ) );
  $query->fields ( 'ogm', array (
      'company_email' 
  ) );
  $query->fields ( 'fm', array (
      'uri' 
  ) );
  $query->condition ( 'n.type', 'organization', '=' );
  $query->condition ( 'om.etid', $uid, '=' );
  $query->condition ( 'ogm.user_uid', $uid, '=' );
  $query->condition ( 'ind.field_type_of_company_value', 'individual', '!=' );
  $output = $query->execute ()->fetchAll ();
  if ($output && ! empty ( $output )) {
    return $output;
  }
  return $result;
}
function _get_user_mappping_by_group_company_nid($cmpNid) {
  if (is_numeric ( $cmpNid )) {
    $query = db_select ( 'users', 'u' );
    $query->join ( 'og_membership', 'om', 'om.etid=u.uid AND om.entity_type=:entityType', array (
        ':entityType' => 'user' 
    ) );
    $query->join ( 'realname', 'r', 'om.etid=r.uid' );
    $query->fields ( 'u', array ('uid') );
    $query->fields ( 'r', array ('realname') );
    $query->condition ( 'om.gid', $cmpNid, '=' );
    return $query->execute ()->fetchAllKeyed ( 0, 1 );
  }
  return array ();
}
function _get_company_users_by_og_roles($cmpNid, $roleName) {
  $query = db_select ( 'users', 'u' );
  $query->join ( 'og_membership', 'og', 'og.etid=u.uid AND og.entity_type=:EntityType', array (
      ':EntityType' => 'user' 
  ) );
  $query->join ( 'og_users_roles', 'ogur', 'ogur.uid=og.etid AND ogur.gid=og.gid AND ogur.group_type=:GroupType', array (
      ':GroupType' => 'node' 
  ) );
  $query->join ( 'og_role', 'ogr', 'ogur.rid = ogr.rid' );
  $query->fields ( 'u', array (
      'uid' 
  ) );
  $query->condition ( 'og.gid', $cmpNid, '=' );
  $query->condition ( 'ogr.group_bundle', 'organization', '=' );
  $query->condition ( 'ogr.name', $roleName, '=' );
  return $query->execute ()->fetchCol ();
}
function _get_comapny_details_by_og_email($company_mail) {
  $return = array ();
  $query = db_select ( 'm6connect_og_membership_email', 'om' );
  $query->join ( 'node', 'n', 'n.nid=om.entity_id' );
  $query->leftjoin ( 'field_data_field_logo', 'cfl', 'cfl.entity_id=n.nid' );
  $query->leftjoin ( 'file_managed', 'fm', 'fm.fid=cfl.field_logo_fid' );
  $query->leftjoin ( 'users', 'u', 'u.uid=om.user_uid' );
  $query->leftjoin ( 'realname', 'r', 'r.uid=om.user_uid' );
  $query->leftjoin ( 'field_data_field_phone', 'fph', 'fph.entity_id=om.user_uid AND fph.bundle=:userBundle', array (
      ':userBundle' => 'user' 
  ) );
  $query->leftjoin ( 'field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=om.user_uid' );
  $query->leftjoin ( 'file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid' );
  $query->fields ( 'om', array (
      'entity_id',
      'company_type',
      'user_uid' 
  ) );
  $query->fields ( 'n', array (
      'title' 
  ) );
  $query->fields ( 'fph', array (
      'field_phone_value' 
  ) );
  $query->addField ( 'fm', 'uri', 'company_uri' );
  $query->fields ( 'r', array (
      'realname' 
  ) );
  $query->fields ( 'u', array (
      'mail' 
  ) );
  $query->addField ( 'fmu', 'uri', 'user_uri' );
  $query->condition ( 'om.company_email', $company_mail );
  $query->orderBy ( 'om.company_type', 'DESC' );
  $result = $query->execute ()->fetchAll ();
  if ($result && ! empty ( $result )) {
    $count = count ( $result );
    if ($count > 1 && $result [0]->company_type == 'individual') {
      $return = ( array ) $result [1];
    } else {
      $return = ( array ) $result [0];
    }
  }
  return $return;
}
function _get_comapny_details_by_og_uid_entity_id($userUid, $cmpNid) {
  $return = array ();
  $query = db_select ( 'm6connect_og_membership_email', 'om' );
  $query->join ( 'node', 'n', 'n.nid=om.entity_id' );
  $query->leftjoin ( 'field_data_field_logo', 'cfl', 'cfl.entity_id=n.nid' );
  $query->leftjoin ( 'file_managed', 'fm', 'fm.fid=cfl.field_logo_fid' );
  $query->leftjoin ( 'realname', 'r', 'r.uid=om.user_uid' );
  $query->leftjoin ( 'field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=om.user_uid' );
  $query->leftjoin ( 'file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid' );
  $query->leftjoin('field_data_field_address','fdfa','fdfa.entity_id=om.user_uid');
    $query->fields('fdfa',array('field_address_locality','field_address_administrative_area'));
  $query->fields ( 'om', array (
      'entity_id',
      'company_type' 
  ) );
  $query->fields ( 'n', array (
      'title' 
  ) );
  $query->addField ( 'fm', 'uri', 'company_uri' );
  $query->fields ( 'r', array (
      'realname' 
  ) );
  $query->addField ( 'fmu', 'uri', 'user_uri' );
  $query->condition ( 'om.entity_id', $cmpNid );
  $query->condition ( 'om.user_uid', $userUid );
  $query->orderBy ( 'om.company_type', 'DESC' );
  $result = $query->execute ()->fetchAll ();
  if ($result && ! empty ( $result )) {
    $return = ( array ) $result [0];
  }
  return $return;
}

function _get_user_details_by_og_email($company_mail) {
  $query = db_select ( 'm6connect_og_membership_email', 'om' );
  $query->join ( 'users', 'u', 'u.uid=om.user_uid' );
  $query->join ( 'realname', 'r', 'r.uid=om.user_uid' );
  $query->leftjoin ( 'field_data_field_phone', 'fph', 'fph.entity_id=om.user_uid AND fph.bundle=:userBundle', array (':userBundle' => 'user'));
  $query->leftjoin ( 'field_data_field_first_name', 'ffn', 'ffn.entity_id=om.user_uid AND ffn.bundle=:userBundle', array (':userBundle' => 'user'));
  $query->leftjoin ( 'field_data_field_last_name', 'fln', 'fln.entity_id=om.user_uid AND fln.bundle=:userBundle', array (':userBundle' => 'user'));
  $query->leftjoin ( 'field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=om.user_uid' );
  $query->leftjoin ( 'file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid' );
  $query->fields ( 'fph', array ('field_phone_value') );
  $query->fields ( 'ffn', array ('field_first_name_value') );
  $query->fields ( 'fln', array ('field_last_name_value') );
  $query->fields ( 'r', array ('realname') );
  $query->fields ( 'u', array ('mail','uid') );
  $query->addField ( 'fmu', 'uri', 'user_uri' );
  $query->condition ( 'om.company_email', $company_mail );
  $result = $query->execute()->fetchObject(); 
  return $result;
}

function _get_user_details_by_og_multiple_emails($company_mails) {
  $result = array();
  if(is_array($company_mails) && !empty($company_mails)){
  $query = db_select ( 'm6connect_og_membership_email', 'om' );
  $query->join ( 'users', 'u', 'u.uid=om.user_uid' );
  $query->join ( 'realname', 'r', 'r.uid=om.user_uid' );
  $query->leftjoin ( 'field_data_field_phone', 'fph', 'fph.entity_id=om.user_uid AND fph.bundle=:userBundle', array (':userBundle' => 'user'));
  $query->leftjoin ( 'field_data_field_first_name', 'ffn', 'ffn.entity_id=om.user_uid AND ffn.bundle=:userBundle', array (':userBundle' => 'user'));
  $query->leftjoin ( 'field_data_field_last_name', 'fln', 'fln.entity_id=om.user_uid AND fln.bundle=:userBundle', array (':userBundle' => 'user'));
  $query->leftjoin ( 'field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=om.user_uid' );
  $query->leftjoin ( 'file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid' );
  $query->fields ( 'om', array ('company_email') );
  $query->fields ( 'fph', array ('field_phone_value') );
  $query->fields ( 'ffn', array ('field_first_name_value') );
  $query->fields ( 'fln', array ('field_last_name_value') );
  $query->fields ( 'r', array ('realname') );
  $query->fields ( 'u', array ('mail') );
  $query->addField ( 'fmu', 'uri', 'user_uri' );
  $query->condition ( 'om.company_email', $company_mails,'IN');
  $result = $query->execute()->fetchAllAssoc('company_email'); 
  }
  return $result;
}

function _get_node_company_user_name($nodeNid){
  $return = array('company_title'=>'','user_name'=>'');
  $query = db_select('node','n');
  $query->leftjoin('og_membership','om','om.etid=n.nid AND om.entity_type=:EntityType', array(':EntityType' => 'node'));
  $query->leftjoin('node','cnode','cnode.nid=om.gid');
  $query->leftJoin ('field_data_field_type_of_company', 'ind', 'ind.entity_id=cnode.nid');
  $query->leftjoin('realname','r','r.uid=n.uid');
  $query->addField('cnode','title','company_title'); 
  $query->addField('cnode','nid','company_nid'); 
  $query->addField('r','realname','user_name');
  $query->addField('r','uid','company_author');
  $query->addField('ind','field_type_of_company_value','company_type');
  $query->condition('n.nid',$nodeNid);
  $result = $query->execute()->fetchObject(); 
  if(is_object($result)){
 $return = (array)$result;
 if($return['company_type'] == 'individual'){
   $return['company_title']= '';
 }
  }
  return $return;
}

function is_proposal_project_collabarated($proposalNode){
  global $user;
  $currCompNid = $_SESSION['company'];
  $submitted_for = (isset($proposalNode->field_choose_from_the_options_li['und']) && !empty($proposalNode->field_choose_from_the_options_li['und'][0]['value']))?$proposalNode->field_choose_from_the_options_li['und'][0]['value']:'';
  $return = FALSE;

  $submitedRFPProjectMapping = array(
  'Submit Proposal in Response to a RFP' => 'field_submit_proposal_in_respons',
  'Submit Proposal in Response to a Project' => 'field_field_sub_proposal_pjt',
  'Submit Proposal to a company' => 'field_submit_proposal_to_company',
  );
  if(array_key_exists($submitted_for,$submitedRFPProjectMapping)){
  if(isset($proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und']) && !empty($proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und'][0]['target_id'])){
    $submittedProjectID = $proposalNode->{$submitedRFPProjectMapping[$submitted_for]}['und'][0]['target_id'];
    if($submitted_for == 'Submit Proposal to a company' && $submittedProjectID == $currCompNid){
    $return = TRUE;
    return $return;  
    }
    if($submitted_for == 'Submit Proposal in Response to a RFP' && db_table_exists('field_data_field_project')){
    $submittedProjectID = db_select('field_data_field_project','fp')
              ->fields('fp',array('field_project_target_id'))
              ->condition('fp.entity_id',$submittedProjectID)
              ->condition('fp.bundle','rfp')
              ->execute()->fetchField();
    }
    if(is_numeric($submittedProjectID)){
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_project_invite_comapnies', 'pic','pic.entity_id=n.nid');
        $query->leftJoin('field_data_field_company_nid_mail', 'pcne', 'pcne.entity_id = pic.field_project_invite_comapnies_value');
        $query->leftJoin('field_data_field_comapny_manager', 'pcimu', 'pcimu.entity_id = pic.field_project_invite_comapnies_value');
    $query->fields('pic', array('field_project_invite_comapnies_value'));
    $query->condition('n.nid',$submittedProjectID,'=');
    $query->condition('n.type','project','=');
        $query->where('((n.uid=:UserUid) OR ((pcimu.field_comapny_manager_value IS NOT NULL) AND (pcne.field_company_nid_mail_value=:companyNid) AND (FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0)))', array(':UserUid' => $user->uid, ':companyNid' => $currCompNid));
    $result = $query->execute()->fetchAll();
    if($result && !empty($result)){
      $return = TRUE; 
    }
    }
  }
  }
  return $return;
}

function _get_company_nids_by_proposal_target_node($targetNode){
  $companyNids = array();
  $targetNids = array();
  if($targetNode->type == 'organigation'){
  $companyNids[] =  $targetNode->nid; 
  }else if($targetNode->type == 'rfp' || $targetNode->type == 'project'){
  $targetNids[] = $targetNode->nid;
  if($targetNode->type == 'rfp' && isset($targetNode->field_project['und']) && !empty($targetNode->field_project['und'][0]['target_id'])){
    $targetNids[] = $targetNode->field_project['und'][0]['target_id'];  
  }
  $query = db_select('og_membership','om');
  $query->fields('om', array('gid'));
  $query->condition('om.etid',$targetNids,'IN');
  $query->condition('om.entity_type','node','=');
  $query->condition('om.group_type','node','=');
  $companyNids = $query->execute()->fetchCol();
  }
  return $companyNids;
}

function _get_comppany_diversity_names($cmpNid){
  $diversityNames = array();
  if(is_numeric($cmpNid)){                               
  $query = db_select('node', 'n');                              
  $query->join('field_data_field_diversity_credentials','dc','dc.field_diversity_credentials_target_id=n.nid');
  $query->fields('n',array('title'));
  $query->condition('dc.entity_id',$cmpNid,'=');  
  $diversityNames = $query->execute()->fetchCol();                              
  }
  return implode('<br>', $diversityNames); 
}


function _get_node_type_by_nid($nid){
  $query = db_select('node','n');
  $query->condition('n.nid',$nid,'=');
  $query->fields('n',array('type'));
  $result = $query->execute()->fetchColumn(0);
  return $result;
}

function _get_country_internation_phone_dial_code($countryCode){
  $mapping = array(
    'af' => array('name'=>'Afghanistan (‫افغانستان‬‎)', 'iso2' =>'af', 'dialCode'=>'93', 'priority'=>0, 'areaCodes'=>'null'),
    'al' => array('name'=>'Albania (Shqipëri)', 'iso2' =>'al', 'dialCode'=>'355', 'priority'=>0, 'areaCodes'=>'null'),
    'dz' => array('name'=>'Algeria (‫الجزائر‬‎)', 'iso2' =>'dz', 'dialCode'=>'213', 'priority'=>0, 'areaCodes'=>'null'),
    'as' => array('name'=>'American Samoa', 'iso2' =>'as', 'dialCode'=>'1684', 'priority'=>0, 'areaCodes'=>'null'),
    'ad' => array('name'=>'Andorra', 'iso2' =>'ad', 'dialCode'=>'376', 'priority'=>0, 'areaCodes'=>'null'),
    'ao' => array('name'=>'Angola', 'iso2' =>'ao', 'dialCode'=>'244', 'priority'=>0, 'areaCodes'=>'null'),
    'ai' => array('name'=>'Anguilla', 'iso2' =>'ai', 'dialCode'=>'1264', 'priority'=>0, 'areaCodes'=>'null'),
    'ag' => array('name'=>'Antigua and Barbuda', 'iso2' =>'ag', 'dialCode'=>'1268', 'priority'=>0, 'areaCodes'=>'null'),
    'ar' => array('name'=>'Argentina', 'iso2' =>'ar', 'dialCode'=>'54', 'priority'=>0, 'areaCodes'=>'null'),
    'am' => array('name'=>'Armenia (Հայաստան)', 'iso2' =>'am', 'dialCode'=>'374', 'priority'=>0, 'areaCodes'=>'null'),
    'aw' => array('name'=>'Aruba', 'iso2' =>'aw', 'dialCode'=>'297', 'priority'=>0, 'areaCodes'=>'null'),
    'au' => array('name'=>'Australia', 'iso2' =>'au', 'dialCode'=>'61', 'priority'=>0, 'areaCodes'=>'null'),
    'at' => array('name'=>'Austria (Österreich)', 'iso2' =>'at', 'dialCode'=>'43', 'priority'=>0, 'areaCodes'=>'null'),
    'az' => array('name'=>'Azerbaijan (Azərbaycan)', 'iso2' =>'az', 'dialCode'=>'994', 'priority'=>0, 'areaCodes'=>'null'),
    'bs' => array('name'=>'Bahamas', 'iso2' =>'bs', 'dialCode'=>'1242', 'priority'=>0, 'areaCodes'=>'null'),
    'bh' => array('name'=>'Bahrain (‫البحرين‬‎)', 'iso2' =>'bh', 'dialCode'=>'973', 'priority'=>0, 'areaCodes'=>'null'),
    'bd' => array('name'=>'Bangladesh (বাংলাদেশ)', 'iso2' =>'bd', 'dialCode'=>'880', 'priority'=>0, 'areaCodes'=>'null'),
    'bb' => array('name'=>'Barbados', 'iso2' =>'bb', 'dialCode'=>'1246', 'priority'=>0, 'areaCodes'=>'null'),
    'by' => array('name'=>'Belarus (Беларусь)', 'iso2' =>'by', 'dialCode'=>'375', 'priority'=>0, 'areaCodes'=>'null'),
    'be' => array('name'=>'Belgium (België)', 'iso2' =>'be', 'dialCode'=>'32', 'priority'=>0, 'areaCodes'=>'null'),
    'bz' => array('name'=>'Belize', 'iso2' =>'bz', 'dialCode'=>'501', 'priority'=>0, 'areaCodes'=>'null'),
    'bj' => array('name'=>'Benin (Bénin)', 'iso2' =>'bj', 'dialCode'=>'229', 'priority'=>0, 'areaCodes'=>'null'),
    'bm' => array('name'=>'Bermuda', 'iso2' =>'bm', 'dialCode'=>'1441', 'priority'=>0, 'areaCodes'=>'null'),
    'bt' => array('name'=>'Bhutan (འབྲུག)', 'iso2' =>'bt', 'dialCode'=>'975', 'priority'=>0, 'areaCodes'=>'null'),
    'bo' => array('name'=>'Bolivia', 'iso2' =>'bo', 'dialCode'=>'591', 'priority'=>0, 'areaCodes'=>'null'),
    'ba' => array('name'=>'Bosnia and Herzegovina (Босна и Херцеговина)', 'iso2' =>'ba', 'dialCode'=>'387', 'priority'=>0, 'areaCodes'=>'null'),
    'bw' => array('name'=>'Botswana', 'iso2' =>'bw', 'dialCode'=>'267', 'priority'=>0, 'areaCodes'=>'null'),
    'br' => array('name'=>'Brazil (Brasil)', 'iso2' =>'br', 'dialCode'=>'55', 'priority'=>0, 'areaCodes'=>'null'),
    'io' => array('name'=>'British Indian Ocean Territory', 'iso2' =>'io', 'dialCode'=>'246', 'priority'=>0, 'areaCodes'=>'null'),
    'vg' => array('name'=>'British Virgin Islands', 'iso2' =>'vg', 'dialCode'=>'1284', 'priority'=>0, 'areaCodes'=>'null'),
    'bn' => array('name'=>'Brunei', 'iso2' =>'bn', 'dialCode'=>'673', 'priority'=>0, 'areaCodes'=>'null'),
    'bg' => array('name'=>'Bulgaria (България)', 'iso2' =>'bg', 'dialCode'=>'359', 'priority'=>0, 'areaCodes'=>'null'),
    'bf' => array('name'=>'Burkina Faso', 'iso2' =>'bf', 'dialCode'=>'226', 'priority'=>0, 'areaCodes'=>'null'),
    'bi' => array('name'=>'Burundi (Uburundi)', 'iso2' =>'bi', 'dialCode'=>'257', 'priority'=>0, 'areaCodes'=>'null'),
    'kh' => array('name'=>'Cambodia (កម្ពុជា)', 'iso2' =>'kh', 'dialCode'=>'855', 'priority'=>0, 'areaCodes'=>'null'),
    'cm' => array('name'=>'Cameroon (Cameroun)', 'iso2' =>'cm', 'dialCode'=>'237', 'priority'=>0, 'areaCodes'=>'null'),
    'ca' => array('name'=>'Canada', 'iso2' =>'ca', 'dialCode'=>'1', 'priority'=>1, 'areaCodes'=>'Array'),
    'cv' => array('name'=>'Cape Verde (Kabu Verdi)', 'iso2' =>'cv', 'dialCode'=>'238', 'priority'=>0, 'areaCodes'=>'null'),
    'bq' => array('name'=>'Caribbean Netherlands', 'iso2' =>'bq', 'dialCode'=>'599', 'priority'=>1, 'areaCodes'=>'null'),
    'ky' => array('name'=>'Cayman Islands', 'iso2' =>'ky', 'dialCode'=>'1345', 'priority'=>0, 'areaCodes'=>'null'),
    'cf' => array('name'=>'Central African Republic (République centrafricaine)', 'iso2' =>'cf', 'dialCode'=>'236', 'priority'=>0, 'areaCodes'=>'null'),
    'td' => array('name'=>'Chad (Tchad)', 'iso2' =>'td', 'dialCode'=>'235', 'priority'=>0, 'areaCodes'=>'null'),
    'cl' => array('name'=>'Chile', 'iso2' =>'cl', 'dialCode'=>'56', 'priority'=>0, 'areaCodes'=>'null'),
    'cn' => array('name'=>'China (中国)', 'iso2' =>'cn', 'dialCode'=>'86', 'priority'=>0, 'areaCodes'=>'null'),
    'cx' => array('name'=>'Christmas Island', 'iso2' =>'cx', 'dialCode'=>'61', 'priority'=>2, 'areaCodes'=>'null'),
    'cc' => array('name'=>'Cocos (Keeling) Islands', 'iso2' =>'cc', 'dialCode'=>'61', 'priority'=>1, 'areaCodes'=>'null'),
    'co' => array('name'=>'Colombia', 'iso2' =>'co', 'dialCode'=>'57', 'priority'=>0, 'areaCodes'=>'null'),
    'km' => array('name'=>'Comoros (‫جزر القمر‬‎)', 'iso2' =>'km', 'dialCode'=>'269', 'priority'=>0, 'areaCodes'=>'null'),
    'cd' => array('name'=>'Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)', 'iso2' =>'cd', 'dialCode'=>'243', 'priority'=>0, 'areaCodes'=>'null'),
    'cg' => array('name'=>'Congo (Republic) (Congo-Brazzaville)', 'iso2' =>'cg', 'dialCode'=>'242', 'priority'=>0, 'areaCodes'=>'null'),
    'ck' => array('name'=>'Cook Islands', 'iso2' =>'ck', 'dialCode'=>'682', 'priority'=>0, 'areaCodes'=>'null'),
    'cr' => array('name'=>'Costa Rica', 'iso2' =>'cr', 'dialCode'=>'506', 'priority'=>0, 'areaCodes'=>'null'),
    'ci' => array('name'=>'Côte d’Ivoire', 'iso2' =>'ci', 'dialCode'=>'225', 'priority'=>0, 'areaCodes'=>'null'),
    'hr' => array('name'=>'Croatia (Hrvatska)', 'iso2' =>'hr', 'dialCode'=>'385', 'priority'=>0, 'areaCodes'=>'null'),
    'cu' => array('name'=>'Cuba', 'iso2' =>'cu', 'dialCode'=>'53', 'priority'=>0, 'areaCodes'=>'null'),
    'cw' => array('name'=>'Curaçao', 'iso2' =>'cw', 'dialCode'=>'599', 'priority'=>0, 'areaCodes'=>'null'),
    'cy' => array('name'=>'Cyprus (Κύπρος)', 'iso2' =>'cy', 'dialCode'=>'357', 'priority'=>0, 'areaCodes'=>'null'),
    'cz' => array('name'=>'Czech Republic (Česká republika)', 'iso2' =>'cz', 'dialCode'=>'420', 'priority'=>0, 'areaCodes'=>'null'),
    'dk' => array('name'=>'Denmark (Danmark)', 'iso2' =>'dk', 'dialCode'=>'45', 'priority'=>0, 'areaCodes'=>'null'),
    'dj' => array('name'=>'Djibouti', 'iso2' =>'dj', 'dialCode'=>'253', 'priority'=>0, 'areaCodes'=>'null'),
    'dm' => array('name'=>'Dominica', 'iso2' =>'dm', 'dialCode'=>'1767', 'priority'=>0, 'areaCodes'=>'null'),
    'do' => array('name'=>'Dominican Republic (República Dominicana)', 'iso2' =>'do', 'dialCode'=>'1', 'priority'=>2, 'areaCodes'=>'Array'),
    'ec' => array('name'=>'Ecuador', 'iso2' =>'ec', 'dialCode'=>'593', 'priority'=>0, 'areaCodes'=>'null'),
    'eg' => array('name'=>'Egypt (‫مصر‬‎)', 'iso2' =>'eg', 'dialCode'=>'20', 'priority'=>0, 'areaCodes'=>'null'),
    'sv' => array('name'=>'El Salvador', 'iso2' =>'sv', 'dialCode'=>'503', 'priority'=>0, 'areaCodes'=>'null'),
    'gq' => array('name'=>'Equatorial Guinea (Guinea Ecuatorial)', 'iso2' =>'gq', 'dialCode'=>'240', 'priority'=>0, 'areaCodes'=>'null'),
    'er' => array('name'=>'Eritrea', 'iso2' =>'er', 'dialCode'=>'291', 'priority'=>0, 'areaCodes'=>'null'),
    'ee' => array('name'=>'Estonia (Eesti)', 'iso2' =>'ee', 'dialCode'=>'372', 'priority'=>0, 'areaCodes'=>'null'),
    'et' => array('name'=>'Ethiopia', 'iso2' =>'et', 'dialCode'=>'251', 'priority'=>0, 'areaCodes'=>'null'),
    'fk' => array('name'=>'Falkland Islands (Islas Malvinas)', 'iso2' =>'fk', 'dialCode'=>'500', 'priority'=>0, 'areaCodes'=>'null'),
    'fo' => array('name'=>'Faroe Islands (Føroyar)', 'iso2' =>'fo', 'dialCode'=>'298', 'priority'=>0, 'areaCodes'=>'null'),
    'fj' => array('name'=>'Fiji', 'iso2' =>'fj', 'dialCode'=>'679', 'priority'=>0, 'areaCodes'=>'null'),
    'fi' => array('name'=>'Finland (Suomi)', 'iso2' =>'fi', 'dialCode'=>'358', 'priority'=>0, 'areaCodes'=>'null'),
    'fr' => array('name'=>'France', 'iso2' =>'fr', 'dialCode'=>'33', 'priority'=>0, 'areaCodes'=>'null'),
    'gf' => array('name'=>'French Guiana (Guyane française)', 'iso2' =>'gf', 'dialCode'=>'594', 'priority'=>0, 'areaCodes'=>'null'),
    'pf' => array('name'=>'French Polynesia (Polynésie française)', 'iso2' =>'pf', 'dialCode'=>'689', 'priority'=>0, 'areaCodes'=>'null'),
    'ga' => array('name'=>'Gabon', 'iso2' =>'ga', 'dialCode'=>'241', 'priority'=>0, 'areaCodes'=>'null'),
    'gm' => array('name'=>'Gambia', 'iso2' =>'gm', 'dialCode'=>'220', 'priority'=>0, 'areaCodes'=>'null'),
    'ge' => array('name'=>'Georgia (საქართველო)', 'iso2' =>'ge', 'dialCode'=>'995', 'priority'=>0, 'areaCodes'=>'null'),
    'de' => array('name'=>'Germany (Deutschland)', 'iso2' =>'de', 'dialCode'=>'49', 'priority'=>0, 'areaCodes'=>'null'),
    'gh' => array('name'=>'Ghana (Gaana)', 'iso2' =>'gh', 'dialCode'=>'233', 'priority'=>0, 'areaCodes'=>'null'),
    'gi' => array('name'=>'Gibraltar', 'iso2' =>'gi', 'dialCode'=>'350', 'priority'=>0, 'areaCodes'=>'null'),
    'gr' => array('name'=>'Greece (Ελλάδα)', 'iso2' =>'gr', 'dialCode'=>'30', 'priority'=>0, 'areaCodes'=>'null'),
    'gl' => array('name'=>'Greenland (Kalaallit Nunaat)', 'iso2' =>'gl', 'dialCode'=>'299', 'priority'=>0, 'areaCodes'=>'null'),
    'gd' => array('name'=>'Grenada', 'iso2' =>'gd', 'dialCode'=>'1473', 'priority'=>0, 'areaCodes'=>'null'),
    'gp' => array('name'=>'Guadeloupe', 'iso2' =>'gp', 'dialCode'=>'590', 'priority'=>0, 'areaCodes'=>'null'),
    'gu' => array('name'=>'Guam', 'iso2' =>'gu', 'dialCode'=>'1671', 'priority'=>0, 'areaCodes'=>'null'),
    'gt' => array('name'=>'Guatemala', 'iso2' =>'gt', 'dialCode'=>'502', 'priority'=>0, 'areaCodes'=>'null'),
    'gg' => array('name'=>'Guernsey', 'iso2' =>'gg', 'dialCode'=>'44', 'priority'=>1, 'areaCodes'=>'null'),
    'gn' => array('name'=>'Guinea (Guinée)', 'iso2' =>'gn', 'dialCode'=>'224', 'priority'=>0, 'areaCodes'=>'null'),
    'gw' => array('name'=>'Guinea-Bissau (Guiné Bissau)', 'iso2' =>'gw', 'dialCode'=>'245', 'priority'=>0, 'areaCodes'=>'null'),
    'gy' => array('name'=>'Guyana', 'iso2' =>'gy', 'dialCode'=>'592', 'priority'=>0, 'areaCodes'=>'null'),
    'ht' => array('name'=>'Haiti', 'iso2' =>'ht', 'dialCode'=>'509', 'priority'=>0, 'areaCodes'=>'null'),
    'hn' => array('name'=>'Honduras', 'iso2' =>'hn', 'dialCode'=>'504', 'priority'=>0, 'areaCodes'=>'null'),
    'hk' => array('name'=>'Hong Kong (香港)', 'iso2' =>'hk', 'dialCode'=>'852', 'priority'=>0, 'areaCodes'=>'null'),
    'hu' => array('name'=>'Hungary (Magyarország)', 'iso2' =>'hu', 'dialCode'=>'36', 'priority'=>0, 'areaCodes'=>'null'),
    'is' => array('name'=>'Iceland (Ísland)', 'iso2' =>'is', 'dialCode'=>'354', 'priority'=>0, 'areaCodes'=>'null'),
    'in' => array('name'=>'India (भारत)', 'iso2' =>'in', 'dialCode'=>'91', 'priority'=>0, 'areaCodes'=>'null'),
    'id' => array('name'=>'Indonesia', 'iso2' =>'id', 'dialCode'=>'62', 'priority'=>0, 'areaCodes'=>'null'),
    'ir' => array('name'=>'Iran (‫ایران‬‎)', 'iso2' =>'ir', 'dialCode'=>'98', 'priority'=>0, 'areaCodes'=>'null'),
    'iq' => array('name'=>'Iraq (‫العراق‬‎)', 'iso2' =>'iq', 'dialCode'=>'964', 'priority'=>0, 'areaCodes'=>'null'),
    'ie' => array('name'=>'Ireland', 'iso2' =>'ie', 'dialCode'=>'353', 'priority'=>0, 'areaCodes'=>'null'),
    'im' => array('name'=>'Isle of Man', 'iso2' =>'im', 'dialCode'=>'44', 'priority'=>2, 'areaCodes'=>'null'),
    'il' => array('name'=>'Israel (‫ישראל‬‎)', 'iso2' =>'il', 'dialCode'=>'972', 'priority'=>0, 'areaCodes'=>'null'),
    'it' => array('name'=>'Italy (Italia)', 'iso2' =>'it', 'dialCode'=>'39', 'priority'=>0, 'areaCodes'=>'null'),
    'jm' => array('name'=>'Jamaica', 'iso2' =>'jm', 'dialCode'=>'1876', 'priority'=>0, 'areaCodes'=>'null'),
    'jp' => array('name'=>'Japan (日本)', 'iso2' =>'jp', 'dialCode'=>'81', 'priority'=>0, 'areaCodes'=>'null'),
    'je' => array('name'=>'Jersey', 'iso2' =>'je', 'dialCode'=>'44', 'priority'=>3, 'areaCodes'=>'null'),
    'jo' => array('name'=>'Jordan (‫الأردن‬‎)', 'iso2' =>'jo', 'dialCode'=>'962', 'priority'=>0, 'areaCodes'=>'null'),
    'kz' => array('name'=>'Kazakhstan (Казахстан)', 'iso2' =>'kz', 'dialCode'=>'7', 'priority'=>1, 'areaCodes'=>'null'),
    'ke' => array('name'=>'Kenya', 'iso2' =>'ke', 'dialCode'=>'254', 'priority'=>0, 'areaCodes'=>'null'),
    'ki' => array('name'=>'Kiribati', 'iso2' =>'ki', 'dialCode'=>'686', 'priority'=>0, 'areaCodes'=>'null'),
    'xk' => array('name'=>'Kosovo', 'iso2' =>'xk', 'dialCode'=>'383', 'priority'=>0, 'areaCodes'=>'null'),
    'kw' => array('name'=>'Kuwait (‫الكويت‬‎)', 'iso2' =>'kw', 'dialCode'=>'965', 'priority'=>0, 'areaCodes'=>'null'),
    'kg' => array('name'=>'Kyrgyzstan (Кыргызстан)', 'iso2' =>'kg', 'dialCode'=>'996', 'priority'=>0, 'areaCodes'=>'null'),
    'la' => array('name'=>'Laos (ລາວ)', 'iso2' =>'la', 'dialCode'=>'856', 'priority'=>0, 'areaCodes'=>'null'),
    'lv' => array('name'=>'Latvia (Latvija)', 'iso2' =>'lv', 'dialCode'=>'371', 'priority'=>0, 'areaCodes'=>'null'),
    'lb' => array('name'=>'Lebanon (‫لبنان‬‎)', 'iso2' =>'lb', 'dialCode'=>'961', 'priority'=>0, 'areaCodes'=>'null'),
    'ls' => array('name'=>'Lesotho', 'iso2' =>'ls', 'dialCode'=>'266', 'priority'=>0, 'areaCodes'=>'null'),
    'lr' => array('name'=>'Liberia', 'iso2' =>'lr', 'dialCode'=>'231', 'priority'=>0, 'areaCodes'=>'null'),
    'ly' => array('name'=>'Libya (‫ليبيا‬‎)', 'iso2' =>'ly', 'dialCode'=>'218', 'priority'=>0, 'areaCodes'=>'null'),
    'li' => array('name'=>'Liechtenstein', 'iso2' =>'li', 'dialCode'=>'423', 'priority'=>0, 'areaCodes'=>'null'),
    'lt' => array('name'=>'Lithuania (Lietuva)', 'iso2' =>'lt', 'dialCode'=>'370', 'priority'=>0, 'areaCodes'=>'null'),
    'lu' => array('name'=>'Luxembourg', 'iso2' =>'lu', 'dialCode'=>'352', 'priority'=>0, 'areaCodes'=>'null'),
    'mo' => array('name'=>'Macau (澳門)', 'iso2' =>'mo', 'dialCode'=>'853', 'priority'=>0, 'areaCodes'=>'null'),
    'mk' => array('name'=>'Macedonia (FYROM) (Македонија)', 'iso2' =>'mk', 'dialCode'=>'389', 'priority'=>0, 'areaCodes'=>'null'),
    'mg' => array('name'=>'Madagascar (Madagasikara)', 'iso2' =>'mg', 'dialCode'=>'261', 'priority'=>0, 'areaCodes'=>'null'),
    'mw' => array('name'=>'Malawi', 'iso2' =>'mw', 'dialCode'=>'265', 'priority'=>0, 'areaCodes'=>'null'),
    'my' => array('name'=>'Malaysia', 'iso2' =>'my', 'dialCode'=>'60', 'priority'=>0, 'areaCodes'=>'null'),
    'mv' => array('name'=>'Maldives', 'iso2' =>'mv', 'dialCode'=>'960', 'priority'=>0, 'areaCodes'=>'null'),
    'ml' => array('name'=>'Mali', 'iso2' =>'ml', 'dialCode'=>'223', 'priority'=>0, 'areaCodes'=>'null'),
    'mt' => array('name'=>'Malta', 'iso2' =>'mt', 'dialCode'=>'356', 'priority'=>0, 'areaCodes'=>'null'),
    'mh' => array('name'=>'Marshall Islands', 'iso2' =>'mh', 'dialCode'=>'692', 'priority'=>0, 'areaCodes'=>'null'),
    'mq' => array('name'=>'Martinique', 'iso2' =>'mq', 'dialCode'=>'596', 'priority'=>0, 'areaCodes'=>'null'),
    'mr' => array('name'=>'Mauritania (‫موريتانيا‬‎)', 'iso2' =>'mr', 'dialCode'=>'222', 'priority'=>0, 'areaCodes'=>'null'),
    'mu' => array('name'=>'Mauritius (Moris)', 'iso2' =>'mu', 'dialCode'=>'230', 'priority'=>0, 'areaCodes'=>'null'),
    'yt' => array('name'=>'Mayotte', 'iso2' =>'yt', 'dialCode'=>'262', 'priority'=>1, 'areaCodes'=>'null'),
    'mx' => array('name'=>'Mexico (México)', 'iso2' =>'mx', 'dialCode'=>'52', 'priority'=>0, 'areaCodes'=>'null'),
    'fm' => array('name'=>'Micronesia', 'iso2' =>'fm', 'dialCode'=>'691', 'priority'=>0, 'areaCodes'=>'null'),
    'md' => array('name'=>'Moldova (Republica Moldova)', 'iso2' =>'md', 'dialCode'=>'373', 'priority'=>0, 'areaCodes'=>'null'),
    'mc' => array('name'=>'Monaco', 'iso2' =>'mc', 'dialCode'=>'377', 'priority'=>0, 'areaCodes'=>'null'),
    'mn' => array('name'=>'Mongolia (Монгол)', 'iso2' =>'mn', 'dialCode'=>'976', 'priority'=>0, 'areaCodes'=>'null'),
    'me' => array('name'=>'Montenegro (Crna Gora)', 'iso2' =>'me', 'dialCode'=>'382', 'priority'=>0, 'areaCodes'=>'null'),
    'ms' => array('name'=>'Montserrat', 'iso2' =>'ms', 'dialCode'=>'1664', 'priority'=>0, 'areaCodes'=>'null'),
    'ma' => array('name'=>'Morocco (‫المغرب‬‎)', 'iso2' =>'ma', 'dialCode'=>'212', 'priority'=>0, 'areaCodes'=>'null'),
    'mz' => array('name'=>'Mozambique (Moçambique)', 'iso2' =>'mz', 'dialCode'=>'258', 'priority'=>0, 'areaCodes'=>'null'),
    'mm' => array('name'=>'Myanmar (Burma) (မြန်မာ)', 'iso2' =>'mm', 'dialCode'=>'95', 'priority'=>0, 'areaCodes'=>'null'),
    'na' => array('name'=>'Namibia (Namibië)', 'iso2' =>'na', 'dialCode'=>'264', 'priority'=>0, 'areaCodes'=>'null'),
    'nr' => array('name'=>'Nauru', 'iso2' =>'nr', 'dialCode'=>'674', 'priority'=>0, 'areaCodes'=>'null'),
    'np' => array('name'=>'Nepal (नेपाल)', 'iso2' =>'np', 'dialCode'=>'977', 'priority'=>0, 'areaCodes'=>'null'),
    'nl' => array('name'=>'Netherlands (Nederland)', 'iso2' =>'nl', 'dialCode'=>'31', 'priority'=>0, 'areaCodes'=>'null'),
    'nc' => array('name'=>'New Caledonia (Nouvelle-Calédonie)', 'iso2' =>'nc', 'dialCode'=>'687', 'priority'=>0, 'areaCodes'=>'null'),
    'nz' => array('name'=>'New Zealand', 'iso2' =>'nz', 'dialCode'=>'64', 'priority'=>0, 'areaCodes'=>'null'),
    'ni' => array('name'=>'Nicaragua', 'iso2' =>'ni', 'dialCode'=>'505', 'priority'=>0, 'areaCodes'=>'null'),
    'ne' => array('name'=>'Niger (Nijar)', 'iso2' =>'ne', 'dialCode'=>'227', 'priority'=>0, 'areaCodes'=>'null'),
    'ng' => array('name'=>'Nigeria', 'iso2' =>'ng', 'dialCode'=>'234', 'priority'=>0, 'areaCodes'=>'null'),
    'nu' => array('name'=>'Niue', 'iso2' =>'nu', 'dialCode'=>'683', 'priority'=>0, 'areaCodes'=>'null'),
    'nf' => array('name'=>'Norfolk Island', 'iso2' =>'nf', 'dialCode'=>'672', 'priority'=>0, 'areaCodes'=>'null'),
    'kp' => array('name'=>'North Korea (조선 민주주의 인민 공화국)', 'iso2' =>'kp', 'dialCode'=>'850', 'priority'=>0, 'areaCodes'=>'null'),
    'mp' => array('name'=>'Northern Mariana Islands', 'iso2' =>'mp', 'dialCode'=>'1670', 'priority'=>0, 'areaCodes'=>'null'),
    'no' => array('name'=>'Norway (Norge)', 'iso2' =>'no', 'dialCode'=>'47', 'priority'=>0, 'areaCodes'=>'null'),
    'om' => array('name'=>'Oman (‫عُمان‬‎)', 'iso2' =>'om', 'dialCode'=>'968', 'priority'=>0, 'areaCodes'=>'null'),
    'pk' => array('name'=>'Pakistan (‫پاکستان‬‎)', 'iso2' =>'pk', 'dialCode'=>'92', 'priority'=>0, 'areaCodes'=>'null'),
    'pw' => array('name'=>'Palau', 'iso2' =>'pw', 'dialCode'=>'680', 'priority'=>0, 'areaCodes'=>'null'),
    'ps' => array('name'=>'Palestine (‫فلسطين‬‎)', 'iso2' =>'ps', 'dialCode'=>'970', 'priority'=>0, 'areaCodes'=>'null'),
    'pa' => array('name'=>'Panama (Panamá)', 'iso2' =>'pa', 'dialCode'=>'507', 'priority'=>0, 'areaCodes'=>'null'),
    'pg' => array('name'=>'Papua New Guinea', 'iso2' =>'pg', 'dialCode'=>'675', 'priority'=>0, 'areaCodes'=>'null'),
    'py' => array('name'=>'Paraguay', 'iso2' =>'py', 'dialCode'=>'595', 'priority'=>0, 'areaCodes'=>'null'),
    'pe' => array('name'=>'Peru (Perú)', 'iso2' =>'pe', 'dialCode'=>'51', 'priority'=>0, 'areaCodes'=>'null'),
    'ph' => array('name'=>'Philippines', 'iso2' =>'ph', 'dialCode'=>'63', 'priority'=>0, 'areaCodes'=>'null'),
    'pl' => array('name'=>'Poland (Polska)', 'iso2' =>'pl', 'dialCode'=>'48', 'priority'=>0, 'areaCodes'=>'null'),
    'pt' => array('name'=>'Portugal', 'iso2' =>'pt', 'dialCode'=>'351', 'priority'=>0, 'areaCodes'=>'null'),
    'pr' => array('name'=>'Puerto Rico', 'iso2' =>'pr', 'dialCode'=>'1', 'priority'=>3, 'areaCodes'=>'Array'),
    'qa' => array('name'=>'Qatar (‫قطر‬‎)', 'iso2' =>'qa', 'dialCode'=>'974', 'priority'=>0, 'areaCodes'=>'null'),
    're' => array('name'=>'Réunion (La Réunion)', 'iso2' =>'re', 'dialCode'=>'262', 'priority'=>0, 'areaCodes'=>'null'),
    'ro' => array('name'=>'Romania (România)', 'iso2' =>'ro', 'dialCode'=>'40', 'priority'=>0, 'areaCodes'=>'null'),
    'ru' => array('name'=>'Russia (Россия)', 'iso2' =>'ru', 'dialCode'=>'7', 'priority'=>0, 'areaCodes'=>'null'),
    'rw' => array('name'=>'Rwanda', 'iso2' =>'rw', 'dialCode'=>'250', 'priority'=>0, 'areaCodes'=>'null'),
    'bl' => array('name'=>'Saint Barthélemy (Saint-Barthélemy)', 'iso2' =>'bl', 'dialCode'=>'590', 'priority'=>1, 'areaCodes'=>'null'),
    'sh' => array('name'=>'Saint Helena', 'iso2' =>'sh', 'dialCode'=>'290', 'priority'=>0, 'areaCodes'=>'null'),
    'kn' => array('name'=>'Saint Kitts and Nevis', 'iso2' =>'kn', 'dialCode'=>'1869', 'priority'=>0, 'areaCodes'=>'null'),
    'lc' => array('name'=>'Saint Lucia', 'iso2' =>'lc', 'dialCode'=>'1758', 'priority'=>0, 'areaCodes'=>'null'),
    'mf' => array('name'=>'Saint Martin (Saint-Martin (partie française))', 'iso2' =>'mf', 'dialCode'=>'590', 'priority'=>2, 'areaCodes'=>'null'),
    'pm' => array('name'=>'Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)', 'iso2' =>'pm', 'dialCode'=>'508', 'priority'=>0, 'areaCodes'=>'null'),
    'vc' => array('name'=>'Saint Vincent and the Grenadines', 'iso2' =>'vc', 'dialCode'=>'1784', 'priority'=>0, 'areaCodes'=>'null'),
    'ws' => array('name'=>'Samoa', 'iso2' =>'ws', 'dialCode'=>'685', 'priority'=>0, 'areaCodes'=>'null'),
    'sm' => array('name'=>'San Marino', 'iso2' =>'sm', 'dialCode'=>'378', 'priority'=>0, 'areaCodes'=>'null'),
    'st' => array('name'=>'São Tomé and Príncipe (São Tomé e Príncipe)', 'iso2' =>'st', 'dialCode'=>'239', 'priority'=>0, 'areaCodes'=>'null'),
    'sa' => array('name'=>'Saudi Arabia (‫المملكة العربية السعودية‬‎)', 'iso2' =>'sa', 'dialCode'=>'966', 'priority'=>0, 'areaCodes'=>'null'),
    'sn' => array('name'=>'Senegal (Sénégal)', 'iso2' =>'sn', 'dialCode'=>'221', 'priority'=>0, 'areaCodes'=>'null'),
    'rs' => array('name'=>'Serbia (Србија)', 'iso2' =>'rs', 'dialCode'=>'381', 'priority'=>0, 'areaCodes'=>'null'),
    'sc' => array('name'=>'Seychelles', 'iso2' =>'sc', 'dialCode'=>'248', 'priority'=>0, 'areaCodes'=>'null'),
    'sl' => array('name'=>'Sierra Leone', 'iso2' =>'sl', 'dialCode'=>'232', 'priority'=>0, 'areaCodes'=>'null'),
    'sg' => array('name'=>'Singapore', 'iso2' =>'sg', 'dialCode'=>'65', 'priority'=>0, 'areaCodes'=>'null'),
    'sx' => array('name'=>'Sint Maarten', 'iso2' =>'sx', 'dialCode'=>'1721', 'priority'=>0, 'areaCodes'=>'null'),
    'sk' => array('name'=>'Slovakia (Slovensko)', 'iso2' =>'sk', 'dialCode'=>'421', 'priority'=>0, 'areaCodes'=>'null'),
    'si' => array('name'=>'Slovenia (Slovenija)', 'iso2' =>'si', 'dialCode'=>'386', 'priority'=>0, 'areaCodes'=>'null'),
    'sb' => array('name'=>'Solomon Islands', 'iso2' =>'sb', 'dialCode'=>'677', 'priority'=>0, 'areaCodes'=>'null'),
    'so' => array('name'=>'Somalia (Soomaaliya)', 'iso2' =>'so', 'dialCode'=>'252', 'priority'=>0, 'areaCodes'=>'null'),
    'za' => array('name'=>'South Africa', 'iso2' =>'za', 'dialCode'=>'27', 'priority'=>0, 'areaCodes'=>'null'),
    'kr' => array('name'=>'South Korea (대한민국)', 'iso2' =>'kr', 'dialCode'=>'82', 'priority'=>0, 'areaCodes'=>'null'),
    'ss' => array('name'=>'South Sudan (‫جنوب السودان‬‎)', 'iso2' =>'ss', 'dialCode'=>'211', 'priority'=>0, 'areaCodes'=>'null'),
    'es' => array('name'=>'Spain (España)', 'iso2' =>'es', 'dialCode'=>'34', 'priority'=>0, 'areaCodes'=>'null'),
    'lk' => array('name'=>'Sri Lanka (ශ්‍රී ලංකාව)', 'iso2' =>'lk', 'dialCode'=>'94', 'priority'=>0, 'areaCodes'=>'null'),
    'sd' => array('name'=>'Sudan (‫السودان‬‎)', 'iso2' =>'sd', 'dialCode'=>'249', 'priority'=>0, 'areaCodes'=>'null'),
    'sr' => array('name'=>'Suriname', 'iso2' =>'sr', 'dialCode'=>'597', 'priority'=>0, 'areaCodes'=>'null'),
    'sj' => array('name'=>'Svalbard and Jan Mayen', 'iso2' =>'sj', 'dialCode'=>'47', 'priority'=>1, 'areaCodes'=>'null'),
    'sz' => array('name'=>'Swaziland', 'iso2' =>'sz', 'dialCode'=>'268', 'priority'=>0, 'areaCodes'=>'null'),
    'se' => array('name'=>'Sweden (Sverige)', 'iso2' =>'se', 'dialCode'=>'46', 'priority'=>0, 'areaCodes'=>'null'),
    'ch' => array('name'=>'Switzerland (Schweiz)', 'iso2' =>'ch', 'dialCode'=>'41', 'priority'=>0, 'areaCodes'=>'null'),
    'sy' => array('name'=>'Syria (‫سوريا‬‎)', 'iso2' =>'sy', 'dialCode'=>'963', 'priority'=>0, 'areaCodes'=>'null'),
    'tw' => array('name'=>'Taiwan (台灣)', 'iso2' =>'tw', 'dialCode'=>'886', 'priority'=>0, 'areaCodes'=>'null'),
    'tj' => array('name'=>'Tajikistan', 'iso2' =>'tj', 'dialCode'=>'992', 'priority'=>0, 'areaCodes'=>'null'),
    'tz' => array('name'=>'Tanzania', 'iso2' =>'tz', 'dialCode'=>'255', 'priority'=>0, 'areaCodes'=>'null'),
    'th' => array('name'=>'Thailand (ไทย)', 'iso2' =>'th', 'dialCode'=>'66', 'priority'=>0, 'areaCodes'=>'null'),
    'tl' => array('name'=>'Timor-Leste', 'iso2' =>'tl', 'dialCode'=>'670', 'priority'=>0, 'areaCodes'=>'null'),
    'tg' => array('name'=>'Togo', 'iso2' =>'tg', 'dialCode'=>'228', 'priority'=>0, 'areaCodes'=>'null'),
    'tk' => array('name'=>'Tokelau', 'iso2' =>'tk', 'dialCode'=>'690', 'priority'=>0, 'areaCodes'=>'null'),
    'to' => array('name'=>'Tonga', 'iso2' =>'to', 'dialCode'=>'676', 'priority'=>0, 'areaCodes'=>'null'),
    'tt' => array('name'=>'Trinidad and Tobago', 'iso2' =>'tt', 'dialCode'=>'1868', 'priority'=>0, 'areaCodes'=>'null'),
    'tn' => array('name'=>'Tunisia (‫تونس‬‎)', 'iso2' =>'tn', 'dialCode'=>'216', 'priority'=>0, 'areaCodes'=>'null'),
    'tr' => array('name'=>'Turkey (Türkiye)', 'iso2' =>'tr', 'dialCode'=>'90', 'priority'=>0, 'areaCodes'=>'null'),
    'tm' => array('name'=>'Turkmenistan', 'iso2' =>'tm', 'dialCode'=>'993', 'priority'=>0, 'areaCodes'=>'null'),
    'tc' => array('name'=>'Turks and Caicos Islands', 'iso2' =>'tc', 'dialCode'=>'1649', 'priority'=>0, 'areaCodes'=>'null'),
    'tv' => array('name'=>'Tuvalu', 'iso2' =>'tv', 'dialCode'=>'688', 'priority'=>0, 'areaCodes'=>'null'),
    'vi' => array('name'=>'U.S. Virgin Islands', 'iso2' =>'vi', 'dialCode'=>'1340', 'priority'=>0, 'areaCodes'=>'null'),
    'ug' => array('name'=>'Uganda', 'iso2' =>'ug', 'dialCode'=>'256', 'priority'=>0, 'areaCodes'=>'null'),
    'ua' => array('name'=>'Ukraine (Україна)', 'iso2' =>'ua', 'dialCode'=>'380', 'priority'=>0, 'areaCodes'=>'null'),
    'ae' => array('name'=>'United Arab Emirates (‫الإمارات العربية المتحدة‬‎)', 'iso2' =>'ae', 'dialCode'=>'971', 'priority'=>0, 'areaCodes'=>'null'),
    'gb' => array('name'=>'United Kingdom', 'iso2' =>'gb', 'dialCode'=>'44', 'priority'=>0, 'areaCodes'=>'null'),
    'us' => array('name'=>'United States', 'iso2' =>'us', 'dialCode'=>'1', 'priority'=>0, 'areaCodes'=>'null'),
    'uy' => array('name'=>'Uruguay', 'iso2' =>'uy', 'dialCode'=>'598', 'priority'=>0, 'areaCodes'=>'null'),
    'uz' => array('name'=>'Uzbekistan (Oʻzbekiston)', 'iso2' =>'uz', 'dialCode'=>'998', 'priority'=>0, 'areaCodes'=>'null'),
    'vu' => array('name'=>'Vanuatu', 'iso2' =>'vu', 'dialCode'=>'678', 'priority'=>0, 'areaCodes'=>'null'),
    'va' => array('name'=>'Vatican City (Città del Vaticano)', 'iso2' =>'va', 'dialCode'=>'39', 'priority'=>1, 'areaCodes'=>'null'),
    've' => array('name'=>'Venezuela', 'iso2' =>'ve', 'dialCode'=>'58', 'priority'=>0, 'areaCodes'=>'null'),
    'vn' => array('name'=>'Vietnam (Việt Nam)', 'iso2' =>'vn', 'dialCode'=>'84', 'priority'=>0, 'areaCodes'=>'null'),
    'wf' => array('name'=>'Wallis and Futuna', 'iso2' =>'wf', 'dialCode'=>'681', 'priority'=>0, 'areaCodes'=>'null'),
    'eh' => array('name'=>'Western Sahara (‫الصحراء الغربية‬‎)', 'iso2' =>'eh', 'dialCode'=>'212', 'priority'=>1, 'areaCodes'=>'null'),
    'ye' => array('name'=>'Yemen (‫اليمن‬‎)', 'iso2' =>'ye', 'dialCode'=>'967', 'priority'=>0, 'areaCodes'=>'null'),
    'zm' => array('name'=>'Zambia', 'iso2' =>'zm', 'dialCode'=>'260', 'priority'=>0, 'areaCodes'=>'null'),
    'zw' => array('name'=>'Zimbabwe', 'iso2' =>'zw', 'dialCode'=>'263', 'priority'=>0, 'areaCodes'=>'null'),
    'ax' => array('name'=>'Åland Islands', 'iso2' =>'ax', 'dialCode'=>'358', 'priority'=>1, 'areaCodes'=>'null'),
  );
  if(isset($mapping[$countryCode])){
    return '+'.$mapping[$countryCode]['dialCode'];  
  }
  return '';
}

function _get_dial_code_by_phone_number($phoneNumber) {
  $processNo = str_replace('+', '',$phoneNumber); 
  $sid = variable_get('twilio_account');
  $authToken = variable_get('twilio_token');
  $output = '';
  if(!empty($sid) && !empty($authToken) && $phoneNumber) {
    $url = 'https://lookups.twilio.com/v1/PhoneNumbers/'.$processNo;
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_USERPWD, $sid.":".$authToken);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $response  = curl_exec($ch);
    $response_json = json_decode($response, true);  
  if(!empty($response_json) && isset($response_json['country_code'])) {
    $output = _get_country_internation_phone_dial_code(strtolower($response_json['country_code']));   
  }
    curl_close($ch);  
  }
  return $output;
}



function _get_user_mail_realname_by_uid($uid){
  $query = db_select('users','u');
  $query->leftjoin('field_data_field_first_name','uffn','uffn.entity_id=u.uid');
  $query->leftjoin('field_data_field_last_name','ufln','ufln.entity_id=u.uid');
  $query->fields('uffn',array('field_first_name_value'));
  $query->fields('ufln',array('field_last_name_value'));
  $query->condition('u.uid',$uid,'=');
  $query->fields('u',array('mail', 'name'));
  $result = $query->execute()->fetchAssoc();
  $realname = _get_user_full_name($uid);
  $result['realname'] = $realname;  
  return $result; 
}

function _get_user_primary_company($uid){
  $query = db_select('users','u');
  $query->leftJoin ('field_data_field_primary_company', 'fpc', 'fpc.entity_id=u.uid'); 
  $query->addField('fpc','field_primary_company_value');
  $query->condition('u.uid',$uid);
  $result = $query->execute()->fetchColumn(0); 
  return $result;
}

function _get_company_hide_on_userprofile($uid){            
  $query = db_select('m6connect_company_name_hideon_profile','mcnhp'); 
  $query->fields('mcnhp',array('company_nid'));
  $query->condition('mcnhp.user_uid',$uid,'=');
  $result = $query->execute()->fetchCol(); 
  return $result;
}

function _generate_m6connect_confidential_key($type,$uid,$length){
  global $company;
  $nodeuser = user_load($uid);
  $currentTime = time();
  $datatohash = $currentTime.$nodeuser->login.uniqid().str_shuffle($nodeuser->uuid).$uid.$type.$company->nid.$currentTime;
  $datatohash = str_shuffle($datatohash);
  $datatohash = drupal_hash_base64($datatohash);
  $datatohash = str_shuffle($datatohash);
  return substr($datatohash,0,$length);
}

function _get_user_data_by_uid($uid){
  $query= db_select('users', 'u'); 
  $query->leftjoin('field_data_field_first_name','uffn','uffn.entity_id=u.uid');
  $query->leftjoin('field_data_field_last_name','ufln','ufln.entity_id=u.uid');
  $query->fields('u',array('name','mail','timezone','status'));
  $query->addField('uffn','field_first_name_value','first_name');
  $query->addField('ufln','field_last_name_value','last_name');
  $query->addExpression("CONCAT(uffn.field_first_name_value, ' ', ufln.field_last_name_value)", 'realname');
  $query->condition('u.uid', $uid, '=');
  $ReturnObj = $query->execute()->fetchAssoc();
  return $ReturnObj;
}

function _get_user_profile_photo_by_uid($uid){
  $query= db_select('users', 'u'); 
  $query->leftjoin('field_data_field_user_profile_photo','fdfupp','fdfupp.entity_id=u.uid');
  $query->fields('fdfupp',array('field_user_profile_photo_fid'));
  $query->condition('u.uid', $uid, '=');
  $ReturnObj = $query->execute()->fetchAssoc();
  $photo = file_create_url(file_load($ReturnObj['field_user_profile_photo_fid'])->uri);
  return $photo;
}


/**
 * Helper function to get node title by node id.
 * @param $data
 *   This variable can of three types.
 *    1. Integer - A single ID is received, and the title will be returned as
 *       string.
 *    2. Array - An array of IDs is received, title of nodes shall be returned
 *       in array itself, while preserving the array keys.
 *    3. Object - A node object is received. @return String.
 */
function _get_node_title_by_nid($data = NULL) {
  $return = '';
  if (empty($data)) {
    return $return;
  }

  if (is_numeric($data)) {
    return _get_title_of_node($data);
  }

  if (is_object($data) && !empty($data->title)) {
    return $data->title;
  }

  if (is_array($data)) {
    $return = array();
    foreach ($data as $key => $value) {
      $return[$key] = _get_title_of_node($value);
    }
  }

  return $return;
}

/**
 * Helper function to know if a user is company admin.
 */
function _is_user_company_admin($company = FALSE, $user = FALSE) {
  if (empty($company->nid)) {
    global $company;
  }

  if (empty($user->uid)) {
    global $user;
  }

  $user_og_roles = og_get_user_roles('node', $company->nid, $user->uid, FALSE);
  return in_array('company admin', $user_og_roles);
}

/**
 * Helper function to know if a user is vendor manager.
 */
function _is_user_material_manager($company = FALSE, $user = FALSE) {
  if (empty($company->nid)) {
    global $company;
  }

  if (empty($user->uid)) {
    global $user;
  }

  $user_og_roles = og_get_user_roles('node', $company->nid, $user->uid, FALSE);
  return in_array('Material Manager', $user_og_roles);
}

/**
 * Helper function to get node id by title.
 */
function _get_nid_by_title($title = '', $type = 'organization') {
  if (empty($title)) {
    return $title;
  }

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->condition('title', $title);
  $query->condition('type', $type, '=');
  $query->range(0, 1); // Get the very first match.
  $nid = $query->execute()->fetchField();
  return $nid;
}

/**
 * Helper function to get company names.
 */
function _get_company_names() {
  global $company;
  $companyData = db_select('node', 't')
    ->fields('t', array('nid', 'title'))
    ->condition('type', 'organization')
    ->condition('status', 1)
    ->condition('nid', $company->nid, '<>')
    ->execute()
    ->fetchAllKeyed(0,1);
  $companyData = array(0 => 'none') + $companyData;
  return $companyData;
}

/**
 * Multiple email validator.
 */
function vendor_multiple_email_validate($element, &$form_state, $form){
  $value = $element['#value'];
  if($value != '') {
    $value = str_replace(' ', '', $value);
    $emails = explode(',', $value);
    if (!empty($emails)) {
      foreach ($emails as $email) {
        if (!valid_email_address($email)) {
          form_error($element, t('Please enter a valid email address.'));
          break;
        }
      }
    }
  }
}
// ////////////////////////////////////////////////////////////////////////////////////////////
// //////////////////////End New Company Requirement Global Function///////////////////////////
// ////////////////////////////////////////////////////////////////////////////////////////////

/* * *********************** 5 time login message changed ************************************* */
function my_login_final_validate($form, &$form_state) { // pre($form_state,1);
  if (empty ( $form_state ['uid'] )) {
    // Always register an IP-based failed login event.
    flood_register_event ( 'failed_login_attempt_ip', variable_get ( 'user_failed_login_ip_window', 3600 ) );
    // Register a per-user failed login event.
    if (isset ( $form_state ['flood_control_user_identifier'] )) {
      flood_register_event ( 'failed_login_attempt_user', variable_get ( 'user_failed_login_user_window', 21600 ), $form_state ['flood_control_user_identifier'] );
    }
    
    if (isset ( $form_state ['flood_control_triggered'] )) {
      if ($form_state ['flood_control_triggered'] == 'user') {
        form_set_error ( 'name', format_plural ( variable_get ( 'user_failed_login_user_limit', 5 ), 'Sorry, there has been more than one failed login attempt for this account. It is temporarily blocked. <a href="@url">request a new password</a>.', 'Sorry, there have been more than @count failed login attempts for this account. It is temporarily blocked. Request to be unlocked, Contact <a href="mailto:support@m6connect.com">support@m6connect.com</a>.', array (
            '@url' => url ( 'user/password' ) 
        ) ) );
      } else {
        // We did not find a uid, so the limit is IP-based.
        form_set_error ( 'name', t ( 'Sorry, too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array (
            '@url' => url ( 'user/password' ) 
        ) ) );
      }
    } else {
      form_set_error ( 'name', t ( 'Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', array (
          '@password' => url ( 'user/password', array (
              'query' => array (
                  'name' => $form_state['values']['email'] 
              ) 
          ) ) 
      ) ) );
      watchdog ( 'user', 'Login attempt failed for %user.', array (
          '%user' => $form_state ['values'] ['name'] 
      ) );
    }
  } elseif (isset ( $form_state ['flood_control_user_identifier'] )) {
    // Clear past failures for this user so as not to block a user who might
    // log in and out more than once in an hour.
    flood_clear_event ( 'failed_login_attempt_user', $form_state ['flood_control_user_identifier'] );
  }
}
function TTTrfp_bidder_feedback_report_xls($nid) {
  include_once DRUPAL_ROOT . '/sites/all/libraries/xlsxwriter/xlsxwriter.class.php';
  // $header = array('c1'=>'string','c2'=>'string','c3'=>'string','c4'=>'string');
  $writer = new XLSXWriter ();
  // $writer->writeSheetHeader('Sheet1', $header );//optional
  // ////////////////////////////////////////////////////////
  global $base_url, $theme_path;
  $node = node_load ( $nid );
  $date = date ( 'm/d/Y', time () );
  $gid = _get_company_nid_by_group_content ( $node );
  $Sendercompany = node_load ( $gid );
  $SendercompanyName = $Sendercompany->title;
  $cimagepath = '';
  $cimgpath = (isset ( $Sendercompany->field_logo ['und'] ) && ! empty ( $Sendercompany->field_logo ['und'] [0] ['uri'] )) ? $Sendercompany->field_logo ['und'] [0] ['uri'] : 0; // pre($pimgpath);
  if ($cimgpath) {
    $cimagepath = image_style_url ( 'thumbnail', $cimgpath );
  }
  $RfpName = $node->title;
  $AuthorUid = $node->uid;
  $Author = user_load ( $AuthorUid );
  $ProjectManager = _get_user_full_name ( $AuthorUid );
  $Phone = (isset ( $Author->field_phone ['und'] ) && isset ( $Author->field_phone ['und'] [0] ['value'] ) && ! empty ( $Author->field_phone ['und'] [0] ['value'] )) ? $Author->field_phone ['und'] [0] ['value'] : '';
  $discription = (isset ( $node->field_rfp_description ['und'] ) && isset ( $node->field_rfp_description ['und'] [0] ['value'] ) && ! empty ( $node->field_rfp_description ['und'] [0] ['value'] )) ? $node->field_rfp_description ['und'] [0] ['value'] : '';
  $discription = strip_tags ( $discription );
  $Public = (isset ( $node->field_public ['und'] ) && isset ( $node->field_public ['und'] [0] ['value'] ) && ! empty ( $node->field_public ['und'] [0] ['value'] )) ? $node->field_rfp_description ['und'] [0] ['value'] : '';
  $RfpType = ($Public == 1) ? 'Public' : 'Private';
  $InvitedBiddersnew = array ();
  $InvitedBidders = get_invited_companies_or_individuals_list_for_bfeedback_report ( $node ); // pre($InvitedBidders);
  if (! empty ( $InvitedBidders ) && count ( $InvitedBidders ) > 0) {
    foreach ( $InvitedBidders as $ib => $id ) {
      $InvitedBiddersnew [] = str_replace ( '&nbsp;', ' ', $id );
    }
  }
  $InvitedBidderslist = implode ( ', ', $InvitedBiddersnew );
  // /////////////////////////////////////////////////////////
  
  $outputrows [] = array (
      $SendercompanyName,
      '',
      '',
      '',
      'Report Date: ',
      $date 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      'Bidder Feedback Report',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'RFP:',
      $RfpName,
      'Project Manager:',
      $ProjectManager,
      'Phone:',
      $Phone 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'RFP Description:',
      $discription,
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'RFP Type:',
      $RfpType,
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'Invited Bidders:',
      $InvitedBidderslist,
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'Bid Packages:',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  
  $bid_packages = get_bidder_feedback_content_data ( $node->nid );
  $BidPackagesexist = (! empty ( $bid_packages )) ? 1 : 0;
  $msgpackageStatus = ($BidPackagesexist) ? 2 : 0;
  $info = get_bidder_feedback_table_data_for_report ( $node->nid, $msgpackageStatus );
  if (! empty ( $bid_packages )) {
    foreach ( $bid_packages as $package_id => $package_name ) {
      $rows = (isset ( $info [$package_id] ['rows'] )) ? $info [$package_id] ['rows'] : array ();
      if (count ( $rows ) > 0) {
        $outputrows [] = array (
            $package_name,
            '',
            '',
            '',
            '',
            '' 
        );
        $outputrows [] = array (
            '',
            '',
            '',
            '',
            '',
            '' 
        );
        foreach ( $rows as $k => $data ) {
          $outputrows [] = array (
              $data ['companyName'],
              $data ['InviteeName'],
              $data ['InviteePhone'],
              'Bidding',
              'Not Bidding',
              'Not Sure Yet' 
          );
          $outputrows [] = array (
              $data ['companyImages'],
              '',
              '',
              '',
              '',
              '' 
          );
          // print_r($data);
          $chk1 = ! empty ( $data ['Checked'] [1] ) ? '[y]' : '';
          $chk2 = ! empty ( $data ['Checked'] [0] ) ? '[y]' : '';
          $chk3 = ! empty ( $data ['Checked'] [2] ) ? '[y]' : '';
          $outputrows [] = array (
              '',
              $data ['InviteeMail'],
              '',
              $chk1,
              $chk2,
              $chk3 
          );
          if (is_array ( $data ['notes'] ) && count ( $data ['notes'] ) > 0) {
            foreach ( $data ['notes'] as $n => $notes ) {
              $outputrows [] = array (
                  '',
                  '',
                  $notes,
                  '',
                  '',
                  '' 
              );
            }
          }
        }
        $outputrows [] = array (
            '',
            '',
            '',
            '',
            '',
            '' 
        );
      }
    }
  }
  
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'Invited Diverse Companies:',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $bid_packages = get_bidder_feedback_content_data ( $node->nid );
  $BidPackagesexist = (! empty ( $bid_packages )) ? 1 : 0;
  $msgpackageStatus = ($BidPackagesexist) ? 2 : 0;
  $info = get_bidder_feedback_table_data_for_report ( $node->nid, $msgpackageStatus, 1);
  if (! empty ( $bid_packages )) {
    foreach ( $bid_packages as $package_id => $package_name ) {
      $rows = (isset ( $info [$package_id] ['rows'] )) ? $info [$package_id] ['rows'] : array ();
      if (count ( $rows ) > 0 && in_array ( $package_id, $rows [0] ['IsDiversePkg'] )) {
        $outputrows [] = array (
            $package_name,
            '',
            '',
            '',
            '',
            '' 
        );
        $outputrows [] = array (
            '',
            '',
            '',
            '',
            '',
            '' 
        );
        foreach ( $rows as $k => $data ) {
          if (isset ( $data ['IsDiverseCompany'] )) {
            $outputrows [] = array (
                $data ['companyName'],
                $data ['InviteeName'],
                $data ['InviteePhone'],
                'Bidding',
                'Not Bidding',
                'Not Sure Yet' 
            );
            $outputrows [] = array (
                $data ['companyImages'],
                '',
                '',
                '',
                '',
                '' 
            );
            $chk1 = ! empty ( $data ['Checked'] [1] ) ? '[y]' : '';
            $chk2 = ! empty ( $data ['Checked'] [0] ) ? '[y]' : '';
            $chk3 = ! empty ( $data ['Checked'] [2] ) ? '[y]' : '';
            $Diversname = array ();
            foreach ( $data ['dtids'] as $d => $dtid ) {
              $Diversname [] = _get_title_of_node ( $dtid );
            }
            $diverses = implode ( ',', $Diversname );
            $outputrows [] = array (
                $diverses,
                $data ['InviteeMail'],
                '',
                $chk1,
                $chk2,
                $chk3 
            );
            if (is_array ( $data ['notes'] ) && count ( $data ['notes'] ) > 0) {
              foreach ( $data ['notes'] as $n => $notes ) {
                $outputrows [] = array (
                    '',
                    '',
                    $notes,
                    '',
                    '',
                    '' 
                );
              }
            }
          }
        }
        $outputrows [] = array (
            '',
            '',
            '',
            '',
            '',
            '' 
        );
      }
    }
  }
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      'M6Connect',
      '',
      '',
      '' 
  );
  
  $totalrows = count ( $outputrows );
  $tstamp = time ();
  $filename = 'report_' . $tstamp . '.xlsx';
  // $writer->markMergedCell('Sheet1', $start_row = 0, $start_col = 0, $end_row = 1, $end_col = 1);
  for($i = 0; $i < $totalrows; $i ++) {
    // $writer->writeSheetRow('Sheet1', array(rand()%10000,rand()%10000,rand()%10000,rand()%10000) );
    
    $writer->writeSheetRow ( 'Sheet1', $outputrows [$i] );
  }
  $writer->writeToFile ( 'sites/default/files/' . $filename );
  // echo '#'.floor((memory_get_peak_usage())/1024/1024)."MB"."\n";
  $filepath = $base_url . '/sites/default/files/' . $filename;
  drupal_goto ( $filepath );
  /*
   * $sheet_name = 'sheets'; //sheetname
   * $header = array("string","string","string","string","string","string"); // header-made for six columns
   * $row1 = array("A"," ","B"," ","C"); //column B1, D1 made blank to match formatting
   * $writer->writeSheetHeader($sheet_name, $header, $suppress_header_row = true); //write header
   * $writer->markMergedCell($sheet_name, $start_row = 0, $start_col = 0, $end_row = 1, $end_col = 1); //merge cells for A
   * $writer->markMergedCell($sheet_name, $start_row = 0, $start_col = 2, $end_row = 0, $end_col = 3); //merge cells for B
   * $writer->markMergedCell($sheet_name, $start_row = 0, $start_col = 4, $end_row = 0, $end_col = 5); //merge cells for C
   * $writer->writeSheetRow($sheet_name, $row1); //write data
   * //$writer->writeToFile('test.xlsx'); //save file
   * $writer->writeToFile('sites/default/files/test.xlsx');
   * $filepath = $base_url.'/sites/default/files/test.xlsx';
   * drupal_goto($filepath);
   */
}
function TTXXrfp_bidder_feedback_report_xls($nid) {
  include_once DRUPAL_ROOT . '/sites/all/libraries/PHPExcel/Classes/PHPExcel.php';
  $_excelexport_objPHPExcel = new PHPExcel ();
  $_excelexport_objPHPExcel->createSheet ( NULL, 0 );
  // //////////////////////////////////////// Start ////////////////////////////////////////////////////
  // ////////////////////////////////////////////////////////
  global $base_url, $theme_path;
  $node = node_load ( $nid );
  $date = date ( 'm/d/Y', time () );
  $gid = _get_company_nid_by_group_content ( $node );
  $Sendercompany = node_load ( $gid );
  $SendercompanyName = $Sendercompany->title;
  $cimagepath = '';
  $cimgpath = (isset ( $Sendercompany->field_logo ['und'] ) && ! empty ( $Sendercompany->field_logo ['und'] [0] ['uri'] )) ? $Sendercompany->field_logo ['und'] [0] ['uri'] : 0; // pre($pimgpath);
  if ($cimgpath) {
    $cimagepath = image_style_url ( 'thumbnail', $cimgpath );
  }
  $RfpName = $node->title;
  $AuthorUid = $node->uid;
  $Author = user_load ( $AuthorUid );
  $ProjectManager = _get_user_full_name ( $AuthorUid );
  $Phone = (isset ( $Author->field_phone ['und'] ) && isset ( $Author->field_phone ['und'] [0] ['value'] ) && ! empty ( $Author->field_phone ['und'] [0] ['value'] )) ? $Author->field_phone ['und'] [0] ['value'] : '';
  $discription = (isset ( $node->field_rfp_description ['und'] ) && isset ( $node->field_rfp_description ['und'] [0] ['value'] ) && ! empty ( $node->field_rfp_description ['und'] [0] ['value'] )) ? $node->field_rfp_description ['und'] [0] ['value'] : '';
  $discription = strip_tags ( $discription );
  $Public = (isset ( $node->field_public ['und'] ) && isset ( $node->field_public ['und'] [0] ['value'] ) && ! empty ( $node->field_public ['und'] [0] ['value'] )) ? $node->field_rfp_description ['und'] [0] ['value'] : '';
  $RfpType = ($Public == 1) ? 'Public' : 'Private';
  $InvitedBiddersnew = array ();
  $InvitedBidders = get_invited_companies_or_individuals_list_for_bfeedback_report ( $node ); // pre($InvitedBidders);
  if (! empty ( $InvitedBidders ) && count ( $InvitedBidders ) > 0) {
    foreach ( $InvitedBidders as $ib => $id ) {
      $InvitedBiddersnew [] = str_replace ( '&nbsp;', ' ', $id );
    }
  }
  $InvitedBidderslist = implode ( ', ', $InvitedBiddersnew );
  // /////////////////////////////////////////////////////////
  
  $outputrows [] = array (
      $SendercompanyName,
      '',
      '',
      '',
      'Report Date: ',
      $date 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      'Bidder Feedback Report',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'RFP:',
      $RfpName,
      'Project Manager:',
      $ProjectManager,
      'Phone:',
      $Phone 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'RFP Description:',
      $discription,
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'RFP Type:',
      $RfpType,
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'Invited Bidders:',
      $InvitedBidderslist,
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'Bid Packages:',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  
  $bid_packages = get_bidder_feedback_content_data ( $node->nid );
  $BidPackagesexist = (! empty ( $bid_packages )) ? 1 : 0;
  $msgpackageStatus = ($BidPackagesexist) ? 2 : 0;
  $info = get_bidder_feedback_table_data_for_report ( $node->nid, $msgpackageStatus );
  if (! empty ( $bid_packages )) {
    foreach ( $bid_packages as $package_id => $package_name ) {
      $rows = (isset ( $info [$package_id] ['rows'] )) ? $info [$package_id] ['rows'] : array ();
      if (count ( $rows ) > 0) {
        $outputrows [] = array (
            $package_name,
            '',
            '',
            '',
            '',
            '' 
        );
        $outputrows [] = array (
            '',
            '',
            '',
            '',
            '',
            '' 
        );
        foreach ( $rows as $k => $data ) {
          $outputrows [] = array (
              $data ['companyName'],
              $data ['InviteeName'],
              $data ['InviteePhone'],
              'Bidding',
              'Not Bidding',
              'Not Sure Yet' 
          );
          $chk1 = ! empty ( $data ['Checked'] [1] ) ? '[y]' : '';
          $chk2 = ! empty ( $data ['Checked'] [0] ) ? '[y]' : '';
          $chk3 = ! empty ( $data ['Checked'] [2] ) ? '[y]' : '';
          $outputrows [] = array (
              '',
              $data ['InviteeMail'],
              '',
              $chk1,
              $chk2,
              $chk3 
          );
          if (is_array ( $data ['notes'] ) && count ( $data ['notes'] ) > 0) {
            foreach ( $data ['notes'] as $n => $notes ) {
              $outputrows [] = array (
                  '',
                  '',
                  $notes,
                  '',
                  '',
                  '' 
              );
            }
          }
        }
        $outputrows [] = array (
            '',
            '',
            '',
            '',
            '',
            '' 
        );
      }
    }
  }
  
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      'Invited Diverse Companies:',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $bid_packages = get_bidder_feedback_content_data ( $node->nid );
  $BidPackagesexist = (! empty ( $bid_packages )) ? 1 : 0;
  $msgpackageStatus = ($BidPackagesexist) ? 2 : 0;
  $info = get_bidder_feedback_table_data_for_report ( $node->nid, $msgpackageStatus, 1 );
  if (! empty ( $bid_packages )) {
    foreach ( $bid_packages as $package_id => $package_name ) {
      $rows = (isset ( $info [$package_id] ['rows'] )) ? $info [$package_id] ['rows'] : array ();
      if (count ( $rows ) > 0 && in_array ( $package_id, $rows [0] ['IsDiversePkg'] )) {
        $outputrows [] = array (
            $package_name,
            '',
            '',
            '',
            '',
            '' 
        );
        $outputrows [] = array (
            '',
            '',
            '',
            '',
            '',
            '' 
        );
        foreach ( $rows as $k => $data ) {
          if (isset ( $data ['IsDiverseCompany'] )) {
            $outputrows [] = array (
                $data ['companyName'],
                $data ['InviteeName'],
                $data ['InviteePhone'],
                'Bidding',
                'Not Bidding',
                'Not Sure Yet' 
            );
            $chk1 = ! empty ( $data ['Checked'] [1] ) ? '[y]' : '';
            $chk2 = ! empty ( $data ['Checked'] [0] ) ? '[y]' : '';
            $chk3 = ! empty ( $data ['Checked'] [2] ) ? '[y]' : '';
            $Diversname = array ();
            foreach ( $data ['dtids'] as $d => $dtid ) {
              $Diversname [] = _get_title_of_node ( $dtid );
            }
            $diverses = implode ( ',', $Diversname );
            $outputrows [] = array (
                $diverses,
                $data ['InviteeMail'],
                '',
                $chk1,
                $chk2,
                $chk3 
            );
            if (is_array ( $data ['notes'] ) && count ( $data ['notes'] ) > 0) {
              foreach ( $data ['notes'] as $n => $notes ) {
                $outputrows [] = array (
                    '',
                    '',
                    $notes,
                    '',
                    '',
                    '' 
                );
              }
            }
          }
        }
        $outputrows [] = array (
            '',
            '',
            '',
            '',
            '',
            '' 
        );
      }
    }
  }
  $outputrows [] = array (
      '',
      '',
      '',
      '',
      '',
      '' 
  );
  $outputrows [] = array (
      '',
      '',
      'M6Connect',
      '',
      '',
      '' 
  );
  
  $totalrows = count ( $outputrows );
  $tstamp = time ();
  $filename = 'report_' . $tstamp . '.xlsx';
  // //////////////////////////////////////// End ////////////////////////////////////////////////////
  for($y = 1; $y <= $totalrows; $y ++) {
    for($x = 1; $x <= 6; $x ++) {
      $colindex = excelgeneratorurl_get_colindex ( $x - 1 );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($y), utf8_encode ( $outputrows [$y - 1] [$x - 1] ) );
    }
  }
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 );
  header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
  // header('Content-Disposition: attachment;filename="newtest.xlsx"');
  header ( 'Content-Disposition: attachment;filename="newtest.xlsx"' );
  
  header ( 'Cache-Control: max-age=0' );
  // If you're serving to IE 9, then the following may be needed
  header ( 'Cache-Control: max-age=1' );
  
  // If you're serving to IE over SSL, then the following may be needed
  header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' ); // Date in the past
  header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' ); // always modified
  header ( 'Cache-Control: cache, must-revalidate' ); // HTTP/1.1
  header ( 'Pragma: public' ); // HTTP/1.0
  
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setWrapText ( true );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'A' )->setWidth ( 14 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'B' )->setWidth ( 14 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'C' )->setWidth ( 14 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'D' )->setWidth ( 14 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'E' )->setWidth ( 14 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'F' )->setWidth ( 14 );
  
  $obj_writer = PHPExcel_IOFactory::createWriter ( $_excelexport_objPHPExcel, 'Excel2007' );
  $obj_writer->save ( 'php://output' );
}
function rfp_bidder_feedback_report_xls($nid) {
  $XLSRowNo = $XLSColNo = 1;
  include_once DRUPAL_ROOT . '/sites/all/libraries/PHPExcel/Classes/PHPExcel.php';
  $_excelexport_objPHPExcel = new PHPExcel ();
  $_excelexport_objPHPExcel->createSheet ( NULL, 0 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 );
  // //////////////////////////////////////// Start ////////////////////////////////////////////////////
  global $base_url, $theme_path;
  $node = node_load ( $nid );
  $date = date ( 'm/d/Y', time () );
  $gid = _get_company_nid_by_group_content ( $node );
  $Sendercompany = node_load ( $gid );
  $SendercompanyName = $Sendercompany->title;
  $cimagepath = $CompImagePath = $CompImageExt = '';
  $cimgpath = (isset ( $Sendercompany->field_logo ['und'] ) && ! empty ( $Sendercompany->field_logo ['und'] [0] ['uri'] )) ? $Sendercompany->field_logo ['und'] [0] ['uri'] : 0; // pre($pimgpath);
  if ($cimgpath) {
    // $cimagepath = image_style_url('thumbnail', $cimgpath);
    $imgdetails = image_get_info ( $cimgpath ); // pre($imgdetails);
    $CompImageExt = $imgdetails ['extension'];
    $fids = $Sendercompany->field_logo ['und'] [0] ['fid']; // pre($fids);
    $result = file_load_multiple ( array (
        $fids 
    ) ); // pre($result);
    if (is_array ( $result ) && ! empty ( $result )) {
      foreach ( $result as $delta => $fileObj ) {
        $filname = $fileObj->filename; // pre($filname);
        $objFile = file_copy ( $fileObj, $destination = 'public://' . $filname, $replace = FILE_EXISTS_RENAME );
        if ($objFile) { // pre($objFile);
          $newimgobj = ( array ) $objFile;
          $newcimgpath = $newimgobj ['uri'];
          $cimagepath = image_style_url ( 'thumbnail', $newcimgpath );
          $objFile->status = 0;
          file_save ( $objFile );
        }
      }
    }
  }
  $RfpName = $node->title;
  $AuthorUid = $node->uid;
  $Author = user_load ( $AuthorUid );
  $ProjectManager = _get_user_full_name ( $AuthorUid );
  $Phone = (isset ( $Author->field_phone ['und'] ) && isset ( $Author->field_phone ['und'] [0] ['value'] ) && ! empty ( $Author->field_phone ['und'] [0] ['value'] )) ? $Author->field_phone ['und'] [0] ['value'] : '';
  $discription = (isset ( $node->field_rfp_description ['und'] ) && isset ( $node->field_rfp_description ['und'] [0] ['value'] ) && ! empty ( $node->field_rfp_description ['und'] [0] ['value'] )) ? $node->field_rfp_description ['und'] [0] ['value'] : '';
  $discription = strip_tags ( $discription );
  $Public = (isset ( $node->field_public ['und'] ) && isset ( $node->field_public ['und'] [0] ['value'] ) && ! empty ( $node->field_public ['und'] [0] ['value'] )) ? $node->field_rfp_description ['und'] [0] ['value'] : '';
  $RfpType = ($Public == 1) ? 'Public' : 'Private';
  $InvitedBiddersnew = array ();
  $InvitedBidders = get_invited_companies_or_individuals_list_for_bfeedback_report ( $node ); // pre($InvitedBidders);
  if (! empty ( $InvitedBidders ) && count ( $InvitedBidders ) > 0) {
    foreach ( $InvitedBidders as $ib => $id ) {
      $InvitedBiddersnew [] = str_replace ( '&nbsp;', ' ', $id );
    }
  }
  $InvitedBidderslist = implode ( ', ', $InvitedBiddersnew );
  // /////////////////////////////////////////////////////////
  // $outputrows[] = array($SendercompanyName,'','','','Report Date: ',$date);
  if (! empty ( $cimagepath )) {
    // ///////////////// image code start /////////////////////
    if ($CompImageExt == 'jpg' || $CompImageExt == 'jpeg') {
      $gdImage = imagecreatefromjpeg ( $cimagepath );
    } else if ($CompImageExt == 'png') {
      $gdImage = imagecreatefrompng ( $cimagepath );
    }
    // Add a drawing to the worksheetecho date('H:i:s') . " Add a drawing to the worksheet\n";
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    $objDrawing->setHeight ( 100 );
    $colindex = excelgeneratorurl_get_colindex ( 0 );
    // $objDrawing->setCoordinates('C1');
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );
    
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    // ///////////////// image code end ///////////////////////
  } else {
    $colindex = excelgeneratorurl_get_colindex ( 0 );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $SendercompanyName ) );
  }
  $colindex = excelgeneratorurl_get_colindex ( 2 );
  $colindex2 = excelgeneratorurl_get_colindex ( 3 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo) ); // ('A1:C1');
                                                                                                                                 // $_excelexport_objPHPExcel->getActiveSheet()->getStyle($colindex . ($XLSRowNo))->getFont()->setSize(20);
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Bidder Feedback Report' ) );
  $XLSRowNo++;
  
  // $outputrows[] = array('','','','','','');
  $XLSRowNo++;
  if (! empty ( $cimagepath )) {
    $XLSRowNo++;
  }
  
  // $outputrows[] = array('','','Bidder Feedback Report','','','');
  $colindex = excelgeneratorurl_get_colindex ( 2 );
  $colindex2 = excelgeneratorurl_get_colindex ( 3 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo) ); // ('A1:C1');
                                                                                                                                 // $_excelexport_objPHPExcel->getActiveSheet()->getStyle($colindex . ($XLSRowNo))->getFont()->setSize(20);
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $RfpName ) );
  $XLSRowNo++;
  
  // $outputrows[] = array('','','','','','');
  $XLSRowNo++;
  
  if (isset ( $node->field_project ['und'] [0] ) && ! empty ( $node->field_project ['und'] [0] ['target_id'] )) {
    $Related_Proj_Nid = $node->field_project ['und'] [0] ['target_id'];
    $Related_Proj_Node = node_load ( $Related_Proj_Nid );
    $Related_Proj_Name = $Related_Proj_Node->title;
    $colindex = excelgeneratorurl_get_colindex ( 0 );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Project:' ) );
    $colindex = excelgeneratorurl_get_colindex ( 1 );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $Related_Proj_Name ) );
    $XLSRowNo++;
  }
  $colindex = excelgeneratorurl_get_colindex ( 0 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Date:' ) );
  $colindex = excelgeneratorurl_get_colindex ( 1 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $date ) );
  $XLSRowNo ++;
  // $outputrows[] = array('RFP:',$RfpName,'Project Manager:',$ProjectManager,'Phone:',$Phone);
  $colindex = excelgeneratorurl_get_colindex ( 0 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'RFP:' ) );
  $colindex = excelgeneratorurl_get_colindex ( 1 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $RfpName ) );
  $colindex = excelgeneratorurl_get_colindex ( 2 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Project Manager:' ) );
  $colindex = excelgeneratorurl_get_colindex ( 3 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $ProjectManager ) );
  $colindex = excelgeneratorurl_get_colindex ( 4 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Phone:' ) );
  $colindex = excelgeneratorurl_get_colindex ( 5 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $Phone ) );
  $XLSRowNo ++;
  // $outputrows[] = array('','','','','','');
  $XLSRowNo ++;
  // $outputrows[] = array('RFP Description:',$discription,'','','','');
  $colindex = excelgeneratorurl_get_colindex ( 0 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'RFP Description:' ) );
  $colindex = excelgeneratorurl_get_colindex ( 1 );
  $colindex2 = excelgeneratorurl_get_colindex ( 5 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo) ); // ('A1:C1');
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $discription ) );
  $XLSRowNo ++;
  
  // $outputrows[] = array('','','','','','');
  $XLSRowNo ++;
  // $outputrows[] = array('RFP Type:',$RfpType,'','','','');
  $colindex = excelgeneratorurl_get_colindex ( 0 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'RFP Type:' ) );
  $colindex = excelgeneratorurl_get_colindex ( 1 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $RfpType ) );
  $XLSRowNo ++;
  // $outputrows[] = array('','','','','','');
  $XLSRowNo ++;
  // $outputrows[] = array('Invited Bidders:',$InvitedBidderslist,'','','','');
  $colindex = excelgeneratorurl_get_colindex ( 0 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Invited Bidders:' ) );
  $colindex = excelgeneratorurl_get_colindex ( 1 );
  $colindex2 = excelgeneratorurl_get_colindex ( 5 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo) ); // ('A1:C1');
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $InvitedBidderslist ) );
  $XLSRowNo ++;
  // $outputrows[] = array('','','','','','');
  $XLSRowNo ++;
  // $outputrows[] = array('Bid Packages:','','','','','');
  $colindex = excelgeneratorurl_get_colindex ( 0 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Bid Packages:' ) );
  $XLSRowNo ++;
  // $outputrows[] = array('','','','','','');
  $XLSRowNo ++;
  
  $bid_packages = get_bidder_feedback_content_data ( $node->nid );
  $BidPackagesexist = (! empty ( $bid_packages )) ? 1 : 0;
  $msgpackageStatus = ($BidPackagesexist) ? 2 : 0;
  $info = get_bidder_feedback_table_data_for_report ( $node->nid, $msgpackageStatus,0);
  
  //print "<pre>"; print_r($info); die;
  if (! empty ( $bid_packages )) {
    foreach ( $bid_packages as $package_id => $package_name ) {
      $rows = (isset ( $info [$package_id] ['rows'] )) ? $info [$package_id] ['rows'] : array ();
      if (count ( $rows ) > 0) {
        // $outputrows[] = array($package_name,'','','','','');
        $colindex = excelgeneratorurl_get_colindex ( 0 );
        $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
        $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $package_name ) );
        $XLSRowNo ++;
        // $outputrows[] = array('','','','','','');
        $XLSRowNo ++;
        foreach ( $rows as $k => $data ) {
          
          if (! empty ( $data ['companyName'] )) {
            $cdata = $data ['companyName'];
          }
         if($data['company_type'] == 'company'){
          $colindex = excelgeneratorurl_get_colindex (1);
          $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold (true);
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ($cdata));
          
           // start in o col for company logo images here
           
            //$XLSRowNo ++;
          //$XLSRowNo ++;
         }
          
           
           if($data['company_type'] == 'company'){  
           
            if(!empty($data['companyLogo'])){ 
            
               if($data['CompImageExt'] == 'jpg' || $data['CompImageExt'] == 'jpeg'){
               
                         $gdImagecom = imagecreatefromjpeg($data['companyLogo']);
                       }else{
                         $gdImagecom = imagecreatefrompng($data['companyLogo']);

                        }
              }else{
            $gdImagecom = imagecreatefromjpeg($base_url . '/sites/all/themes/m6connect/images/default_company_profile.jpg' );
          
                }
          
            $colindex = excelgeneratorurl_get_colindex (0);
            $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
          $objDrawing->setName ( 'Sample image' );
          $objDrawing->setDescription('Sample image' );
          $objDrawing->setImageResource($gdImagecom);
          $objDrawing->setRenderingFunction(PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG);
          $objDrawing->setMimeType(PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_JPEG);
          $objDrawing->setHeight(40);
          $objDrawing->setWidth(40);
          $colindex = excelgeneratorurl_get_colindex(0);
          $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet());
          $objDrawing->setCoordinates ( $colindex.($XLSRowNo));
            //$XLSRowNo ++;
           }
            
        //end in o col for company logo images here
        
            $colindex = excelgeneratorurl_get_colindex ( 3 );
          $doc1 = new DOMDocument ();
          $doc1->loadHTML ( $data ['companyImages'] );
          $xpath1 = new DOMXPath ( $doc1 );
          $src1 = $xpath1->evaluate ( "string(//img/@src)" );
          $src2 = $base_url . $src1;
          $gdImage = imagecreatefrompng ( $src2 );
          $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
          $objDrawing->setName ( 'Sample image' );
          $objDrawing->setDescription ( 'Sample image' );
          $objDrawing->setImageResource ( $gdImage );
          $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
          $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
          $objDrawing->setHeight ( 30 );
          $colindex = excelgeneratorurl_get_colindex ( 3 );
          $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );
          $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
          
           ///  for diversity content start //////////
            
          $src_div_company_vid = array();                              
          if(is_numeric($data['companyNid'])){                               
          $query_diversity_info = db_select('node', 'n');                             
          $query_diversity_info->join('field_data_field_diversity_credentials','dc','dc.field_diversity_credentials_target_id=n.nid');
          $query_diversity_info->fields('n',array('title'));
          $query_diversity_info->condition('dc.entity_id',$data['companyNid'],'='); 
          $src_div_company_vid = $query_diversity_info->execute()->fetchAll();                              
          }
            
        for($m = 0; $m < count($src_div_company_vid); $m++) {
          $bidder_type = $src_div_company_vid[$m]->title;
          
        $colindex = excelgeneratorurl_get_colindex (4 );
        $colindex2 = excelgeneratorurl_get_colindex ( 6 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo) ); // ('A1:C1');
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $bidder_type));     $XLSRowNo++;
          }
          
          $XLSRowNo++;
          //$XLSRowNo++;
                  ///-------for diversity content--------- //////////
           
        //start work for add invite user name 
          
          foreach($data['allUserDetailInvitee'] as $userDetailsinfo){
            
             $Inviteeuserphone = $userDetailsinfo['phone'];
             $Inviteeusername = $userDetailsinfo['name'];
             $Inviteeusermail = $userDetailsinfo['mail'];
             $Inviteeuseruid = $userDetailsinfo['uid'];
             $Inviteeuserprofileuri = $userDetailsinfo['profile_uri'];
             $Inviteeuserprofileext = $userDetailsinfo['profile_filemime'];                       
             
             if($Inviteeuserprofileuri){
        $UserProfilePhoto = image_style_url('pic_40x40', $Inviteeuserprofileuri);
                                        
            }
             
              
          if(!empty($Inviteeuserprofileuri)){ 
                         if(isset($Inviteeuserprofileext) && $Inviteeuserprofileext == 'image/jpeg'){
                         $gdImage1 = imagecreatefromjpeg($UserProfilePhoto);
                         }else{
                         $gdImage1 = imagecreatefrompng($UserProfilePhoto);

                         }
          }else{
          $gdImage1 = imagecreatefrompng($base_url . '/sites/all/themes/m6connect/images/default_userpdf.png' );
          }
            $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
            $objDrawing->setName ( 'Sample image' );
            $objDrawing->setDescription ( 'Sample image' );
            $objDrawing->setImageResource($gdImage1);
            $objDrawing->setRenderingFunction(PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG);
            $objDrawing->setMimeType(PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_JPEG);
            $objDrawing->setHeight(40);
            $objDrawing->setWidth(40);
            $colindex = excelgeneratorurl_get_colindex ( 0 );
            //$objDrawing->setCoordinates('C1');
            //$coarray[] = array($colindex.$XLSRowNo);
                                                $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet());
            $objDrawing->setCoordinates ( $colindex.($XLSRowNo));
            
            
              //$_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ($colindex.$XLSRowNo));
            
          //$inviteedata =  $Inviteeusername .' '. $Inviteeusermail; 
          $colindex = excelgeneratorurl_get_colindex(1);
          $_excelexport_objPHPExcel->setActiveSheetIndex(0)->setCellValue($colindex . ($XLSRowNo), utf8_encode( $Inviteeusername));
          $colindex = excelgeneratorurl_get_colindex(2);
          $_excelexport_objPHPExcel->setActiveSheetIndex(0)->setCellValue($colindex . ($XLSRowNo), utf8_encode($Inviteeusermail));
          
            //}
          
          //end work for add invite user name 
          
          $colindex = excelgeneratorurl_get_colindex (3);
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ($Inviteeuserphone) );
          $colindex = excelgeneratorurl_get_colindex (4);
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Bidding' ) );
          $colindex = excelgeneratorurl_get_colindex (5);
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Not Bidding' ) );
          $colindex = excelgeneratorurl_get_colindex (6);
          $colindex2 = excelgeneratorurl_get_colindex (7);
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo) ); // ('A1:C1');
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Not Sure Yet' ) );
          $XLSRowNo++;
        }
        
           
          
          $chk1 = ! empty ( $data ['Checked'] [1] ) ? '[y]' : '';
          $chk2 = ! empty ( $data ['Checked'] [0] ) ? '[y]' : '';
          $chk3 = ! empty ( $data ['Checked'] [2] ) ? '[y]' : '';
          
          
          
          $colindex = excelgeneratorurl_get_colindex ( 4 );
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $chk1 ) );
          $colindex = excelgeneratorurl_get_colindex ( 5 );
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $chk2 ) );
          $colindex = excelgeneratorurl_get_colindex ( 6 );
          $colindex2 = excelgeneratorurl_get_colindex (7);
  $_excelexport_objPHPExcel->setActiveSheetIndex (0)->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo) ); // ('A1:C1');
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $chk3 ) );
          $XLSRowNo++;
          
          //$XLSRowNo++;  
              
           // ////////////////////////////
      if (! empty ( $data ['request_bid_intent_count'] ) && $data ['request_bid_intent_count'] > 0) {
            $gdImage = imagecreatefrompng ( $base_url . '/sites/all/themes/m6connect/images/notice.png' );
            // Add a drawing to the worksheetecho date('H:i:s') . " Add a drawing to the worksheet\n";
            $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
            $objDrawing->setName ( 'Sample image' );
            $objDrawing->setDescription ( 'Sample image' );
            $objDrawing->setImageResource ( $gdImage );
            $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
            $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
            $objDrawing->setHeight (21);
            $colindex = excelgeneratorurl_get_colindex (6 );
            // $objDrawing->setCoordinates('C1');
            $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );
            
            $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
            //$objDrawing->setHeight (20);
            $colindex = excelgeneratorurl_get_colindex ( 7 );
            $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFill ()->setFillType ( PHPExcel_Style_Fill::FILL_SOLID )->getStartColor ()->setRGB ( 'FF0000' );
            $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $data ['request_bid_intent_count'] ) );
            $XLSRowNo++;
            $XLSRowNo++;
          }
          // /////////////////////////////
          if (is_array ( $data ['notes'] ) && count ( $data ['notes'] ) > 0) {
            foreach ( $data ['notes'] as $n => $notes ) {
              // $outputrows[] = array('','',$notes,'','','');
              $colindex = excelgeneratorurl_get_colindex ( 4 );
              $colindex2 = excelgeneratorurl_get_colindex ( 7 );
              $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo) ); // ('A1:C1');
              $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $notes ) );
              $XLSRowNo++;
            }
          }
        }
        // $outputrows[] = array('','','','','','');
        $XLSRowNo++;
      }
    }
  }
  
  $XLSRowNo++;
  
      // start For Proposal Listing here///////////////////
    // Proposal title here/////////////////// 
  
       
    $colindex = excelgeneratorurl_get_colindex (0);
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex (0)->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ('Proposal:'));
    $colindex = excelgeneratorurl_get_colindex(2);
    $colindex2 = excelgeneratorurl_get_colindex ( 7 );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo)); // ('A1:C1');
    $_excelexport_objPHPExcel->setActiveSheetIndex (0)->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ($RfpName));
    $XLSRowNo++;
    $XLSRowNo++;
  
    // end Proposal title here//////
  
     if($node->nid && is_numeric($node->nid)){  
  // start For Proposal Listing here///
       
        $received_proposals = get_received_proposals_content_alldata($node->nid);
      
        $colindex = excelgeneratorurl_get_colindex ( 0 );
      $colindex2 = excelgeneratorurl_get_colindex ( 1 );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo)); // ('A1:C1');
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ('Proposal Name'));
              
        $colindex = excelgeneratorurl_get_colindex (2);
      $colindex2 = excelgeneratorurl_get_colindex (3);
      $_excelexport_objPHPExcel->setActiveSheetIndex (0)->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo)); // ('A1:C1');
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex (0)->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ('Date Submitted'));
      
      $colindex = excelgeneratorurl_get_colindex (4);
      $colindex2 = excelgeneratorurl_get_colindex (5);
      $_excelexport_objPHPExcel->setActiveSheetIndex (0)->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo)); // ('A1:C1');
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex(0)->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ('Bid Amount'));
      $XLSRowNo++;
      
    
      foreach($received_proposals as $receivedout){  
       
          $proposalnid = $receivedout->nid;
        $proposal_bid_amount = "$".$receivedout->field_proposal_bid_amount_value; 
      $proposoal_bid_date = date('m/d/Y H:i A', $receivedout->created);
     
      
      $colindex = excelgeneratorurl_get_colindex ( 0 );
      $colindex2 = excelgeneratorurl_get_colindex ( 1 );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo)); // ('A1:C1');
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ($receivedout->title));
              
        $colindex = excelgeneratorurl_get_colindex (2);
      $colindex2 = excelgeneratorurl_get_colindex (3);
      $_excelexport_objPHPExcel->setActiveSheetIndex (0)->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo)); // ('A1:C1');
      $_excelexport_objPHPExcel->setActiveSheetIndex (0)->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ($proposoal_bid_date));
      
      $colindex = excelgeneratorurl_get_colindex (4);
      $colindex2 = excelgeneratorurl_get_colindex (5);
      $_excelexport_objPHPExcel->setActiveSheetIndex (0)->mergeCells ( $colindex . ($XLSRowNo) . ':' . $colindex2 . ($XLSRowNo)); // ('A1:C1');
      $_excelexport_objPHPExcel->setActiveSheetIndex(0)->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ($proposal_bid_amount));
      $XLSRowNo++;
        
    }
    }
  // End For Proposal Listing here///////////////////
  
  
  // $outputrows[] = array('Invited Diverse Companies:','','','','','');
         $XLSRowNo++;
       $XLSRowNo++;
       $XLSRowNo++;
  $gdImage = imagecreatefromjpeg($base_url . '/sites/all/themes/m6connect/images/bidder_report_footer.jpg');
  //$gdImage = imagecreatefrompng ( $base_url . '/sites/all/themes/m6connect/logo.png');
  // Add a drawing to the worksheetecho date('H:i:s') . " Add a drawing to the worksheet\n";
  $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
  $objDrawing->setName ( 'Sample image' );
  $objDrawing->setDescription ( 'Sample image' );
  $objDrawing->setImageResource ( $gdImage );
  $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
  $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
  $objDrawing->setHeight (32);
  //$objDrawing->setResizeProportional(FALSE);
  //$objDrawing->setCoordinates('A1');   
  //$objDrawing->setOffsetX(30);
  //$objDrawing->setWidth(45);
  $colindex = excelgeneratorurl_get_colindex (2);
  // $objDrawing->setCoordinates('C1');
  $objDrawing->setCoordinates ($colindex .($XLSRowNo));
  
  $objDrawing->setWorksheet($_excelexport_objPHPExcel->getActiveSheet());
  // ///////////////// image code end ///////////////////////
  // $totalrows = count($outputrows);
  $tstamp = time ();
  $filename = 'report_' . $tstamp . '.xlsx';
  // //////////////////////////////////////// End ////////////////////////////////////////////////////
  /*
   * for ( $y = 1; $y <= $totalrows; $y++) {
   * for ($x = 1; $x <= 6; $x++) {
   * $colindex = excelgeneratorurl_get_colindex($x - 1);
   * $_excelexport_objPHPExcel->setActiveSheetIndex(0)->setCellValue($colindex . ($y), utf8_encode($outputrows[$y-1][$x-1]));
   * }
   * }
   */
   //print "<pre>"; print_r($coarray); die;
  // $_excelexport_objPHPExcel->setActiveSheetIndex(0);
  header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
  // header('Content-Disposition: attachment;filename="newtest.xlsx"');
  header ( 'Content-Disposition: attachment;filename="Report.xlsx"' );
  
  header ( 'Cache-Control: max-age=0' );
  // If you're serving to IE 9, then the following may be needed
  header ( 'Cache-Control: max-age=1' );
  
  // If you're serving to IE over SSL, then the following may be needed
  header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' ); // Date in the past
  header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' ); // always modified
  header ( 'Cache-Control: cache, must-revalidate' ); // HTTP/1.1
  header ( 'Pragma: public' ); // HTTP/1.0
  
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setWrapText ( true );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'A' )->setWidth ( 14 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'B' )->setWidth ( 14 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'C' )->setWidth ( 14 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'D' )->setWidth ( 14 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'E' )->setWidth ( 14 );
  $_excelexport_objPHPExcel->getActiveSheet ()->getColumnDimension ( 'F' )->setWidth ( 14 );
  
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C1:C4' )->getAlignment ()->setHorizontal ( PHPExcel_Style_Alignment::HORIZONTAL_CENTER );
  
  $obj_writer = PHPExcel_IOFactory::createWriter ( $_excelexport_objPHPExcel, 'Excel2007' );
  $obj_writer->save ( 'php://output' );
}
function excelgeneratorurl_get_colindex($n) {
  for($r = ""; $n >= 0; $n = intval ( $n / 26 ) - 1)
    $r = chr ( $n % 26 + 0x41 ) . $r;
  return $r;
}
function m6connect_common_token_info() {
  $info ['tokens'] ['user'] ['m6_custom_otp'] = array (
      'name' => t ( 'Custom m6 otp' ),
      'description' => t ( 'Provides user password. May be used only during registration.' ) 
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function m6connect_common_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array ();
  if (isset ( $data ['user'] )) {
    $replacements ['[user:m6_custom_otp]'] = l ( 'here', user_pass_reset_url ( $data ['user'] ) );
  }
  
  return $replacements;
}

/*
 * return metatdat and other info on mandrill id based.
 */
function _get_mandrill_matadata($mid) {
  // require_once DRUPAL_ROOT .'/sites/all/libraries/mandrill/src/Mandrill.php'; //Not required with Composer
  include_once (libraries_get_path ( 'mandrill' ) . '/src/Mandrill.php');
  $mandrill = new Mandrill ( 'pJX-M_DHZO7agAug5EctFw' );
  // $id = 'c767f8ef23a5437b82c726392ae6c7f5';
  $result = array ();
  try {
    $result = $mandrill->messages->info ( $mid );
  } catch ( Exception $e ) {
    // echo 'Caught exception: ', $e->getMessage(), "\n";
  }
  return $result;
}

/*
 * cron function for update meteadata and mail counts
 */
function _cron_mandrill_invite_rfp_project() {
  $m6connect_misc_module_exist = module_exists ( 'm6connect_misc' );
  $m6connect_mandrill_mailstatus_table_exist = db_table_exists ( 'm6connect_mandrill_invitemail_status' );
  $m6connect_mandrill_nodestatus_table_exist = db_table_exists ( 'm6connect_mandrill_node_status' );
  if ($m6connect_misc_module_exist && $m6connect_mandrill_mailstatus_table_exist && $m6connect_mandrill_nodestatus_table_exist) {
    $query = db_select ( 'm6connect_mandrill_invitemail_status', 'mis' );
    $query->fields ( 'mis', array (
        'mid',
        'status' 
    ) );
    $query->condition ( 'mis.status', '3', '=' );
    $result = $query->execute ()->fetchAll ();
    if ($result && is_array ( $result ) && ! empty ( $result ) && count ( $result ) > 0) {
      foreach ( $result as $var => $val ) {
        $mid = $val->mid;
        $mandrilldata = _get_mandrill_matadata ( $mid );
        if (is_array ( $mandrilldata ) && count ( $mandrilldata ) > 0 && isset ( $mandrilldata ['tags'] ) && isset ( $mandrilldata ['tags'] [0] )) {
          $mailtagid = $mandrilldata ['tags'] [0];
          if (in_array ( $mailtagid, array (
              'm6connect_misc_rfp_mail___user_invite_rfp',
              'm6connect_misc_project_mail___user_invite_project' 
          ) )) {
            if (isset ( $mandrilldata ['metadata'] ) && count ( $mandrilldata ['metadata'] ) > 0 && ! empty ( $mandrilldata ['metadata'] )) {
              $invite_id = $mandrilldata ['metadata'] ['invite_id'];
              $entity_id = $mandrilldata ['metadata'] ['entity_id'];
              $request_from = $mandrilldata ['metadata'] ['request_from'];
              $field_collection = $mandrilldata ['metadata'] ['field_collection'];
              if (db_table_exists ( 'm6connect_mandrill_invitemail_status' )) {
                $db_update = array (
                    'invite_id' => $invite_id,
                    'entity_id' => $entity_id,
                    'request_from' => $request_from,
                    'field_collection' => $field_collection,
                    'status' => 0 
                );
                $returnedmetadata = db_update ( 'm6connect_mandrill_invitemail_status' )->fields ( $db_update )->condition ( 'mid', $mid, '=' )->execute ();
              }
            }
          }
        }
      }
    }
    // ///////////////////// batch processing for update mail status count start ////////////////////////
    $todaytstamp = strtotime ( date ( 'Y-m-d' ) );
    $query2 = db_select ( 'm6connect_mandrill_node_status', 'mns' );
    $query2->fields ( 'mns', array (
        'nid',
        'tstamp' 
    ) );
    $query2->condition ( 'mns.tstamp', $todaytstamp, '!=' );
    $query2->range ( 0, 20 );
    $result2 = $query2->execute ()->fetchAll ();
    if ($result2 && is_array ( $result2 ) && ! empty ( $result2 ) && count ( $result2 ) > 0) {
      foreach ( $result2 as $var2 => $val2 ) {
        $mnsnid = $val2->nid;
        $mailallcounts = _get_maindrill_node_all_counts ( $mnsnid );
        // update node mail status (viewd, not viewed etc.)
        $todaytstamp = strtotime ( date ( 'Y-m-d' ) );
        $notviewed = $mailallcounts ['notviewed'];
        $viewed = $mailallcounts ['viewed'];
        $failed = $mailallcounts ['failed'];
        $queued = $mailallcounts ['queued'];
        
        db_merge ( 'm6connect_mandrill_node_status' )->key ( array (
            'nid' => $mnsnid 
        ) )->fields ( array (
            'nid' => $mnsnid,
            'notviewed' => $notviewed,
            'viewed' => $viewed,
            'failed' => $failed,
            'status' => 0,
            'queued' => $queued,
            'tstamp' => $todaytstamp 
        ) )->execute ();
      }
    }
    // ///////////////////// batch processing for update mail status count end //////////////////////////
  }
}

/*
 * this function return mail count status on node nid based for update mandrill node status table
 */
function _get_maindrill_node_all_counts($mnsnid) {
  $notviewed = $viewed = $failed = $queued = 0;
  $nodemailstatus = array ();
  $nodemailstatus ['notviewed'] = $notviewed;
  $nodemailstatus ['viewed'] = $viewed;
  $nodemailstatus ['failed'] = $failed;
  $nodemailstatus ['queued'] = $queued;
  $query = db_select ( 'm6connect_mandrill_invitemail_status', 'mis' );
  $query->fields ( 'mis', array (
      'mid',
      'entity_id' 
  ) );
  $query->condition ( 'mis.entity_id', $mnsnid, '=' );
  $result = $query->execute ()->fetchAll ();
  $mids = array ();
  if ($result && is_array ( $result ) && ! empty ( $result ) && count ( $result ) > 0) {
    foreach ( $result as $var => $val ) {
      $mids [] = $val->mid;
    }
  }
  
  if ($mids && is_array ( $mids ) && ! empty ( $mids ) && count ( $mids ) > 0) {
    foreach ( $mids as $var2 => $val2 ) {
      $mailstatus = _get_invite_email_mandrill_status ( $val2 );
      if (! empty ( $mailstatus )) {
        if ($mailstatus == 'queued') {
          $queued ++;
        } else if ($mailstatus == 'viewed') {
          $viewed ++;
        } else if ($mailstatus == 'notviewed') {
          $notviewed ++;
        } else if ($mailstatus == 'failed') {
          $failed ++;
        }
      }
    }
    
    $nodemailstatus ['notviewed'] = $notviewed;
    $nodemailstatus ['viewed'] = $viewed;
    $nodemailstatus ['failed'] = $failed;
    $nodemailstatus ['queued'] = $queued;
  }
  return $nodemailstatus;
}

/*
 * return mandrill mail status of particular mandrill id.
 */
function _get_invite_email_mandrill_status($mid) {
  include_once (libraries_get_path ( 'mandrill' ) . '/src/Mandrill.php');
  $mandrill = new Mandrill ( 'pJX-M_DHZO7agAug5EctFw' );
  $result = $nodemailstatus = array ();
  $mailstatus = '';
  try {
    $result = $mandrill->messages->info ( $mid );
    if ($result ['state'] == 'queued') {
      $mailstatus = 'queued';
    } else if ($result ['state'] == 'sent') {
      if ($result ['opens'] == '1') {
        $mailstatus = 'viewed';
      } else {
        $mailstatus = 'notviewed';
      }
    } else {
      $mailstatus = 'failed';
    }
  } catch ( Exception $e ) {
    // echo 'Caught exception: ', $e->getMessage(), "\n";
  }
  return $mailstatus;
}

/*
 * get data from mandrill node status table for showing count on rfp and project.
 */
function _get_invite_email_counts($nid, $type = 'all') {
  $allcount = $notviewed = $viewed = $failed = $queued = 0;
  $query = db_select ( 'm6connect_mandrill_node_status', 'mns' );
  $query->fields ( 'mns', array (
      'notviewed',
      'viewed',
      'failed',
      'queued' 
  ) )->condition ( 'mns.nid', $nid, '=' );
  
  $result = $query->execute ()->fetchAll ();
  if ($result && is_array ( $result ) && ! empty ( $result ) && count ( $result ) > 0) {
    foreach ( $result as $var => $val ) {
      $notviewed = $val->notviewed;
      $viewed = $val->viewed;
      $failed = $val->failed;
      $queued = $val->queued;
    }
  }
  $allcount = $notviewed + $viewed + $failed + $queued;
  if ($type == 'notviewed') {
    return $notviewed;
  } else if ($type == 'viewed') {
    return $viewed;
  } else if ($type == 'failed') {
    return $failed;
  } else if ($type == 'queued') {
    return $queued;
  }
  return $allcount;
}
function _get_invite_email_count_for_project($nid, $type = 'all') {
  $count = 0;
  $count += _get_invite_email_counts ( $nid, $type );
  $rfpnids = get_project_related_rfps_nid ( $nid );
  if (! empty ( $rfpnids ) && is_array ( $rfpnids ) && count ( $rfpnids ) > 0) {
    foreach ( $rfpnids as $k => $v ) {
      $count += _get_invite_email_counts ( $v, $type );
    }
  }
  return $count;
}

// ///////////////////////////////////// function for existing node update start /////////////////////////////////
function update_mandrill_status_for_existing_rfp_project() {
  $m6connect_misc_module_exist = module_exists ( 'm6connect_misc' );
  $m6connect_common_module_exist = module_exists ( 'm6connect_common' );
  $m6connect_mandrill_statics_table_exists = db_table_exists ( 'm6connect_mandrill_statistics' );
  $m6connect_mandrill_mailstatus_table_exist = db_table_exists ( 'm6connect_mandrill_invitemail_status' );
  $m6connect_mandrill_nodestatus_table_exist = db_table_exists ( 'm6connect_mandrill_node_status' );
  
  if ($m6connect_misc_module_exist && $m6connect_common_module_exist && $m6connect_mandrill_statics_table_exists && $m6connect_mandrill_mailstatus_table_exist && $m6connect_mandrill_nodestatus_table_exist) {
    $query = db_select ( 'm6connect_mandrill_statistics', 'ms' );
    $query->fields ( 'ms', array (
        'mandrill_id' 
    ) );
    $query->range ( 1600, 100 );
    $result = $query->execute ()->fetchAll ();
    if ($result && is_array ( $result ) && ! empty ( $result ) && count ( $result ) > 0) { // $mids = array();
      foreach ( $result as $var => $val ) {
        $mid = $val->mandrill_id; // pre($mid);
        $mandrilldata = _get_mandrill_matadata ( $mid ); // pre($mandrilldata);
        if (is_array ( $mandrilldata ) && count ( $mandrilldata ) > 0 && isset ( $mandrilldata ['tags'] ) && isset ( $mandrilldata ['tags'] [0] )) {
          $mailtagid = $mandrilldata ['tags'] [0]; // pre($mailtagid);
          if (in_array ( $mailtagid, array (
              'm6connect_misc_rfp_mail___user_invite_rfp',
              'm6connect_misc_project_mail___user_invite_project' 
          ) )) {
            if (isset ( $mandrilldata ['metadata'] ) && count ( $mandrilldata ['metadata'] ) > 0 && ! empty ( $mandrilldata ['metadata'] )) { // pre('ttt');
              $invite_id = $mandrilldata ['metadata'] ['invite_id'];
              $entity_id = $mandrilldata ['metadata'] ['entity_id'];
              $request_from = $mandrilldata ['metadata'] ['request_from'];
              $field_collection = $mandrilldata ['metadata'] ['field_collection'];
              if (db_table_exists ( 'm6connect_mandrill_invitemail_status' )) { // pre('check');$mids[] = $mid;
                /*
                 * $db_update = array(
                 * 'invite_id' => $invite_id,
                 * 'entity_id' => $entity_id,
                 * 'request_from' => $request_from,
                 * 'field_collection' => $field_collection,
                 * 'status' => 0,
                 * );
                 * $returnedmetadata = db_update('m6connect_mandrill_invitemail_status')->fields($db_update)->condition('mid', $mid, '=')->execute();
                 */
                db_merge ( 'm6connect_mandrill_invitemail_status' )->key ( array (
                    'mid' => $mid 
                ) )->fields ( array (
                    'mid' => $mid,
                    'invite_id' => $invite_id,
                    'entity_id' => $entity_id,
                    'request_from' => $request_from,
                    'field_collection' => $field_collection,
                    'status' => 0 
                ) )->execute ();
              }
            }
          }
        }
      } // pre($mids);
    }
  }
}

/*
 *
 */
function insert_data_for_existing_node_status() {
  $type = array (
      'rfp',
      'project' 
  );
  $query = db_select ( 'node', 'n' );
  $query->fields ( 'n', array (
      'nid' 
  ) );
  $query->condition ( 'n.type', $type, 'IN' );
  $result = $query->execute ()->fetchAll ();
  if ($result && is_array ( $result ) && ! empty ( $result ) && count ( $result ) > 0) { // $mids = array();
    foreach ( $result as $var => $val ) {
      $nid = $val->nid;
      $nids [] = $nid; // pre($id);
    }
  }
  // pre(count($nids));
  foreach ( $nids as $k => $nid ) {
    db_merge ( 'm6connect_mandrill_node_status' )->key ( array (
        'nid' => $nid 
    ) )->fields ( array (
        'nid' => $nid,
        'notviewed' => 0,
        'viewed' => 0,
        'failed' => 0,
        'status' => 0,
        'queued' => 0,
        'tstamp' => 0 
    ) )->execute ();
  }
}

// ///////////////////////////////////// function for existing node update end /////////////////////////////////
function get_project_related_rfps_nid($nid) {
  $rfpnids = array ();
  $query = db_select ( 'node', 'n' );
  $query->join ( 'field_data_field_project', 'p', 'p.entity_id = n.nid' );
  $query->fields ( 'p', array (
      'entity_id' 
  ) );
  $query->condition ( 'p.field_project_target_id', $nid, '=' );
  $query->condition ( 'n.status', 1, '=' );
  $result = $query->execute ();
  while ( $record = $result->fetchAssoc () ) {
    $rfpnids [] = $record ['entity_id'];
  }
  return $rfpnids;
}

/*
 * Alter clone content link to copy on gallery-item content.
 */
function m6connect_common_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;
  if (isset ( $data ['actions'] ['output'] [0] ['#link'] ) && $data ['actions'] ['output'] [0] ['#link'] ['path'] == 'node/%/clone/%') {
    $data ['actions'] ['output'] [0] ['#link'] ['title'] = t ( 'Copy' );
  }
  if (! (array_key_exists ( 3, $user->roles )) && in_array ( arg ( 0 ), array (
      'node',
      'user' 
  ) ) && is_numeric ( arg ( 1 ) )) {
    if (count ( $data ['tabs'] [0] ['output'] ) > 0) {
      foreach ( $data ['tabs'] [0] ['output'] as $delta => $tabsData ) {
        if (is_numeric ( $delta )) {
          unset ( $data ['tabs'] [0] ['output'] [$delta] );
        }
      }
    }
  }
  if (arg ( 0 ) === 'messages') {
    if (isset ( $data ['tabs'] [0] ['output'] )) {
      unset ( $data ['tabs'] [0] ['output'] );
    }
  }
}

/**
 * Implements hook_block_info().
 */
function m6connect_common_block_info() {
  $blocks ['topmiddleheaderblock'] = array (
      'info' => t ( 'Top Middle header block' ) 
  );
  $blocks ['toprightheaderblock'] = array (
      'info' => t ( 'Top Right header block' ) 
  );
  $blocks ['user_company_email_block'] = array (
      'info' => t ( 'User Company Email Block' ) 
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function m6connect_common_block_view($delta = '') {
  global $user;
  switch ($delta) {
    case 'topmiddleheaderblock' :
      $block ['subject'] = t ( '' );
      $block ['content'] = middle_m6topheaderblock ();
      break;
    
    case 'toprightheaderblock' :
      $block ['subject'] = t ( '' );
      $block ['content'] = right_m6topheaderblock ();
      break;
    
    case 'user_company_email_block' :
      $content = '';
      $block ['subject'] = t ( '' );
      if (arg (0) == 'user' && ! empty (arg ( 1 ) ) && ! empty ( arg ( 2 ) ) && is_numeric ( arg ( 1 ) ) && arg ( 2 ) == 'company-info') {
        $content = user_company_email_block_content ( arg ( 1 ) );
      }
      $block ['content'] = $content;
      break;
  }
  return $block;
}
function user_company_email_block_content($currentUserUid, $ajax = FALSE) {
  global $user;
  $output = '';
  $header = array (
          'Primary Company',
      'Company Name',
      'Company Email',
      'Hide on Profile',
      'Action' 
  );
  $header = array (
        array (
          'data' => 'Primary Company',
          'class' => array (
              'text-left' 
          ) 
      ),
      array (
          'data' => 'Company Name',
          'class' => array (
              'text-left' 
          ) 
      ),
      array (
          'data' => 'Your Company Email',
          'class' => array (
              'text-left' 
          ) 
      ),
      array (
          'data' => 'Hide on Profile',
          'class' => array (
              'text-center' 
          ) 
      ), 
      array (
          'data' => 'Action',
          'class' => array (
              'text-center' 
          ) 
      ) 
  );
  $rows = array ();
  $query = db_select ( 'm6connect_og_membership_email', 'ome' );
  $query->join ( 'node', 'n', 'n.nid=ome.entity_id' );
  $query->fields ( 'n', array (
      'nid',
      'title' 
  ) );
  $query->fields ( 'ome', array (
      'company_email' 
  ) );
  $query->condition ( 'ome.user_uid', $currentUserUid, '=' );
  $query->condition ( 'ome.company_type', 'company', '=' );
  $query->orderBy ( 'title', 'ASC' );
  $result = $query->execute ()->fetchAllAssoc ( 'nid' );
  if ($result && ! empty ( $result )) {
    foreach ( $result as $nid => $obj ) {
      $primeComSelect = '';
      $companyHideSelect = '';
      $deleteLink = l ( '<i class="fa fa-pencil user-company-edit-email"></i>', 'javascript:void(0);', array (
          'external' => TRUE,
          'html' => TRUE,
          'attributes' => array (
              'class' => array (
                  'user-company-edit-email-link' 
              ),
              'data-cmpnid' => $nid,
              'data-cmptitle' => $obj->title,
              'data-cmpmail' => $obj->company_email,
              'data-useruid' => $currentUserUid,
              'title' => 'Edit Email' 
          ) 
      ) );
      $deleteLink .= '&nbsp;&nbsp;';
      $deleteLink .= l ( '<i class="fa fa-trash-o user-company-delete-trash"></i>', 'javascript:void(0);', array (
          'external' => TRUE,
          'html' => TRUE,
          'attributes' => array (
              'class' => array (
                  'user-company-delete-trash-link' 
              ),
              'data-cmpnid' => $nid,
              'data-cmptitle' => $obj->title,
              'data-cmpmail' => $obj->company_email,
              'data-useruid' => $currentUserUid,
              'title' => 'Remove Access' 
          ) 
      ) );
      $PrimaryCompany = _get_user_primary_company($user->uid);
      if(!empty($PrimaryCompany)){
        if($PrimaryCompany == $nid){  
          $primeComSelect = 'checked="checked"';
        }
      }
      $CompanyNameHideOnProfile = _get_company_hide_on_userprofile($user->uid);
      if(!empty($CompanyNameHideOnProfile) && isset($CompanyNameHideOnProfile)){
        if(in_array($nid,$CompanyNameHideOnProfile)){ 
          $companyHideSelect = 'checked="checked"';
        }
      }
      
      $rows [] = array (
          'data' => array (
              array (
                  'data' => '<input class="primary-company" '.$primeComSelect.' type="radio" value="'.$nid.'" name="primary_company">',
                  'class' => array (
                      'view-primary-company' 
                  ) 
              ),
              array (
                  'data' => $obj->title,
                  'class' => array (
                      'view-user-company-title' 
                  ) 
              ),
              array (
                  'data' => $obj->company_email,
                  'class' => array (
                      'view-user-company-email' 
                  ) 
              ),
              array (
                  'data' => '<input class="com-hide-onprofile" '.$companyHideSelect.' type="checkbox" value="'.$nid.'" name="com_hide_on_profile">',
                  'class' => array (
                      'view-com-hide-onprofile text-center' 
                  ) 
              ),
              array (
                  'data' => $deleteLink,
                  'class' => array (
                      'view-user-company-delete',
                      'text-center' 
                  ) 
              ) 
          ),
          'class' => array (
              'listing-row-' . $nid 
          ) 
      );
    }
  }
  if ($ajax == FALSE) {
    $output .= '<div class="cust-view-heading cust-rfp-heading"><span>Company Emails</span></div>';
  }
  $output .= theme ( 'table', array (
      'header' => $header,
      'rows' => $rows,
      'empty' => 'Not Available Yet',
      'attributes' => array (
          'id' => 'company-mail-detail-table',
          'class' => array (
              'company-mail-detail-table',
              'table',
              'table-bordered',
              'table-hover',
              'table-striped' 
          ) 
      ),
      'sticky' => FALSE 
  ) );
  if ($ajax == FALSE) {
    $output .= '<div class="user-join-company-section pull-right" style="margin-top:10px;">' . l ( 'Join Another Company as Employee', 'join/organization', array (
        'query' => array (
            'cancel' => current_path () 
        ) 
    ) ) . '</div>';
  }
  return $output;
}

// function for get edit company email form
function edit_company_email_content_callback($cmpNode, $useruid) {
  $output = drupal_render ( drupal_get_form ( 'edit_company_email_submission_form', $cmpNode->nid, $useruid ) );
  drupal_json_output ( array (
      'html' => $output 
  ) );
  drupal_exit ( 0 );
}
// function for edit company email form
function edit_company_email_submission_form($form, $form_state, $companyNid, $useruid) {
  $form = array ();
  $form ['#attributes'] = array (
      'class' => array (
          'edit_company_email_submission_form' 
      ) 
  );
  $form ['#prefix'] = '<div class="form-header"><strong>Enter New Email Address</strong><span class="form-required" title="This field is required.">*</span></div>';
  
  $form ['error_text'] = array (
      '#markup' => '<span class="onboarding-login-form-error" style="color:red;"></span>' 
  );
  
  $form ['user_credendial_email_submitted'] = array (
      '#type' => 'textfield',
      // '#title' => t('Email'),
      '#attributes' => array (
          'autocomplete' => 'off' 
      ),
      // '#element_validate' => array('m6connect_email_validate'),
      '#required' => TRUE,
      '#default_value' => _get_user_company_email ( $useruid, $companyNid ) 
  );
  return $form;
}

// function for update email address on submit form
function edit_company_email_submit($cmpNode) {
  $output = array (
      'tablehtml' => '' 
  );
  if ($cmpNode->type == 'organization' && isset ( $_POST ['useruid'] ) && is_numeric ( $_POST ['useruid'] ) && isset ( $_POST ['js'] ) && $_POST ['js'] == 1) {
    // $output = array('tablehtml' => array($_POST['email'], $_POST['useruid'], $cmpNode->nid));
    $num_updated = db_update ( 'm6connect_og_membership_email' )-> // Table name no longer needs {}
fields ( array (
        'company_email' => trim ( $_POST ['email'] ) 
    ) )->condition ( 'user_uid', $_POST ['useruid'] )->condition ( 'entity_id', $cmpNode->nid )->execute ();
    if ($num_updated == 1) {
      $output = array (
          'tablehtml' => "Success" 
      );
    }
  }
  drupal_json_output ( $output );
  drupal_exit ( 0 );
}
function revoke_company_access_popup_content($cmpNode, $useruid) {
  $output = array (
      'popupcontent' => '' 
  );
  if ($cmpNode->type == 'organization' && is_numeric ( $useruid )) {
    $companyUsers = og_get_group_members_properties ( $cmpNode, array (), 'members__' . OG_STATE_ACTIVE, 'node' );
    $userRoles = og_get_user_roles ( 'node', $cmpNode->nid, $useruid );
    if (is_array ( $companyUsers ) && ! empty ( $companyUsers )) {
      if (count ( array_values ( $companyUsers ) ) == 1) {
        $output = array (
            'popupcontent' => '<div class="text-center"><strong>You are the only member of  ' . $cmpNode->title . '. Press Confirm to disable this Company\'s account. Press Cancel to keep the Company active.</strong></div>' 
        );
      } else if ($useruid == $cmpNode->uid) {
        $output = array (
            'popupcontent' => '<div class="text-center"><strong>' . $cmpNode->title . ' must have at least one Company Admin. Please assign another member to be Administrator before leaving the Company.</strong></div>' 
        );
      }
    }
    if (empty ( $output ['popupcontent'] )) {
      $output = array (
          'popupcontent' => '<div class="text-center"><strong>Your confirmation below revokes your access to all ' . $cmpNode->title . ' files and services.</strong></div>' 
      );
    }
  }
  drupal_json_output ( $output );
  drupal_exit ( 0 );
}
function revoke_company_access($cmpNode) {
  $output = array (
      'tablehtml' => '' 
  );
  if ($cmpNode->type == 'organization' && isset ( $_REQUEST ['useruid'] ) && is_numeric ( $_REQUEST ['useruid'] ) && isset ( $_REQUEST ['js'] ) && $_REQUEST ['js'] == 1) {
    $companyUsers = og_get_group_members_properties ( $cmpNode, array (), 'members__' . OG_STATE_ACTIVE, 'node' );
    if (in_array ( $_REQUEST ['useruid'], array_values ( $companyUsers ) )) {
      og_ungroup ( 'node', $cmpNode->nid, 'user', $_REQUEST ['useruid'] );
    }
    $output ['tablehtml'] = user_company_email_block_content ( $_REQUEST ['useruid'], $ajax = TRUE );
  }
  drupal_json_output ( $output );
  drupal_exit ( 0 );
}
function middle_m6topheaderblock() {
  $output = '';
  global $user, $base_url, $company;
  // $user_gid = 0;
  // $user_info = user_load($user->uid);
  $variables = array (
      'path' => $base_url . '/sites/all/themes/m6connect/images/icon-people-white.png', // icon-people /sites/default/files/default_profile.jpg
      'alt' => '',
      'width' => '16',
      'height' => '16' 
  );
  $people_picture = theme ( 'image', $variables );
  
  $output .= l ( '<i class="fa fa-fw fa-home"></i> Home', $base_url . '/content/front-page-1', array (
      'html' => TRUE,
      'attributes' => array (
          'class' => array (
              'm6top-companies-link' 
          ),
          'title' => 'Home' 
      ) 
  ) );
  
  $output .= l ( '<i class="fa fa-fw fa-building"></i> Companies', $base_url . '/companies', array (
      'html' => TRUE,
      'attributes' => array (
          'class' => array (
              'm6top-companies-link' 
          ),
          'title' => 'Companies' 
      ) 
  ) );
  $output .= l ( $people_picture . ' People', $base_url . '/find-people', array (
      'html' => TRUE,
      'attributes' => array (
          'class' => array (
              'm6top-people-link' 
          ),
          'title' => 'Find People' 
      ) 
  ) );
  // $output .= l('<i class="fa fa-diamond"></i> Services', $base_url, array('html' => TRUE, 'attributes' => array('class' => array('m6top-invite-link'), 'title' => 'Services')));
  
  $output .= l ( '<i class="glyphicon glyphicon-plus"></i> Invite to M6', 'sendinvite-users/nojs', array (
      'html' => TRUE,
      'attributes' => array (
          'class' => 'use-ajax ctools-modal-assign-dashboard-invite-style' 
      ) 
  ) );
  return $output;
}
function right_m6topheaderblock() {
  drupal_add_library ( 'system', 'ui.dialog' );
  $output = '';
  global $user, $base_url, $company;
  // $user_gid = 0;
  // $user_info = user_load($user->uid);
  $upgradelink = $base_url . '/upgrade-your-membership-subscription';
  /* * ***********notifaction start*************** */
  
  $variables = array (
      'path' => $base_url . '/sites/all/themes/m6connect/images/icon-notification.png', // icon-people /sites/default/files/default_profile.jpg
      'alt' => '' 
  );
  // 'width' => '16',
  // 'height' => '16',
  
  $notification_picture = theme ( 'image', $variables );
  
  //Messenger Notification Start
  
  
  $messengerNotification = _get_messenger_notification();
  
  //$messengerNotificationCount = count($messengerNotification);
  if(empty($messengerNotification['notification'])){
    $output .= l('<i class="fa fa-comments-o" aria-hidden="true"></i>','/user-messaging', array('html' => TRUE, 'attributes' => array('class' => array('app-user-message', 'custom-m6connect-message-link'), 'title' => 'Messenger')));
  }else{
    $msnotic_count ='';
    if($messengerNotification['new_message_count']){
      $msnotic_count = '<span class="notification-count">' . $messengerNotification['new_message_count'] . '</span>';
      $activemsgclass = 'active-noti-class-Onload';
      if($_SESSION['activ_noti_mgg'] == 'yes'){
      $openclas = 'notopen';
    } else {
      $_SESSION['activ_noti_mgg'] = 'yes';
      $openclas = 'open';
    }
      //$openclas = 'open';
      $activemsgstyle = 'style="display: block;"';
    } else { $activemsgclass = 'deactive-noti-class-Onload'; 
    $activemsgstyle = 'style="display: none;"';}

    $output .= '<div class="display-inline-block dropdown user-messenger-notification-section '.$openclas.'">';

    $output .= l('<i class="fa fa-comments-o" aria-hidden="true"></i>'.$msnotic_count,'/user-messaging', array(
      'html' => TRUE, 
    'external' => TRUE,
    'attributes' => array(
      'class' => array('app-user-message', 'custom-m6connect-message-link'),
      'title' => 'Messenger',
      'id' => 'messenger-notification',
      'data-target' => '#',
      'data-toggle' => 'dropdown',
      'role' => 'button',
      'aria-haspopup' => 'true',
      'aria-expanded' => 'false' 
      )
    ));
   
    $output .= '<div class="dropdown-menu dropdown-menu-right '.$activemsgclass.'" aria-labelledby="messenger-notification"><div class="user-messenger-notification-section-label text-center">Messages</div><div class="user-notification-outer">';
    //if($messengerNotification['notification'] > 0){ $output .= ''; }
    $output .= implode('',$messengerNotification['notification']);
    $output .= '<div class="close-button text-right"><button class="button_close_slide btn btn-default" value="Close">Close</button></div>';
    $output .= '</div></div>';  
  }
  $output .= '</div>';
  //Messenger Notification End
  
  
  $m6_notification_section = m6_notification_section ();
  $m6_noti_count = member_notification_status_count ( $user->uid );
  $notic_count = '';
  if ($m6_noti_count) { // /* $m6_notification_section['notification_count'] > 0 */
    $notic_count = '<span class="notification-count">' . $m6_noti_count . '</span>'; // /* $m6_notification_section['notification_count'] */
    

    $activenoticlass = 'active-noti-class-Onload';
    if($_SESSION['activ_noti'] == 'yes'){
      $openclas = 'notopen';
    } else {
      $_SESSION['activ_noti'] = 'yes';
      $openclas = 'open';
    }
      $activenotystyle = 'style="display: block;"';
  } else { $activenoticlass = 'deactive-noti-class-Onload'; 
    $activenotystyle = 'style="display: none;"';  } 
  //$output .= $openclas;
  $output .= '<div class="dropdown user-edit-profile-section '.$openclas.'">';
  $output .= l ( $notification_picture . $notic_count, 'javascript:void(0);', array (
      'html' => TRUE,
      'external' => true,
      'attributes' => array (
          'class' => array (
              'user_profile',
              'custom-m6connect-misc-link' 
          ),
          'title' => 'Notifications',
          'id' => 'user-Notification',
          'data-target' => '#',
          'data-toggle' => 'dropdown',
          'role' => 'button',
          'aria-haspopup' => 'true',
          'aria-expanded' => 'false' 
      ) 
  ) );
  // if (count($list_company) > 0) { 
  
  $output .= '<div class="dropdown-menu dropdown-menu-right '.$activenoticlass.'" aria-labelledby="user-Notification"><div class="user-messenger-notification-section-label text-center">Notifications</div><div class="user-notification-outer">';
  if(count($m6_notification_section ['output'])){
    $output .= '';
  }
  // $output .= '<div class="text-center">Notification</div>';
  // $output .= ' <div role="separator" class="divider"></div>';
  $next_scroll_page = theme ( 'pager_next', array (
      'text' => t ( 'next' ) 
  ) );
  
  if ($m6_notification_section ['output']) {
    // $output .= $m6_notification_section['notification_count'];
    $output .= $m6_notification_section ['output'];
    
    if (isset ( $m6_noti_count ) && $m6_noti_count > 9) {
      $output .= '<div class="notinav" style="display: none;">' . $next_scroll_page . '</div>';
      // $output .=$m6_noti_count;
    }
    $output .= '</div>';
    $output .= '<div class="close-button text-right"><button class="button_close_slide btn btn-default" value="Close">Close</button></div>';
  } else {
    $output .= '<div class="text-center">You have no new notification</div>';
    
    $output .= '</div>';
    $output .= '<div class="close-button text-right"><button class="button_close_slide btn btn-default" value="Close">Close</button></div>';
  }
  $output .= '</div>';
  // }
  $output .= '</div>';
  
  /* * **********notifaction end**************** */
  
  $output .= l ( 'Upgrade', $upgradelink, array (
      'html' => TRUE,
      'attributes' => array (
          'class' => array (
              'm6top-upgrade-link' 
          ),
          'title' => 'Upgrade Your M6Connect Membership Today!' 
      ) 
  ) );
  $output .= l('<i class="fa fa-power-off"></i> Log Out', 'user/logout', array('html' => TRUE, 'attributes' => array('title' => "Log Out",'class'=>array('m6top-upgrade-link'))));
  
  return $output;
}
function join_company_notification_entry($joinCompanyNid) {
  global $user;
  
  $m6connect_notification_table_exist = db_table_exists ( 'm6connect_notification' );
  if ($m6connect_notification_table_exist && isset ( $joinCompanyNid )) {
    $joinCompanyNid_nload = node_load ( $joinCompanyNid );
    if (isset ( $joinCompanyNid_nload ) && $joinCompanyNid_nload->type == 'organization') {
      
      $m6connect_notification = array (
          'type' => 'company_status',
          'event' => 'join',
          'entity_id' => 0,
          'company_nid' => $joinCompanyNid,
          'message' => NULL,
          'request_from' => $user->uid,
          'request_to' => $joinCompanyNid_nload->uid,
          'status' => 1,
          'timestamp' => time () 
      );
      entity_save ( 'm6connect_notification', ( object ) $m6connect_notification );
    }
  }
}
function _get_organigation_mapping_list() {
  global $user;
  $account = user_load ( $user->uid );
  $group = og_get_groups_by_user ( $account, $group_type = 'node' );
  $query = db_select ( 'node', 'n' );
  $query->fields ( 'n', array (
      'nid',
      'title' 
  ) );
  $query->condition ( 'type', 'organization', '=' );
  // ************************** Start (Not Show Company When they are Inctive) **************************/
  $ic_or = db_or ();
  $query->leftJoin ( 'field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid' );
  $ic_or->isNull ( 'ic.field_company_inactive_value' )->condition ( 'ic.field_company_inactive_value', 0 );
  $query->condition ( $ic_or );
  // *************************** End (Not Show Company When they are Inctive) ***************************/
  // ************************** Start (Show Company When show company active) **************************/
  $query->leftJoin ( 'field_data_field_show_company_in_search', 'isa', 'isa.entity_id = n.nid' );
  $query->condition ( 'isa.field_show_company_in_search_value', 1, '=' );
  // *************************** End (Show Company When show company active) ***************************/
  // ************************** Start (Not Show Company When they are not company type) **************************/
  $query->leftJoin ( 'field_data_field_type_of_company', 'tc', 'tc.entity_id = n.nid' );
  $query->condition ( 'tc.field_type_of_company_value', 'company', '=' );
  if (is_array ( $group ) && ! empty ( $group )) {
    $query->condition ( 'n.nid', array_values ( $group ), 'NOT IN' );
  }
  $result = $query->execute ()->fetchAllKeyed ( 0, 1 );
  return $result;
}

// a:2:{s:7:"coupons";a:1:{s:11:"TESTCOUPON2";a:1:{i:430;O:8:"stdClass":2:{s:8:"discount";d:1395;s:15:"pretax_discount";d:1395;}}}s:13:"complete_sale";s:9:"logged_in";}
function manage_statuses_page_view_form($status_id, $ajax = NULL) {
  module_load_include ( 'inc', 'statuses', 'includes/statuses.preprocess' );
  $options1 = array (
      'page' => 1 
  );
  $status1 = statuses_load ( $status_id );
  $status = _statuses_show ( $status1, $options1 );
  if ($ajax) {
    ctools_include ( 'ajax' );
    ctools_include ( 'modal' );
    $form_state = array (
        'ajax' => TRUE,
        'status_id' => $status_id,
        'status' => $status 
    );
    $output = ctools_modal_form_wrapper ( 'manage_statuses_page_view', $form_state );
    if (! empty ( $form_state ['ajax_commands'] )) {
      $output = $form_state ['ajax_commands'];
    }
    print ajax_render ( $output );
    drupal_exit ();
  }
  return drupal_get_form ( 'manage_statuses_page_view', $status_id, $status );
}
function manage_statuses_page_view($form, &$form_state, $status_id, $status, $ajax = NULL) {
  ctools_include ( 'ajax' );
  ctools_include ( 'modal' );
  if ($form_state ['ajax'] == true) {
    $status_id = $form_state ['status_id'];
    $status = $form_state ['status'];
  } else {
    $form_state ['status_id'] = $status_id;
    $form_state ['status'] = $status;
  }
  
  // $sddi = statuses_show($status_id, $options = array());
  $status1 = statuses_load ( $status_id );
  $sender = user_load ( $status1->sender );
  $recipient = user_load ( $status1->recipient );
  
  /*
   * $form['statuses_title'] = array(
   * '#type' => 'fieldset',
   * '#title' => 'statuses'.$status_id,
   * );
   */
  /*
   * $form['statuses_title']['name'] = array(
   * '#type' => 'markup',
   * '#title' => t('sid'),
   * '#markup' => '<div class="statuses-participants"> <span class="statuses-sender"><a href="/user/'.$status1->sender.'" title="View user profile." class="username" xml:lang="" about="/user/'.v.'" typeof="sioc:UserAccount" property="foaf:name" datatype="">'.$sender->realname.'</a></span>
   * <!--&raquo;--> with <span class="statuses-recipient"><a href="/content/my-friend">'.$recipient->realname.'</a></span> </div>',
   * );
   * $form['statuses_title']['message'] = array(
   * '#type' => 'markup',
   * '#title' => t('message'),
   * '#markup' => '<div class="statuses-content">'.$status1->message.'</div>',
   * );
   *
   * $form['statuses_title']['created'] = array(
   * '#type' => 'markup',
   * '#title' => t('created'),
   * '#markup' => '<div class="statuses-time">'.format_date($status1->created ,'custom','F j @ g:i a').'</div>',
   * );
   */
  $form ['statuses_title status'] = array (
      '#type' => 'markup',
      '#title' => t ( 'status' ),
      '#markup' => '<div class="statuses-time">' . $status . '</div>' 
  );
  
  return $form;
}

// new image resolution validate
function file_validate_image_resolution_new($file, $maximum_dimensions = 0, $minimum_dimensions = 0) {
  $errors = array ();
  global $base_url;
  $theme_path = drupal_get_path('theme', 'm6connect');
  
  // Check first that the file is an image.
  if ($info = image_get_info ( $file->uri )) {
    
    /*
     * if ($maximum_dimensions) {
     * // Check that it is smaller than the given dimensions.
     * list($width, $height) = explode('x', $maximum_dimensions);
     * if ($info['width'] == $width && $info['height'] == $height) {
     * // Try to resize the image to fit the dimensions.
     * if ($image = image_load($file->uri)) {
     * image_scale($image, $width, $height);
     * image_save($image);
     * $file->filesize = $image->info['file_size'];
     * drupal_set_message(t('The image was resized to fit within the maximum allowed dimensions of %dimensions pixels.', array('%dimensions' => $maximum_dimensions)));
     * }
     * else {
     * $errors[] = t('The image is too large; the maximum dimensions are %dimensions pixels.', array('%dimensions' => $maximum_dimensions));
     * }
     * }
     * }
     *
     *
     *
     * if ($minimum_dimensions) {
     * // Check that it is larger than the given dimensions.
     * list($width, $height) = explode('x', $minimum_dimensions);
     * if ($info['width'] < $width || $info['height'] < $height) {
     * //$errors[] = t('The image is too small; the minimum dimensions are %dimensions pixels.', array('%dimensions' => $minimum_dimensions));
     * $errors[] = t('Image must be of dimension %dimensions pixels.', array('%dimensions' => $minimum_dimensions));
     * }
     * }
     */
    
    if (isset ( $minimum_dimensions ) && isset ( $maximum_dimensions )) {
      list ( $min_width, $min_height ) = explode ( 'x', $minimum_dimensions );
      list ( $max_width, $max_height ) = explode ( 'x', $maximum_dimensions );
      if ($info ['width'] != $max_width || $info ['height'] != $max_height) {
        
      // $errors [] = t('Image must be of dimension %dimensions pixels.<br/>Adjust your Image Size by Following these steps:<br/><<< Open MS Paint --> select File at the top of the page --> then open your picture --> select Resize on the toolbar --> uncheck Maintain aspect ratio -->  select Pixels --> then change the Horizontal pixels '.$min_width.' --> change the Vertical '.$min_height.' --> save your new picture --> navigate back to M6 and upload the image.', array ('%dimensions' => $minimum_dimensions));

      $errors[] = t('Image must be of dimension %dimensions pixels.<br/>Mac: Use Image Preview then click on "Show Markup Toolbar" <img src="@img_1" style="width: 45px;">, then click on "Adjust Size" <img src="@img_2" style="width: 32px;"> icon.<br/>Windows: Open image in MS Paint, then click on the "Resize Icon" <img src="@img_3">', array(
                '%dimensions' => $minimum_dimensions,
                '@img_1' => $base_url . '/' . $theme_path . '/images/show_markup_toolbar_mac.png',
                '@img_2' => $base_url . '/' . $theme_path . '/images/adjust_resize_mac.png',
                '@img_3' => $base_url . '/' . $theme_path . '/images/adjust_resize_windows-1.png',
            ));
      }
    }
  }
  
  return $errors;
}
function exist_company_state_legal_structure($usr_legal_structure, $usr_state, $usr_company_title, $companyNid = '') {
  $query = db_select ( 'node', 'n' );
  $query->leftjoin ( 'users', 'u', 'u.uid=n.uid' );
  $query->leftjoin ( 'field_data_field_legal_structure', 'arsa', 'n.nid=arsa.entity_id' );
  $query->leftjoin ( 'field_data_field_org_address', 'arsab', 'n.nid=arsab.entity_id' );
  $query->fields ( 'n', array (
      'nid' 
  ) );
  $query->condition ( 'n.type', 'organization', '=' );
  $query->condition ( 'arsab.field_org_address_administrative_area', $usr_state, '=' );
  $query->condition ( 'arsa.field_legal_structure_value', $usr_legal_structure, '=' );
  if (! empty ( $companyNid )) {
    $query->condition ( 'n.nid', $companyNid, '!=' );
  }
  $query->where ( 'LOWER(n.title)=:ComoanyTitle', array (
      ':ComoanyTitle' => strtolower ( $usr_company_title ) 
  ) );
  return $query->execute ()->rowCount ();
}
function _get_post_bumpit_comment_count($sid) {
  $query = db_select ( 'fb_likes', 'fl' )->fields ( 'fl' );
  $query->condition ( 'fl.sid', $sid, '=' );
  $bumpit_count = $query->execute ()->rowCount ();
  
  $comment = fbss_comments_get_comments ( $sid );
  $comment_cont = count ( $comment );
  return array (
    'bumpit_count' => $bumpit_count,
    'comment_count' => $comment_cont 
  );
}
function custom_image_wapper_view_form($sid, $fid) {  
  module_load_include('inc', 'statuses', 'includes/statuses.preprocess');
  $options1 = array('page' => 1);
  $status1 = statuses_load($sid);
  $status = _statuses_show($status1, $options1);
  
  
  
  $bumpit_comment_count = _get_post_bumpit_comment_count($sid);
  $fileObj = file_load($fid);
  $url = image_style_url('fbmsb_share_image',$fileObj->uri);
  $create_url = file_create_url($fileObj->uri);
  $output = '<div class="custom-image-wapper-view" onload="myDashboadImage()">';
  $output .= '<img src="'.$create_url.'" title="">';
  //$output .= '<div class="bumit-comment-count"> Bumpit: '.$bumpit_comment_count['bumpit_count']. ' Comment: '.$bumpit_comment_count['comment_count'].'</div>';
/*  $output .= '<div class="bumit-comment-count clearfix">
          <div class="pull-left"> Bumps: '.$bumpit_comment_count['bumpit_count']. '</div>                     
        <div class="pull-right"> Comments: '.$bumpit_comment_count['comment_count'].'</div>
        </div>';*/
  $output .='</div>';
  //$output .= $status;
   //$output .= drupal_add_js('function myFunction() { alert("testing")}', 'inline');
  
  print $output;
  
  //print drupal_render ( drupal_get_form ( 'custom_image_wapper_popup_form' ) );
}
function custom_image_wapper_popup_form($form, $form_state) {
  $form = array ();
  $form ['imagepopup-container'] = array (
      '#markup' => '<div id="imagepopup-wapper-container"></div>' 
  );
  $form ['name'] = array (
      '#title' => t ( 'Name' ),
      '#type' => 'textfield',
      '#required' => TRUE 
  );
  $form ['submit'] = array (
      '#type' => 'submit',
      '#value' => t ( 'Submit' ),
      '#ajax' => array (
          'callback' => 'trial_image_wapper_form_submit',
          'wrapper' => 'imagepopup-wapper-container',
          'method' => 'replace',
          'effect' => 'fade' 
      ) 
  );
  // '#submit' => array('trial_registration_form_submit'),
  
  return $form;
}
function trial_image_wapper_form_submit($form, &$form_state) {
  $content = t ( 'testing trial image wapper form submit' );
  $commands = array (
      ajax_command_replace ( '#imagepopup-wapper-container', $content ) 
  );
  $replace = array (
      '#type' => 'ajax',
      '#commands' => $commands 
  );
  return $replace;
}

/*function genrate_node_link($node_nid,$user_uid){
  //$node_nid = 21366;
  $user = user_load($user_uid); //global $user;   
  $query = db_select('node','n');
  $query->leftJoin('field_data_field_certificate_status', 'fcs', 'fcs.entity_id = n.nid');
  $query->fields('n',array('type','status'));
  $query->fields('fcs', array('field_certificate_status_tid'));
  $query->condition('n.nid',$node_nid,'=');
  $result = $query->execute()->fetchAll();
  
  //pre($result);
  foreach($result as $delta){
    if($delta->type == 'insurance_certificates'){
      $node_is_archive = '';
      $node_is_template = '';
      $node_is_draft = '';
      $flag = flag_get_flag('archive');     
      $templateTid = _get_term_id_by_term_name('Template');
      if(!empty($delta->field_certificate_status_tid) && $delta->field_certificate_status_tid == $templateTid){
        $node_is_template = 1;
        return '/insurance-certificates/template';        
      }
      else if($delta->status == 0){
        $node_is_draft = 1;
        return '/insurance-certificates/drafts';  
      }
      else if ($flag && $flag->is_flagged($node_nid, $user->uid)) {
        $node_is_archive = 1;     
        return '/insurance-certificates/archive';         
      }
      else{
      return 'archive '.$node_is_archive.' template '.$node_is_template. ' draft '.$node_is_draft;
      }
    }
    if($delta->type == 'contract'){
      return '/insurance-contract/adi-test-contract';
    }
  } 
}*/

function primary_company_select($node){
  global $user;
  if(isset($node)&& !empty($node)){ 
  $existing = user_load($user->uid);
    $edit = (array) $existing; 
    $edit['field_primary_company']['und'][0]['value'] = $node->nid;
  user_save($existing, $edit);  
  }
}

function company_name_hide_onprofile($action,$node){
  global $user;
  //pre($action,1);
  if(isset($node)&& !empty($node) && db_table_exists('m6connect_company_name_hideon_profile') && $action == 'checked' ){  
    $db_insert = array (
    'user_uid' => $user->uid,
    'company_nid' => $node->nid,
    'timestamp' => time()   
    );
  db_insert ( 'm6connect_company_name_hideon_profile' )->fields ( $db_insert )->execute (); 
  }
  if(isset($node)&& !empty($node) && db_table_exists('m6connect_company_name_hideon_profile') && $action == 'unchecked' ){  
  db_delete ( 'm6connect_company_name_hideon_profile' )
  ->condition ('user_uid', $user->uid)
  ->condition ('company_nid', $node->nid)
  ->execute();
  }
}

/**
 * Implements hook_update_projects_alter().
 */
function m6connect_common_update_projects_alter(&$projects) {
  // Removing pluplod from the update list.
  unset($projects['plupload']);
}

// Theme Template query function goes here

// Function for page--proposals--received.tpl.php
function _get_eproposal_table_record($titleSearch, $getArg = '') {
  if(!empty($getArg)) {	
	$sql_node3 = db_query('SELECT a.title,a.nid,a.uid,a.status,a.created,b.entity_id,b.field_proposal_number_value,
	c.entity_id,c.field_submit_proposal_in_respons_target_id,
	d.entity_id,d.field_field_sub_proposal_pjt_target_id,
	e.entity_id,e.field_submit_proposal_member_target_id,
	f.entity_id,f.field_submit_proposal_to_company_target_id,
	g.entity_id,g.field_proposal_bid_amount_value,
	h.entity_id,h.field_proposoal_bid_types_value,
	i.entity_id,i.field_proposal_job_location_administrative_area,i.field_proposal_job_location_locality,
	j.node_id,j.status,j.award_taker_id,j.award_giver_id,
	k.reject_node,k.status,k.reject_taker_id,k.reject_giver_id,
	CONVERT(REPLACE(g.field_proposal_bid_amount_value,:ReplaceFrom,:ReplaceTo), DECIMAL(10,2)) bid_amount 
	FROM node AS a 
	LEFT JOIN field_data_field_cm_type AS cm ON a.nid = cm.entity_id
	LEFT JOIN field_revision_field_proposal_number AS b ON a.nid=b.entity_id 
	LEFT JOIN field_data_field_submit_proposal_in_respons AS c ON a.nid=c.entity_id 
	LEFT JOIN field_revision_field_field_sub_proposal_pjt AS d ON a.nid=d.entity_id 
	LEFT JOIN field_revision_field_submit_proposal_member AS e ON a.nid=e.entity_id 
	LEFT JOIN field_revision_field_submit_proposal_to_company AS f ON a.nid=f.entity_id 
	LEFT JOIN field_data_field_proposal_bid_amount AS g ON a.nid=g.entity_id
	LEFT JOIN field_data_field_proposoal_bid_types AS h ON a.nid=h.entity_id  
	LEFT JOIN field_data_field_proposal_job_location AS i ON a.nid=i.entity_id  
	LEFT JOIN proposal_award AS j ON a.nid=j.node_id  
	LEFT JOIN proposal_reject AS k ON a.nid=k.reject_node  
	WHERE a.status=1 AND cm.field_cm_type_value IS NULL AND a.type=:type '.$titleSearch, array(':type'=>'my_proposal',':ReplaceFrom'=>',',':ReplaceTo'=>''));
  }
  else {
    $sql_node3 = db_query('SELECT a.title,a.nid,a.uid,a.status,a.created,b.entity_id,b.field_proposal_number_value,
  c.entity_id,c.field_submit_proposal_in_respons_target_id,
  d.entity_id,d.field_field_sub_proposal_pjt_target_id,
  e.entity_id,e.field_submit_proposal_member_target_id,
  f.entity_id,f.field_submit_proposal_to_company_target_id,
  g.entity_id,g.field_proposal_bid_amount_value,
  h.entity_id,h.field_proposoal_bid_types_value,
  i.entity_id,i.field_proposal_job_location_administrative_area,i.field_proposal_job_location_locality,
  j.node_id,j.status,j.award_taker_id,j.award_giver_id,
  k.reject_node,k.status,k.reject_taker_id,k.reject_giver_id,
  CONVERT(REPLACE(g.field_proposal_bid_amount_value,:ReplaceFrom,:ReplaceTo), DECIMAL(10,2)) bid_amount 
  FROM node AS a 
  LEFT JOIN field_data_field_cm_type AS cm ON a.nid = cm.entity_id
  LEFT JOIN field_revision_field_proposal_number AS b ON a.nid=b.entity_id 
  LEFT JOIN field_data_field_submit_proposal_in_respons AS c ON a.nid=c.entity_id 
  LEFT JOIN field_revision_field_field_sub_proposal_pjt AS d ON a.nid=d.entity_id 
  LEFT JOIN field_revision_field_submit_proposal_member AS e ON a.nid=e.entity_id 
  LEFT JOIN field_revision_field_submit_proposal_to_company AS f ON a.nid=f.entity_id 
  LEFT JOIN field_data_field_proposal_bid_amount AS g ON a.nid=g.entity_id
  LEFT JOIN field_data_field_proposoal_bid_types AS h ON a.nid=h.entity_id  
  LEFT JOIN field_data_field_proposal_job_location AS i ON a.nid=i.entity_id  
  LEFT JOIN proposal_award AS j ON a.nid=j.node_id  
  LEFT JOIN proposal_reject AS k ON a.nid=k.reject_node  
  WHERE a.status=1 AND cm.field_cm_type_value = :cm_type AND a.type=:type '.$titleSearch, array(':type'=>'my_proposal',':ReplaceFrom'=>',',':ReplaceTo'=>'', ':cm_type' => $getArg));   
  }    
  $sql_node4 = $sql_node3->fetchAll();
}

// Function for page--proposals--received.tpl.php

function _is_upgrade_required($titleSearch, $getArg = '') {
  $queryFree = db_select('node', 'n');
  $queryFree->leftJoin('field_data_field_available_for_free', 'aff', 'aff.entity_id = n.nid');
  $queryFree->leftJoin('field_data_field_available_for_free_proj', 'paff', 'paff.entity_id = n.nid');
  $queryFree->fields('n', array('nid', 'type'));
  $queryFree->fields('paff', array('field_available_for_free_proj_value'));
  $queryFree->fields('aff', array('field_available_for_free_value'));
}

/*
 * User id from email
 *
 */
function getUserUidFromEmail($email = ''){
  if(!empty($email)){
    $getUserUid = db_select('users', 'u')
                ->fields('u', array('uid'))
                ->condition('mail', $email, '=')
                ->execute()->fetchCol();
    return $getUserUid;
  }
}