<?php
/**
 * Implements hook_menu().
 */
function m6connect_scm_menu() {
  $items['scm/my-request'] = array(
    //'title'           => 'My Request',
    'page callback'     => 'scm_my_request_content',
    //'access callback' => TRUE,
    'access callback'   => '_is_m6_user_logged_in_for_request',
    'file'              => 'supply.chain.manager.inc',
    'file path'         => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['scm/archive'] = array(
   //'title'           => 'My Request',
    'page callback'     => 'scm_my_request_content',
    //'access callback' => TRUE,
    'access callback'   => '_is_m6_user_logged_in_for_request',
    'file'              => 'supply.chain.manager.inc',
    'file path'         => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['scm/dashboard'] = array(
    'page callback'   => 'scm_scorecard_content_dashboard',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.dashboard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/my-project'] = array(
    //'title'           => 'Add Items',
    'page callback'     => 'scm_my_project_content',
    //'access callback' => TRUE,
    'access callback'   => '_is_m6_user_logged_in',
    'file'              => 'supply.chain.manager.project.inc',
    'file path'         => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['getall-users-company/autocomplete'] = array(
    'page callback' => 'getall_users_company_autocomplete',
    'access arguments' => array('access content'),
    'access callback'   => '_is_m6_user_logged_in_for_request',
    'type' => MENU_CALLBACK,
  );

  $items['project-form-search-form-ajaxcall'] = array(
    'page callback' => 'project_form_search_form_ajaxcall',
    'file'              => 'supply.chain.manager.dashboard.inc',
    'file path'         => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['scm-scorecard-settingedit/%/%ctools_js'] = array(
    'page callback'   => 'scm_scorecard_settingedit',
    'page arguments'  => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    // 'file'              => 'scm_scorecard_settings.inc',
    // 'file path'         => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_CALLBACK,
  );


  $items['scm/my-casemanager'] = array(
    //'title'           => 'Add Items',
    'page callback'     => 'scm_my_casemanager_content',
    //'access callback' => TRUE,
    'access callback'   => '_is_m6_user_logged_in',
    'file'              => 'supply.chain.manager.casemanager.inc',
    'file path'         => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['scm/my-reporting'] = array(
    //'title'           => 'Add Items',
    'page callback'     => 'scm_my_reporting_content',
    //'access callback' => TRUE,
    'access callback'   => '_is_m6_user_logged_in',
    'file'              => 'supply.chain.manager.reporting.inc',
    'file path'         => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['scm/buy-change'] = array(
    'page callback'   => 'scm_buy_change_content',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.buychange_delete.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/user-request-login'] = array(
    'page callback'   => 'scm_user_request_container',
    'access callback'   => '_is_m6_user_logged_out',
    'file'            => 'supply.chain.manager.buychange_delete.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );  

  $items['scm/patient-care'] = array(
    'page callback'   => 'scm_patient_care_content',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.project.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/preferences'] = array(
    'page callback'   => 'scm_preferences_content',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.casemanager.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/resources'] = array(
    'page callback'     => 'scm_resources_content',
    'access callback'   => '_is_m6_user_logged_in',
    'file'              => 'supply.chain.manager.casemanager.inc',
    'file path'         => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['scm/due-diligence'] = array(
    'page callback'   => 'scm_due_diligence_content',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.buychange_delete.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/payback'] = array(
    'page callback'   => 'scm_payback_content',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.casemanager.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  /*
   *  Team and Score Card menu items 
   */   
  $items['scm/thread'] = array(
    'page callback'   => 'scm_team_content',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.team.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );

  // Scorecard Left Block Menu Items.
  $items['scorecard/my-scorecards'] = array(
    'page callback'   => 'scm_scorecard_content_my_scorecard',
    'page arguments'  => array('scorecard'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.dashboard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/select-products'] = array(
    'page callback'   => 'scm_scorecard_select_product_content',
    'page arguments'  => array('scorecard'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/question-builder'] = array(
    'page callback'   => 'scm_question_builder_content',
    'page arguments'  => array('scorecard'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.questionbuilder.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/share'] = array(
    'page callback'   => 'scm_question_builder_share_content',
    'page arguments'  => array('scorecard'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.evaluate.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );  
  $items['scorecard/evaluate'] = array(
    'page callback'   => 'scorecard_evaluate_content',
    'page arguments'  => array('scorecard'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/decision'] = array(
    'page callback'   => 'scorecard_decision_content',
    'page arguments'  => array('scorecard', 'decision'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.decision.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/decision/%'] = array(
    'page callback'   => 'scorecard_decision_content',
    'page arguments'  => array('scorecard', 2),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.decision.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/evaluate/%node'] = array(
    'page callback'   => 'scorecard_rates_evaluate_content',
    'page arguments'  => array(2),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/resolve-comment/%'] = array(
    'page callback'   => 'resolve_scorecard_comment',
    'page arguments'  => array(2),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.decision.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );

  $items['scorecard/save-comment/%'] = array(
    'page callback'   => 'save_scorecard_comment',
    'page arguments'  => array(2),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.decision.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );

  // Scorecard CaseManager Menu Items.
  $items['scm/scorecard/my-scorecards'] = array(
    'page callback'   => 'scm_scorecard_content_my_scorecard',
    'page arguments'  => array('casemanager'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.dashboard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/scorecard/select-products'] = array(
    'page callback'   => 'scm_scorecard_select_product_content',
    'page arguments'  => array('casemanager'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/scorecard/question-builder'] = array(
    'page callback'   => 'scm_question_builder_content',
    'page arguments'  => array('casemanager'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.questionbuilder.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/scorecard/share'] = array(
    'page callback'   => 'scm_question_builder_share_content',
    'page arguments'  => array('casemanager'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.evaluate.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/scorecard/evaluate'] = array(
    'page callback'   => 'scorecard_evaluate_content',
    'page arguments'  => array('casemanager'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/scorecard/decision'] = array(
    'page callback'   => 'scorecard_decision_content',
    'page arguments'  => array('casemanager', 'decision'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.decision.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/scorecard/decision/stakeholder'] = array(
    'page callback'   => 'scorecard_decision_content',
    'page arguments'  => array('casemanager', 'stakeholder'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.decision.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/scorecard/decision/comments'] = array(
    'page callback'   => 'scorecard_decision_content',
    'page arguments'  => array('casemanager', 'comments'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.decision.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/scorecard/decision/justification'] = array(
    'page callback'   => 'scorecard_decision_content',
    'page arguments'  => array('casemanager', 'justification'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.decision.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );


  // New Scorecard Menu Items
  $items['scorecard/new'] = array(
    'page callback'   => 'scm_scorecard_content',
    'page arguments'  => array('new_scorecard'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/new/select-products'] = array(
    'page callback'   => 'scm_scorecard_select_product_content',
    'page arguments'  => array('new_scorecard'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/new/question-builder'] = array(
    'page callback'   => 'scm_question_builder_content',
    'page arguments'  => array('new_scorecard'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.questionbuilder.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/new/evaluate'] = array(
    'page callback'   => 'scm_question_builder_evaluate_content',
    'page arguments'  => array('new_scorecard'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.evaluate.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/new/share'] = array(
    'page callback'   => 'scm_question_builder_share_content',
    'page arguments'  => array('new_scorecard'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.evaluate.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scorecard/cancel/%node/%ctools_js'] = array(
    'page callback'   => 'cancel_scorecard_new',
    'page arguments'  => array(2, 3),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['share-scorecard/%/%ctools_js'] = array(
    'page callback' => 'share_scorecard_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.evaluate.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type' => MENU_CALLBACK,  
  );
  $items['share-recommendation/%node/%ctools_js'] = array(
    'page callback' => 'share_recommendation_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    //'file'            => 'supply.chain.manager.evaluate.inc',
    //'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type' => MENU_CALLBACK,  
  );
  $items['resend-notification/%/%ctools_js'] = array(
    'page callback'   => 'resend_notification_callback',
    'page arguments'  => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.evaluate.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_CALLBACK,  
  );

  $items['add-scorecard-reference/%/%node/%node'] = array(
    'page callback'   => 'add_scorecard_reference',
    'access callback' => '_is_m6_user_logged_in',
    'page arguments'  => array(1,2,3),
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  
  $items['scm/closeout'] = array(
    'page callback'   => 'scm_closeout_content',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );  
  
  $items['add-scm-product/%/%/%ctools_js'] = array(
    'page arguments'  => array(1,2,3),
    'page callback'   => '_scm_add_product_callback',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'modal'           => TRUE,
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm-add-new-vendor/%ctools_js'] = array(
    'page arguments'  => array(1),
    'page callback'   => '_scm_add_vendor_callback',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'modal'           => TRUE,
    'type'            => MENU_NORMAL_ITEM,
  );  
   $items['score-card-status/%/%/%ctools_js'] = array(
    'page callback'   => 'scorecard_status_update',
    'page arguments'  => array(1,2,3),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.scorecard.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'modal'           => TRUE,
    'type'            => MENU_NORMAL_ITEM,
  );
  /************/
  $items['scm/casemanager-management'] = array(
    'page callback'   => 'drupal_get_form',
    'page arguments'  => array('case_manager_label_management_form'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'supply.chain.manager.casemanager.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );  
  $items['load-case-comment/%/%/%/%ctools_js'] = array(
    'page callback'   => '_load_case_comment_details_callback',
    'page arguments'  => array(1,2,3,4),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['delete-case-comment/%/%/%/%ctools_js'] = array(
    'page callback'   => '_delete_case_comment_details_callback',
    'page arguments'  => array(1,2,3,4),
    'access callback' => '_is_m6_user_logged_in',
  );
  
  $items['getprojectdata/%/%'] = array(
    //'title'         => 'Add Items',
    'page callback'   => 'scm_get_projectdata',
    'page arguments'  => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['scm/settings'] = array(
    'page callback'   => 'scm_configure_container',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'settings/supply_chain_manager_settings.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );

  $items['scm/settings/locations-region'] = array(
    'page callback'   => 'scm_locations_region_configure_container',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'settings/scm_location_region_settings.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );

  $items['scm/settings/locations-entity'] = array(
    'page callback'   => 'scm_locations_entity_configure_container',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'settings/scm_location_entity_settings.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );

  $items['scm/settings/locations-buildings'] = array(
    'page callback'   => 'scm_locations_buildings_configure_container',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'settings/scm_location_buildings_settings.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );

  $items['scm/settings/user-database'] = array(
    'page callback'   => 'scm_user_database_configure_container',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'settings/scm_user_database_settings.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['scm/settings/project'] = array(
    'page callback'   => 'scm_project_configure_container',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'settings/scm_project_settings.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['propose/settings/scorecard'] = array(
    'page callback'   => 'scm_project_scorecard_container',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'settings/scm_scorecard_settings.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );  
  $items['scm/chatting'] = array(
    'page callback'   => '_get_scm_chatting_system',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'get_scm_chatting_system.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );
  $items['remove-scm-setting-options'] = array(
    'title'             => '',
    'page callback'     => 'remove_scm_setting_options_ajax',
    //'access callback' => TRUE,
    'access callback'   => '_is_m6_user_logged_in',
    //'file'            => 'settings/supply_chain_manager_settings.inc',
    //'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );
  $items['scm-user-search-ajax'] = array(
    'page callback'   => 'get_scm_chatting_user_detail_ajax',
    'access callback' => 'user_is_logged_in',
    'file'            => 'get_scm_chatting_system.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );
  $items['scmchat-insert-message'] = array(
    'page callback'   => 'scmchat_insert_message_ajax_callback',
    'access callback' => 'user_is_logged_in',
    'file'            => 'get_scm_chatting_system.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );
  $items['scm_messenger-delete-message'] = array(
      'page callback'   => 'scm_m6message_delete_message_ajax_callback', 
      'access callback' => 'user_is_logged_in',
  );
  $items['scm_messenger-forword-message'] = array(
      'page callback'   => 'scm_m6message_forword_message_ajax_callback', 
      'access callback' => 'user_is_logged_in',
  );
  $items['category-data/autocomplete'] = array(
    'page callback'    => 'category_data_autocomplete',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );
  $items['getcategory/scorecard/autocomplete'] = array(
    'page callback' => 'getcategory_autocomplete',
    'access arguments' => array('access content'),
    'access callback'   => '_is_m6_user_logged_in_for_request',
    'type' => MENU_CALLBACK,
  );
  $items['sub-category-data/autocomplete'] = array(
    'page callback'    => 'sub_category_data_autocomplete',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );

  $items['scm-delete/%/%/%ctools_js'] = array(
    'page callback'   => 'scm_delete_callback',
    'page arguments'  => array(1,2,3),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
  );


   $items['filerowremove/%/%node/%/%file/%ctools_js'] = array(
    'page callback'   => 'scm_file_row_remove_callback',
    'page arguments'  => array(1, 2, 3, 4, 5),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
  );
  $items['scmvander-company/autocomplete'] = array(
    'page callback'    => 'scmvander_company_autocomplete',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );
  $items['userdb-data/autocomplete'] = array(
    'page callback'    => 'userdatabase_autocomplete',
    'access arguments' => array('access content'),
    'access callback'  => true,
    'type'             => MENU_CALLBACK,
  );
  $items['scm-chat-invite/%/%ctools_js'] = array(
    'page callback'   => 'scm_chat_invite',
    'page arguments'  => array(1, 2),
    'access callback' => TRUE,
  );

  $items['node/%node/add-products'] = array(
    'page callback'    => '_add_products_to_node',
    'page arguments'   => array(1),
    'access callback'  => '_is_user_company_admin',
    'access arguments' => array(1),
    'file'             => 'supply.chain.manager.scorecard.inc',
    'file path'        => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );

  $items['node/%node/review-products'] = array(
    'page callback'    => '_review_products_to_node',
    'page arguments'   => array(1),
    'access callback'  => '_is_user_company_admin',
    'access arguments' => array(1),
    'file'             => 'supply.chain.manager.scorecard.inc',
    'file path'        => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );

  $items['approve-deny-product/%/%node/%ctools_js'] = array(
    'page callback'    => '_approve_deny_review_products_to_node',
    'page arguments'   => array(1, 2, 3),
    'access callback'  => TRUE,
    'file'             => 'supply.chain.manager.scorecard.inc',
    'file path'        => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );
  $items['update-status-scorecard/%'] = array(
    'page callback'    => '_update_scorecard_status_active',
    'page arguments'   => array(1),
    'access callback'  => TRUE,
  );

  $items['remove-team-image/%node/%ctools_js'] = array(
    'page callback'   => 'remove_team_image',
    'page arguments'  => array(1, 2),
    'access callback' => TRUE,
    'file'            => 'supply.chain.manager.team.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );

  $items['remove-team-member/%node/%/%ctools_js'] = array(
    'page callback'   => 'remove_team_member',
    'page arguments'  => array(1, 2, 3),
    'access callback' => TRUE,
    'file'            => 'supply.chain.manager.team.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );

  $items['users/scm-autocomplete'] = array(
    'title'           => 'User autocomplete',
    'page callback'   => 'user_scm_autocomplete',
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
  );

  $items['scm-project-view/%node/%ctools_js'] = array(
    'title'            => t('Redirect User on CaseManager'),
    'page callback'    => 'redirect_user_to_casemanager',
    'page arguments'   => array(1, 2),
    'type'             => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file'             => 'supply.chain.manager.dashboard.inc',
    'file path'        => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );
  
  $items['scm-export-report/%/%node'] = array(
    'title'            => t('Export SCM Reports'),
    'page callback'    => 'scm_export_reports',
    'page arguments'   => array(1, 2),
    'type'             => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file'             => 'supply.chain.manager.team.inc',
    'file path'        => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );
  $items['add-scm-vendor/%/%ctools_js'] = array(
    'page callback'   => 'add_scm_vendor',
    'page arguments'  => array(1, 2),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'supply.chain.manager.buychange_delete.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );

  $items['scm-cat-delete/%/%/%ctools_js'] = array(
    'page callback'   => 'scm_cat_delete',
    'page arguments'  => array(1, 2, 3),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_NORMAL_ITEM,
    'file'            => 'settings/supply_chain_manager_settings.inc',
    'file path'       => drupal_get_path('module', 'm6connect_scm') . '/includes',
  );

  return $items;
}


function _is_m6_user_logged_in_for_request() {

  if(isset($_SESSION['login-mail']) && !empty($_SESSION['login-mail'])) {
    return true;
  } else if(user_is_logged_in()) {
    return true;
  }
   return false;
}

function _is_m6_user_logged_out() {
  if(!user_is_logged_in()) {
    return true;
  }
   return false;
}


function _is_m6_user_request_access() {
  if(user_is_logged_in() && _is_user_company_admin()) {
    return true;
  }
  if (path_is_admin(current_path())) {
    return true;
  }
   return false;
}

function scm_scorecard_settingedit($id = '', $ajax = NULL) {
  global $company;
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      //'title' => '<h4 class="asset-popup-title-custom">teste</h4>',
      'item_id' => $id,
    );
    $output = ctools_modal_form_wrapper('scm_scorecard_question_update_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('scm_scorecard_question_update_form', $id);
  }
}



function scm_scorecard_question_update_form($form, &$form_state,$item_id = '') {
  global $company;
  $query = db_select('m6connect_scm_category_setting','cat');
  $query->fields('cat', array('id','title'));
  $query->condition('cat.type','scorecard','=');
  $query->condition('cat.nid', $company->nid, '=');
  $getCat = $query->execute()->fetchAllKeyed(0,1);

  if(!empty($item_id)) {
    $qid = $item_id;
  } else {
    $qid = $form_state['item_id'];
  }

   global $user, $company;
  $qusquery = db_select('m6connect_scm_scorecard_question', 'n');
  $qusquery->fields('n');
  $qusquery->condition('n.id', $qid, '=');
  $qusquery->condition('n.company_nid', $company->nid, '=');
  $getqusresult = $qusquery->execute()->fetchObject();

  $form['questionhidden'] = array( 
    '#type' => 'hidden',
    '#default_value' => $qid, 
    '#attributes' => array('class'=>array('form-control','workflow-auto','questionhidden')),
    );
  $form['scorecard-question-update'] = array( 
    '#type' => 'textfield',
    '#title' => 'Question',
    '#default_value' => $getqusresult->question,
    '#attributes' => array('class'=>array('form-control','workflow-auto','scorecard-question-update')),
    '#required' => TRUE,
    '#prefix' => '<div class="project-details-border clearfix"><div class="form-item clearfix">',
    '#suffix' => '</div>',
    );

  $form['scorecard-category-update'] = array( 
    '#type' => 'select',
    '#title' => 'Category',
    '#options' => array_map('ucwords', $getCat),
    '#default_value' => $getqusresult->category_id,
    '#empty_option' => 'Choose category',
    '#attributes' => array('class'=>array('form-control','workflow-auto','scorecard-category-update')),
    '#required' => TRUE,
    '#prefix' => '<div class="project-details-border clearfix"><div class="form-item clearfix">',
    '#suffix' => '</div></div>',
    );

  $form['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array( 'external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('m6connect-alert-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();')) ),
        '#weight' => 10,
    );
    $form['submit'] = array(
        '#value' => t('Update'),
        '#type' => 'submit',
    );
  return $form;
}

function scm_scorecard_question_update_form_submit($form, &$form_state){
    global $user, $company;
    $commands = array();
    $values = $form_state['values'];
    $milestoneData = array(
      'uid' => $user->uid,
      'company_nid' => $company->nid,
      'category_id' => $values['scorecard-category-update'],
      'question' => $values['scorecard-question-update'],
    );
    db_update('m6connect_scm_scorecard_question')->fields($milestoneData)
                ->condition('id', $values['questionhidden'], '=')
                ->execute();
    drupal_set_message('Questions updated successfully!');

                if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
      $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
      $form_state['ajax_commands'][] = ajax_command_html("#get-table-question-setting-data-div", drupal_render(get_table_question_setting()), array());
      
    }
}

function get_table_question_setting() {
  global $user, $company;
  $elements = array();
  foreach (get_all_question() as $key => $value) { 
    $setting_render_data = '';
    $setting_render_data .= '<fieldset class="customfiled collapsible form-wrapper collapse-processed ">';
    $querycat = db_select('m6connect_scm_category_setting', 'n');
    $querycat->fields('n');
    $querycat->condition('n.id', $key, '=');
    $querycat->condition('n.type','scorecard','=');
    $querycat->condition('n.nid', $company->nid, '=');
    $catresult = $querycat->execute()->fetchObject();
    if(!empty($catresult->title) && $catresult->title!="") {
    $elements['scorecard-category-fieldset'][$key] = array(
      '#type' => 'fieldset',
      '#title' => t(ucwords($catresult->title)),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#attributes' => array('class' => array('collapsible', 'collapsed')),
      '#attached' => array(
        'library' => array(
          array('system', 'drupal.collapse'),
        ),
      ),
      '#prefix' => '<div class="clearfix margin-bottom-10">',
      '#suffix' => '</div>',
    );
    $i=0;
    $setting_render_data .= '<table class="table m6connect-custom-table">';
    $setting_render_data .= '<thead><tr>';
    $setting_render_data .=  '<th class="text-left col-md-2">Sr. No.</th>'; 
    $setting_render_data .=  '<th class="text-left col-md-8">Question</th>'; 
    $setting_render_data .=  '<th class="text-center col-md-2">Action</th>'; 
    $setting_render_data .= '</tr></thead><tbody>';
    foreach (get_all_question()[$key] as $mainkey => $mainvalue) {
      $i++;
      $setting_render_data .= '<tr>';
      $setting_render_data .=  '<td><div  class="text-left">'.$i.'</div></td>'; 
      $setting_render_data .=  '<td ><div  class="text-left">'.ucwords($mainvalue['title']).'</div></td>'; 
      $setting_render_data .=  '<td class="text-center">'.l('<i class="fa fa-pencil-square-o" aria-hidden="true"></i>', url('scm-scorecard-settingedit/'.$mainvalue['id'].'/nojs/'), array('query'=>array('redirect_node_url'=>current_path()), 'external'=>TRUE,'html' => TRUE, 'attributes'=> array('class'=>array('ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'&nbsp;<a href="javascript:void(0)" fortitle="'.ucwords($mainvalue['title']).'" class="delete-action-cat-call" datadelete-ref="'.$mainvalue['id'].'"><i class="fa fa-trash-o" aria-hidden="true"></a></i></td>';
      $setting_render_data .= '</tr>';
    }
    $setting_render_data .= '</tbody></table>';
    $setting_render_datawrap[$key] = $setting_render_data;

    $elements['scorecard-category-fieldset'][$key]['scorecard-category-settings-form'] = array(
    '#type' => 'markup',
    '#markup' => $setting_render_datawrap[$key],
    '#prefix' => '<div class="clearfix margin-bottom-10">',
    '#suffix' => '</div>',
  ); 
  }
}
  return $elements;
}

function get_all_question(){
  global $user, $company;
  $query = db_select('m6connect_scm_scorecard_question', 'n');
  $query->fields('n');
  $query->condition('n.company_nid', $company->nid, '=');
  $result = $query->execute()->fetchAll();
  foreach ($result as $mainkey => $mainvalue) {
    $datass[$mainvalue->category_id][$mainkey]['id'] = $mainvalue->id;
    $datass[$mainvalue->category_id][$mainkey]['title'] = $mainvalue->question;    
  }
  return $datass;
}

function getall_users_company_autocomplete($string = ''){
  global $company;  
  $matches = array();
  if(!empty($string)){
    $userList = _get_company_users_by_og_roles($company->nid,'Material Manager');
    foreach ($userList as $key => $value) {
       //$result[$value] = user_load($value)->realname;
       if (preg_match("/^{$string}/i",user_load($value)->realname)==1) {
        $matches[$value] = user_load($value)->realname; 
      }
    }
  //$userList = _get_user_mappping_by_group_company_nid($company->nid);
  // foreach($userList as $id => $userVal){
    
  //   // $matchedOwner = preg_match("/^{$string}/i",$userVal);
  //   // dpm($matchedOwner);
  //     if (preg_match("/^{$string}/i",$userVal)==1) {
  //       $matches[$id] = $userVal; 
  //     }
  //   }
  }
  drupal_json_output($matches);
}

/**
 * Menu callback for scm_delete_callback
 */
function scm_delete_callback($type = '', $id = '', $ajax = NULL) {
  global $company;
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $actiontext = 'Delete'; 
    if ($type == 'custom_user') {
      $userquery = db_select('m6connect_scm_settings_user_database', 'n');
      $userquery->fields('n');
      $userquery->condition('n.companyID', $company->nid, '=');
      $userquery->condition('n.id', $id, '=');
      $userfData = $userquery->execute()->fetchObject();
      $type_title = t(ucwords($userfData->fristname.' '.$userfData->lastname));
    }
    if ($type == 'unpublishnode') {
      $type_title = t('My request');
      $actiontext = 'Archive';
    }
    if ($type == 'publishnode') {
      $type_title = t('My request');
      $actiontext = 'Unarchive';
    }
    $form_state = array(
      'ajax' => TRUE,
      'title' => '<h4 class="asset-popup-title-custom">'.$actiontext.' ' . $type_title . '</h4>',
      'type' => $type,
      'item_id' => $id,
    );
    $output = ctools_modal_form_wrapper('scm_delete_callback_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('scm_delete_callback_form', $type, $id);
  }
}

/**
 * Function to get form to delete items in SCM.
 */
function scm_delete_callback_form($form, &$form_state, $type = '', $item_id = '') {
  if (empty($type) && !empty($form_state['type'])) {
    $type = $form_state['type'];
  }
  if (empty($item_id) && !empty($form_state['item_id'])) {
    $item_id = $form_state['item_id'];
  }
  if (!empty($type) && empty($form_state['type'])) {
    $form_state['type'] = $type;
  }
  if (!empty($item_id) && empty($form_state['item_id'])) {
    $form_state['item_id'] = $item_id ;
  }

  $form = array();


  
  if($type=='unpublishnode'){
    $type = 'archive';
  }else if(arg(1)=='publishnode'){
    $type = 'unarchive';
  }else{
    $type = $type;
  }

  $form['confirmation'] = array(
    '#type' => 'markup',
    '#markup' => t('Are you sure you want to '.$type.' this item? This action can\'t be undone.') . '<br/><br/>',
  );
  
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Yes'),
  );
  if ($form_state['ajax']) {
    $form['close'] = array(
      '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
      '#suffix' => '</div></div>',
    );
  }

  return $form;
}

/**
 * Submit handler for scm_delete_callback_form
 */
function scm_delete_callback_form_submit($form, &$form_state) {
  $table_function = '';
  if ($form_state['type'] == 'custom_user') {
    $table_function = 'get_scm_user_database_settings_table_data';
  }
  elseif ($form_state['type'] == 'unpublishnode') {
    $arg = 0;
    module_load_include('inc', 'm6connect_scm', 'supply.chain.manager');
    $table_function = 'get_scm_my_request_table_data';
  }
  elseif ($form_state['type'] == 'publishnode') {
    $arg = 1;
    module_load_include('inc', 'm6connect_scm', 'supply.chain.manager');
    $table_function = 'get_scm_my_request_table_data';
  }
  if ($form_state['type'] != 'node') {
    if ($form_state['type'] == 'custom_user') {
      $table = 'm6connect_scm_settings_user_database';
      db_delete($table)->condition('id', $form_state['item_id'], '=')->execute();
    }
    if ($form_state['type'] == 'unpublishnode') {
      $nid = $form_state['item_id'];
      $node = node_load($nid);
      $node->status = 0;
      node_save($node);
    }
    if ($form_state['type'] == 'publishnode') {
      $nid = $form_state['item_id'];
      $node = node_load($nid);
      $node->status = 1;
      node_save($node);
    }
  }
  if (isset($arg)) {
    $form_state['ajax_commands'][] = ajax_command_html("#scm-my-request-table", $table_function($arg));
  }
  else {
    $form_state['ajax_commands'][] = ajax_command_html("#scm-my-request-table", $table_function());
  }
  //$form_state['ajax_commands'][] = array('command' => 'initializeM6DataTables');
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
}

/**
* Implements hook_block_info().
*/
function m6connect_scm_block_info() {
  $blocks = array();
  $blocks['scm_menu_navigation'] = array(
    'info' => t('SCM Navigation'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['scm_banner_navigation'] = array(
    'info' => t('SCM Banner Data'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['scm_case_manager_navigation'] = array(
    'info' => t('SCM Case Manager Data'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}
/**
* Implements hook_block_view().
*/
function m6connect_scm_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'scm_menu_navigation':
      $block['subject'] = '';
      $block['content'] = scm_menu_links_content();
      break;
  case 'scm_case_manager_navigation':
      $block['subject'] = '';
      $block['content'] = scm_case_manager_navigation_content();
    break;  
  case 'scm_banner_navigation':
      $block['subject'] = t('');
      $block['content'] = scm_manager_project();
    break;
  }
  return $block;
}

function scm_menu_links_content(){
  $scmList = array(
    'scm/my-request'=>'My Requests',
    //'scm/add-items'=>'Add Items',
    'scm/archive'=>'Archive',    
  );
  $currentPath = current_path();
  $output = '<ul class="list-unstyled list-inline custom-list scm-menu-links clearfix">';
  foreach($scmList as $menuPath => $label){
    $class = ($currentPath == $menuPath)?' active':'';
  $output .= '<li class="menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  }    
  $output .= '</ul>';
  return $output; 
}

function scm_case_manager_navigation_content(){
  $scmList = array(
    'scm/my-request'              => 'My Project',
  'scm/thread'                    => 'Thread',
    'scm/buy-change'              => 'Case Manager',    
    'scm/scorecard/my-scorecards' => 'Scorecard',
    'scm/approvals'               => 'Approvals',
    // 'scm/buy-closeout'            => 'Closeout',
  );
  $currentPath = current_path();
  $output = '<ul class="list-unstyled list-inline custom-list scm-menu-links clearfix">';
  foreach($scmList as $menuPath => $label){
    $class = ($currentPath == $menuPath)?' active':'';
  $output .= '<li class="menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  }    
  $output .= '</ul>';
  return $output; 
}

function scm_setting_menu_links_content(){
  $scmList = array(
    'scm/settings'                  => 'General',
    'scm/settings/locations-region' => 'Locations',
    'scm/settings/user-database'    => 'Requestor Database',
    'scm/settings/project'          => 'Project',
  );
  $currentPath = current_path();

  if($currentPath=='propose/settings/scorecard'){
    $scmList = array(
    'propose/settings/scorecard'=>'Ratings Categories',
    );
  }
  $output = '<ul class="list-unstyled list-inline custom-list scm-menu-links clearfix">';
  foreach($scmList as $menuPath => $label){
    $class = ($currentPath == $menuPath)?' active':'';
  $output .= '<li class="menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  }    
  $output .= '</ul>';
  
  if($currentPath=='scm/settings/locations-region' || $currentPath=='scm/settings/locations-entity' || $currentPath=='scm/settings/locations-buildings') {
    $output .= scm_setting_sub_menu_links_content();
  }
  return $output; 
}

function scm_setting_sub_menu_links_content(){
  $scmList = array(
    'scm/settings/locations-region'=>'Region',
    'scm/settings/locations-entity'=>'Entity',
    'scm/settings/locations-buildings'=>'Department',  
  );
  $currentPath = current_path();
  $output = '<ul class="list-unstyled list-inline custom-list scm-menu-links clearfix">';
  foreach($scmList as $menuPath => $label){
    $class = ($currentPath == $menuPath)?' active':'';
  $output .= '<li class="menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  }    
  $output .= '</ul>';
  return $output;
}
function scm_csemanager_main_menu_links_content(){
  $as = _fetching_scorecard_information_active('scm_scorecard');
  $scmList = array(
    'scm/dashboard'               => t('DASHBOARD'),
    'scm/my-project'              => t('MY PROJECT'),
  'scm/thread'                    => t('THREAD'),
    'scm/my-casemanager'          => t('CASE MANAGER'),    
    'scm/scorecard/my-scorecards' => t('SCORECARD'),
    'scm/my-reporting'            => t('REPORTS'),
    // 'scm/closeout'                => t('CLOSEOUT'),
  );
  /*
   * Case manager Sub tabs
   */
  $scmcasemangerList = array(    
    'scm/my-casemanager' => t('Case Builder'),
    'scm/buy-change'     => t('Buy or Change'),
    'scm/patient-care'   => t('Patient Care'),
    'scm/preferences'    => t('Preferences'),
    'scm/resources'      => t('Resources'),
    'scm/due-diligence'  => t('Due Diligence'),
    'scm/payback'        => t('Pay Back'),
  );
  /*
   * ScoreCard Sub tabs
   */
  $scmScorecardList = array(
    'scm/scorecard/my-scorecards'    => t('My Scorecards'),
    'scm/scorecard/select-products'  => t('Select Products'),
    'scm/scorecard/question-builder' => t('Question Builder'),
    'scm/scorecard/share'            => t('Share'),
    'scm/scorecard/evaluate/' . $as  => t('Evaluate'),
    'scm/scorecard/decision'         => t('Decision'),
  );
  
  $currentPath = current_path();
  $output = '<ul class="list-unstyled list-inline custom-list scm-menu-links clearfix">';

  foreach ($scmList as $menuPath => $label) {
    $class = ($currentPath == $menuPath)?' active':'';

    if (array_key_exists($currentPath, $scmcasemangerList)) {
      $classother = 'active ';
    }
    if (array_key_exists($currentPath, $scmScorecardList)) {
      $classother1 = 'active ';
    }
    if ($menuPath == 'scm/my-casemanager') {
      $output .= '<li class="'.$classother.'menu-item'.$class.'">'.l($label,$menuPath).'</li>';
    }
    elseif (strpos($menuPath, 'scm/scorecard/evaluate') === 0) {
      $output .= '<li class="'.$classother1.'menu-item'.$class.'">'.l($label,$menuPath, array('attributes' => array('class' => array('change-evaluate-href')))).'</li>';
    }
    elseif ($menuPath == 'scm/scorecard/my-scorecards') {
      $output .= '<li class="'.$classother1.'menu-item'.$class.'">'.l($label,$menuPath).'</li>';
    }
    else {
      $output .= '<li class="menu-item'.$class.'">'.l($label,$menuPath).'</li>';
    }
  }

  $output .= '</ul>';

  return $output;
}

function scm_scorecard_dashboard_menu_links_content($where = 'scorecard') {
  $as = _fetching_scorecard_information_active('scm_scorecard');
  if ($where == 'scorecard') {
    $lists = array(
      // 'scorecard/dashboard'        => t('Dashboard'),
      'scorecard/my-scorecards'    => t('My Scorecards'),
      'scorecard/select-products'  => t('Select Products'),
      'scorecard/question-builder' => t('Question Builder'),
      'scorecard/share'            => t('Share'),
      'scorecard/evaluate/' . $as  => t('Evaluate'),
      'scorecard/decision'         => t('Decision'),
    );
  }
  elseif ($where == 'casemanager') {
    $lists = array(
      'scm/scorecard/my-scorecards'    => t('My Scorecards'),
      'scm/scorecard/select-products'  => t('Select Products'),
      'scm/scorecard/question-builder' => t('Question Builder'),
      'scm/scorecard/share'            => t('Share'),
      'scm/scorecard/evaluate/' . $as  => t('Evaluate'),
      'scm/scorecard/decision'         => t('Decision'),
    );
  }

  $currentPath = current_path();
  $output = '';
  $output .= '<ul class="list-unstyled list-inline custom-list scm-menu-links clearfix">';

  foreach ($lists as $link => $label) {
    $class = $currentPath == $link ? 'active ' : '';
    if (strpos($currentPath, $link) === 0) {
      $class = 'active ';
    }
    if (strpos($link, 'scorecard/evaluate') === 0) {
      $output .= '<li class="' . $class . 'menu-item">' . l(strtoupper($label), $link, array('attributes' => array('class' => array('change-evaluate-href')))) . '</li>';
    }
    else {
      $output .= '<li class="' . $class . 'menu-item">' . l(strtoupper($label), $link) . '</li>';
    }
  }

  $output .= '</ul>';

  return $output;
}


function scm_csemanager_sub_menu_links_content() {
  $scmList = array(
    'scm/my-casemanager' =>'Case Builder',
    'scm/buy-change'     =>'Buy or Change',
    'scm/patient-care'   =>'Patient Care',
    'scm/preferences'    =>'Preferences',
    'scm/resources'      =>'Resources',
    'scm/due-diligence'  =>'Due Diligence',
    'scm/payback'        =>'Pay Back',
  );
  $scmListNodes = array(
    'scm/my-casemanager' =>'case_builder',
    'scm/buy-change'     =>'buy_or_change',
    'scm/patient-care'   =>'patient_care',
    'scm/preferences'    =>'preferences',
    'scm/resources'      =>'resources',
    'scm/due-diligence'  =>'due_diligence',
    'scm/payback'        =>'pay_back',
  );
  $currentPath = current_path();
  // $menuStatusCase = _get_for_case_builder($_SESSION['scm_project_nid']);
  $output = '<ul class="list-unstyled list-inline custom-list scm-menu-links clearfix">';

  // Get case by product NID.
  $case_nid = _get_active_case_by_project($_SESSION['scm_project_nid']);
  if (empty($case_nid)) {
    $case_builder_color = 'scm-gray';
    $casedeltacolors = array(
      'case_builder'  => 'scm-gray',
      'buy_or_change' => 'scm-gray',
      'patient_care'  => 'scm-gray',
      'preferences'   => 'scm-gray',
      'resources'     => 'scm-gray',
      'due_diligence' => 'scm-gray',
      'pay_back'      => 'scm-gray',
    );
  }
  else {
    $case = node_load($case_nid);

    $casedelta = _get_delta_values_based_on_case($case);

    $casedeltacolors = _get_colors_by_casedelta($casedelta);
    $casedeltacolors = array('case_builder' => 'scm-green') + $casedeltacolors;
  }

  foreach($scmList as $menuPath => $label){
    $class = ($currentPath == $menuPath)?' active':'';
    
      $foundduediligence = (isset($menuPath) && $menuPath =='scm/due-diligence'?'data-trigger="hover" data-toggle="popover"  data-placement="bottom" data-content="Consider the department usage as a determining factor of shareholder engagement."':'');
     
    

    $output .= '<li '.$foundduediligence.' class="'.$casedeltacolors[$scmListNodes[$menuPath]].' menu-item'.$class.'">'.l($label,$menuPath).'</li>';
  // if($menuPath=='scm/my-casemanager') {
  //   $builderStatus = _get_for_case_builder($_SESSION['scm_project_nid']);
  //   $output .= '<li class="'.$casedeltacolors[$scmListNodes[$menuPath]].' menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  // }
  // else if($menuPath=='scm/buy-change'){
  //   $BuyChangeStatus = _get_for_buy_change($_SESSION['scm_project_nid']);
  //   $output .= '<li class="'.$BuyChangeStatus.' menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  // }
  // else if($menuPath=='scm/patient-care'){
  //   $patientCareStatus = _get_for_patient_care($_SESSION['scm_project_nid']);
  //   $output .= '<li class="'.$patientCareStatus.' menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  // }
  // else if($menuPath=='scm/preferences'){
  //   $preferenceStatus = _get_for_preference_status($_SESSION['scm_project_nid']);
  //   $output .= '<li class="'.$preferenceStatus.' menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  // }
  // else if($menuPath=='scm/resources'){
  //   $resourceStatus = _get_for_resources_status($_SESSION['scm_project_nid']);
  //   $output .= '<li class="'.$resourceStatus.' menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  // }
  // else if($menuPath=='scm/due-diligence'){
  //   $dueDiligenceStatus = _get_for_due_diligence_status($_SESSION['scm_project_nid']);
  //   $output .= '<li class="'.$dueDiligenceStatus.' menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  // }
  // else if($menuPath=='scm/payback'){
  //   $payBackStatus = _get_for_pay_back_status($_SESSION['scm_project_nid']);
  //   $output .= '<li class="'.$payBackStatus.' menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  // }
  
  // else {
  //   $output .= '<li class="menu-item'.$class.'">'.l($label,$menuPath).'</li>';    
  // }
    
  }    
  $output .= '</ul>';
  
  return $output;
}

function scm_scorecard_sub_menu_links_content() {
  $scmList = array(
    'scorecard/new'                  => 'Scorecard Information',
    'scorecard/new/select-products'  => 'Select Products',
    'scorecard/new/question-builder' => 'Question Builder ',
    'scorecard/new/share'            => 'Share',
  );
  $getNodesNids = _fetching_scorecard_information_active('scm_scorecard');



  $currentPath = current_path();

  if($currentPath == 'scorecard/new'){    
    $_SESSION['activeScorecardNid'] = ''; 
  }

  $output = '<ul class="list-unstyled list-inline custom-list scm-menu-links clearfix padding-10">';
  
  $sccount = 1;
  $newlebalclass = '';
  foreach ($scmList as $menuPath => $label) {
    $class = ($currentPath == $menuPath) ? ' active' : '';
    $link_class = ($currentPath == $menuPath) ? 'active' : '';
    //$scnumber = '<span style="border-radius: 15px; line-height: 16px; font-size: 10px; background: #FFF; height: 20px; width: 20px; text-align: center; font-weight: bold; margin: 0 0 0 5px; border: 2px solid #333 ; color: #333 ; padding:3px 5px 3px 5px;">'.$sccount.'</span>&nbsp;';

    $scnumber = '<span style="border-radius: 15px;line-height: 16px;font-size: 10px;height: 20px;width: 20px;text-align: center;font-weight: bold;margin: 0 0 0 5px;border: 2px solid #fff;color: #fff;padding: 3px 5px 3px 5px;margin-right: 5px;">'.$sccount.'</span>&nbsp;';
    
    if($menuPath == 'scorecard/new') {

      $newlebalclass = _new_scorecard_menu_lable($menuPath);
      /*if(!empty($_SESSION['activeScorecardNid']) && $_SESSION['activeScorecardNid'] == $getNodesNids){
        $newlebalclass = ($link_class == 'active') ? '' : 'bg-green';
      }else{
        $newlebalclass = 'bg-gray';
      }*/
      
      $output .= '<li class="menu-item' . $class . '" style="width:20%;">' . l($scnumber.$label, 'javascript:void(0)', array('attributes' => array('class' => array($link_class,$newlebalclass)), 'html' => TRUE, 'external' => TRUE)) . '</li>';
    }
    else {
      $newlebalclass = _new_scorecard_menu_lable($menuPath);
      $output .= '<li class="menu-item' . $class . '">' . l($scnumber.$label, 'javascript:void(0)', array('attributes' => array('class' => array($link_class,$newlebalclass)), 'html' => TRUE, 'external' => TRUE)) . '</li>';
    }
    $sccount++;
  }

  $output .= '</ul>';
  return $output;
}


function _new_scorecard_menu_lable($delta){
  $getNodesNids = _fetching_scorecard_information_active('scm_scorecard');
  $scmList = array(
    'scorecard/new'                  => 'bg-gray',
    'scorecard/new/select-products'  => 'bg-gray',
    'scorecard/new/question-builder' => 'bg-gray',
    'scorecard/new/share'            => 'bg-gray',
  );
  if(!empty($delta) && !empty($_SESSION['activeScorecardNid'])){
    $link_class = (current_path() == $delta) ? ' active' : '';
    if($delta == 'scorecard/new'){
      if(!empty($_SESSION['activeScorecardNid']) && $_SESSION['activeScorecardNid'] == $getNodesNids){        
        $scmList[$delta] = (current_path() == $delta) ? ' ' : 'bg-green';//($link_class == 'active') ? '' : 'bg-green';
      }else{
        $scmList[$delta] = 'bg-gray';
      }
    }
    if($delta == 'scorecard/new/select-products'){
      $getproduct = _get_all_products_by_scorecard($_SESSION['activeScorecardNid']);
      $productcount = '';
      if($getproduct && count($productcount)){
        $scmList[$delta] = (current_path() == $delta) ? ' ' : 'bg-green';//($link_class == 'active') ? '' : 'bg-green';
      }else{
        $scmList[$delta] = 'bg-gray';
      }
    }
    if($delta == 'scorecard/new/question-builder'){
      $query = db_select('field_data_field_qb_scorecard_referance', 'q')
      ->fields('q', array('entity_id'))
      ->condition('field_qb_scorecard_referance_target_id', $_SESSION['activeScorecardNid'])
      ->execute()
      ->fetchField();
      if(!empty($query) && $qbnode = node_load($query)){       
        if(!empty($qbnode) && !empty($qbnode->field_question_builder_category['und'][0]['value'])){
          $scmList[$delta] = (current_path() == $delta) ? ' ' : 'bg-green';//($link_class == 'active') ? '' : 'bg-green';
        }else{
          $scmList[$delta] = 'bg-gray';
        }
      }else{
        $scmList[$delta] = 'bg-gray';
      }
    }

  }
  return $scmList[$delta];
}

function scm_manager_project() {
  global $user;
  $userObj = user_load($user->uid);
    


  if (arg(0) == 'scm') {
    // If we are in SCM section.
    // My request page.
    if (arg(1) == 'my-request') {
      $bannerTitle = t('Supply Chain Manager - My Requests');
      $bannerdetails = t('Create New Projects, Estimates and Manage Costs');
      $programeProjectLink = '<a href="#" title="New Request" class="new-record-link" dataaction="triggercall"><i class="glyphicon glyphicon-plus"></i> New Request</a>';
    }
    if (arg(1) == 'archive') {
      $bannerTitle = t('Supply Chain Manager - Archive');
      $bannerdetails = t('Create New Projects, Estimates and Manage Costs');
      $programeProjectLink = '<a href="#" title="New Request" class="new-record-link" ><i class="glyphicon glyphicon-plus"></i> New Request</a>';
    }

    // My project page.
    if (arg(1) == 'my-project') {
      $bannerTitle = t('Supply Chain Projects - My Projects');
      $bannerdetails = t('Manage Projects, Build Cases and Collaborate with Teams');
      $programeProjectLink = '<a href="#" title="New Project" class="new-record-link" dataaction="triggercall"><i class="glyphicon glyphicon-plus"></i> New Project</a>';
    }
    if (arg(1) == 'dashboard') {
      $bannerTitle = t('Supply Chain Projects - Dashboard');
      $bannerdetails = t('Manage Projects, Build Cases and Collaborate with Teams');
      $programeProjectLink = '';
    }
    // Case manager page.
    if (arg(1) == 'my-casemanager') {
      $bannerTitle = t('Supply Chain Projects - Case Builder');
      $bannerdetails = t('Create cases to study opportunities for savings');
      $programeProjectLink = '<a href="#" title="New Case" class="new-record-link"><i class="glyphicon glyphicon-plus"></i> New Case</a>';
    }
    if (arg(1) == 'buy-change') {
      $bannerTitle = t('Supply Chain Projects - Buy or Change');
      $bannerdetails = t('Helping your organization work with you');
      $programeProjectLink = '<a href="#" title="New Case" class="new-record-link"><i class="glyphicon glyphicon-plus"></i> New Case</a>';
    }
    if (arg(1) == 'patient-care') {
      $bannerTitle = t('Supply Chain Projects - Patient Care');
      $bannerdetails = t('Helping your organization work with you');
      $programeProjectLink = '<a href="#" title="New Case" class="new-record-link"><i class="glyphicon glyphicon-plus"></i> New Case</a>';
    }
    if (arg(1) == 'preferences') {
      $bannerTitle = t('Supply Chain Projects - Preferences');
      $bannerdetails = t('Helping your organization work with you');
      $programeProjectLink = '<a href="#" title="New Case" class="new-record-link"><i class="glyphicon glyphicon-plus"></i> New Case</a>';
    }
    if (arg(1) == 'resources') {
      $bannerTitle = t('Supply Chain Projects - Resources');
      $bannerdetails = t('Helping your organization work with you');
      $programeProjectLink = '<a href="#" title="New Case" class="new-record-link"><i class="glyphicon glyphicon-plus"></i> New Case</a>';
    }
    if (arg(1) == 'due-diligence') {
      $bannerTitle = t('Supply Chain Projects - Due Diligence');
      $bannerdetails = t('Helping your organization work with you');
      $programeProjectLink = '<a href="#" title="New Case" class="new-record-link"><i class="glyphicon glyphicon-plus"></i> New Case</a>';
    }
    if (arg(1) == 'payback') {
      $bannerTitle = t('Supply Chain Projects - Pay Back');
      $bannerdetails = t('Helping your organization work with you');
      $programeProjectLink = '<a href="#" title="New Case" class="new-record-link"><i class="glyphicon glyphicon-plus"></i> New Case</a>';
    }
    if (arg(1) == 'thread') {
      $bannerTitle = t('Supply Chain Projects - Thread');
      $bannerdetails = t('Helping your organization work with you');
      $programeProjectLink = '<a href="#" title="Create a New Team" class="add-new-team"><i class="glyphicon glyphicon-plus"></i> New Team</a>';
    }
    if (arg(1) == 'my-reporting') {
      $bannerTitle = t('Supply Chain Projects - My Reporting');
      $bannerdetails = t('Helping your organization work with you');
      $programeProjectLink = '<a href="#" title="New Case" class="new-record-link"><i class="glyphicon glyphicon-plus"></i> New Case</a>';
    }
    if (arg(1) == 'closeout') {
      $bannerTitle = t('Supply Chain Projects - Closeout');
      $bannerdetails = t('Helping your organization work with you');
      $programeProjectLink = '<a href="#" title="New Case" class="new-record-link"><i class="glyphicon glyphicon-plus"></i> New Case</a>';
    }
    /*
     * Scorecard page 
     */
     // Case manager page.
    if (arg(1) == 'scorecard') {
      $programeProjectLink = l('<i class="glyphicon glyphicon-plus"></i> ' . t('New Scorecard'), 'scorecard/new', array('html' => TRUE, 'attributes' => array('class' => array('new-scorecard-link'))));

      if (arg(2) == 'my-scorecards') {
        $bannerTitle = t('SCM Scorecard - Scorecard Information');
        $bannerdetails = t('Complete Scorecard Information');
      }
      if (arg(2) == 'select-products') {
        $bannerTitle = t('SCM Scorecard - Select Products');
        $bannerdetails = t('Complete Product Informations');
      }
      if (arg(2) == 'question-builder') {
        $bannerTitle = t('SCM Scorecard - Question Builder');
        $bannerdetails = t('Create or Select questions');
      }
      if (arg(2) == 'share') {
        $bannerTitle = t('SCM Scorecard - Share Scorecards');
        $bannerdetails = t('Share Scorecard Information');
      }
      if (arg(2) == 'evaluate') {
        $bannerTitle = t('SCM Scorecard - Evaluate Scorecards');
        $bannerdetails = t('Evaluate Scorecard');
      }
      if (arg(2) == 'decision') {
        $bannerTitle = t('SCM Scorecard - Decision');
        $bannerdetails = t('Complete Scorecard Information');
      }
    }
    
    // Settings page.
    if (arg(1) == 'settings' && empty(arg(2))) {
      $bannerTitle = t('Supply Chain Manager - Settings / General');
      $bannerdetails = t('Helping your organization work with you');
    }
    if (arg(1) == 'settings' && !empty(arg(2))) {
      if (arg(2) == 'locations-region') {
        $bannerTitle = t('Supply Chain Manager - Settings / Region');
        $bannerdetails = t('Helping your organization work with you');
      }
      if (arg(2) == 'locations-entity') {
        $bannerTitle = t('Supply Chain Manager - Settings / Entity');
        $bannerdetails = t('Helping your organization work with you');
      }
      if (arg(2) == 'locations-buildings') {
        $bannerTitle = t('Supply Chain Manager - Settings / Department');
        $bannerdetails = t('Helping your organization work with you');
      }
      if (arg(2) == 'user-database') {
        $bannerTitle = t('Supply Chain Manager - Requestor Database');
        $bannerdetails = t('Helping your organization work with you');
      }
      if (arg(2) == 'project') {
        $bannerTitle = t('Supply Chain Manager - Project');
        $bannerdetails = t('Helping your organization work with you');
      }
    }
  }

  if (arg(0) == 'scorecard') {
    $programeProjectLink = l('<i class="glyphicon glyphicon-plus"></i> ' . t('New Scorecard'), 'scorecard/new', array('html' => TRUE, 'attributes' => array('class' => array('new-scorecard-link'))));

    if (arg(1) == 'dashboard') {
      $bannerTitle = t('Propose Scorecard - Dashboard');
      $bannerdetails = t('Complete Scorecard Information');
    }
    if (arg(1) == 'my-scorecards') {
      $bannerTitle = t('Propose Scorecard - Scorecard Information');
      $bannerdetails = t('Complete Scorecard Information');
    }
    if (arg(1) == 'select-products') {
      $bannerTitle = t('Propose Scorecard - Select Products');
      $bannerdetails = t('Complete Product Informations');
    }
    if (arg(1) == 'question-builder') {
      $bannerTitle = t('Propose Scorecard - Question Builder');
      $bannerdetails = t('Create or Select questions');
    }
    if (arg(1) == 'share') {
      $bannerTitle = t('Propose Scorecard - Share Scorecards');
      $bannerdetails = t('Share Scorecard Information');
    }
    if (arg(1) == 'evaluate') {
      $bannerTitle = t('Propose Scorecard - Evaluate Scorecards');
      $bannerdetails = t('Evaluate Scorecard');
    }
    if (arg(1) == 'decision') {
      $bannerTitle = t('Propose Scorecard - Decision');
      $bannerdetails = t('Complete Scorecard Information');
    }

    if (arg(1) == 'new') {
      // Hiding this link on such pages.
      $programeProjectLink = '';

      $bannerTitle = t('Propose Scorecard - Scorecard Information');
      $bannerdetails = t('Complete Scorecard Information');

      if (arg(2) == 'select-products') {
        $bannerTitle = t('Propose Scorecard - Select Products');
        $bannerdetails = t('Complete Product Informations');
      }
      if (arg(2) == 'question-builder') {
        $bannerTitle = t('Propose Scorecard - Question Builder');
        $bannerdetails = t('Create or Select questions');
      }
      if (arg(2) == 'share') {
        $bannerTitle = t('Propose Scorecard - Share Scorecards');
        $bannerdetails = t('Share Scorecard Information');
      }
    }
  }

  if (arg(0) == 'propose') {
    if (arg(1) == 'settings') {
      if (arg(2) == 'scorecard') {
            $bannerTitle = t('Propose Scorecard - Settings');
            $bannerdetails = t('View and search expired and current Scorecards');
      }
    }
  }
  $img = '<img src="/sites/all/themes/m6connect/images/u2603.png" />';
  $output = '<div class="main_content"> 
          <div id="leavepopup"></div>
              <div class="box box-with-image">
                <div class="box-header-main box-header">
                 <div class="box-image-wrapper"> <a href="#"> '.$img.'<!--<i class="fa fa-user-secret" aria-hidden="true"></i> --></a> </div>
                   <div class="box-right-entity">              
                  <div class="row"><div class="col-md-8 col-sm-6 col-xs-12"><h1>'.$bannerTitle.'</h1>
                  <p>'.$bannerdetails.'</p>
                  </div>
                  <div class="col-md-4 col-sm-6 col-xs-12 box-actions text-right">'.$programeProjectLink.'</div>
            </div>
              </div></div></div></div>';
  return $output; 
}

function _node_creation_call($type,$title) {    
  global $user,$company;
  $node = new stdClass();
  $node->type = $type;
  $node->title = $title;
  $node->uid = $user->uid;
  $node->language = LANGUAGE_NONE;
  $node->status = 1;
  $node->og_group_ref['und'][0]['target_id'] = $company->nid;
  return $node;         
}

function _getting_table_data_call($type) {
  global $user,$company;
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  if($type == 'project_management') {
    $query->join('field_data_field_m6_service_type','scm_type','scm_type.entity_id = n.nid');
  $query->condition('scm_type.field_m6_service_type_value','scm','=');
  }
  $query->fields('n', array('nid','title'));
  $query->condition('n.type',$type,'=');
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getNodesNids = $query->execute()->fetchAllKeyed(0,1);
  return array_map('ucwords', $getNodesNids);
}

function _getting_table_subcat_title($type) {
  global $user, $company;

  $return = array();

  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_m6_service_type','scm_type','scm_type.entity_id = n.nid');
  $query->condition('scm_type.field_m6_service_type_value','scm','=');
  $query->join('field_data_field_project_mgmt_number','prn','prn.entity_id = n.nid');
  $query->join('field_data_field_scm_project_subcategory','psc','psc.entity_id = n.nid');  
  $query->fields('n', array('nid'));
  $query->fields('prn', array('field_project_mgmt_number_value'));
  $query->fields('psc', array('field_scm_project_subcategory_value'));
  $query->condition('n.type','project_management','=');
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getNodesNids = $query->execute()->fetchAll();
  
  if (!empty($getNodesNids)) {
    foreach ($getNodesNids as $nids) {
      $return[$nids->nid] = $nids->field_project_mgmt_number_value;

      // Checking whether there is a sub category, and if it exists, then
      // appending it with the project name.
      if (!empty($nids->field_scm_project_subcategory_value)) {
        $sub_cat_val = explode('|', $nids->field_scm_project_subcategory_value);

        if (is_numeric($sub_cat_val[0])) {
          $sub_cat = scm_category_load($sub_cat_val[0]);
          if (!empty($sub_cat->title)) {
            $project_title = ucwords($sub_cat->title) . ' | ' . ucwords($nids->field_project_mgmt_number_value);
            $return[$nids->nid] = $project_title;
          }
        }
      }
    }
  }

  return $return;
}

function _getting_all_nodewith_title($type) {
  global $user,$company;
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  if($type == 'project_management') {
    $query->join('field_data_field_m6_service_type','scm_type','scm_type.entity_id = n.nid');
  $query->condition('scm_type.field_m6_service_type_value','scm','=');
  }
  $query->fields('n', array('nid','title'));
  $query->condition('n.type',$type,'=');
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getNodesNids = $query->execute()->fetchAllKeyed(0,1);
  return $getNodesNids;
}

function _get_name_by_country_state($country,$state) {
  module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
    $countryNamesList = json_decode(file_get_contents("http://country.io/names.json"), true);
    $australian_states = addressfield_get_administrative_areas($country);
    $gedata['country'] = $countryNamesList[$country];
    $gedata['state'] = $australian_states[$state];
    return $gedata;
}

function _get_request_type_from_settings() {
  global $user,$company;
  $resultmail = array();
  $query = db_select('m6connect_scm_request_type_setting', 'scmtype');
  $query->fields('scmtype', array('id', 'title','set_for_add'));
  $query->condition('scmtype.nid', $company->nid, '=');
  $query->orderBy('scmtype.timestamp', 'ASC');
  $result = $query->execute()->fetchAll();
  foreach($result as $key=>$value) {
    $resultmail[$value->id.'-'.$value->set_for_add] = $value->title;
  }
  return $resultmail;
}

function _get_request_sub_type_from_settings_by_type() {
  global $user,$company;
  $query = db_select('m6connect_scm_request_subtype_setting', 'scmsubtype');
  $query->fields('scmsubtype', array('id', 'title'));
  $query->condition('scmsubtype.nid', $company->nid, '=');
  $query->orderBy('scmsubtype.timestamp', 'DESC');
  $result = $query->execute()->fetchAllKeyed(0,1);
  foreach($result as $key=>$value) {
    $resultsub[$key] = ucwords($value); 
  }
  return $resultsub;
  //return $result;
}

function _get_category_type_from_settings($type) {
  global $user,$company;
  $resultcategory = array();
  $query = db_select('m6connect_scm_category_setting', 'scmCat');
  $query->fields('scmCat', array('id', 'title'));
  $query->condition('scmCat.nid', $company->nid, '=');
  $query->condition('scmCat.type', $type, '=');
  $query->orderBy('scmCat.timestamp', 'DESC');
  $result = $query->execute()->fetchAllKeyed(0,1);
  if(isset($result) && !empty($result)){
    foreach($result as $key=>$value) {
      $resultcategory[$key] = ucwords($value); 
    }
  }
  return $resultcategory;
}

function _get_sub_category_type_from_settings_by_type() {
  global $user,$company;
  $query = db_select('m6connect_scm_sub_category_setting', 'scmsubCat');
  $query->fields('scmsubtype', array('id', 'title'));
  $query->orderBy('scmsubtype.timestamp', 'DESC');
  $result = $query->execute()->fetchAllKeyed(0,1);
  foreach($result as $key=>$value) {
    $resultsubcategory[$key] = ucwords($value); 
  }
  return $resultsubcategory;
}

function _get_action_button($nodeId, $type) {
  $delete_link = 'node-delete/nojs/'.$nodeId;
  $action = 'Delete';
  
  if ($type == 'custom_user') {
    $delete_link = 'scm-delete/custom_user/' . $nodeId . '/nojs';
  }
  if ($type == 'unpublishnode') {
    $delete_link = 'scm-delete/unpublishnode/' . $nodeId . '/nojs';
    $action = 'Archive';
  }
  if ($type == 'publishnode') {
    $delete_link = 'scm-delete/publishnode/' . $nodeId . '/nojs';
    $action = 'Unarchive';
  }  
  $action = '<div class="project-action">
           <div class="btn-group">
                 <div class="dropdown">
                 <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <i class="fa fa-cog" aria-hidden="true"></i>&nbsp;<i class="fa fa-caret-down" aria-hidden="true"></i></button>
           <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                     <li>'.l('Edit', 'edit/'.$nodeId.'/details', array('attributes' => array('dataaction'=>'triggercall','class' => 'edit_scm_requests_detail', 'for' => $nodeId))).'</li>
                   <li>'.l($action, url($delete_link), array( 'external'=>TRUE, 'attributes'=> array('class'=>array(' ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
                   </ul>
           </div>
         </div>';  
  return $action;
}

function scm_m6message_delete_message_ajax_callback(){
  global $user;
  $removedIds = array();
  $deletedMessageIds = explode(',',$_REQUEST['delete-message']);
  if(!empty($deletedMessageIds)){
  foreach($deletedMessageIds as $delta => $deleteId){
     $deleteQuery = db_update('m6connect_scm_messaging_connect_message');
     $deleteQuery->fields(array('render_state'=>2,'deleted_from'=>$user->uid));
     $deleteQuery->condition('id',$deleteId)->condition('author_uid',$user->uid);
     $isRemoved = $deleteQuery->execute();
    if($isRemoved){ 
    $removedIds[] = array(
        'message' => '',
        'date_div_class' => '#m6-messaging-message-'.$deleteId,
        'data_div' => '',
          'action' => 'remove',
      ); 
    }
  }
  }
  drupal_json_output(array('deleteMessage'=>$removedIds));
  drupal_exit(0);
}

function scm_m6message_forword_message_ajax_callback(){
  global $user;
  $currentTime = time();
  $userInsertMessage = array();
  $mappingToMessage = array();
  $insertMessage = array();
  $values = $_REQUEST;
  $forwordToMapping = $values['forword-to-mapping'];
  $forwordMessage = explode(',',$values['forword-to-messege']);
  $currentMapping = $values['forword-current_mapping'];
  if(!empty($forwordToMapping) && !empty($forwordMessage)){
  $messages = db_select('m6connect_scm_messaging_connect_message','msg')->fields('msg')->condition('msg.id',$forwordMessage,'IN')->execute()->fetchAll(); 
  foreach($messages as $delta => $message){
    foreach($forwordToMapping as $index => $mapping){
    $newMessage = (array)$message;
    unset($newMessage['id']);
    $newMessage['mapping_id'] = $mapping;
    $newMessage['author_uid'] = $user->uid;
    $newMessage['timestamp'] = $currentTime;
    $newMessage['seen_by'] = $user->uid;
    $newMessage['id'] = db_insert('m6connect_scm_messaging_connect_message')->fields($newMessage)->execute();
    if($mapping == $currentMapping && is_numeric($newMessage['id'])){
      $date_object = new DateObject($newMessage['timestamp'], new DateTimeZone('UTC'));
          $date_object->setTimezone(new DateTimeZone(drupal_get_user_timezone()));
          $newMessage['timestamp_time'] = date_format_date($date_object, 'custom', 'h:i A');
      $newMessage['timestamp_class'] = date_format_date($date_object, 'custom', 'm-d-Y');
      $newMessage['timestamp_date'] = date_format_date($date_object, 'custom', 'm/d/Y');
          $message_text = $newMessage['message_text'];
          if(empty($message_text)){
            if(!empty($newMessage['attachment'])){
        $messageFile = file_load($newMessage['attachment']);
        $messageNewFile = file_copy($messageFile, 'public://m6message-attachment/',FILE_EXISTS_RENAME);
              $message_text=get_m6message_attachment_box($messageNewFile->fid,$messageNewFile->uri,$messageNewFile->filename,$messageNewFile->filemime);
            } 
      }
      $mainClass = 'm6-messaging-message message-submitted clearfix text-right padding-5'; 
          $messageOutput  ="<div id='m6-messaging-message-".$newMessage['id']."' class='message-row margin-bottom-10 ".$mainClass."'>";
          $messageOutput .="    <div  class='clearfix'>";
          $messageOutput .="      <div class='message-post-user-realname'></div>";
          $messageOutput .="      <div  class='message-post-message display-inline-block'>".$message_text;
          $messageOutput .="    </div>";
          $messageOutput .="    <span class='message-post-time text-left clearfix'>".$newMessage['timestamp_time']."</span>";
      $messageOutput .='    <input type="checkbox" name="message_forword[]" class="messenger-message-forword-checkbox" value="'.$newMessage['id'].'">';
          $messageOutput .="</div>";
          $dateDiv ="<div class='message-box message-date-".$newMessage['timestamp_class']."'><div class='message-date-data text-center margin-bottom-10'>".$newMessage['timestamp_date']."</div></div>";
          $userInsertMessage[] = array(
            'message' => $messageOutput,
      'action' => 'insert',
            'date_div_class' => '.message-box.message-date-'.$newMessage['timestamp_class'],
            'data_div' => $dateDiv,
          );
    }
    }
  }
  }
  drupal_json_output(array('insertMessage'=>$userInsertMessage));
  drupal_exit(0);
}

function m6connect_scm_theme(){
  $path = drupal_get_path('modules', 'm6connect_scm');
  return array(
    'add_item_invite_m6_theme'=> array(
      'render element' => 'form',
    ),
    'edit_product_form'=> array(
      'render element' => 'form',
    ),
    'setting_form_field__theme'=> array(
      'render element' => 'form',
    ),
    'add_item_fieldsetting_theme'=> array(
      'render element' => 'form',
    ),
    'cat_sub_cat_invite_m6_theme'=> array(
      'render element' => 'form',
    ),
    'are_clinicians_primary_children_theme'=> array(
      'render element' => 'form',
    ),
    'are_physicians_primary_children_theme'=> array(
      'render element' => 'form',
    ),
    'suppliers_considering_count_children_theme'=> array(
      'render element' => 'form',
    ),
    'question_builder_category_process_theme'=> array(
      'render element' => 'form',
    ),
    'invite_m6_theme_scorecard'=> array(
      'render element' => 'form',
    ),
    'custom_file_managed_theme_scorecard'=> array(
      'render element' => 'element',
    ),
    'invite_m6_theme_scorecard_question'=> array(
      'render element' => 'form',
    ),
    'evalaute_m6_theme'=> array(
      'render element' => 'form',
    ),
    'scm_sub_cat_container_theme'=> array(
      'render element' => 'element',
    ),
    'raters_evaluate_container_theme'=> array(
      'render element' => 'form',
    ),
    'raters_evaluate_group_container_theme'=> array(
      'render element' => 'element',
    ),
    'raters_comments_container_theme'=> array(
      'render element' => 'element',
    ),
    'scorecard_export_pdf' => array(
      'template' => $path . 'includes/scorecard-export-pdf',
      'variables' => array(
        'node' => NULL,
      ),
    ),
    'facilities_contact_children_theme'=> array(
      'render element' => 'form',
    ),
  );
}


function theme_setting_form_field__theme($variables) {
   $element = $variables['form'];
  $storage = $element['#storage'];
  // dpm($variables);
  $output = '';
  $header = array('Line item <br> Number', 'Item Master<br>Number', 'Unit price','Price Unit of Measure(UOM)','UOM Converstion', 'Purchase UOM Price','Action');
  $rowNo = 1;
  foreach ($storage as $key => $uniqId) {
    $rows[] = array(
      'data'=> array(
        array('data'=>drupal_render($element['line_item_number'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['line_master_number'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['unit_price'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['purchase_unit_of_measure'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['uom_conversion'][$uniqId]),'class'=> array('col-md-2')),   
        array('data'=>drupal_render($element['purchase_uom_conversion'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['remove'][$uniqId]),'class'=> array('workflow-remove-td')),
      ),    
      'id' => array('alert-table-list-'.$rowNo),
    );
    $rows[] = array(
      'data'=> array(
        array('data'=> '<strong>Item Description</strong>','colspan' => 1),
        array('data'=>drupal_render($element['add_item_description'][$uniqId]),'colspan' => 5),
      ),   
      'id' => array('alert-table-list-'.$rowNo),
    );
    $rowNo++;
  }
  $rows[] = array(
    'data' => array(  
      array('data'=>drupal_render($element['workflow_add_new_row']),'colspan' => 7),
    ),  
  );
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes'=> array('class'=> array('project-mgmt-po-item-table','table','table-hover','m6connect-custom-table','m6connect-table-border', 'm6init-datatable'))));
  $output .= drupal_render_children($element);
  return $output;
}

function theme_add_item_invite_m6_theme($variables) {

  $element = $variables['form'];
  $storage = $element['#storage'];
  $output = '';
  $header = array('Line item <br> Number', 'Item Master<br>Number','NEC', 'Purchase Unit <br>of Measure<br>(UOM)&nbsp;<span class="form-required" title="This field is required.">*</span>','UOM Conv.&nbsp;<span class="form-required" title="This field is required.">*</span>', 'Purchase UOM<br>Price&nbsp;<span class="form-required" title="This field is required.">*</span>','Price Each','Manufacturer <br> Catalog Number&nbsp;<span class="form-required" title="This field is required.">*</span>','Vendor Catalog <br>Number','Action');
  $rowNo = 1;
  foreach ($storage as $key => $uniqId) {
    $rows[] = array(
      'data'=> array(
        array('data'=>drupal_render($element['line_item_number'][$uniqId])),
        array('data'=>drupal_render($element['line_master_number'][$uniqId])),
        array('data'=>drupal_render($element['nec_number'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['purchase_unit_of_measure'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['uom_conversion'][$uniqId]) ),   
        array('data'=>drupal_render($element['purchase_uom_conversion'][$uniqId]) ),    
    array('data'=>drupal_render($element['price_each'][$uniqId]) ),
    array('data'=>drupal_render($element['manufacture_catalog_number'][$uniqId]) ),
    array('data'=>drupal_render($element['vendor_catalog'][$uniqId]) ),   
        array('data'=>drupal_render($element['remove'][$uniqId]),'style'=>'width: 100px;','class'=> array('workflow-remove-td')),
      ),    
      'id' => array('alert-table-list-'.$rowNo),
    );
    $rows[] = array(
      'data'=> array(
        array('data'=> '<strong>Item Description</strong>','colspan' => 2),
        array('data'=>drupal_render($element['add_item_description'][$uniqId]),'colspan' => 8),
      ),   
      'id' => array('alert-table-list-'.$rowNo),
    );
    $rowNo++;
  }
  $rows[] = array(
    'data' => array(  
      array('data'=>drupal_render($element['workflow_add_new_row']),'colspan' => 10),
    ),  
  );
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes'=> array('class'=> array('project-mgmt-po-item-table','table','table-hover','m6connect-custom-table','m6connect-table-border'))));
  $output .= drupal_render_children($element);
  return $output;
}


function theme_add_item_fieldsetting_theme($variables) {
  $element = $variables['form'];
  $storage = $element['#storage'];
  $output = '';
  $header = array('Label', 'Machine name', 'Field type','edit', 'delete');
  $rowNo = 1;
  foreach ($storage as $key => $uniqId) {
    $rows[] = array(
      'data'=> array(
        array('data'=>drupal_render($element['extra_field_label'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['extra_field_machine_name'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['extra_field_field_type'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['extra_field_edit'][$uniqId]),'class'=> array('col-md-2')),
        array('data'=>drupal_render($element['remove'][$uniqId]),'class'=> array('workflow-remove-td')),
      ),    
      'id' => array('add-extrafield-table-list-'.$rowNo),
    );
    $rowNo++;
  }
  $rows[] = array(
    'data' => array(  
      array('data'=>drupal_render($element['workflow_add_new_field']),'colspan' => 7),
    ),  
  );
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes'=> array('class'=> array('project-mgmt-po-item-table','table','table-hover','m6connect-custom-table','m6connect-table-border', 'm6init-datatable'))));
  $output .= drupal_render_children($element);
  return $output;
}

function _get_allField_scm_settings_matadetails() {
  global $user,$company;
  $query = db_select('m6connect_scm_settings_mata_field', 'n');
  $query->fields('n');
  $query->condition('n.companyID', $company->nid, '=');
  // $query->condition('n.scmID', $user->uid, '=');
  $resultmeta = $query->execute()->fetchAll();
  if(!empty($resultmeta)){
    $default = 1;
  } else {
    $default = 0;
  } 

  $querys = db_select('m6connect_scm_settings_meta_group','n');
  $querys->fields('n');
  
  if($default==1) {
    $querys->condition('n.companyID', $company->nid, '=');
    //$querys->condition('n.scmID', $user->uid, '=');
  }
  $querys->condition('n.type', $default, '='); 
  $querys->orderBy('n.formate', 'ASC');
  $getallgroup = $querys->execute()->fetchAll();
  foreach($getallgroup as $key => $value){
    $getallgroup[$key]->fieldsdata = _get_all_defaultField_scm_settings_matadetailsBY_groupID($value->id);
  }
  return $getallgroup;
}


function _get_all_defaultField_scm_settings_matadetailsBY_groupID($grupid) {
  global $user,$company;
  $query = db_select('m6connect_scm_settings_mata_field', 'n');
  $query->fields('n');
  $query->condition('n.companyID', $company->nid, '=');
  //$query->condition('n.scmID', $user->uid, '=');
  $query->condition('n.scm_field_group', $grupid, '=');
  $resultmeta = $query->execute()->fetchAll();
  if(!empty($resultmeta)){
    $result =$resultmeta;
  } else{
    $querys = db_select('m6connect_scm_settings_default_meta', 'n');
    $querys->fields('n');
    $querys->condition('n.scm_field_group', $grupid, '=');
    $query->orderBy('n.id', 'ASC');
    $result = $querys->execute()->fetchAll();  
  }
  
  return $result;
}

function string_to_slug($string) {
  $string = str_replace(array('/', ' '), '-', $string);
  $accents = '/&([A-Za-z]{1,2})(tilde|grave|acute|circ|cedil|uml|lig);/';
  return urlencode(strtolower(preg_replace($accents, '$1', htmlentities(utf8_decode($string)))));
}

/***
get scm settings data and insert
***/
function _get_or_insert_scm_settings($type= NULL, $action=NULL, $getMainType=NULL) {
  global $user, $company;
  $output = '';
  if(isset($type) && !empty($type)){
    if (db_table_exists('m6connect_scm_request_type_setting')){
      $table_name = 'm6connect_scm_request_type_setting';
      if($type == 'request_type' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'request_type' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'title' => $action['request_type_new'],
          'set_for_add' => $action['set_add_item'],
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $output = $query->execute()->fetchCol();
      }
    }
    if (db_table_exists('m6connect_scm_setting_department')){
      $table_name = 'm6connect_scm_setting_department';
      if($type == 'project_department' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        $query->condition('scms.nid',$company->nid,'=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'project_department' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'title' => $action['department_new'],
          'dpapprover' => $action['assign_user_department'],
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $output = $query->execute()->fetchCol();
      }
    }
    if (db_table_exists('m6connect_scm_request_subtype_setting')){
      $table_name = 'm6connect_scm_request_subtype_setting';
      if($type == 'request_subtype' && empty($action) && empty($getMainType)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'request_subtype' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'title' => $action,
          'main_type' => $getMainType,
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $output = $query->execute()->fetchCol();
      }
    }
    if (db_table_exists('m6connect_scm_category_setting')){
      $table_name = 'm6connect_scm_category_setting';
      //general tab sub category start
      if($type == 'category' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','general','=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'category' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => 'general',
          'title' => $action,     
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','general','=');
        $output = $query->execute()->fetchCol();
      }
      //general tab sub category end
      //project tab category start
      if($type == 'project_category' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project','=');
        $output = $query->execute()->fetchCol();
      }   
      if($type == 'project_category' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => 'project',
          'title' => $action,     
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project','=');
        $output = $query->execute()->fetchCol();
      }
      //project tab category end
      // Scorecard category
      if($type == 'scorecard_category' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('id','title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','scorecard','=');
        $output = $query->execute()->fetchAllKeyed(0,1);
      }
      if($type == 'scorecard_category' && isset($action) && !empty($action)) {
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => 'scorecard',
          'title' => $action,     
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','scorecard','=');
        $output = $query->execute()->fetchCol();
      }
    // ==== Work for Case type using same table 
    // ==== with the difference of type - case_type
    if($type == 'case_type' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','case_type','=');
        $output = $query->execute()->fetchCol();
      }   
    if($type == 'case_type' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => 'case_type',
          'title' => $action,     
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','case_type','=');
        $output = $query->execute()->fetchCol();
      }
     // Scorecard category end
    }
  
    if (db_table_exists('m6connect_scm_sub_category_setting')){
      $table_name = 'm6connect_scm_sub_category_setting';
      //general tab sub category start
      if($type == 'sub_category' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','general','=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'sub_category' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => 'general',
          'title' => $action,
          'main_category' => $getMainType,
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','general','=');
        $output = $query->execute()->fetchCol();
      }
      //general tab sub category end
      //project tab sub category start
      if($type == 'project_sub_category' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project','=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'project_sub_category' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => 'project',
          'title' => $action,
          'main_category' => $getMainType,
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project','=');
        $output = $query->execute()->fetchCol();
      }
      //project tab sub category end
    }
  if (db_table_exists('m6connect_scm_supply_chain_lead')){
      $table_name = 'm6connect_scm_supply_chain_lead';
      if($type == 'supply_chain_lead' && empty($action)){
        $query = db_select($table_name, 'scl');
        $query->fields('scl',array('title'));
        //$query->condition('scl.uid',$user->uid,'=');
        $query->condition('scl.nid',$company->nid,'=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'supply_chain_lead' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'title' => $action,
          'main_category' => $getMainType,
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $output = $query->execute()->fetchCol();
      }
    }
  
    if (db_table_exists('m6connect_scm_type_setting')){
      $table_name = 'm6connect_scm_type_setting';      
      //project tab type start
      if($type == 'project_type' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project','=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'project_type' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => 'project',
          'title' => $action,     
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project','=');
        $output = $query->execute()->fetchCol();
      }
      //project tab type end
    }
    if (db_table_exists('m6connect_scm_type_setting')){
      $table_name = 'm6connect_scm_type_setting';      
      //project tab project department start
      if($type == 'project_department' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project_department','=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'project_department' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => 'project_department',
          'title' => $action,     
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project_department','=');
        $output = $query->execute()->fetchCol();
      }
      //project tab project department end
    }
    if (db_table_exists('m6connect_scm_status_setting')){
      $table_name = 'm6connect_scm_status_setting';      
      //project tab status start
      if($type == 'project_status' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type',$type,'=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'project_status' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => $type,
          'title' => $action,     
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type',$type,'=');
        $output = $query->execute()->fetchCol();
      }
      //project tab status end
      //project tab Approval Status start
      if($type == 'project_approval_status' && empty($action)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type',$type,'=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'project_approval_status' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => $type,
          'title' => $action,     
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type',$type,'=');
        $output = $query->execute()->fetchCol();
      }
      //project tab Approval Status end
    }
    if (db_table_exists('m6connect_scm_project_entity_setting')){
      $table_name = 'm6connect_scm_project_entity_setting';
      if($type == 'project_entity' && empty($action) && empty($getMainType)){
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project_entity','=');
        $output = $query->execute()->fetchCol();
      }
      if($type == 'project_entity' && isset($action) && !empty($action)){
        $setting_insert = array (
          'uid' => $user->uid,
          'nid' => $company->nid,
          'type' => $type,          
          'title' => $action,
          'status' => 1,
          'timestamp' => time(),
        );
        db_insert($table_name)->fields($setting_insert)->execute();

        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project_entity','=');
        $output = $query->execute()->fetchCol();
      }
    }
  }
  return $output;
}

function remove_scm_setting_options_ajax() {
  if (isset($_POST['setting']) && isset($_POST['name'])) {
    
    $name = strtolower(trim($_POST['name']));
    $deleted = FALSE;

    
      $deleted = _delete_scm_settings_attribute($_POST['setting'], $name);
    
    if ($deleted) {
      print 'Success';
      exit();
    }
  }

  print 'Failure';
  exit();
}

function _delete_scm_settings_attribute($type = NULL, $setting = NULL) {
  if (isset($type,$setting)&& !empty($type) && !empty($setting)) {
    global $company, $user;
    // If we have enough data to proceed.
    
    if (!empty($setting)) {
      // If we get setting, then finding the requested rating and deleting it.
      if($type == 'project_category'){
        $num_deleted = db_delete('m6connect_scm_category_setting')
        //->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('type', 'project')
        ->condition('title', $setting)
        ->execute();
        return TRUE;
      }
    if($type == 'scorecard_category'){
    $num_deleted = db_delete('m6connect_scm_category_setting')
        //->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('type', 'scorecard')
        ->condition('title', $setting)
        ->execute();
        return TRUE;
    }
  if($type == 'case_type'){
      $num_deleted = db_delete('m6connect_scm_category_setting')
        //->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('type', 'case_type')
        ->condition('title', $setting)
        ->execute();
        return TRUE;
      }
    else if($type == 'project_sub_category'){
        $num_deleted = db_delete('m6connect_scm_sub_category_setting')
        //->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('type', 'project')
        ->condition('title', $setting)
        ->execute();
        return TRUE;
      }else if($type == 'project_type'){
        $num_deleted = db_delete('m6connect_scm_type_setting')
        //->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('type', 'project')
        ->condition('title', $setting)
        ->execute();
        return TRUE;
      }else if($type == 'project_status'){
        $num_deleted = db_delete('m6connect_scm_status_setting')
        //->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('type', 'project_status')
        ->condition('title', $setting)
        ->execute();
        return TRUE;
      }else if($type == 'project_approval_status'){
        $num_deleted = db_delete('m6connect_scm_status_setting')
       // ->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('type', 'project_approval_status')
        ->condition('title', $setting)
        ->execute();
        return TRUE;
      }else if($type == 'project_entity'){
        $num_deleted = db_delete('m6connect_scm_project_entity_setting')
        //->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('type', 'project_entity')
        ->condition('title', $setting)
        ->execute();
        return TRUE;
      }else if($type == 'supply_chain_lead'){
        $num_deleted = db_delete('m6connect_scm_supply_chain_lead')
        //->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('title', $setting)
        ->execute();
        return TRUE;
      }else if($type == 'project_department'){
        $num_deleted = db_delete('m6connect_scm_type_setting')
        //->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('title', $setting)
        ->execute();
        return TRUE;
      }
    else{
        $num_deleted = db_delete('m6connect_scm_'.$type.'_setting')
        //->condition('uid', $user->uid)
        ->condition('nid', $company->nid)
        ->condition('title', $setting)
        ->execute();
        return TRUE;
      }
    }
  }
  return FALSE;
}

function _get_scm_setting_data($type,$ids=NULL){  
  global $user, $company;
  $output = '';
  if(isset($type) && !empty($type)){
    if($type == 'project_entity'){
      $table_name = 'm6connect_scm_project_entity_setting';
      if(isset($ids) && !empty($ids)){        
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('id','title'));
        $query->condition('scms.id',$ids,'IN');
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project_entity','=');
        $output = $query->execute()->fetchAllKeyed(0,1);
      }else{        
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('id','title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project_entity','=');
        $output = $query->execute()->fetchAllKeyed(0,1);
      }
    }
    if($type == 'project_category'){
      $table_name = 'm6connect_scm_category_setting';
      $query = db_select($table_name, 'scms');
      $query->fields('scms',array('id','title'));
      //$query->condition('scms.uid',$user->uid,'=');
      $query->condition('scms.nid',$company->nid,'=');
      $query->condition('scms.type','project','=');
      $output = $query->execute()->fetchAllKeyed(0,1);
    }
  if($type == 'scorecard_category'){
      $table_name = 'm6connect_scm_category_setting';
      $query = db_select($table_name, 'scms');
      $query->fields('scms',array('id','title'));
      //$query->condition('scms.uid',$user->uid,'=');
      $query->condition('scms.nid',$company->nid,'=');
      $query->condition('scms.type','scorecard','=');
      $output = $query->execute()->fetchAllKeyed(0,1);
    }
    
    if($type == 'project_settings_category'){
      // $table_name = 'm6connect_scm_settings_categories';
      // if(isset($ids) && !empty($ids)){        
      //   $query = db_select($table_name, 'scms');
      //   $query->fields('scms');
      //   $query->condition('scms.id',$ids,'=');
      //   $query->condition('scms.companyID',$company->nid,'=');
      //   $output = $query->execute()->fetchObject();
      // } else {
      //   $query = db_select($table_name, 'scms');
      //   $query->fields('scms',array('id','title'));
      //   $query->condition('scms.companyID',$company->nid,'=');
      //   $output = $query->execute()->fetchAllKeyed(0,1);
      // }
      $output = array();
    }


    if($type == 'project_sub_category'){
      $table_name = 'm6connect_scm_sub_category_setting';
      if(isset($ids) && !empty($ids)){        
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('id','title'));
        $query->condition('scms.id',$ids,'IN');
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project','=');
        $output = $query->execute()->fetchAllKeyed(0,1);
      }else{
        $query = db_select($table_name, 'scms');
        $query->fields('scms',array('id','title'));
        //$query->condition('scms.uid',$user->uid,'=');
        $query->condition('scms.nid',$company->nid,'=');
        $query->condition('scms.type','project','=');
        $output = $query->execute()->fetchAllKeyed(0,1);
      }
    }
    if($type == 'project_type'||$type == 'project_department'){
      if($type == 'project_type'){
        $ttype = 'project';
      }else{
        $ttype = 'project_department';
      }
      $table_name = 'm6connect_scm_type_setting';
      $query = db_select($table_name, 'scms');
      $query->fields('scms',array('id','title'));
      //$query->condition('scms.uid',$user->uid,'=');
      $query->condition('scms.nid',$company->nid,'=');
      $query->condition('scms.type',$ttype,'=');
      $output = $query->execute()->fetchAllKeyed(0,1);
    }
    if($type == 'project_status'){
      $table_name = 'm6connect_scm_status_setting';
      $query = db_select($table_name, 'scms');
      $query->fields('scms',array('id','title'));
      //$query->condition('scms.uid',$user->uid,'=');
      $query->condition('scms.nid',$company->nid,'=');
      $query->condition('scms.type',$type,'=');
      $output = $query->execute()->fetchAllKeyed(0,1);
    }
    if($type == 'project_approval_status'){
      $table_name = 'm6connect_scm_status_setting';
      $query = db_select($table_name, 'scms');
      $query->fields('scms',array('id','title'));
      //$query->condition('scms.uid',$user->uid,'=');
      $query->condition('scms.nid',$company->nid,'=');
      $query->condition('scms.type',$type,'=');
      $output = $query->execute()->fetchAllKeyed(0,1);
    }    
  }
  return $output;
}

function scm_get_projectdata($action,$delta,$ajax=TRUE) {
  global $user,$company;
  if(isset($action,$delta) && !empty($action) && !empty($delta)){    
    $query = db_select('m6connect_scm_sub_category_setting', 'scms');
    $query->fields('scms',array('id','title'));        
    //$query->condition('scms.uid',$user->uid,'=');
    $query->condition('scms.nid',$company->nid,'=');
    $query->condition('scms.type','project','=');
    $query->condition('scms.main_category',$delta ,'=');
    $output = $query->execute()->fetchAllKeyed(0,1);
    drupal_json_output($output);
    drupal_exit(0);  
  }
}


function _get_scm_setting_data_calling($type) {
  global $user,$company;
  $output = '';
  if($type == 'category'){
  $query = db_select('m6connect_scm_category_setting', 'scmData');
    $query->fields('scmData',array('id','title'));
    //$query->condition('scmData.uid',$user->uid,'=');
    $query->condition('scmData.nid',$company->nid,'=');
    $query->condition('scmData.type','general','=');
    $output = $query->execute()->fetchAllKeyed(0,1);
  }
  if($type == 'sub_category'){
  $query = db_select('m6connect_scm_sub_category_setting', 'scmData');
    $query->fields('scmData',array('id','title'));
    //$query->condition('scmData.uid',$user->uid,'=');
    $query->condition('scmData.nid',$company->nid,'=');
    $query->condition('scmData.type','general','=');
    $output = $query->execute()->fetchAllKeyed(0,1);
  }
   
  return $output;
}

function _scm_user_database_import_remember_filename($filename, &$context) {
  $context['results']['uploaded_filename'] = $filename;
}

function scm_user_database_import_finished($success, $results, $operations) {
  if (!empty($results['failed_rows'])) {
    // If there are any failed rows.
    $dir  = file_directory_path() . '/csvImporter/' ;
    if (file_check_directory($dir, FILE_CREATE_DIRECTORY)) {
      // Trying to create a file, with failed rows, so that user can upload it
      // agian.
      $csv_filename = 'failed_rows-'. basename($results['uploaded_filename']);
      $csv_filepath = $dir .'/'. $csv_filename;
      $targs = array(
        '!csv_url' => l(check_plain($csv_filename), $csv_filepath),
        '%csv_filename' => $csv_filename,
        '%csv_filepath' => $csv_filepath,
      ) ;
      if ($handle = fopen($csv_filepath, 'w+')) {
        foreach ($results['failed_rows'] as $failed_row) {
          fputcsv($handle, $failed_row);
        }
        fclose($handle);
        drupal_set_message(t('Some rows failed to import. You may download a CSV of these rows: !csv_url', $targs), 'warning');
      }
      else {
        drupal_set_message(t('Some rows failed to import, but unable to write error CSV to %csv_filepath', $targs), 'error');
      }
    }
    else {
      // drupal_set_message(t('Some rows failed to import, but unable to create directory for error CSV at %csv_directory', $targs), 'error');
      drupal_set_message(t('Some rows failed to import, but unable to create file for failed rows. Please try again.'), 'error');
    }
  }
  drupal_set_message(t('The CSV import has completed.'));
}

function _scm_user_database_import($line, &$context) {
  global $user, $company;
  $context['results']['rows_imported']++;
  $line = array_map('trim', $line);

  if (!empty($line[2]) && filter_var($line[2], FILTER_VALIDATE_EMAIL)) {
    $query = db_select('m6connect_scm_settings_user_database', 'n');
    $query->fields('n');
    $query->condition('n.email', $line[2], '=');
    $result = $query->execute()->fetchObject();
    $userdata['fristname'] = $line[0];
    $userdata['lastname'] = $line[1];
    $userdata['email'] = $line[2];
    if($line[3] == 'yes') {
      $userdata['is_chain_manager'] = 1;
    }
    if($line[4] == 'yes') {
      $userdata['is_material_manager'] = 1;
    }
    $userdata['companyID'] = $company->nid;
    $userdata['userID'] = $user->uid;
    $userdata['updated'] = time();
    $userdata['created'] = time();
    if ($result && !empty($result)) {
      db_update('m6connect_scm_settings_user_database')
      ->fields($userdata)
      ->condition('email', $userdata['email'], '=')
      ->execute();
    } else {
      db_insert('m6connect_scm_settings_user_database')->fields($userdata)->execute();
    }
  
  } else {
    // If no company title is received, then this is an error.
    $context['results']['failed_rows'][] = $line;
  }

  //-------------------------------------------------------------------------------------------|
  //  Give feedback to the importer about which operation we're preforming
  //-------------------------------------------------------------------------------------------|
  //Show the row count by default
  $context['message'] = t('Importing row !c', array( '!c' => $context['results']['rows_imported'] ));
  
  //Or, Provide some feedback about the row currently being processed
  $context['message'] = t('Importing %title', array('%title' => $line[0]));
}

function theme_cat_sub_cat_invite_m6_theme($variables) {
  $element = $variables['form'];
  $storage = $element['#storage'];
  $output = '';
  $header = array('Category', 'Sub Category', 'Action');
  $rowNo = 1;
  foreach ($storage as $key => $uniqId) {
    $rows[] = array(
      'data'=> array(
        array('data'=>drupal_render($element['setting_category'][$uniqId])),
        array('data'=>drupal_render($element['setting_sub_category'][$uniqId])),
        array('data'=>drupal_render($element['remove'][$uniqId]),'class'=> array('workflow-remove-td')),
      ),    
      'id' => array('alert-table-list-'.$rowNo),
    );    
    $rowNo++;
  }
  $rows[] = array(
    'data' => array(  
      array('data'=>drupal_render($element['workflow_add_new_row']),'colspan' => 3),
    ),  
  );
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes'=> array('class'=> array('project-mgmt-po-item-table','table','table-hover','m6connect-custom-table','m6connect-table-border', 'm6init-datatable'))));
  $output .= drupal_render_children($element);
  return $output;
}

function category_data_autocomplete($string = ''){
  global $company;  
  $matches = array();
  if(!empty($string)){
    $categoryListing = array(); 
    /*
     * Get category data by matching critaria
     */
    $query = db_select('m6connect_scm_category_setting', 'scmData');
    $query->fields('scmData',array('title'));
    $query->condition('scmData.nid',$company->nid,'=');
    $query->condition('scmData.type','general','=');
    $categoryListing = $query->execute()->fetchCol();
  
    $matchedOwner = preg_grep("/^{$string}/i",array_values($categoryListing));
    foreach($matchedOwner as $index => $userVal){
      $matches[$userVal] = $userVal; 
    }
  }
  drupal_json_output($matches);
}

function sub_category_data_autocomplete($string = ''){
  global $company;  
  $matches = array();
  if(!empty($string)){
    $subCategoryListing = array(); 
   /*
    * Get category data by matching critaria
    */
    $query = db_select('m6connect_scm_sub_category_setting', 'scmData');
    $query->fields('scmData',array('title'));    
    $query->condition('scmData.nid',$company->nid,'=');
    $query->condition('scmData.type','general','=');
    $categoryListing = $query->execute()->fetchCol();
    $matchedOwner = preg_grep("/^{$string}/i",array_values($subCategoryListing));
    foreach($matchedOwner as $index => $userVal){
      $matches[$userVal] = $userVal; 
    }
  }
  drupal_json_output($matches);
}

/*
 * Case manager get comment by case
 */
function _get_previous_comment_by_case($caseId) {
  $case = node_load($caseId);
  $caseData = array();
  foreach($case->field_case_comment['und'] as $caseDelta => $casVal) {  
    $proComment = $case->field_case_comment['und'][$caseDelta]['value'];
    $proDate = $case->field_case_comment_date['und'][$caseDelta]['value'];
    $proResolve = $case->field_case_resolved_value['und'][$caseDelta]['value'];
    $proReport = $case->field_case_report_value['und'][$caseDelta]['value'];
     $commentId = $case->field_case_unique_id['und'][$caseDelta]['value'];
    $caseData[date('m-d-Y', $proDate)]['comment'][] = $proComment.'*-'.$commentId.'*-'.$proReport.'*-'.$proResolve;       
  }
  $commentData = '';
  $reporthasvalue[0] = '<i class="fa fa-check resolved-danger" title="Unresolved" aria-hidden="true"></i> ';
  $reporthasvalue[1] = '<i class="fa fa-check resolved-success" title="Resolved" aria-hidden="true"></i>';
  $reporthasvalue_int[0] = 0;
  $reporthasvalue_int[1] = 1;

  $resoldhasvalue[0] = '<i class="fa fa-file-text-o report-danger" title="Not included in report" aria-hidden="true"></i>';
  $resoldhasvalue[1] = '<i class="fa fa-file-text-o report-success" title="In report" aria-hidden="true"></i>';
  $resoldhasvalue_int[0] = 0;
  $resoldhasvalue_int[1] = 1;
  
  $commentData .= '<table class="table m6connect-custom-table custom-comment-updated m6init-datatable">';
  foreach($caseData as $delta => $caseVal) {     
    //$commentData .= '<p>Comments on:'.$delta.'</p>';
    
    $commentData .= '<thead><tr><th class="col-md-8 text-left">Comments : ' . $delta . '</th>
      <th class="col-md-1 text-center resolved-sort-it" onclick="jQuery(\'.resolved-sort-it-instead\').click(); return false;">Resolved</th>
      <th class="col-md-1 text-center hidden resolved-sort-it-instead">Resolved Int</th>
      <th class="col-md-1 text-center report-sort-it" onclick="jQuery(\'.report-sort-it-instead\').click(); return false;">Report</th>
      <th class="col-md-1 text-center hidden report-sort-it-instead">Report Int</th>
      <th class="col-md-2 text-center">Action</th>
      </tr></thead><tbody>';
  foreach($caseVal['comment'] as $caseKey => $comment) {
    $getComment = explode('*-',$comment);
      $commentData .= '<tr><td class="col-md-8 text-left">'.$getComment[0].'</td>';
    $commentData .= '<td class="col-md-1 text-center">' . $reporthasvalue[$getComment[3]] . '</td>';
    $commentData .= '<td class="col-md-1 text-center hidden">' . $reporthasvalue_int[$getComment[3]] . '</td>';
    $commentData .= '<td class="col-md-1 text-center">' . $resoldhasvalue[$getComment[2]] . '</td>';
    $commentData .= '<td class="col-md-1 text-center hidden">' . $resoldhasvalue_int[$getComment[2]] . '</td>';
    $commentData .= '<td class="col-md-2 text-center">'.l('<i class="fa fa-pencil" title="Edit" aria-hidden="true"></i>', '/load-case-comment/'.$getComment[1].'/'.$delta.'/'.$caseId.'/nojs', array('html' => TRUE,'attributes' => array('class' => array('use-ajax'),'id'=>'estimate-td-'.$getComment[1]))).'&nbsp;'.l('<i class="fa fa-trash" title="Delete" aria-hidden="true"></i>', '/delete-case-comment/'.$getComment[1].'/'.$delta.'/'.$caseId.'/nojs', array('html' => TRUE,'attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'),'id'=>'estimate-td-'.$getComment[1])));

    $commentData .= '</tr>';
    } 
    $commentData .= '</tbody>';
  }
  $commentData .= '</table>';
  return $commentData;
}

/*
 * function for edit Case manager comment 
 */
function _load_case_comment_details_callback($key, $date, $case,$ajax = NULL) {
  $case = node_load($case);
  $caseData = array();
  $commentData = '';  
  $commentId = '';
  foreach($case->field_case_comment['und'] as $caseDelta => $casVal) {  
    $proComment = $case->field_case_comment['und'][$caseDelta]['value'];
    $proDate = $case->field_case_comment_date['und'][$caseDelta]['value'];
    $proResolve = $case->field_case_resolved_value['und'][$caseDelta]['value'];
    $proReport = $case->field_case_report_value['und'][$caseDelta]['value'];
  $commentId = $case->field_case_unique_id['und'][$caseDelta]['value'];
    $caseData[date('m-d-Y', $proDate)]['comment'][] = $proComment.'*-'.$commentId.'*-'.$proResolve.'*-'.$proReport;
  }  
  foreach($caseData as $delta => $caseVal) {
    if($delta == $date) {   
    foreach($caseVal['comment'] as $caseKey => $comment) {    
      $getComment = explode('*-',$comment);
    if($getComment[1] == $key) {
      $commentData = $getComment[0];
      $commentId = $getComment[1];
      $resolve = $getComment[2];
      $report = $getComment[3];
        } 
    } 
    }
  }
  ctools_include('ajax');
  $commands = array();
  $updatedDate = str_replace('-','/',$date); 
  $newDate = $updatedDate;
  $updatedDate = date('l F d, Y',strtotime($newDate));  
  $commands[] = ajax_command_invoke("input.case-comment-edit", 'val',array('1'));    
  $commands[] = ajax_command_invoke("input.unique-comment-id", 'val',array($commentId));
  if($report == 1){
  $commands[] = ajax_command_invoke('.case-builder-report', 'prop',array('checked', true)); 
  }
  else{
    $commands[] = ajax_command_invoke('.case-builder-report', 'prop',array('checked', false)); 
  }
  if($resolve == 1){
    $commands[] = ajax_command_invoke('.case-builder-resolved', 'prop',array('checked', true));
  }
  else{
    $commands[] = ajax_command_invoke('.case-builder-resolved', 'prop',array('checked', false));
  }
  $commands[] = ajax_command_invoke("textarea.custom-project-comment", 'val',array($commentData));
  $commands[] = ajax_command_invoke("input.case-builder-date", 'val',array($updatedDate));  
  $commands[] = ajax_command_html("#custom-date-update", $updatedDate);
  print ajax_render($commands);
  exit;   
}

/*
 * Function for delete file 
 */
function scm_file_row_remove_callback($field, $node, $key, $file, $ajax = NULL) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $actiontext = 'Delete'; 
    if ($type == 'custom_user') {
      $type_title = t('Requestor Database');
    }
    if ($type == 'unpublishnode') {
      $type_title = t('My request');
      
    }
    if ($type == 'publishnode') {
      $type_title = t('My request');
      $actiontext = 'Unarchive';
    }
    $form_state = array(
      'ajax' => TRUE,
      'title' => '<h4 class="asset-popup-title-custom">'.$file->filename . '</h4>',
      'delete_file_field' => $field,
      'delete_node_object' => $node,
      'delete_file_key' => $key,
      'delete_file_object' => $file,

    );
    $output = ctools_modal_form_wrapper('delete_scm_filerow_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('delete_scm_filerow_form', $field, $node, $key, $file);
  }
}

function delete_scm_filerow_form($form, &$form_state, $field=NULL, $node=NULL, $key=NULL, $file=NULL) {
  if (empty($form_state['delete_file_field'])) {
    if (!empty($field)) {
      $form_state['delete_file_field'] = $field;
    }
  }
  if (empty($form_state['delete_node_object'])) {
    if (!empty($node)) {
      $form_state['delete_node_object'] = $node;
    }
  }
  if (empty($form_state['delete_file_key'])) {
    if (!empty($key)) {
      $form_state['delete_file_key'] = $key;
    }
  }
  if (empty($form_state['delete_file_object'])) {
    if (!empty($file)) {
      $form_state['delete_file_object'] = $file;
    }
  }

  $form = array();

  $delete = '<div class="group-action-status"><h4><p>' . t('Are you sure you want to delete this file?') . '</p></h4>';
  $delete .= '<p>' . t('This action can\'t be undone.') . '</p></div>';

  $form['warning'] = array(
    '#type' => 'markup',
    '#markup' => $delete,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Yes'),
  );
  $form['cancel'] = array(
    '#type' => 'markup',
    '#markup' => '<a href="javascript:void(0);" class="ob-msg-popup-close-link" onclick="jQuery(&quot;span.popups-close&quot;).click(); return false;"><input type="button" class="btn cancel-button" value="Close"></a>',
  );

  return $form;
}

function delete_scm_filerow_form_submit($form, &$form_state){

   dpm($form_state,'$form_state');
    //if (!empty($form_state['delete_file_field'])&& !empty($form_state['delete_node_object']) && !empty($form_state['delete_file_key']) && !empty($form_state['delete_file_object'])){
  if($form_state['delete_file_field'] == 'filedcollectonfilerow_remove'){
    $itemid_key = (!empty($form_state['delete_file_key']) && !is_numeric($form_state['delete_file_key'])?explode('-',$form_state['delete_file_key']):$form_state['delete_file_key']);
    $fc_item = field_collection_item_load($itemid_key[1]);
    $file= $form_state['delete_file_object'];
    $fid = $file->fid;
    unset($fc_item->{$itemid_key[0]}[LANGUAGE_NONE][$itemid_key[2]]);
    $fc_item->save();
    $form_state['ajax_commands'][] = ajax_command_remove(".filefid-".$fid);
  }else{
    $field = $form_state['delete_file_field'];
      $node = $form_state['delete_node_object'];
      $key =$form_state['delete_file_key'];
      $file= $form_state['delete_file_object'];
      $fid = $file->fid;
      unset($node->{$field}[LANGUAGE_NONE][$key]);
      node_save($node);
      $form_state['ajax_commands'][] = ajax_command_remove(".filefid-".$fid);
  }
   
  

  //}
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();

}
/*
 * Function for delete Case manager comment 
 */
function _delete_case_comment_details_callback($key, $date, $case, $ajax = NULL) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $title = t('Delete Comment');

    $form_state = array(
      'ajax' => TRUE,
      //'title' => '<h4 class="asset-popup-title-custom">&nbsp;</h4>',
      'key' => $key,
      'date' => $date,
      'case' => $case,
    );
    $output = ctools_modal_form_wrapper('delete_case_comment_details_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('delete_case_comment_details_form', $key, $date, $case);
  }
}

/**
 * Form to delete comment.
 */
function delete_case_comment_details_form($form, &$form_state, $key = NULL, $date = NULL, $case = NULL) {
  if (empty($form_state['key'])) {
    if (!empty($key)) {
      $form_state['key'] = $key;
    }
  }
  if (empty($form_state['date'])) {
    if (!empty($date)) {
      $form_state['date'] = $date;
    }
  }
if (empty($form_state['case'])) {
    if (!empty($case)) {
      $form_state['case'] = $case;
    }
  }

  $form = array();

  $delete = '<div class="group-action-status"><h4><p>' . t('Are you sure you want to delete this comment?') . '</p></h4>';
  $delete .= '<p>' . t('This action can\'t be undone.') . '</p></div>';

  $form['warning'] = array(
    '#type' => 'markup',
    '#markup' => $delete,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Yes'),
  );
  $form['cancel'] = array(
    '#type' => 'markup',
    '#markup' => '<a href="javascript:void(0);" class="ob-msg-popup-close-link" onclick="jQuery(&quot;span.popups-close&quot;).click(); return false;"><input type="button" class="btn cancel-button" value="Close"></a>',
  );

  return $form;
}

/**
 * Submit handler for delete_case_comment_details_form
 */
function delete_case_comment_details_form_submit($form, &$form_state) {
  if (!empty($form_state['case']) && !empty($form_state['key']) && $case = node_load($form_state['case'])) {
    foreach ($case->field_case_comment['und'] as $caseDelta => $casVal) {
      if ($case->field_case_unique_id['und'][$caseDelta]['value'] == $form_state['key']) {
        unset($case->field_case_comment['und'][$caseDelta]);
        unset($case->field_case_unique_id['und'][$caseDelta]);
        unset($case->field_case_report_value['und'][$caseDelta]);
        unset($case->field_case_resolved_value['und'][$caseDelta]);
        unset($case->field_case_comment_date['und'][$caseDelta]);
      }
    }

    $case->field_case_unique_id['und']      = array_values($case->field_case_unique_id['und']);
    $case->field_case_comment['und']        = array_values($case->field_case_comment['und']);
    $case->field_case_report_value['und']   = array_values($case->field_case_report_value['und']);
    $case->field_case_resolved_value['und'] = array_values($case->field_case_resolved_value['und']);
    $case->field_case_comment_date['und']   = array_values($case->field_case_comment_date['und']);
    node_save($case);

    $form_state['ajax_commands'][] = ajax_command_html('#project-manager-comment-render-' . $case->nid, _get_previous_comment_by_case($case->nid));
  }
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
}

/**
 * Helper function to get requestor user data.
 */
function get_scm_user_database_data($id = '') {
  global $user;
  global $company;  
  $query = db_select('m6connect_scm_settings_user_database', 'n');
  $query->fields('n');
  if($id && !empty($id)){
    $query->condition('n.id', $id, '=');
    $result = $query->execute()->fetchObject();
  } else {
    $query->condition('n.companyID', $company->nid, '=');
    // $query->condition('n.userID', $user->uid, '=');
    $result = $query->execute()->fetchAll();
  }
  return $result;
}

/**
 * Helper function to get scm requestor data table.
 */
function get_scm_user_database_settings_table_data(){
  global $user;
  global $company;
  $rows = array();
  $header = array(
    array('data'=>'First Name','class'=>array('text-center')),
    array('data'=>'Last Name','class'=>array('text-center')),
    array('data'=>'Email','class'=>array('text-center')),
    // array('data'=>'Hospital','class'=>array('text-center')),
    array('data'=>'Action','class'=>array('text-center')),
  );
  $getuserdata = get_scm_user_database_data();
  foreach($getuserdata as $key => $values){  
   $permissions = '';
    if($values->is_chain_manager==1) {
      $permissions = 'Supply, ';
    }
    if($values->is_material_manager==1) {
      $permissions .= 'Material';
    }
    $rows[] = array(
        'data' => array(
          array('data' => l('<span class="commitment-nu-cust">'.$values->fristname.'</span>', 'edit/'.$values->id.'/details', array('html' => TRUE, 'external' => TRUE,'attributes' => array('class' => 'text-center edit_scm_requests_detail', 'for' => $values->id))),'class' => array('text-center')),
          array('data' => $values->lastname,'class' => array('text-center')),      
          array('data' => $values->email,'class' => array('text-center')),
          //array('data' => '','class' => array('text-center')),
          array('data' => _get_action_button($values->id, 'custom_user'),'class' => array('text-center')),
      ),
    );
  }  
 $output = theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Request created yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-request-table','table-hover','text-center','m6init-datatable'))));
  return $output;      
}


function _get_scmcase_nids_by_referpronid($referpronid){
  global $user, $company;
  $casenid == '';
  if(isset($referpronid) && !empty($referpronid)){
    $query = db_select('field_data_field_project_reference','prore');
    $query->leftjoin('og_membership','og','og.etid=prore.entity_id');
    $query->leftjoin('node','n','n.nid=prore.entity_id');
    $query->fields('prore',array('entity_id'));
    //$query->fields('n',array('title'));
    $query->condition('prore.bundle','case_builder');
    //$query->condition('n.uid',$user->uid);
    //$query->orderBy('n.changed', 'DESC');
    $query->condition('og.gid',$company->nid);
    $query->condition('prore.field_project_reference_nid',$referpronid);
    $casenid = $query->execute()->fetchCol();
  }
  return $casenid;
}

function get_scm_user_database_by_email($email) {  
  $query = db_select('m6connect_scm_settings_user_database', 'n');
  $query->fields('n');
  $query->condition('n.email', $email, '=');
  $result = $query->execute()->fetchObject();
  return $result;
}

function get_scm_user_database_by_company($companyID) {  
  $query = db_select('m6connect_scm_settings_user_database', 'n');
  $query->fields('n');
  $query->condition('n.companyID', $companyID, '=');
  $result = $query->execute()->fetchObject();
  return $result;
}

function get_node_byfield_value($field,$bundle,$val,$count){
    $field_values = db_select('field_data_'.$field, 'f');
    $field_values->fields('f',array('entity_id'));
    $field_values->condition('entity_type', 'node');
    $field_values->condition('bundle', $bundle);
    $field_values->condition($field.'_value', $val);
    $field_values->orderBy('entity_id', 'DESC');
    if($count == 1){
      $result = $field_values->execute()->fetchField();
    } else {
        $result =  $field_values->execute()->fetchAll();
    }
    return $result;
}

/*
  * Check for Case builder to get any 
  * empty field in case builder form 
  */
// function _get_for_case_builder($projectId) {
//   global $company;  
//    $query = db_select('node','n');
//   $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
//   $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_status','csc','csc.entity_id = n.nid'); 
//   $query->fields('n', array('nid'));
//   //$query->fields('csc',array('field_case_status_value'));
//   $query->condition('pr.field_project_reference_nid',$projectId,'=');
//   $query->condition('n.type','case_builder','=');
//   $query->condition('om.gid', $company->nid, '=');
//   $query->condition('csc.field_case_status_value','active', '=');
//   $getCaseBuildernid = $query->execute()->fetchColumn(0);
//   $builderStatus = 'scm-gray';
//   if(isset($getCaseBuildernid) && !empty($getCaseBuildernid) && is_numeric($getCaseBuildernid)) {
//     $builderStatus = 'scm-green';
//   }
 
//   return $builderStatus;
// }

/*
 * Check for buy or change
 */
// function _get_for_buy_change($projectId) {
//   global $company;  
//   $query = db_select('node','n');
//   $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
//   $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_status','csc','csc.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_reference','caser','caser.field_case_reference_nid = n.nid');
//   //$query->fields('n', array('nid'));
//   //$query->fields('pr',array('field_project_reference_nid'));
//   //$query->fields('csc',array('field_case_status_value'));
//   $query->fields('caser',array('entity_id'));
//   $query->condition('pr.field_project_reference_nid',$projectId,'=');
//   $query->condition('n.type','case_builder','=');
//   $query->condition('om.gid', $company->nid, '=');
//   $query->condition('csc.field_case_status_value','active', '=');
//   $query->condition('caser.bundle','buy_or_change');
//   $getBuyChangenid = $query->execute()->fetchColumn(0); 
//   $buyChnageStatus = '';
//   if(isset($getBuyChangenid) && !empty($getBuyChangenid) && is_numeric($getBuyChangenid)) {
//     $getBuyChange = node_load($getBuyChangenid);
//     /*
//      * Check for "Is this a product" and all its subfields
//      */
//     $TbuyChnageStatus = '';
//     $hasprod =0;
//     $isProd = isset($getBuyChange->field_case_product_info_product['und'])?$getBuyChange->field_case_product_info_product['und'][0]['value']:'';
//     $isProd = isset($getBuyChange->field_case_product_info_product['und'])?$getBuyChange->field_case_product_info_product['und'][0]['value']:'';    
//     if($isProd == 1) {       
//       $hasprod =5;         
//     }    
//     if($isProd == 2) {      
//       $hasprod =1;
//       $capital = isset($getBuyChange->field_product_info_capital['und'])?$getBuyChange->field_product_info_capital['und'][0]['value']:'';
//       $approved = isset($getBuyChange->field_compliance_approved['und'])?$getBuyChange->field_compliance_approved['und'][0]['value']:'';
//       $phar = isset($getBuyChange->field_case_product_info_pharmace['und'])?$getBuyChange->field_case_product_info_pharmace['und'][0]['value']:'';
//       $reprocess = isset($getBuyChange->field_case_product_info_reproces['und'])?$getBuyChange->field_case_product_info_reproces['und'][0]['value']:'';
//       if($capital != 0 && $approved != 0 && $phar != 0 && $reprocess != 0) {        
//         $hasprod =5;
//       }      
//     }    
//     /*
//      * Check for "Is this Equipment" and all its subfields
//      */
//     $hasequip = 0; 
//     $isEquip = isset($getBuyChange->field_case_equipment_info['und'])?$getBuyChange->field_case_equipment_info['und'][0]['value']:'';    
//     if($isEquip == 1) {       
//       $hasequip = 6;      
//     }    
//     if($isEquip == 2) {      
//       $hasequip =1;
//       $capDollor = isset($getBuyChange->field_case_equipment_capital_dol['und'])?$getBuyChange->field_case_equipment_capital_dol['und'][0]['value']:'';
//       $equPoint = isset($getBuyChange->field_equipment_info_point_sale['und'])?$getBuyChange->field_equipment_info_point_sale['und'][0]['value']:'';
//       $budget = isset($getBuyChange->field_case_equipment_info_budget['und'])?$getBuyChange->field_case_equipment_info_budget['und'][0]['value']:'';
//       $consu = isset($getBuyChange->field_equipment_info_consumable['und'])?$getBuyChange->field_equipment_info_consumable['und'][0]['value']:'';
//       $store = isset($getBuyChange->field_equipment_info_store_phi['und'])?$getBuyChange->field_equipment_info_store_phi['und'][0]['value']:'';  
//       if($capDollor != 0 && $equPoint != 0 && $budget != 0 && $consu != 0 && $store != 0) {
//         $hasequip =6;
//       }      
//     }    
//     /*
//      * Check for "Is this a Service" and all its subfields
//      */
//     $hasservice =0; 
//     $isService = isset($getBuyChange->field_service_info_service['und'])?$getBuyChange->field_service_info_service['und'][0]['value']:'';    
//     if($isService == 2 || $isService == 1) { 
//       $hasservice =1;
//     }    
//     /*
//      * Check for "Does it impact patient care" and all its subfields
//      */
//     $haspcare =0; 
//     $patientCare = isset($getBuyChange->field_buy_or_change_patient_care['und'])?$getBuyChange->field_buy_or_change_patient_care['und'][0]['value']:'';
//     if($patientCare == 2 || $patientCare == 1) { 
//       $haspcare =1;
//     }    
//     /*
//      * Check for "Project/Case Overlaps Project (SCM/SIIO)" and all its subfields
//      */
//     $haspcase =0; 
//     $projectCase = isset($getBuyChange->field_projectcaseoverlapsproject['und'])?$getBuyChange->field_projectcaseoverlapsproject['und'][0]['value']:'';    
//     if($projectCase == 1) {
//       $haspcase =2;
//     }    
//     if($projectCase == 2) {
//       $haspcase =1;
//       $approve = isset($getBuyChange->field_management_approval['und'])?$getBuyChange->field_management_approval['und'][0]['value']:'';
//       if($approve == 2 || $approve == 1) {
//         $haspcase =2;
//       }      
//     }    
//     /*
//      * Check for "Does this Project/Case Affect Other Projects or Initiatives?" and all its subfields
//      */
//     $hascaffect =0; 
//     $caseAffect = isset($getBuyChange->field_project_case_affect['und'])?$getBuyChange->field_project_case_affect['und'][0]['value']:'';
//     if($caseAffect == 2 || $caseAffect == 1) {      
//       $hascaffect =1;
//     }    
//   }
//   else{
//     $TbuyChnageStatus = 0;
//   }
//   $TbuyChnageStatus = $hascaffect+$haspcase+$haspcare+$hasservice+$hasequip+$hasprod;
//   if($TbuyChnageStatus == 16){
//     $buyChnageStatus = 'scm-green'; 
//   }else if($TbuyChnageStatus == 0){
//     $buyChnageStatus = 'scm-gray'; 
//   }else if($TbuyChnageStatus < 16 && $TbuyChnageStatus !=0){
//     $buyChnageStatus = 'scm-yellow'; 
//   }else{
//     $buyChnageStatus = 'scm-gray'; 
//   }  
//   return $buyChnageStatus;
// }

// function _get_for_patient_care($projectId) {
//   global $company; 
//   $query = db_select('node','n');
//   $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
//   $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_status','csc','csc.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_reference','caser','caser.field_case_reference_nid = n.nid');
//   //$query->fields('n', array('nid'));
//   //$query->fields('pr',array('field_project_reference_nid'));
//   //$query->fields('csc',array('field_case_status_value'));
//   $query->fields('caser',array('entity_id'));
//   $query->condition('pr.field_project_reference_nid',$projectId,'=');
//   $query->condition('n.type','case_builder','=');
//   $query->condition('om.gid', $company->nid, '=');
//   $query->condition('csc.field_case_status_value','active', '=');
//   $query->condition('caser.bundle','patient_care');
//   $getpatientCarenid = $query->execute()->fetchColumn(0);  
//   $patientCareStatus = '';
//   $TpatientCareStatus = '';
//   if(isset($getpatientCarenid) && !empty($getpatientCarenid) && is_numeric($getpatientCarenid)) {
//     $getPatientCare = node_load($getpatientCarenid);

//     /*
//      * Check for "Does it impact Patient Satisfaction?" and all its subfields
//      */
//     $hassfaction = 0;
//     $isSatisfaction = isset($getPatientCare->field_patient_satisfaction['und'])?$getPatientCare->field_patient_satisfaction['und'][0]['value']:'';    
//     if($isSatisfaction == 1) { 
//       $hassfaction = 2;
//       $isInfImpl = isset($getPatientCare->field_infection_implications['und'])?$getPatientCare->field_infection_implications['und'][0]['value']:'';      
//       if($isInfImpl == 1) {        
//         $hassfaction = 4;
//       }
//       if($isInfImpl == 2) { 
//         $hassfaction = 3;
//         $isInfPrev = isset($getPatientCare->field_infection_prevention['und'])?$getPatientCare->field_infection_prevention['und'][0]['value']:'';
//         if($isInfPrev == 2 || $isInfPrev == 1) { 
//           $hassfaction =4;
//         }    
//       }   
//     }
//     if($isSatisfaction == 2) {
//       $hassfaction =1;
//       $outCome = isset($getPatientCare->field_patient_care_outcomes['und'])?$getPatientCare->field_patient_care_outcomes['und'][0]['value']:'';
//       if($outCome == 2 || $outCome == 1) { 
//         $hassfaction =2;
//       }
//       $isInfImpl2 = isset($getPatientCare->field_infection_implications_2['und'])?$getPatientCare->field_infection_implications_2['und'][0]['value']:'';      
//       if($isInfImpl2 == 1) { 
//         $hassfaction =4;
//       }
//       if($isInfImpl2 == 2) { 
//         $hassfaction =3;
//         $isInfPrevl2 = isset($getPatientCare->field_infection_prevention_2['und'])?$getPatientCare->field_infection_prevention_2['und'][0]['value']:'';
//         if($isInfPrevl2 == 2 || $isInfPrevl2 == 1) { 
//           $hassfaction =4;
//         }   
//       }   
//     }
//     /*
//      * Check for "Has a standard already beedn Established?" and all its subfields
//      */
//     $hasEstStd =0;
//     $isEstStd = isset($getPatientCare->field_established_standard['und'])?$getPatientCare->field_established_standard['und'][0]['value']:'';
//     if($isEstStd == 2 || $isEstStd == 1) {
//       $hasEstStd =1;
//     }
//   }
//   else{
//     $TpatientCareStatus = 0;
//   }
//   $TpatientCareStatus = $hassfaction+$hasEstStd;
//   if($TpatientCareStatus == 5){
//     $patientCareStatus = 'scm-green'; 
//   }else if($TpatientCareStatus < 5 && $TpatientCareStatus !=0){
//     $patientCareStatus = 'scm-yellow'; 
//   }else if($TpatientCareStatus == 0){
//     $patientCareStatus = 'scm-gray'; 
//   }else{
//     $patientCareStatus = 'scm-gray'; 
//   }
//   return $patientCareStatus;
// }

// function _get_for_preference_status($projectId) {     
//   global $company;  
//   $query = db_select('node','n');
//   $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
//   $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_status','csc','csc.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_reference','caser','caser.field_case_reference_nid = n.nid');
//   //$query->fields('n', array('nid'));
//   //$query->fields('pr',array('field_project_reference_nid'));
//  // $query->fields('csc',array('field_case_status_value'));
//   $query->fields('caser',array('entity_id'));
//   $query->condition('pr.field_project_reference_nid',$projectId,'=');
//   $query->condition('n.type','case_builder','=');
//   $query->condition('om.gid', $company->nid, '=');
//   $query->condition('csc.field_case_status_value','active', '=');
//   $query->condition('caser.bundle','preferences');
//   $getPreferencenid = $query->execute()->fetchColumn(0);
  
//   $preferenceStatus = '';
//   $TpreferenceStatus = '';
//   if(isset($getPreferencenid) && !empty($getPreferencenid) && is_numeric($getPreferencenid)) {
//     $getPreference = node_load($getPreferencenid);
//     /*
//      * Check for "Are Clinicians the primary user group?" and all its subfields
//      */
//     $haspclinicians =0;
//     $isPrimaryClinicians = isset($getPreference->field_preferences_non_physician['und'])?$getPreference->field_preferences_non_physician['und'][0]['value']:'';
//     if($isPrimaryClinicians == 2 || $isPrimaryClinicians == 1) { 
//       $haspclinicians =1;
//     }  
//     /*
//      * Check for "Are Physicians the primary user group?" and all its subfields
//      */
//     $haspphysicians =0;
//     $isPrimaryPhysicians = isset($getPreference->field_physicians['und'])?$getPreference->field_physicians['und'][0]['value']:'';
//     if($isPrimaryPhysicians == 2 || $isPrimaryPhysicians == 1) { 
//       $haspphysicians =1;
//     }      
    
//     /*
//      * Check for "Is this for a New Physician?" and all its subfields
//      */
//     $hasnphysician =0;
//     $isNewPhysician = isset($getPreference->field_physicians_new_physician['und'])?$getPreference->field_physicians_new_physician['und'][0]['value']:'';
//     if($isNewPhysician == 2 || $isNewPhysician == 1) { 
//       $hasnphysician =1;
//     }     
//     /*
//      * Check for "Is the physician(s) Credentialed?" and all its subfields
//      */
//     $hascredentialed =0;
//     $isCredentialed = isset($getPreference->field_physicians_credentialed['und'])?$getPreference->field_physicians_credentialed['und'][0]['value']:'';
//     if($isCredentialed == 2) { 
//       $hascredentialed =1;
//     }     
//     /*
//      * Check for "Is the physician(s) Credentialed?" and all its subfields
//      */
//     $hasesatis =0;
//     $isEmployeeSatis = isset($getPreference->field_employee_satisifaction['und'])?$getPreference->field_employee_satisifaction['und'][0]['value']:'';
//     if($isEmployeeSatis == 2 || $isEmployeeSatis == 1) { 
//       $hasesatis =1;
//     }        
//   }
//   else{
//     $TpreferenceStatus = 0;
//   }
//   $TpreferenceStatus = $haspclinicians+$haspphysicians+$hasnphysician+$hascredentialed+$hasesatis;
//   if($TpreferenceStatus == 5){
//     $preferenceStatus = 'scm-green'; 
//   }else if($TpreferenceStatus < 5 && $TpreferenceStatus !=0){
//     $preferenceStatus = 'scm-yellow'; 
//   }else if($TpreferenceStatus == 0){
//     $preferenceStatus = 'scm-gray'; 
//   }else{
//     $preferenceStatus = 'scm-gray'; 
//   }

//   return $preferenceStatus;
// }


// function _get_for_resources_status($projectId) {
//   global $company;  
//   $query = db_select('node','n');
//   $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
//   $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_status','csc','csc.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_reference','caser','caser.field_case_reference_nid = n.nid');
//   //$query->fields('n', array('nid'));
//   //$query->fields('pr',array('field_project_reference_nid'));
//  // $query->fields('csc',array('field_case_status_value'));
//   $query->fields('caser',array('entity_id'));
//   $query->condition('pr.field_project_reference_nid',$projectId,'=');
//   $query->condition('n.type','case_builder','=');
//   $query->condition('om.gid', $company->nid, '=');
//   $query->condition('csc.field_case_status_value','active', '=');
//   $query->condition('caser.bundle','resources');
//   $getResourcesnid = $query->execute()->fetchColumn(0);
//   $resourcesStatus = '';
//   $TresourcesStatus = '';
//   if(isset($getResourcesnid) && !empty($getResourcesnid) && is_numeric($getResourcesnid)) {
//     $getResources = node_load($getResourcesnid);    
//    /*
//      * Check for "Are there Facility Impacts?" and all its subfields
//      */
//     $hasrfacil =0;
//     $isResourcesFacil = isset($getResources->field_resources_facility_impacts['und'])?$getResources->field_resources_facility_impacts['und'][0]['value']:'';
//       if($isResourcesFacil == 2 || $isResourcesFacil == 1) {
//         $hasrfacil =1;
//       }
//     /*
//      * Check for "Is There An IT Component?" and all its subfields
//      */
//     $hasitcomponent =0;
//     $isITComponent = isset($getResources->field_it_component['und'])?$getResources->field_it_component['und'][0]['value']:'';  
//     if($isITComponent == 1) {
//       $hasitcomponent =2;
//     }
//     if($isITComponent == 2) {
//       $hasitcomponent = 1;
//       $isGovAppr = isset($getResources->field_governance_approved['und'])?$getResources->field_governance_approved['und'][0]['value']:'';
//       if($isGovAppr == 2) {
//         $hasitcomponent =2;
//       }
//     }        
//   }
//   else{
//     $TresourcesStatus = 0;
//   }
//   $TresourcesStatus = $hasrfacil+$hasitcomponent;
//   if($TresourcesStatus == 3){
//     $resourcesStatus = 'scm-green';
//   }else if($TresourcesStatus < 3 && $TresourcesStatus !=0){
//     $resourcesStatus = 'scm-yellow';
//   }else if($TresourcesStatus == 0){
//     $resourcesStatus = 'scm-gray';
//   }else{
//     $resourcesStatus = 'scm-gray';
//   }
//   return $resourcesStatus;
// }

// function _get_for_due_diligence_status($projectId) {
//    global $company;  
//   $query = db_select('node','n');
//   $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
//   $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_status','csc','csc.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_reference','caser','caser.field_case_reference_nid = n.nid');
//   //$query->fields('n', array('nid'));
//   //$query->fields('pr',array('field_project_reference_nid'));
//  // $query->fields('csc',array('field_case_status_value'));
//   $query->fields('caser',array('entity_id'));
//   $query->condition('pr.field_project_reference_nid',$projectId,'=');
//   $query->condition('n.type','case_builder','=');
//   $query->condition('om.gid', $company->nid, '=');
//   $query->condition('csc.field_case_status_value','active', '=');
//   $query->condition('caser.bundle','due_diligence');
//   $getDueDilinid = $query->execute()->fetchColumn(0);
//   $dueDiliStatus = '';
//   $TdueDiliStatus = '';
//   if(isset($getDueDilinid) && !empty($getDueDilinid) && is_numeric($getDueDilinid)) {
//     $getDueDili = node_load($getDueDilinid);          
//     /*
//      * Check for "Are there Facility Impacts?" and all its subfields
//      */
//     $hasmsupplier =0;
//     $isMoreSupplier = isset($getDueDili->field_one_supplier['und'])?$getDueDili->field_one_supplier['und'][0]['value']:''; 
//     if($isMoreSupplier == 2) { 
//       $hasmsupplier =1;
//       $isTHRSupplier = isset($getDueDili->field_thr_one_supplier['und'])?$getDueDili->field_thr_one_supplier['und'][0]['value']:'';
//       if($isTHRSupplier == 2 || $isTHRSupplier == 1) { $hasmsupplier =2; }
//     }
//     if($isMoreSupplier == 1) { $hasmsupplier =2; }    
//     /*
//      * Check for "Are there Regulatory Implications?" and all its subfields
//      */
//     $hasrimpli =0;
//     $isRegImpli = isset($getDueDili->field_regulatory_implications['und'])?$getDueDili->field_regulatory_implications['und'][0]['value']:'';    
//     if($isRegImpli == 1) { $hasrimpli =7; }
//     if($isRegImpli == 2) { 
//       $hasrimpli =1;
//       $isGovAppr = isset($getDueDili->field_fda_approval['und'])?$getDueDili->field_fda_approval['und'][0]['value']:'';
//       if($isGovAppr == 1) { $hasrimpli =7;  }
//       if($isGovAppr == 2) { 
//         $hasrimpli =2;
//         $isGovApprProcess = isset($getDueDili->field_fda_premarket_approval['und'])?$getDueDili->field_fda_premarket_approval['und'][0]['value']:'';
//         /*if($isGovAppr == 0) { $dueDiliStatus = 'scm-yellow'; }  
//         if($isGovAppr == '') { $dueDiliStatus = 'scm-gray'; }
//         if($isGovAppr == 1) { $dueDiliStatus = 'scm-green';  }
//         if($isGovAppr == 2) { $dueDiliStatus = 'scm-green';  }
//         */
//       $isFDK510 = isset($getDueDili->field_fda_premarket_notification['und'])?$getDueDili->field_fda_premarket_notification['und'][0]['value']:'';
//         /*if($isFDK510 == 0) { $dueDiliStatus = 'scm-yellow'; } 
//         if($isFDK510 == '') { $dueDiliStatus = 'scm-gray'; }
//         if($isFDK510 == 1) { $dueDiliStatus = 'scm-green';  }
//         if($isFDK510 == 2) { $dueDiliStatus = 'scm-green';  }*/
//       if($isGovApprProcess != 0 && $isFDK510 != 0 ) {
//         $hasrimpli =4;
//       } 
//       $hasFDAapproved = 0;
//       $isFDAapproved = isset($getDueDili->field_fda_approved['und'])?$getDueDili->field_fda_approved['und'][0]['value']:'';
//         /*if($isFDAapproved == 0) { $dueDiliStatus = 'scm-yellow'; }  
//         if($isFDAapproved == '') { $dueDiliStatus = 'scm-gray'; }*/
//         if($isFDAapproved == 1) { 
//           $hasFDAapproved =1;
//         $isanticipateApprove = isset($getDueDili->field_anticipate_approval['und'])?$getDueDili->field_anticipate_approval['und'][0]['value']:'';
//         /*if($isanticipateApprove == 0) { $dueDiliStatus = 'scm-yellow'; }  
//           if($isanticipateApprove == '') { $dueDiliStatus = 'scm-gray'; }*/
//         if($isanticipateApprove == 1) { 
//           $hasFDAapproved =2;
//           $isterminateCase = isset($getDueDili->field_terminate_case['und'])?$getDueDili->field_terminate_case['und'][0]['value']:'';
//           /*if($isterminateCase == 0) { $dueDiliStatus = 'scm-yellow'; }  
//             if($isterminateCase == '') { $dueDiliStatus = 'scm-gray'; }*/
//             if($isterminateCase == 2 || $isterminateCase == 1) { 
//               $hasFDAapproved =3;
//             }         
//         }
//         if($isanticipateApprove == 2) {  $hasFDAapproved =3; }
//       }
//         if($isFDAapproved == 2) { $hasFDAapproved =3;  }
      
//       }       
//     }             
//   }
//   else{
//     $TdueDiliStatus = 0;
//   }
//   $TdueDiliStatus = $hasmsupplier+$hasrimpli+$hasFDAapproved;
//   if($TdueDiliStatus == 9){
//     $dueDiliStatus = 'scm-green'; 
//   }else if($TdueDiliStatus < 9 && $TdueDiliStatus !=0){
//     $dueDiliStatus = 'scm-yellow'; 
//   }else if($TdueDiliStatus == 0){
//     $dueDiliStatus = 'scm-gray'; 
//   }else{
//     $dueDiliStatus = 'scm-gray'; 
//   }  
//   return $dueDiliStatus;

// }

// function _get_for_pay_back_status($projectId) {
//   global $company;  
//   $query = db_select('node','n');
//   $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
//   $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_status','csc','csc.entity_id = n.nid');
//   $query->leftjoin('field_data_field_case_reference','caser','caser.field_case_reference_nid = n.nid');
//   //$query->fields('n', array('nid'));
//   //$query->fields('pr',array('field_project_reference_nid'));
//  // $query->fields('csc',array('field_case_status_value'));
//   $query->fields('caser',array('entity_id'));
//   $query->condition('pr.field_project_reference_nid',$projectId,'=');
//   $query->condition('n.type','case_builder','=');
//   $query->condition('om.gid', $company->nid, '=');
//   $query->condition('csc.field_case_status_value','active', '=');
//   $query->condition('caser.bundle','pay_back');
//   $getPayBacknid = $query->execute()->fetchColumn(0);
//   $payBackStatus = '';
//   $TpayBackStatus = '';
//   if(isset($getPayBacknid) && !empty($getPayBacknid) && is_numeric($getPayBacknid)) {
//     $getPayBack = node_load($getPayBacknid);  
//     /*
//      * Check for "Will annual expenses exceed 3 million dollars for this case?" and all its subfields
//      */
//     $has3mildollor =0;
//     $is3MilDollor = isset($getPayBack->field_cost_savings_dollars['und'])?$getPayBack->field_cost_savings_dollars['und'][0]['value']:'';
//     if($is3MilDollor == 2 || $is3MilDollor == 1) { 
//       $has3mildollor =1;
//     }    
//     /*
//      * Check for "Has a UNSPSC commodity code been assigned?" and all its subfields
//      */
//     $hasucommodity =0; 
//     $isUNSPSCCommodity = isset($getPayBack->field_unspsc_commodity['und'])?$getPayBack->field_unspsc_commodity['und'][0]['value']:'';
//     if($isUNSPSCCommodity == 2 || $isUNSPSCCommodity == 1) { 
//       $hasucommodity =1;
//     }
//     /*
//      * Check for "Can the acquisition cost/standardization impact be quantified?" and all its subfields
//      */
//     $hasacqcost =0; 
//     $isAcqCost = isset($getPayBack->field_acquisition_cost['und'])?$getPayBack->field_acquisition_cost['und'][0]['value']:'';
//     if($isAcqCost == 2 || $isAcqCost == 1) { 
//       $hasacqcost =1;
//     }    
//     /*
//      * Check for "Are there revenue/reimbursement implications?" and all its subfields
//      */
//     $hasrreimb =0; 
//     $isRevenueReimb = isset($getPayBack->field_revenue_reimbursement['und'])?$getPayBack->field_revenue_reimbursement['und'][0]['value']:'';
//     if($isRevenueReimb == 2 || $isRevenueReimb == 1) { 
//       $hasrreimb =1;
//     }    
//     /*
//      * Check for "Does every Entity Use it?" and all its subfields
//      */
//     $haseuse =0;
//     $isEntityUse = isset($getPayBack->field_pay_back_use['und'])?$getPayBack->field_pay_back_use['und'][0]['value']:'';
//     if($isEntityUse == 2 || $isEntityUse == 1) { 
//       $haseuse =1;
//     }   
//     /*
//      * Check for "Is this used in more than 1 (one) department?" and all its subfields
//      */
//     $hasmthen =0; 
//     $isMoreThen = isset($getPayBack->field_department_one['und'])?$getPayBack->field_department_one['und'][0]['value']:'';
//     if($isMoreThen == 2 || $isMoreThen == 1) { 
//       $hasmthen =1;
//     }    
//     /*
//      * Check for "Is it used across the continuum of care?" and all its subfields
//      */
//     $hasccare =0;
//     $isContCare = isset($getPayBack->field_continuum_care['und'])?$getPayBack->field_continuum_care['und'][0]['value']:'';
//     if($isContCare == 2 || $isContCare == 1) { 
//       $hasccare =1;
//     }   
//     /*
//      * Check for "Can utilization improvement opportunity be quantified?" and all its subfields
//      */
//     $hasuIpmorve =0;
//     $isUtilIpmorve = isset($getPayBack->field_utilization_improvement['und'])?$getPayBack->field_utilization_improvement['und'][0]['value']:'';
//     if($isUtilIpmorve == 2 || $isUtilIpmorve == 1) { 
//       $hasuIpmorve =1;
//     }      
//   }
//   else{
//     $TpayBackStatus = 0;
//   }
//   $TpayBackStatus = $hasuIpmorve+$hasccare+$hasmthen+$haseuse+$hasrreimb+$hasacqcost+$hasucommodity+$has3mildollor;
//   if($TpayBackStatus == 8){
//     $payBackStatus = 'scm-green'; 
//   }else if($TpayBackStatus < 8 && $TpayBackStatus !=0){
//     $payBackStatus = 'scm-yellow'; 
//   }else if($TpayBackStatus == 0){
//     $payBackStatus = 'scm-gray'; 
//   }else{
//     $payBackStatus = 'scm-gray'; 
//   }
//   return $payBackStatus;
// }

function scmvander_company_autocomplete($string = '') {
  global $company;  
  $matches = array();
  if ($string !='') {
    $query = db_select('node', 'n');
    $query
    ->condition('title', $string.'%', 'LIKE')
  //->condition('status', 1, '=')
  //->condition('n.uid', $user->uid, '=')
  ->condition('type', 'organization', '=')
    ->fields('n', array('title','nid'));
    //->range(0,10);
    $result = $query->execute();
    $matches = array();
    foreach($result as $row) {
      //$matches[$row->title.' ('.$row->nid.')'] = $row->title;
      $matches[$row->title] = $row->title;
    }
  }
  drupal_json_output($matches);
}

function scmvander_autocomplete_callback_submit($form,&$form_state) {
  $form_state['rebuild'] = TRUE;
}
function scmvander_autocomplete_callback($form,&$form_state) {
  return $form['left_case_section']['suppliers_considering_count'];
  // $commands = array();  
  // $triggering_element = $form_state['triggering_element'];
  // $identifer = $triggering_element['#parents'][2];  
  // //dpm($form_state,'form state');
  // if($identifer == 'vendor_name'){
  //   //_get_nid_by_title
  //   $tiggervalue = $triggering_element['#value'];
  //   $tiggername = $triggering_element['#name'];
  //   if(isset($tiggervalue,$tiggername) && !empty($tiggervalue) && !empty($tiggername)){
  //     $nid = _get_nid_by_title($tiggervalue);
  //     if(isset($nid) && !empty($nid) && is_numeric($nid)){
  //       $refernid = $form_state['values']['refercase_nid'];



        
  //       $suppleremaildelta = explode('supplier[',$tiggername);

  //       $supplercount = explode('][vendor_name]',$suppleremaildelta[1]);


  //       $node  = node_load($nid);
  //       //dpm($node, 'node value');
  //       $user = user_load($node->uid);
  //       $vfirst = (isset($user,$user->field_first_name['und']) && !empty($user->field_first_name['und'][0]['value'])?$user->field_first_name['und'][0]['value']:'');
  //       $vlast = (isset($user,$user->field_last_name['und']) && !empty($user->field_last_name['und'][0]['value'])?$user->field_last_name['und'][0]['value']:'');
  //       $vmail = (isset($node,$node->field_company_email['und']) && !empty($node->field_company_email['und'][0]['email'])?$node->field_company_email['und'][0]['email']:'');

  //       $commands[] = ajax_command_invoke("input.".$refernid."_vendor_namenid", 'val',array($nid));
  //       $commands[] = ajax_command_invoke("input.".$refernid."_vendor_firstname", 'val',array($vfirst));
  //       $commands[] = ajax_command_invoke("input.".$refernid."_vendor_lastname", 'val',array($vlast));
  //       $commands[] = ajax_command_invoke("input.".$refernid."_vendor_email", 'val',array($vmail));

  //       //$commands[] = ajax_command_invoke("input.".$refernid."_vender_name_firstname", 'val',array($vfirst));
  //       //$commands[] = ajax_command_invoke("input.".$refernid."_vender_name_lastname", 'val',array($vlast));
  //       //$commands[] = ajax_command_invoke("input.".$refernid."_vender_name_email", 'val',array($vmail));
  //       $commands[] = ajax_command_invoke("input.".$refernid."-vendor-email-value-".$supplercount[0], 'val',array($vmail));

  //       //$commands[] = ajax_command_invoke("input.supplier-count-add-new-row-button", 'trigger',array('mousedown'));
  //     }
  //   }
  // }
  
  // return array('#type' => 'ajax','#commands' => $commands);
}


function _case_manager_case_duplicate($refercase_nid = NULL) {

  if (!empty($refercase_nid)) {
    // This is the case node, we want to duplicate.
    $refercase_nidLoad = node_load($refercase_nid);

    // Cloning a new node.
    $rnew = clone $refercase_nidLoad;
    $rnew->is_new = true;
    $rnew->title = t('Copy @title', array('@title' => $refercase_nidLoad->title));

    $rnew->field_case_status[LANGUAGE_NONE][0]['value'] = 'active';

    unset($rnew->nid, $rnew->vid, $rnew->tnid);
    // Saving the new node.
    node_save($rnew);

    if ($rnew->nid) {
      // We need to make this case active, and all other deactive.

      // For this we need the project_id of the current case, and then get all
      // the cases by that project_id.
      $project_id = $rnew->field_project_reference[LANGUAGE_NONE][0]['nid'];

      // Getting all cases.
      $all_cases = _get_scmcase_nids_by_referpronid($project_id);

      // Making all cases inactive other then the current one.
      foreach ($all_cases as $delta => $nids) {
        if ($nids != $rnew->nid) {
          $otherCaseNode = node_load($nids);
          $otherCaseNode->field_case_status[LANGUAGE_NONE][0]['value'] = '';

          field_attach_presave('node', $otherCaseNode);
          field_attach_update('node', $otherCaseNode);
          entity_get_controller('node')->resetCache(array($otherCaseNode->nid));
        }
      }

      // If a new case is saved, then we need to make a node of each of its
      // sub tabs, like buy-change, patient-care, etc.
      $q = db_select('field_data_field_case_reference','caser');
      $q->fields('caser',array('entity_id','bundle'));
      $q->condition('caser.field_case_reference_nid',$refercase_nid);

      $nodenidbyrefer = $q->execute()->fetchAll();

      if (!empty($nodenidbyrefer)) {
        foreach ($nodenidbyrefer as $rkey => $rvalue) {
          $ccase = node_load($rvalue->entity_id);
          $cnew = clone $ccase;
          $cnew->is_new = true;
          $cnew->title = t('Copy @title', array('@title' => $ccase->title));
          $cnew->field_case_reference[LANGUAGE_NONE][0]['nid'] = $rnew->nid;

          $cnew->field_case_status[LANGUAGE_NONE][0]['value'] = '';
          unset($cnew->nid, $cnew->vid, $cnew->tnid);
          node_save($cnew);
        }
      }
    }
  }
}

/**
 * Helper function to update chat data.
 * @param $uid
 *   The UID of the current user, whether Requestee or Requestor.
 * @param $entity
 *   The Entity choosen, by which we shall get material managers.
 * @param $category
 *   The category choosen, by which we shall get supply chain leads.
 * @param $nid
 *   The nid of the request generated.
 *
 * The main motif of the SCM chat is that it should be integrated with current
 * user messaging.
 * The chats initiated on a request depends on several factors.
 * If the request is generated by a Requestor, then a new chat for the current
 * request shall be initiated with each and every material manager and supply
 * chain lead. And with this, a chat will be initiated between each and every
 * Material manager and supply chain lead too.
 * For ex - 
 *  Suppose, A = Requestor, B = Material manager, and C & D = Supply chain lead.
 *  So The chats initiated would be in this format.
 *  1. Requestor == A + B; A + C; A + D.
 *  2. Material Manager == B + C; B + D.
 *   If each of the material manager has a chat with each of the supply lead
 *   then automatically each of the supply lead will have a chat with each of
 *   the material manager.
 *
 */
function _update_scm_chat_data($node = NULL) {
  if (!is_object($node) || empty($node->nid)) {
    // If we do not get a node, Abort!
    return;
  }

  $uid = !empty($node->field_requestordb_ref[LANGUAGE_NONE][0]['value']) ? $node->field_requestordb_ref[LANGUAGE_NONE][0]['value'] : NULL;

  // The $uid is now the table id, getting userid on this basis.
  $userdata = get_scm_user_database_data($uid);

  if (!empty($userdata->UUID)) {
    $uid = $userdata->UUID;
  }
  else {
    $uid = NULL;
  }

  $entity = !empty($node->field_materials_manager_ref[LANGUAGE_NONE][0]['value']) ? $node->field_materials_manager_ref[LANGUAGE_NONE][0]['value'] : NULL;
  $category = !empty($node->field_supply_chain_lead_ref[LANGUAGE_NONE][0]['value']) ? $node->field_supply_chain_lead_ref[LANGUAGE_NONE][0]['value'] : NULL;
  $nid = !empty($node->nid) ? $node->nid : NULL;

  if (empty($uid) || empty($entity) || empty($category) || empty($nid)) {
    // If we do not have any of the four params, then abort.
    return;
  }

  $account = user_load($uid);

  // If no user found in system, Abort.
  if (empty($account->uid)) {
    return;
  }

  // Checking if current user is requestor or not.
  $is_user_requestor = !($account->status);

  // Trying to get material managers.
  $material_managers = array();

  if (!empty($entity)) {
    $material_managers = explode('|', $entity);
  }
  

  // Trying to get supply chain leads.
  $supply_chain_leads = array();

  if (!empty($category)) {
    $supply_chain_leads = explode('|', $category);
  }

  // If neither we have material managers nor we have supply chain leads, then
  // Aborting.
  if (empty($material_managers) && empty($supply_chain_leads)) {
    return;
  }

  $user_map_to_these = array();
  $user_map_to_these = array_unique(array_merge($material_managers, $supply_chain_leads));
  // First of all updating the requestors data.
  if (!empty($user_map_to_these)) {
    foreach ($user_map_to_these as $receiver) {
      // Function defined in m6connect_vendor.module
      $user_mapping = _get_mapping_id_service_messaging('scm', $account->uid, $receiver, $nid, TRUE);
      if ($user_mapping) {
        _update_mapping_id_user_messaging($user_mapping, $account->uid, $receiver);
      }
    }

    // We need to generate a group chat too, between all the users, whose
    // initiator shall be the requestor.
    $group_users = $user_map_to_these;
    // We are saving users entry by imploding these with a comma, so need to
    // have consistancy for users, no matter what order they are in array uptil
    // here, we are sorting these here.
    sort($group_users);
    $user_mapping = _get_mapping_id_service_messaging('scm', $account->uid, $group_users, $nid, TRUE);
    if ($user_mapping) {
      _update_mapping_id_user_messaging($user_mapping, $account->uid, $group_users);
    }
  }

  // Now mapping material managers with each other.
  if (!empty($material_managers) && count($material_managers) > 1) {
    // We can only map more than one material managers.
    $map_material_managers = $material_managers;
    $first_mm = array_shift($map_material_managers);
    foreach ($map_material_managers as $mm_uid) {
      $user_mapping = _get_mapping_id_service_messaging('scm', $first_mm, $mm_uid, $nid, TRUE);
      if ($user_mapping) {
        _update_mapping_id_user_messaging($user_mapping, $first_mm, $mm_uid);
      }
    }
  }

  // Now mapping supply chain leads with each other.
  if (!empty($supply_chain_leads) && count($supply_chain_leads) > 1) {
    // We can only map more than one material managers.
    $map_supply_chain_leads = $supply_chain_leads;
    $first_scl = array_shift($map_supply_chain_leads);
    foreach ($map_supply_chain_leads as $scl_uid) {
      $user_mapping = _get_mapping_id_service_messaging('scm', $first_scl, $scl_uid, $nid, TRUE);
      if ($user_mapping) {
        _update_mapping_id_user_messaging($user_mapping, $first_scl, $scl_uid);
      }
    }
  }

  // Now mapping each material manager with supply chain lead.
  // If we do this, then all supply chain leads will be automatically.
  if (!empty($material_managers)) {
    foreach ($material_managers as $mm_uid) {
      if (!empty($supply_chain_leads)) {
        foreach ($supply_chain_leads as $scl_uid) {
          $user_mapping = _get_mapping_id_service_messaging('scm', $mm_uid, $scl_uid, $nid, TRUE);
          if ($user_mapping) {
            _update_mapping_id_user_messaging($user_mapping, $mm_uid, $scl_uid);
          }
        }
      }
    }
  }
}


function get_scm_my_request_table_data($archive = 0,$showall='') {
  //dpm($showall.'$showall');
  global $user;
  $rows = array();
  $header = array(
    array('data'=>'SCR Number','class'=>array('text-center')),
    array('data'=>'Need by Date','class'=>array('text-center')),
    array('data'=>'Request Type','class'=>array('text-center')),
    array('data'=>'Description','class'=>array('text-center')),
    array('data'=>'Requestor','class'=>array('text-center')), 
    array('data'=>'Category','class'=>array('text-center')),
    array('data'=>'Supply Chain Lead','class'=>array('text-center')),
    array('data'=>'Status','class'=>array('text-center')),
    array('data'=>'Action','class'=>array('text-center')),
  );
  //$getMyReqNodes = _getting_table_data_call('scm_requests');
  $getMyReqNodeslist = _getting_table_data_call_request('scm_requests', $archive);

  if (empty($_SESSION['login-mail'])) {
    foreach ($getMyReqNodeslist as $valueskey => $nodeids) {
      $requestNodesload = node_load($valueskey);
      if (in_array($user->uid, explode("|",$requestNodesload->field_supply_chain_lead_ref['und'][0]['value'])) || in_array($user->uid, explode("|",$requestNodesload->field_materials_manager_ref['und'][0]['value']))) {
        $getMyReqNodes[$valueskey] = $nodeids;
      }
    }
  }

  if (isset($_SESSION['login-mail']) && !empty($_SESSION['login-mail'])) {
    $getMyReqNodes = $getMyReqNodeslist;
  }

  if (_is_user_company_admin()) {
    $getMyReqNodes = $getMyReqNodeslist;
  }

  if (isset($showall) && $showall == 1) {
    $getMyReqNodes = $getMyReqNodeslist;
  }

  foreach($getMyReqNodes as $values => $ids) {
    $requestNodes = node_load($values); 
    $maincat = scm_category_load($requestNodes->field_category['und'][0]['value']);
    $request_type = '';
    $request_type_imp = $requestNodes->field_request_type['und'][0]['value'];
    $request_type_exploded = explode('-', $request_type_imp);
    $request_type = $request_type_exploded[0];
    if (!empty($request_type)) {
      $request_type = _get_request_type_by_id($request_type);
      if (!empty($request_type)) {
        $request_type = ucwords($request_type);
      }
    }

    $maincat_scl_name = '';
    if (!empty($maincat->scl)) {
      $maincat_scl_name = _get_user_full_name($maincat->scl);
    }

    if(arg(1)=='archive'){
      $actionstatus = 'publishnode';
    } else {
      $actionstatus = 'unpublishnode';
    }
    if($archive==1){
      $actionstatus = 'publishnode';
    }
    $requestorname='';
    if(isset($requestNodes->field_requestordb_ref['und']) && !empty($requestNodes->field_requestordb_ref['und'])){
      $usersdb = get_scm_user_database_data($requestNodes->field_requestordb_ref['und'][0]['value']);
      $requestorname = $usersdb->fristname.' '.$usersdb->lastname;
    }
    $rows[] = array(
        'data' => array(
        array('data' => l('<span class="commitment-nu-cust">'.$requestNodes->title.'</span>', 'edit/'.$values.'/details', array('html' => TRUE, 'external' => TRUE,'attributes' => array('dataaction'=>'triggercall','class' => 'edit_scm_requests_detail', 'for' => $values))),'class' => array('text-left')),
        // array('data' => $requestNodes->field_request_date['und'][0]['value'],'class' => array('text-center')),
         array('data' => date('m/d/Y', $requestNodes->created),'class' => array('text-center')),
        array('data' => $request_type,'class' => array('text-center')),
        array('data' => $requestNodes->body['und'][0]['value'],'class' => array('text-left')),
        // array('data' => $requestNodes->field_requester_to['und'][0]['value'].'<br>'.$requestNodes->field_requester_from['und'][0]['value'],'class' => array('text-center')),
        array('data' => $requestorname,'class' => array('text-center')),
        array('data' => ucwords($maincat->title) . '<br>' . ucwords($subcat->title),'class' => array('text-center')),
        array('data' => $maincat_scl_name,'class' => array('text-center')),
        array('data' => ucwords($requestNodes->field_project_status['und'][0]['value']),'class' => array('text-center')),
        array('data' => _get_action_button($values, $actionstatus),'class' => array('text-center')),
      ),
    );
  }

  $output = theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Request created yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-request-table','table-hover','text-center','m6init-datatable')))); 
  return $output;
}

function get_single_catbyid($pvalue){
    return array();
    $getquery = db_select('m6connect_scm_settings_categories', 'n');
    $getquery->fields('n');
    $getquery->condition('n.id', $pvalue, '=');
    $getresult = $getquery->execute()->fetchObject();
    return $getresult;
}

function _get_request_type_by_id($request_type) {
  return db_select('m6connect_scm_request_type_setting', 'r')
    ->fields('r', array('title'))
    ->condition('id', $request_type)
    ->execute()
    ->fetchField();
}


function _getting_table_data_call_request($type, $archive) {
  global $user, $company;

  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));

  if (isset($_SESSION['login-mail']) && !empty($_SESSION['login-mail'])) {
    $usersdb = get_scm_user_database_by_email($_SESSION['login-mail']);
    $company = node_load($usersdb->companyID);
    $query->join('field_data_field_requestordb_ref', 'reqref', 'n.nid = reqref.entity_id');
    $query->condition('reqref.field_requestordb_ref_value', $usersdb->id, '=');
  }

  $query->join('field_data_field_project_status', 'reqststus', 'n.nid = reqststus.entity_id');
 
  if (arg(1)== 'archive' || $archive) {
    $query->condition('n.status', 0, '=');
  }
  else {
    $query->condition('n.status', 1, '=');
  }

  $query->fields('n', array('nid', 'title'));
  $query->condition('n.type', $type, '=');

  $query->condition('om.gid', $company->nid, '=');

  $query->orderBy('n.nid', 'DESC');

  $getNodesNids = $query->execute()->fetchAllKeyed(0,1);

  return $getNodesNids;
}

function _updating_case_status_callback($form, &$form_state) {
  $commands = array();
  $formVal = $form_state['values'];
  if($formVal['case_options'] == 'active') {
    if($formVal['form_id'] == 'casemanager_buy_change_left_form' || $formVal['form_id'] == 'casemanager_patient_care_left_form' || $formVal['form_id'] == 'casemanager_preference_left_form' ||  $formVal['form_id'] == 'casemanager_resources_left_form' || $formVal['form_id'] == 'casemanager_due_diligence_left_form' || $formVal['form_id'] == 'casemanager_payback_left_form') {
    $caseId = $formVal['refercase_nid'];
  }
  else {
    $caseId = $formVal['case_nid']; 
  } 
  $caseNode = node_load($caseId); 
    /*
     * Get project id
     */
    $projectId = $caseNode->field_project_reference['und'][0]['nid'];
    $getAllCase = _get_scmcase_nids_by_referpronid($projectId);  
  //pre($getAllCase, 1);
    foreach($getAllCase as $delta => $nids) {
      if($nids != $caseId) {
        $otherCaseNode = node_load($nids);    
        $otherCaseNode->field_case_status['und'][0]['value'] = '';    
        field_attach_presave('node', $otherCaseNode);
        field_attach_update('node', $otherCaseNode);
        entity_get_controller('node')->resetCache(array($otherCaseNode->nid));

        $commands[] = ajax_command_invoke(".case-continer-".$nids, 'removeClass',array('case-active'));  
        $commands[] = ajax_command_invoke(".case-continer-".$nids, 'addClass',array('blur-cases'));  
      }
    }
    $caseNode->field_case_status['und'][0]['value'] = 'active';    
    field_attach_presave('node', $caseNode);
    field_attach_update('node', $caseNode);
    entity_get_controller('node')->resetCache(array($caseNode->nid));

    $commands[] = ajax_command_invoke(".case-continer-".$caseId, 'removeClass',array('blur-cases'));  
    $commands[] = ajax_command_invoke(".case-continer-".$caseId, 'addClass',array('case-active'));  
    $commands[] = array('command' => 'case_status_blur');
  }
  else if($formVal['case_options'] == 'deactive') {
    if (!empty($formVal['case_nid'])) {
      $caseId = $formVal['case_nid'];
    }
    else {
      $caseId = $formVal['refercase_nid'];
    }
    $caseNode = node_load($caseId);    
    $caseNode->field_case_status['und'][0]['value'] = '';    
    field_attach_presave('node', $caseNode);
    field_attach_update('node', $caseNode);
    entity_get_controller('node')->resetCache(array($caseNode->nid));

    $commands[] = ajax_command_invoke(".case-continer-".$caseId, 'removeClass',array('case-active'));
    $commands[] = ajax_command_invoke(".caseouter", 'removeClass',array('blur-cases'));  
  }

  $commands[] = array('command' => 'reloadPage');

  return array('#type' => 'ajax', '#commands' => $commands);
}

/*
 * Get active case by project
 */

function _get_active_case_by_project($projectId) {
  global $company;  
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
  $query->leftjoin('field_data_field_case_status','csc','csc.entity_id = n.nid');
  $query->fields('n', array('nid'));
  $query->fields('csc',array('field_case_status_value'));
  $query->condition('pr.field_project_reference_nid', $projectId,'=');
  $query->condition('n.type','case_builder','=');
  $query->condition('om.gid', $company->nid, '=');
  $query->condition('csc.field_case_status_value','active', '=');
  $activeCaseNid = $query->execute()->fetchColumn(0);
  return $activeCaseNid;
}

function userdatabase_autocomplete($string = ''){
  global $company; 
  $matches = array();
  if(!empty($string)){
    $query = db_select('m6connect_scm_settings_user_database', 'dbu');
    $query->fields('dbu');
    $query->condition('dbu.companyID', $company->nid, '=');
    $userList = $query->execute()->fetchAll();
    if(!empty($userList)) {
      foreach($userList as $vall){
        if (preg_match("/^{$string}/i",$vall->fristname.' '.$vall->lastname)==1) {
          $matches[$vall->id] = $vall->fristname.' '.$vall->lastname; 
        }
      }
    }
  }
  drupal_json_output($matches);
}

/**
 * Menu item for scm-chat-invite/%ctools_js
 */
function scm_chat_invite($scm_reference, $ajax = NULL) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $title = t('Invite your company users to chat.');

    $form_state['ajax'] = true;
    $form_state['scm_reference'] = $scm_reference;
    $form_state['title'] = '<h4 class="asset-popup-title-custom">' . $title . '</h4>';

    $output = ctools_modal_form_wrapper('scm_chat_invite_form', $form_state);

    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    print ajax_render($output);
    drupal_exit();
  }
  return drupal_get_form('scm_chat_invite_form', $scm_reference);
}

function scm_chat_invite_form($form, &$form_state, $scm_reference = NULL) {
  if (!empty($form_state['scm_reference']) && empty($scm_reference)) {
    $scm_reference = $form_state['scm_reference'];
  }
  if (empty($form_stateq['scm_reference']) && !empty($scm_reference)) {
    $form_state['scm_reference'] = $scm_reference;
  }

  if (empty($_SESSION['login-mail'])) {
    global $user, $company;
    $account = user_load($user->uid);
  }

  if (!empty($_SESSION['login-mail'])) {
    // Getting SCM user's account and company objects.
    $userdata = get_scm_user_database_by_email($_SESSION['login-mail']);
    $account = user_load($userdata->UUID);
    $company = node_load($userdata->companyID);
  }

  $form_state['user_company'] = $company;
  $form_state['user_account'] = $account;

  // If a user wants to invite users of his company, then we need to get a list
  // of all users of his company, and filter out the users whom with the user
  // is already chatting.

  // Getting all users of user's company.
  $all_users = _get_user_mappping_by_group_company_nid($company->nid);
  // Filtering out current user.
  $all_users = array_diff_key($all_users, array($account->uid => $account->uid));
  // $all_users_flip = array_flip($all_users);

  // // Getting users who are already in chat with the user.
  // $engaged_users = _get_engaged_users_by_nid_scm($scm_reference, $account);

  // // Filtering out the eligible users.
  // $eligible_users_flip = array_diff($all_users_flip, $engaged_users);
  // $eligible_users = array_flip($eligible_users_flip);

  if (empty($all_users)) {
    $form['no_eligible_users'] = array(
      '#markup' => t('Currently there are no users to chat with. Either you are already chatting with your company users, or there are no users in your company!') . '<br/>',
    );
  }
  else {
    $form['chat_users'] = array(
      '#type'        => 'select',
      '#title'       => t('Please select users to chat with.'),
      '#description' => t('You can select multiple users at once to start a group chat.'),
      '#options'     => $all_users,
      '#select2'     => array(
        'placeholder'             => 'Type names to filter...',
        'allowClear'              => TRUE,
        'minimumResultsForSearch' => '5',
      ),
      '#multiple' => '#multiple',
      '#attributes'  => array('class' => array('margin-bottom-10')),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add'),
    );
  }

  if (!empty($form_state['ajax']) && $form_state['ajax']) {
    $form['cancel'] = array(
      '#type' => 'markup',
      '#markup' => '<a href="javascript:void(0);" class="ob-msg-popup-close-link" onclick="jQuery(&quot;span.popups-close&quot;).click(); return false;"><input type="button" class="btn cancel-button" value="Close"></a>',
    );
  }

  return $form;
}

/**
 * Submit handler for scm_chat_invite_form
 */
function scm_chat_invite_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['chat_users'])) {
    // Collective necessary info.
    $account = $form_state['user_account'];
    $nid = $form_state['scm_reference'];

    $user_map_to_these = $form_state['values']['chat_users'];
    if (count($user_map_to_these) == 1) {
      foreach ($user_map_to_these as $receiver) {
        // Function defined in m6connect_vendor.module
        $user_mapping = _get_mapping_id_service_messaging('scm', $account->uid, $receiver, $nid, TRUE);
        if ($user_mapping) {
          _update_mapping_id_user_messaging($user_mapping, $account->uid, $receiver);
        }
      }
    }

    if (count($user_map_to_these) > 1) {

      // We need to generate a group chat, between all the users, whose
      // initiator shall be the requestor.
      $group_users = $user_map_to_these;
      // We are saving users entry by imploding these with a comma, so need to
      // have consistancy for users, no matter what order they are in array uptil
      // here, we are sorting these here.
      sort($group_users);
      $user_mapping = _get_mapping_id_service_messaging('scm', $account->uid, $group_users, $nid, TRUE);
      if ($user_mapping) {
        _update_mapping_id_user_messaging($user_mapping, $account->uid, $group_users);
      }
    }

    drupal_set_message(t('User(s) added successfully.'), 'status', FALSE);
    if (!isset($_SESSION['scr_request'])) {
      // We unset this variable in user_messaging_callback, so setting back here
      // again.
      $_SESSION['scr_request'] = $nid;
    }
    // Need to update the chat window again, so new users can be seen.
    $form_state['ajax_commands'][] = ajax_command_html('.scm_chatting_container-main', render(user_messaging_callback()));
    $form_state['ajax_commands'][] = array('command' => 'emojinetexteditorscm');
  }


  $form_state['ajax_commands'][] = ajax_command_remove('#messages-custom');
  $form_state['ajax_commands'][] = ajax_command_prepend('#content', '<div id="messages-custom">' . theme('status_messages') . '</div>');
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
}
// $mapping_id = array('1a4a04a5a5271e5318259a4e9ff84ce6', '73169ae00a460401d675ac9c3f9c0493', '957a1dcfd1eed57ed5a2fda877da8f44', '96568f221b43c26f985adb1f9d1ce835', '248d19c22055beb3ee968c92b288dae3');
// db_delete('m6connect_messaging_connect')
//   ->condition('mapping_id', $mapping_id)
//   ->execute();
// db_delete('m6connect_messaging_connect_message')
//   ->condition('mapping_id', $mapping_id)
//   ->execute();
// db_delete('m6connect_messaging_connect_users')
//   ->condition('mapping_id', $mapping_id)
//   ->execute();


/**
 * Helper function to get engaged users in scm chat.
 */
function _get_engaged_users_by_nid_scm($scm_reference, $account) {
  $query = db_select('service_messaging', 's');
  $query->fields('s', array('receiver'));
  $query->condition('reference', $scm_reference);
  $query->condition('sender', $account->uid);
  $query->condition('service', 'scm');
  $results = $query->execute()->fetchAll();

  if (empty($results)) {
    return array();
  }

  $return = array();
  foreach ($results as $result) {
    if (is_numeric($result->receiver)) {
      // We only remove those users, with whom current user has dedicated chat
      // and ignore group chats.
      $return[] = $result->receiver;
    }
  }

  return $return;
}

/*
 *  Fetching scorecard information only active
 */
function _fetching_scorecard_information_active($type) {
  global $company;  
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));  
  if($type == 'scm_scorecard') {
    $query->join('field_data_field_scorecard_status','si','si.entity_id = n.nid');
    $query->condition('si.field_scorecard_status_value','Active','=');
  }
  $query->fields('n', array('nid'));
  $query->condition('n.type',$type,'=');  
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getNodesNids = $query->execute()->fetchField();
  return $getNodesNids;
}

/*
 *  Fetching All scorecard information
 */
function _fetching_scorecard_information($type) {  
  global $company;  
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));  
  $query->fields('n', array('nid'));
  $query->fields('n', array('nid'));  
  $query->condition('n.type',$type,'=');  
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getNodesNids = $query->execute()->fetchCol();  
  return $getNodesNids;
}

function _fetching_scorecard_information_evaluate($type,$cnid) {  
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_scorecard_name', 'scn','scn.entity_id = n.nid');
  $query->fields('n', array('nid'));
  $query->fields('scn', array('field_scorecard_name_value')); 
  $query->condition('n.type',$type,'=');  
  $query->condition('om.gid', $cnid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getNodesNids = $query->execute()->fetchAllKeyed(0,1);
  return $getNodesNids;
}

function _load_project_list_with_number() { 
  global $company;
  $projectInfoArr = array();

  // Getting SCM Projects.
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_m6_service_type','scm_type','scm_type.entity_id = n.nid');
  $query->join('field_data_field_project_mgmt_number','proNo','proNo.entity_id = n.nid');
  $query->condition('scm_type.field_m6_service_type_value','scm','=');
  $query->fields('n', array('nid','title'));
  $query->fields('proNo', array('field_project_mgmt_number_value'));
  $query->condition('n.type','project_management','=');
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getProjectData = $query->execute()->fetchAll();

  foreach($getProjectData as $proKey => $proData) {
    //$projectInfoArr[$proData->nid] = $proData->title . ' | ' . $proData->field_project_mgmt_number_value;
    $projectInfoArr[$proData->nid] = $proData->title;
  }

  // Getting CPM Projects.
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->leftJoin('field_data_field_m6_service_type', 'st', 'st.entity_id=n.nid');
  $query->join('field_data_field_project_mgmt_number','proNo','proNo.entity_id = n.nid');
  $query->fields('n', array('nid','title'));
  $query->fields('proNo', array('field_project_mgmt_number_value'));
  $query->condition(db_or()->condition('st.field_m6_service_type_value' ,'scm', '!=')->isNull('st.field_m6_service_type_value'));
  $query->condition('n.type','project_management','=');
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getProjectData = $query->execute()->fetchAll();

  foreach($getProjectData as $proKey => $proData) {
    //$projectInfoArr[$proData->nid] = $proData->title . ' | ' . $proData->field_project_mgmt_number_value;
    $projectInfoArr[$proData->nid] = $proData->title;
  }

  // Getting Project Postings Projects.
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_number','proNo','proNo.entity_id = n.nid');
  $query->fields('n', array('nid','title'));
  $query->fields('proNo', array('field_project_number_value'));
  $query->condition('n.type','project','=');
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getProjectData = $query->execute()->fetchAll();
  foreach($getProjectData as $proKey => $proData) {
    //$projectInfoArr[$proData->nid] = $proData->title . ' | ' . $proData->field_project_number_value;
    $projectInfoArr[$proData->nid] = $proData->title;
  }

  return array_map('ucwords', $projectInfoArr);
}

function _load_rfp_list_with_number() { 
  global $company;
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_reference_number','rno','rno.entity_id = n.nid');
  $query->fields('n', array('nid','title'));
  $query->fields('rno', array('field_reference_number_value'));
  $query->condition('n.type','rfp','=');
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getRFPData = $query->execute()->fetchAll();
  $rfpArr = array();
  foreach($getRFPData as $rfpKey => $rfpData) {
    $rfpArr[$rfpData->nid] = $rfpData->title . ' | ' . $rfpData->field_reference_number_value;
  }
  return array_map('ucwords', $rfpArr);
}

function getcategory_autocomplete($string = ''){
  global $company;  
  $matches = array();
  if(!empty($string)){
    $categoryListing = array(); 
    /*
     * Get category data by matching critaria
     */
    $query = db_select('m6connect_scm_category_setting','cat');
    $query->fields('cat', array('title'));
    $query->condition('cat.type','scorecard','=');
    $categoryListing = $query->execute()->fetchCol();
  
    $matchedOwner = preg_grep("/^{$string}/i",array_values($categoryListing));
    foreach($matchedOwner as $index => $userVal){
      $matches[$userVal] = $userVal; 
    }
  }
  drupal_json_output($matches);
}

function scm_question_builder_setting_entity(){
  $entity_nids = _getting_table_data_call('scm_setting_location_entity');
  return $entity_nids;
}

function _get_type_of_node($nid = '') {
  if (empty($nid)) {
    return '';
  }

 return db_select('node', 'n')
    ->fields('n', array('type'))
    ->condition('nid', $nid)
    ->execute()
    ->fetchField();
}

/**
 * Helper function to get all categories by company.
 */
function _get_all_categories_by_company($nid = NULL) {
  if (empty($nid)) {
    return array();
  }

  $results = db_select('field_data_field_category', 'c')
    ->fields('c')
    ->condition('entity_id', $nid)
    ->condition('bundle', 'organization')
    ->execute()
    ->fetchAll();
  return $results;
}

/**
 * Helper function to get all products by vendor.
 */
function _get_all_products_by_vendor($vendor_nid = NULL, $status = 1) {
  if (empty($vendor_nid)) {
    return array();
  }
  global $company;
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));

  // Joining reference table.
  $query->join('field_data_field_manufacture_reference','mr','mr.entity_id = n.nid');
  $query->condition('mr.field_manufacture_reference_nid', $vendor_nid);

  $query->fields('n', array('nid'));
  $query->condition('n.type', 'scorecard_products');
  $query->condition('n.status', $status);
  // $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.created', 'DESC');

  $results = $query->execute()->fetchCol();

  return $results;
}

/**
 * Helper function to get all products by scorecard reference.
 */
function _get_all_products_by_scorecard($scorecard_nid = NULL, $status = FALSE) {
  if (empty($scorecard_nid)) {
    return array();
  }
  global $company;

  $query = db_select('scorecard_references', 'r');
    $query->fields('r', array('product_nid'));
    $query->condition('scorecard_nid', $scorecard_nid);
    if ($status !== FALSE) {
      $query->condition(db_or()->condition('status', 1)->isNull('status'));
    }
    $query->orderBy('created', 'DESC');

  $results = $query->execute()->fetchCol();

  return $results;
}

/**
 * Helper function to get all companies of products by scorecard.
 */
function _get_all_products_companies_by_scorecard($scorecard_nid = NULL, $status = FALSE) {
  if (empty($scorecard_nid)) {
    return array();
  }

  // Getting all products of the current scorecard.
  $all_products = _get_all_products_by_scorecard($scorecard_nid, $status);

  if (empty($all_products)) {
    return array();
  }

  $q = db_select('field_data_field_manufacture_reference', 'r')
    ->fields('r', array('field_manufacture_reference_nid'))
    ->condition('entity_id', $all_products)
    ->execute()
    ->fetchAllAssoc('field_manufacture_reference_nid');

  if (empty($q)) {
    return array();
  }

  return array_keys($q);
}

/**
 * Helper function to get Company products content for company
 * profile page.
 */
function _get_company_products_content($node) {
  // We need to get all categories and products and display all of these in
  // table. (Only View).

  // Getting all products.
  $products = _get_all_products_by_vendor($node->nid);

  // Getting all categories.
  $categories = _get_all_categories_by_company($node->nid);

  $output = '';

  // Preparing categories table first.
  $output .= '<h4 style="font-size: 18px;">Categories</h4>';

  $header = array(
    'id'        => t('Id'),
    'name'     => t('Name'),
  );

  $rows = array();
  $i = 1;
  foreach ($categories as $category) {
    $rows[] = array(
      'data' => array(
        array('data' => $i . '.'),
        array('data' => $category->field_category_value),
      ),
    );

    $i++;
  }

  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes'=> array('class'=> array('table','table-hover','m6connect-custom-table','m6connect-table-border', 'm6init-datatable', 'org-cat-tables', 'm6init-datatable-search-paginate')), 'empty' => t('No Categories created yet!'), 'sticky' => FALSE));

  // Preparing products table.
  $output .= '<br/><br/><h4 style="font-size: 18px;">Products</h4>';

  $header = array(
    'image'               => t('Image'),
    'company_category'    => t('Company Category'),
    'm6_product_category' => t('M6 Product Category'),
    'product_number'      => t('Product Number'),
    'catalogue_number'    => t('Catalogue Number'),
    'sku_number'          => t('SKU Number'),
    'description'         => t('Description'),
    'url'                 => t('URL'),
    'created_by'          => t('Created By'),
    'created'             => t('Created'),
  );

  $rows = array();

  foreach ($products as $product_nid) {
    $product = node_load($product_nid);

    $image = $catalogue_number = $sku_number = $url = 'N.A.';

    // Preparing Image.
    if (!empty($product->field_attachments[LANGUAGE_NONE][0]['uri'])) {
      $image_uri = $product->field_attachments[LANGUAGE_NONE][0]['uri'];
      $full_img_url = file_create_url($image_uri);
      $img_url = image_style_url('pic_40x40', $image_uri);
      $image = '<img src="' . $img_url . '" />';

      $image = l($image, $full_img_url, array('html' => TRUE));
    }

    // Catalogue Number.
    if (!empty($product->field_catalog_number_product[LANGUAGE_NONE][0]['value'])) {
      $catalogue_number = $product->field_catalog_number_product[LANGUAGE_NONE][0]['value'];
    }

    // SKU Number.
    if (!empty($product->field_sku_number[LANGUAGE_NONE][0]['value'])) {
      $sku_number = $product->field_sku_number[LANGUAGE_NONE][0]['value'];
    }

    // URL.
    if (!empty($product->field_product_url[LANGUAGE_NONE][0]['value'])) {
      $url = $product->field_product_url[LANGUAGE_NONE][0]['value'];
      $url = l($url, $url, array('absolute' => TRUE, 'external' => TRUE));
    }

    // Company Category.
    $company_categories = array();
    foreach ($product->field_category['und'] as $key => $value) {
      $company_categories[] = $value['value'];
    }

    // M6 Product Category.
    $m6_cats = array();
    foreach ($product->field_m6_product_category['und'] as $key => $value) {
      $tid = $value['tid'];
      $term = taxonomy_term_load($tid);
      $m6_cats[] = $term->name;
    }

    // Description
    $description = '';
    if (!empty($product->field_description['und'][0]['value'])) {
      $description = $product->field_description['und'][0]['value'];
    }

    // Created By.
    $uid = $product->uid;
    $created_by = l(_get_user_full_name($uid), 'user/' . $uid);

    $rows[] = array(
      'data' => array(
        array('data' => $image),
        array('data' => implode(', ', $company_categories)),
        array('data' => implode(', ', $m6_cats)),
        array('data' => $product->title),
        array('data' => $catalogue_number),
        array('data' => $sku_number),
        array('data' => $description),
        array('data' => $url),
        array('data' => $created_by),
        array('data' => t('@interval ago.', array('@interval' => format_interval(REQUEST_TIME - $product->created)))),
      ),
    );
  }

  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes'=> array('class'=> array('table','table-hover','m6connect-custom-table','m6connect-table-border', 'm6init-datatable')), 'empty' => t('No Products created yet!'), 'sticky' => FALSE));

  return $output;
}

/**
 * Implements hook_node_delete()
 */
function m6connect_scm_node_delete($node) {
  if ($node->type == 'scorecard_products') {
    // Deleting scorecard products references from our custom table.
    db_delete('scorecard_references')
      ->condition('product_nid', $node->nid)
      ->execute();
  }
}

function scm_scorecard_category_setting(){
  global $company;
  $output = '';
  $query = db_select('m6connect_scm_category_setting','cat');
  $query->fields('cat', array('id','title'));
  $query->condition('cat.type','scorecard','=');
  $query->condition('cat.nid',$company->nid,'=');
  $output = $query->execute()->fetchAllKeyed(0,1);
  return $output;
}

/**
 * Helper function to get all M6 Product Categories.
 */
function _get_m6_product_categories() {
  // Getting all terms for Vocab ID 36.
  // Saving statically.
  $categories = &drupal_static(__FUNCTION__);

  if (!isset($categories)) {
    // If this function is being called for the first time after a reset,
    // query the database and execute any other code needed to retrieve
    // information about the categories.

    $terms = entity_load('taxonomy_term', FALSE, array('vid' => 36));

    $categories = array();
    foreach ($terms as $key => $value) {
      $categories[$key] = $value->name;
    }

  }

  return $categories;
}

/**
 * Helper function to get all product categories (M6 Product Category + Company
 * Product Categories)
 */
function _get_all_product_categories_for_listing() {
  $return = _get_m6_product_categories();

  $query = db_select('field_data_field_category', 'c');
  $query->distinct();
  $query->fields('c', array('field_category_value'));
  $query->condition('bundle', 'organization');
  $results = $query->execute()->fetchAll();

  if (!empty($results)) {
    foreach ($results as $result) {
      $prod_cats[$result->field_category_value] = $result->field_category_value;
    }

    $return = $return + $prod_cats;
  }

  $return = array_combine(array_map(function($k){ return 'cat__'.$k; }, array_keys($return)), $return
  );

  return $return;
}

/**
 * Helper function to get products by category and type.
 */
function _get_products_by_category_type($category = NULL, $type = 'M6') {
  if (empty($category)) {
    return array();
  }

  $result = array();

  if ($type == 'M6') {
    $query = db_select('field_data_field_m6_product_category', 'c');
    $query->join('node', 'n', 'c.entity_id=n.nid');
    $query->fields('c', array('entity_id'));
    $query->condition('n.status', 1);
    $query->condition('c.field_m6_product_category_tid', $category);
    $query->condition('c.bundle', 'scorecard_products');

    $records = $query->execute()->fetchAll();

    if (!empty($records)) {
      foreach ($records as $key => $value) {
        $result[] = $value->entity_id;
      }
    }
  }

  if ($type == 'company') {
    $query = db_select('field_data_field_category', 'c');
    $query->join('node', 'n', 'c.entity_id=n.nid');
    $query->fields('c', array('entity_id'));
    $query->condition('n.status', 1);
    $query->condition('c.field_category_value', $category);
    $query->condition('c.bundle', 'scorecard_products');
    $result = $query->execute()->fetchAll();
    
  if (!empty($result)) {
      foreach ($result as $key => $value) {
        $result[] = $value->entity_id;
      }
    }
  }

  return $result;
}

/**
 * Helper function to get title of category.
 *   This function should be only used with the company category in scorecard
 *   products, or M6 Product category, also with the type of category passed.
 */
function _get_title_of_category($category = NULL, $type = NULL) {
  if (empty($category) || empty($type)) {
    return '';
  }
  else {
    // If we have a numeric category, then it means that it is a taxonomy term,
    // else if we have a string, then we already have a name.
    if (is_numeric($category) && $type == 'M6') {
      $term = taxonomy_term_load($category);
      return !empty($term->name) ? $term->name : '';
    }

    if (is_string($category) && $type == 'company') {
      return $category;
    }
  }

  return '';
}

/**
 * Implements hook_form_alter()
 */
function m6connect_scm_form_alter(&$form, &$form_state, $form_id) {
  // Site Contact Form.
  if ($form_id == 'contact_site_form') {
    // dpm($form, '$form');
    // $form['name']['#title'] = t('Name');
    // $form['mail']['#title'] = t('Email');
    $form['#after_build'][] = 'm6_contact_site_after_build_custom';
  }
  if ($form_id == 'organization_node_form') {
    // Attaching M6 Product categories to the suffix of field category, for just
    // displaying to users.
    $elements = array();
    $elements['m6-product-categories-fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('M6 Product Categories'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
      '#attributes' => array('class' => array('collapsible', 'collapsed', 'bid-package-fieldset', 'fieldsetbigtitle')),
      '#attached' => array(
        'library' => array(
          array('system', 'drupal.collapse'),
        ),
      ),
      '#prefix' => '<div class="clearfix margin-top-10 margin-bottom-45">',
      '#suffix' => '</div>',
    );
    $elements['m6-product-categories-fieldset']['ratings-types-settings-form'] = array(
      '#type' => 'markup',
      '#markup' => _get_m6_product_categories_markup_display(),
      '#prefix' => '<div class="clearfix margin-bottom-10">',
      '#suffix' => '</div>',
    );

    if (empty($form_state['triggering_element'])) {
      $form['field_category'][LANGUAGE_NONE]['#suffix'] .= render($elements);
    }
  }
}

/**
 * Helper function to get M6 Product Categories markup for displaying in node
 * edit form.
 */
function _get_m6_product_categories_markup_display() {
  $categories = _get_m6_product_categories();

  $output = '';
  $output .= '<div class="ratings-data-outer clearfix">';
  if (empty($categories)) {
    $output .= '<div class="rating-data-item display-inline-block">';
    $output .= t('No categories yet!');
    $output .= '</div>';
  }
  else {
    foreach ($categories as $category) {
      $output .= '<div class="rating-data-item display-inline-block">';
      $output .= $category;
      $output .= '</div>';
    }
  }
  $output .= '</div>';

  return $output;
}

/**
 * Helper function to send review mail for products.
 */
function _mail_products_review_mail($manufacturer_node, $products_added) {
  // We shall be sending the mail to all company admins of the given company.
  global $user, $company;
  $user_name = _get_user_full_name($user->uid);

  $message = '';
  $no_products = format_plural($products_added, '1 product', '@count products');

  // Getting all users whom to send mail.
  $to_users = _get_company_users_by_og_roles($manufacturer_node->nid,'company admin');

  // Preparing message links.
  $link = url('node/' . $manufacturer_node->nid .'/review-products', array('absolute' => TRUE));
  $click_link = t('<a href="@link">Click here</a>', array('@link' => $link));
  $mailto = t('<a href="@mail_url">@mail</a>', array('@mail_url' => 'mailto:' . variable_get('site_mail', 'support@m6connect.com'), '@mail' => variable_get('site_mail', 'support@m6connect.com')));

  // Preparing message body.
  $message = 'Hello,<br/>';
  $message .= t('%user has new producrs for your company. To review and approve these products, please click on the link below.', array('%user' => $user_name, '@no' => $no_products,)) . '<br/>';
  $message .= $click_link . '<br/><br/>';
  // $message .= '<p>If the link is not clickable then copy paste this URL in the browser.<br/>';
  // $message .= '<p>' . $link . '<p><br/><br/>';
  $message .= 'Team,<br/><strong>' . variable_get('site_name', 'M6Connet') . '</strong><br/>(' . $mailto . ')';

  // M6Support Mail.
  $sender_mail = variable_get('site_mail', 'support@m6connect.com');

  $params = array(
    'subject' => 'Product(s) added on ' . variable_get('site_name', 'M6Connet') . ': Please review the product(s).',
    'body' => $message,
    'sender' => $sender_mail,
    'language' => language_default(),
    'module' => 'm6connect_misc',
    'key' => 'commitment_mail___invite_2_m6_notify',
    'build' => TRUE,
  );

  $mail_to_list = array();

  foreach ($to_users as $uid) {
    $account = user_load($uid);
    $mail_to_list[] = $account->mail;

    // Sending notification for each user.
    if (db_table_exists('m6connect_notification')) {
      $m6connect_notification = array(
        'type'         => 'scm',
        'event'        => 'scorecard_product_add',
        'entity_id'    => $manufacturer_node->nid,
        'company_nid'  => $company->nid,
        'message'      => NULL,
        'request_from' => $user->uid,
        'request_to'   => $uid,
        'status'       => 1,
        'timestamp'    => REQUEST_TIME,
      );
      entity_save('m6connect_notification', (object) $m6connect_notification);
    }
  }

  if (!empty($mail_to_list)) {
    // Sending mail.
    $mail_sent = drupal_mail($params['module'], $params['key'], implode(', ', $mail_to_list), $params['language'], $params);
  }

}

/**
 * Helper function to get product review table.
 */
function _get_product_review_table() {
  global $company;

  $header = array(
    'image'               => t('Image'),
    'company_category'    => t('Company Category'),
    'm6_product_category' => t('M6 Product Category'),
    'product_number'      => t('Product Number'),
    'catalogue_number'    => t('Catalogue Number'),
    'sku_number'          => t('SKU Number'),
    'description'         => t('Description'),
    'url'                 => t('URL'),
    'created_by'          => t('Created By'),
    'created'             => t('Created'),
    'actions'             => t('Actions'),
  );

  $products = _get_all_products_by_vendor($company->nid, 0);

  $rows = array();
  foreach ($products as $product_nid) {
    $product = node_load($product_nid);

    $image = $catalogue_number = $sku_number = $url = 'N.A.';

    // Preparing Image.
    if (!empty($product->field_attachments[LANGUAGE_NONE][0]['uri'])) {
      $image_uri = $product->field_attachments[LANGUAGE_NONE][0]['uri'];
      $full_img_url = file_create_url($image_uri);
      $img_url = image_style_url('pic_40x40', $image_uri);
      $image = '<img src="' . $img_url . '" />';

      $image = l($image, $full_img_url, array('html' => TRUE));
    }

    // Catalogue Number.
    if (!empty($product->field_catalog_number_product[LANGUAGE_NONE][0]['value'])) {
      $catalogue_number = $product->field_catalog_number_product[LANGUAGE_NONE][0]['value'];
    }

    // SKU Number.
    if (!empty($product->field_sku_number[LANGUAGE_NONE][0]['value'])) {
      $sku_number = $product->field_sku_number[LANGUAGE_NONE][0]['value'];
    }

    // URL.
    if (!empty($product->field_product_url[LANGUAGE_NONE][0]['value'])) {
      $url = $product->field_product_url[LANGUAGE_NONE][0]['value'];
      $url = l($url, $url, array('absolute' => TRUE, 'external' => TRUE));
    }

    // Company Category.
    $company_categories = array();
    foreach ($product->field_category['und'] as $key => $value) {
      $company_categories[] = $value['value'];
    }

    // M6 Product Category.
    $m6_cats = array();
    foreach ($product->field_m6_product_category['und'] as $key => $value) {
      $tid = $value['tid'];
      $term = taxonomy_term_load($tid);
      $m6_cats[] = $term->name;
    }

    // Description
    $description = '';
    if (!empty($product->field_description['und'][0]['value'])) {
      $description = $product->field_description['und'][0]['value'];
    }

    // Created By.
    $uid = $product->uid;
    $created_by = l(_get_user_full_name($uid), 'user/' . $uid);

    // Actions.
    $approve_link = l(t('Approve'),'approve-deny-product/approve/' . $product->nid . '/nojs', array('attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style', 'ctools-use-modal'))));
    $deny_link = l(t('Deny'),'approve-deny-product/deny/' . $product->nid . '/nojs', array('attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style', 'ctools-use-modal'))));
    $edit_link = l(t('Edit'),'approve-deny-product/edit/' . $product->nid . '/nojs', array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-assign-asset-category-popup-style'))));

    $actions = '<div class="project-action">
                <div class="btn-group">
                  <div class="dropdown">
                    <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-cog" aria-hidden="true"></i>&nbsp;<i class="fa fa-caret-down" aria-hidden="true"></i></button>
                    <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                      <li>' . $approve_link . '</li>
                      <li>' . $deny_link . '</li>
                      <li>' . $edit_link . '</li>
                    </ul>
                  </div>
                </div>
              </div>';

    $rows[] = array(
      'data' => array(
        array('data' => $image),
        array('data' => implode(', ', $company_categories)),
        array('data' => implode(', ', $m6_cats)),
        array('data' => $product->title),
        array('data' => $catalogue_number),
        array('data' => $sku_number),
        array('data' => $description),
        array('data' => $url),
        array('data' => $created_by),
        array('data' => t('@interval ago.', array('@interval' => format_interval(REQUEST_TIME - $product->created)))),
        array('data' => $actions),
      ),
    );
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes'=> array('class'=> array('table','table-hover','m6connect-custom-table','m6connect-table-border', 'm6init-datatable')), 'empty' => t('No Products to review yet!'), 'sticky' => FALSE));

  return $output;
}

/**
 * Helper function to get delta values for case.
 */
function _get_delta_values_based_on_case($case = NULL) {
  $deltavalue = array(
    'buy_or_change'  => 0,
    'patient_care'   => 0,
    'preferences'    => 0,
    'resources'      => 0,
    'due_diligence'  => 0,
    'pay_back'       => 0,
    // 'case_selection' => 0, // No idea about it.
  );
  if (empty($case)) {
    // If we do not have a case to deal with, return defaukt.
    return $deltavalue;
  }

  // Ignore these fields, as these are not for checkboxes.
  $ignore_fields = array('field_case_category_info');

  $disable_on_no_fields = array('field_governance_approved', 'field_physicians_credentialed');
  // There are many dependent fields, for which we need to judge that these
  // fields should be included in the count or not.
  $dependent_fields = array(
    'buy_or_change' => array(
      'field_case_product_info_product' => array(
        1 => array(),
        2 => array(
          'field_product_info_capital'       => array(
            1 => array(),
            2 => array(
              'field_compliance_approved' => 1,
            ),
          ),
          'field_case_product_info_pharmace' => 1,
          'field_case_product_info_reproces' => 1,
        ),
      ),
      'field_case_equipment_info' => array(
        1 => array(),
        2 => array(
          'field_case_equipment_capital_dol' => array(
            1 => array(),
            2 => array(
              'field_case_equipment_info_budget' => 1,
            ),
          ),
          'field_equipment_info_point_sale' => 1,
          'field_equipment_info_consumable' => 1,
          'field_equipment_info_store_phi'  => 1,
          'field_does_product_have_nann'    => 1,
          'field_does_product_have_awhonn'  => 1,
          'field_does_product_have_aap'     => 1,
          'field_does_product_have_aorn'    => 1,
          'field_does_product_have_aami'    => 1,
          'field_does_product_have_jcaho'   => 1,
          'field_does_product_have_aatb'    => 1,
          'field_does_product_have_acr'     => 1,
          'field_does_product_have_cms'     => 1,
          'field_does_product_have_asge'    => 1,
          'field_does_product_have_abem'    => 1,
          'field_does_product_have_ama'     => 1,
          'field_does_product_have_apwca'   => 1,
          'field_does_product_have_asahq'   => 1,
          'field_does_product_have_asco'    => 1,
          'field_does_product_have_acla'    => 1,
        ),
      ),
      'field_projectcaseoverlapsproject' => array(
        1 => array(),
        2 => array(
          'field_management_approval' => 1,
        ),
      ),
    ),
    'patient_care' => array(
      'field_patient_satisfaction' => array(
        1 => array(
          'field_infection_implications' => array(
            1 => array(),
            2 => array(
              'field_infection_prevention' => 1,
            ),
          ),
        ),
        2 => array(
          'field_patient_care_outcomes' => 1,
          'field_infection_implications_2' => array(
            1 => array(),
            2 => array(
              'field_infection_prevention_2' => 1,
            ),
          ),
        ),
      ),
    ),
    'preferences' => array(
      'field_physicians_new_physician' => array(
        1 => array(),
        2 => array(
          'field_physicians_credentialed' => 1,
        ),
      ),
    ),
    'resources' => array(
      'field_it_component' => array(
        1 => array(),
        2 => array(
          'field_governance_approved' => 1,
        ),
      ),
    ),
    'due_diligence' => array(
      'field_one_supplier' => array(
        1 => array(),
        2 => array(
          'field_thr_one_supplier' => 1,
        ),
      ),
      'field_fda_approval' => array(
        1 => array(),
        2 => array(
          'field_fda_premarket_approval' => 1,
          'field_fda_premarket_notification' => 1,
          'field_fda_approved' => array(
            1 => array(
              'field_anticipate_approval' => array(
                1 => array(
                  'field_terminate_case' => 1,
                ),
                2 => array(),
              ),
            ),
            2 => array(),
          ),
        ),
      ),
    ),
    'pay_back' => array(),
  );

  // Getting current active project and company.
  $project_ref = $_SESSION['scm_project_nid'];
  global $company;

  foreach ($deltavalue as $case_type => $value) {
    // Getting all fields for the current type.
    $all_fields = field_info_instances('node', $case_type);
    if (!empty($all_fields)) {
      // If there are fields in the current content type, then filtering out the
      // list_text type fields.
      $list_fields = array();
      foreach ($all_fields as $field_name => $field_config) {
        $field_info = field_info_field($field_name);
        if ($field_info['type'] == 'list_text' && !in_array($field_name, $ignore_fields)) {
          $list_fields[] = $field_name;
        }
      }
    }

    if (!empty($list_fields)) {
      $filled_fields = array();
      $fields_to_be_filtered = array();
      // If we have some field to work upon, then proceeding further.
      $query = db_select('node','n');
      $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
      $query->join('field_data_field_project_reference', 'pr', 'pr.entity_id = n.nid');
      $query->leftjoin('field_data_field_case_reference', 'caser', 'caser.field_case_reference_nid = n.nid');
      $query->fields('caser', array('entity_id'));
      $query->condition('pr.field_project_reference_nid', $project_ref);
      $query->condition('caser.field_case_reference_nid', $case->nid);
      $query->condition('n.type', 'case_builder');
      $query->condition('om.gid', $company->nid);
      $query->condition('caser.bundle', $case_type);
      $ref_case = $query->execute()->fetchField();

      if (!empty($ref_case)) {
        // If there is a reference case for the given case and casetype.
        $ref_node = node_load($ref_case);
        foreach ($list_fields as $field_name) {
          // First of all, we need to judge that, this field has any dependent
          // fields, if no, then we can continue easily, but if this field has
          // dependent fields, then we need to judge that which fields should
          // not be counted in this whole process.
          $valued_filtered = 0;
          if (!empty($ref_node->{$field_name}[LANGUAGE_NONE][0]['value'])) {
            $valued_filtered = $ref_node->{$field_name}[LANGUAGE_NONE][0]['value'];
          }

          $is_the_field_disabled = FALSE;

          if (!empty($valued_filtered) && $valued_filtered == 1 && in_array($field_name, $disable_on_no_fields)) {
            // For some of the fields, if a user answers 1 (No) for a question
            // then that answer should not be treated an answer, and should be
            // treated as not answered.
            $valued_filtered = 0;
            $is_the_field_disabled = TRUE;
          }

          if (!empty($valued_filtered)) {
            // If value of the field is choose, then we need to filter the
            // fields which has not been choosen.
            $valued_filtered = $valued_filtered == 1 ? 2 : 1;
          }

          $fields_to_be_filtered += _get_fields_to_be_filtered($case_type, $dependent_fields, $field_name, $valued_filtered);
          if (!empty($ref_node->{$field_name}[LANGUAGE_NONE][0]['value']) && !in_array($field_name, $fields_to_be_filtered) && !$is_the_field_disabled) {
            $filled_fields[] = $field_name;
          }
        }

        if (!empty($fields_to_be_filtered)) {
          // Removing these fields from list fields also, because these fields
          // should not be counted in the final results.
          $list_fields = array_diff($list_fields, $fields_to_be_filtered);
        }
      }

      if (!empty($filled_fields) && !empty($list_fields)) {
        // If we have some filled fields, then calculating the percentage, else
        // the percentile would be 0.
        $perc = (count($filled_fields) / count($list_fields)) * 100;
        $perc = round($perc, 0, PHP_ROUND_HALF_DOWN);
        $deltavalue[$case_type] = $perc;
      }
    }
  }

  return $deltavalue;
}

/**
 * Helper function to get fields to be filtered.
 */
function _get_fields_to_be_filtered($case_type, $dependent_fields, $field_name, $valued_filtered) {
  $fields = array();

  if (empty($case_type) || empty($dependent_fields) || empty($field_name)) {
    return $fields;
  }

  if (!empty($dependent_fields[$case_type]) && is_array($dependent_fields[$case_type])) {
    $fields = _get_fields_to_be_filtered_recursively($dependent_fields[$case_type], $field_name, $valued_filtered);
  }

  if (!empty($fields)) {
    // The fields would be an associative array, but we need a single array
    // of all the received fields.
    $fields = _clear_associative_array($fields);
  }

  return $fields;
}

function _get_fields_to_be_filtered_recursively($stack, $field_name, $valued_filtered) {
  $return = array();
  if (!empty($stack) && !empty($field_name)) {
    foreach ($stack as $key => $value) {
      if ($key == $field_name && is_array($value) && !empty($value)) {
        // If we find the desired field, then returning its requested value.
        if (empty($valued_filtered)) {
          $return = $value;
        }
        else {
          if (is_array($value[$valued_filtered]) && !empty($value[$valued_filtered])) {
            $return = $value[$valued_filtered];
          }
          else {
            $return = array();
          }
        }
        break;
      }
      else if (is_array($value) && !empty($value) && empty($return)) {
        // If field is not found, and we have more fields in stack, then
        // going recursively.
        $return = _get_fields_to_be_filtered_recursively($value, $field_name, $valued_filtered);
      }
    }
  }

  return $return;
}

/**
 * Helper function to clear associative array.
 */
function _clear_associative_array($fields = array()) {
  $return = array();
  if (empty($fields)) {
    return $return;
  }

  $return = _clear_associative_array_recursively($fields);
  return $return;
}

function _clear_associative_array_recursively($fields, $return = array()) {
  if (!empty($fields)) {
    if (is_array($fields)) {
      foreach ($fields as $key => $value) {
        if (is_string($key) && !is_numeric($key)) {
          $return[$key] = $key;
        }
        if (is_array($value) && !empty($value)) {
          $return = _clear_associative_array_recursively($value, $return);
        }
      }
    }
  }
  return $return;
}

/**
 * Helper function to get color codes by casedelta.
 */
function _get_colors_by_casedelta($casedelta) {
  $return = array();
  foreach ($casedelta as $key => $value) {
    if ($value == 0) {
      $color = 'scm-gray';
    }
    elseif ($value > 0 && $value < 100) {
      $color = 'scm-yellow';
    }
    else {
      $color = 'scm-green';
    }
    $return[$key] = $color;
  }

  return $return;
}

/**
 * Helper function to get HTML for scorecard information.
 */
function _get_scorecard_display_info($scorecard_node = NULL) {
  global $company;
  $elements = array();

  if (empty($scorecard_node)) {
    return $elements;
  }

  // If we have a scorecard node, then moving on.
  $elements['main-container']= array(
    '#type'       => 'container',
    '#attributes' => array('class' => array('col-md-12', 'col-sm-12', 'col-xs-12', 'project-details-full-mid', 'margin-bottom-45')),
  );

  $elements['main-container']['scorecard-info-title'] = array(
    '#type'   => 'markup',
    '#markup' => '<div class="clearfix custom-score-info"><div class="row">',
    '#prefix' => '<div class="well well-large no-bg">'
  );
  $ratingDate = strtotime($scorecard_node->field_rating_due_date[LANGUAGE_NONE][0]['value']);
  $project_name = '';
  $rfp_name = '';
  if (!empty($scorecard_node->field_project_nid_for_scm[LANGUAGE_NONE][0]['value'])) {
    $project_name = ucwords(_get_node_title_by_nid($scorecard_node->field_project_nid_for_scm[LANGUAGE_NONE][0]['value']));
  }
  if (!empty($scorecard_node->field_rfp_nid_for_scm[LANGUAGE_NONE][0]['value'])) {
    $rfp_name = ucwords(_get_node_title_by_nid($scorecard_node->field_rfp_nid_for_scm[LANGUAGE_NONE][0]['value']));
  }

  // Getting all the scorecard 
  // with there name and number
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_scorecard_name', 'scn','scn.entity_id = n.nid');
  $query->fields('n', array('nid','title'));
  $query->fields('scn', array('field_scorecard_name_value')); 
  $query->condition('n.type','scm_scorecard','=');  
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getAllScards = $query->execute()->fetchAll();
  $scardArr = array();
  foreach($getAllScards as $delta => $scrdInfo) {
    $scardArr[$scrdInfo->nid] = $scrdInfo->title.' | '.$scrdInfo->field_scorecard_name_value;  
  }  
  $elements['main-container']['scorecard-number-select'] = array(
    '#type' => 'select',
    '#options' => $scardArr,
    '#empty_option' => 'Choose scorecard',
    '#default_value' => $scorecard_node->nid,
    '#attributes' => array('class'=> array('form-control scorecard-name-title-evaluate')),
    '#prefix' => '<div class="col-md-6 col-sm-6 col-xs-12"><div class="clearfix"><p class="blue-and-bold">Select Scorecard</p>',
    '#suffix' => '</div></div>',
  );
  $elements['main-container']['scorecard-name'] = array(
  '#markup' => '<p class="blue-and-bold">Rating Due Date</p><p class="rfp-data-date">'.date('m/d/Y', $ratingDate).'</p>',
    '#prefix' => '<div class="col-md-2 col-sm-2 col-xs-12"><div class="clearfix">',
    '#suffix' => '</div></div>',  
  );
  
  $elements['main-container']['project-name'] = array(
    '#markup' => '<p class="blue-and-bold">Project Name</p><p class="prject-data-name">'.$project_name.'</p>',
    '#prefix' => '<div class="col-md-2 col-sm-2 col-xs-12"><div class="clearfix">',
    '#suffix' => '</div></div>',  
  );
  $elements['main-container']['rfp-name'] = array(
    '#markup' => '<p class="blue-and-bold">RFP Name</p><p class="rfp-data-name">'.$rfp_name.'</p>',
    '#prefix' => '<div class="col-md-2 col-sm-2 col-xs-12"><div class="clearfix">',
    '#suffix' => '</div></div>',  
  );
  $elements['main-container']['scorecard-title'] = array(
    '#type'   => 'markup',
    '#markup' => '</div></div></div>',
  );

  return $elements;
}

/**
 * Helper function to get question builder node by scorecard.
 */
function _get_question_builder_node_by_scorecard($scorecard_node = NULL) {
  if (empty($scorecard_node)) {
    return array();
  }

  $query = db_select('field_data_field_qb_scorecard_referance', 'q')
    ->fields('q', array('entity_id'))
    ->condition('field_qb_scorecard_referance_target_id', $scorecard_node->nid)
    ->execute()
    ->fetchField();

  if (!empty($query)) {
    return node_load($query);
  }

  return array();
}

/**
 * Helper function to get scm category title by ID.
 */
function _get_question_category_title_by_id($id = NULL) {
  if (empty($id)) {
    return '';
  }

  return db_select('m6connect_scm_category_setting', 'c')
    ->fields('c', array('title'))
    ->condition('id', $id)
    ->execute()
    ->fetchField();
}

/**
 * Returns HTML for a managed file element.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: A render element representing the file.
 *
 * @ingroup themeable
 */
function theme_custom_file_managed_theme_scorecard($variables) {
  $element = $variables['element'];

  $attributes = array();
  if (isset($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }
  if (!empty($element['#attributes']['class'])) {
    $attributes['class'] = (array) $element['#attributes']['class'];
  }
  $attributes['class'][] = 'form-managed-file';

  // This is the reason we have created this custom theme, so that other
  // attributes also get attached to the element.
  foreach ($element['#attributes'] as $attribute => $value) {
    if ($attribute == 'class' || $attribute == 'id') {
      continue;
    }
    $attributes[$attribute] = $value;
  }

  // This wrapper is required to apply JS behaviors and CSS styling.
  $output = '';
  $output .= '<div' . drupal_attributes($attributes) . '>';
  $output .= drupal_render_children($element);
  $output .= '</div>';
  return $output;
}

/**
 * Helper function to make a scorecard active.
 */
function _make_scorecard_active($node = NULL) {
  if (empty($node)) {
    return;
  }

  $node->field_scorecard_status['und'][0]['value'] = 'Active';
  field_attach_presave('node', $node);
  field_attach_update('node', $node);
  entity_get_controller('node')->resetCache(array($node->nid));

  $getAllScoreCard = _fetching_scorecard_information('scm_scorecard');

  foreach ($getAllScoreCard as $delta => $nids) {
    if ($nids == $node->nid) {
      continue;
    }

    $otherCards = node_load($nids);
    $otherCards->field_scorecard_status['und'][0]['value'] = '';
    field_attach_presave('node', $otherCards);
    field_attach_update('node', $otherCards);
    entity_get_controller('node')->resetCache(array($otherCards->nid));
  }
}

/**
 * Helper function to get group ratings content evaluate.
 */
function _get_group_ratings_content_evaluate($scorecard_node = NULL,$status=FALSE) {
  if (empty($scorecard_node)) {
    return t('Some problem occured, and data could not be fetched. Please try again later!');
  }

  // Getting question builder node.
  $question_builder_node = _get_question_builder_node_by_scorecard($scorecard_node);

  // We need to judge that whether rating was requested on company basis or
  // product basis. If company basis is requested, only one set of questions
  // will be shown to rater, else each product of that company will be asked
  // with a question set.
  $criteria = 'company_based';
  if (!empty($question_builder_node->field_selection_criteria[LANGUAGE_NONE][0]['value'])) {
    $criteria = $question_builder_node->field_selection_criteria[LANGUAGE_NONE][0]['value'];
  }

  // If criteria is product based, then we need products associated with the
  // current scorecard's company.
  $products = $companies = array();
  if ($criteria == 'product_based') {
    // Getting all products.

    // If products are to be get by this scorecard reference, then use below
    // function else getting all products of the scorecard's company.
    $products = _get_all_products_by_scorecard($scorecard_node->nid,$status);

    // Else use this if want to get all products of scorecard's company.
    // $products = _get_all_products_by_vendor($scorecard_node->og_group_ref[LANGUAGE_NONE][0]['target_id']);
  }
  elseif ($criteria == 'company_based') {
    // If a company based criteria is choosed, then we need to get all companies
    // of the products for this scorecard.
    $companies = _get_all_products_companies_by_scorecard($scorecard_node->nid,$status);
    $form_state['companies'] = $form['#storage']['companies'] = $companies;
  }

  // Collecting necessary information for the current scorecard questionbuilder.
  // Like categories and questions.
  $categories = array();
  if (!empty($question_builder_node->field_question_builder_category[LANGUAGE_NONE])) {
    foreach ($question_builder_node->field_question_builder_category[LANGUAGE_NONE] as $key => $value) {
      $categories[$value['value']] = $value['value'];
    }
  }

  // Getting questions by category, questionbuilder, and scorecard.
  $questions = _get_questions_for_questionbuilder_raters($categories, $question_builder_node, $scorecard_node);

  // Getting unique users who all rated for the current scorecard.
  $all_users_rated = _get_all_users_rated_scorecard($questions, $criteria, $products, $companies);

  // If we have some rated users, then we might have their default values in 
  // questions variable already.
  if (!empty($all_users_rated)) {
    $elements = array();
    $datas = $criteria == 'product_based' ? $products : $companies;
    $p = 0;
    foreach ($datas as $data) {
      $p++;
      // Getting node title by its id.
      $node_title = _get_title_of_node($data);

      // Product Fieldset.
      $prod_fieldset = 'node-' . $data;

      // Saving essential data for theme function.
      $elements[$prod_fieldset] = array(
        '#type' => 'fieldset',
        '#title' => $node_title,
        '#collapsed' => $p == 1 ? FALSE : TRUE,
        '#collapsible' => TRUE,
        '#attributes' => $p == 1 ? array('class' => array('collapsible', 'bid-package-fieldset', 'fieldsetbigtitle', 'calculate-tables-here')) : array('class' => array('collapsible', 'collapsed', 'bid-package-fieldset', 'fieldsetbigtitle', 'calculate-tables-here')),
        '#attached' => array(
          'library' => array(
            array('system', 'drupal.collapse'),
          ),
        ),
        '#prefix' => '<div class="clearfix margin-top-10 margin-bottom-15">',
        '#suffix' => '</div>',
      );

      foreach ($questions as $category => $qset) {
        $category_title = _get_question_category_title_by_id($category);

        // Category Container.
        $cat_container = 'category-container-' . $category;
        $elements[$prod_fieldset][$cat_container] = array(
          '#type'  => 'container',
          '#theme' => 'raters_evaluate_group_container_theme',
        );

        // Saving essential data for theme function.
        $elements[$prod_fieldset][$cat_container]['#storage'] = array(
          'scorecard_node'        => $scorecard_node,
          'question_builder_node' => $question_builder_node,
          'criteria'              => $criteria,
          'products'              => $products,
          'companies'             => $companies,
          'categories'            => $categories,
          'questions'             => $questions,
          'all_users_rated'       => $all_users_rated,
        );

        // Title of the category.
        $elements[$prod_fieldset][$cat_container]['cat_title_' . $category] = array(
          '#type'   => 'markup',
          '#markup' => $category_title,
        );

        // Now each category has questions, generating them.
        if (empty($qset)) {
          // If by any means, we do not have questions.
          $elements[$prod_fieldset][$cat_container]['no_questions'] = array(
            '#type'   => 'markup',
            '#markup' => t('There are no questions/ratings in this category.'),
          );
        }
        else {
          $i = 0;
          foreach ($qset as $qdata) {
            $total = 0;
            $i++;

            $elements[$prod_fieldset][$cat_container][$qdata->id]['sr_no'] = array(
              '#type'   => 'markup',
              '#markup' => $i . '.',
            );

            $elements[$prod_fieldset][$cat_container][$qdata->id]['question'] = array(
              '#type'   => 'markup',
              '#markup' => $qdata->question,
            );

            foreach ($qdata->{'defaults'}[$data] as $user_id => $user_meta) {
              $elements[$prod_fieldset][$cat_container][$qdata->id]['user_rating_' . $user_id] = array(
                '#type'   => 'markup',
                '#markup' => $user_meta['ratings'] * $qdata->weight,
              );
            }
          }
        }
      }
    }

    $output = drupal_render($elements);
  }
  else {
    $output = '<div class="margin-top-10"><h3>' . t('No ratings found in the system!') . '</h3></div>';
  }

  return $output;
}

/**
 * Helper function to get questions of questionbuider.
 */
function _get_questions_for_questionbuilder_raters($categories, $question_builder_node, $scorecard_node) {
  if (empty($categories) || empty($question_builder_node->nid) || empty($scorecard_node->nid)) {
    // All of the three arguments are required, and hence if we do not have any
    // one of them, we shall abort.
    return array();
  }

  $questions = array();

  foreach ($categories as $category) {
    $query = db_select('m6connect_qbuilder_data', 'q')
      ->fields('q')
      ->condition('scorecard_nid', $scorecard_node->nid)
      ->condition('qbuilder_nid', $question_builder_node->nid)
      ->condition('category_id', $category)
      ->condition('company_nid', $scorecard_node->og_group_ref[LANGUAGE_NONE][0]['target_id'])
      ->execute()
      ->fetchAll();

    if (!empty($query)) {
      foreach ($query as $key => $value) {
        $questions[$category][] = $value;
      }
    }
  }

  return $questions;
}

/**
 * Helper function to get all users who rated a particular scorecard based on
 * questions.
 */
function _get_all_users_rated_scorecard(&$questions, $criteria, $products = array(), $companies = array()) {
  $return = array();
  if (empty($questions)) {
    return $return;
  }

  $datas = $criteria == 'product_based' ? $products : $companies;
  $element = $criteria == 'product_based' ? 'pid' : 'company_nid';

  // Get all categories and question IDs.
  $cats = array();
  $ques = array();
  foreach ($questions as $category => $qdata) {
    $cats[$category] = $category;
    foreach ($qdata as $key => $value) {
      $ques[$value->id] = $value->id;
    }
  }

  if (empty($ques)) {
    // If we do not have any question IDs then abort.
    return $return;
  }

  $query = db_select('m6connect_qbuilder_rating', 'r')->distinct();
  $query->fields('r', array('uid'));
  $query->condition('qid', $ques);
  $query->orderBy('created', 'DESC');
  $results = $query->execute()->fetchAll();
  foreach ($results as $key => $value) {
    $total_users[$value->uid] = $value->uid;
  }
  $return = $total_users;

  foreach ($total_users as $current_user) {
    $query = db_select('m6connect_qbuilder_rating', 'r');
    $query->leftJoin('m6connect_qbuilder_comments', 'c', 'r.qid=c.qid AND r.uid=c.uid');
    $query->fields('r', array('ratings', 'qid', 'pid', 'company_nid'));
    $query->fields('c', array('comments'));
    $query->condition('r.uid', $current_user);
    $query->condition('r.qid', $ques);
    $query->condition('r.cid', $cats);

    if ($criteria == 'company_based') {
      $query->isNull('r.pid');
      $query->isNotNull('r.company_nid');
    }
    else {
      $query->isNull('r.company_nid');
      $query->isNotNull('r.pid');
    }

    $results = $query->execute()->fetchAll();

    if (!empty($results)) {
      foreach ($results as $result) {
        foreach ($datas as $data) {
          foreach ($questions as $category => $qdata) {
            $cats[$category] = $category;
            foreach ($qdata as $key => $value) {
              if ($result->qid == $value->id && $result->{$element} == $data) {
                $questions[$category][$key]->{'defaults'}[$data][$current_user] = array(
                  'ratings'  => $result->ratings,
                  'comments' => $result->comments,
                );
              }
            }
          }
        }
      }
    }
  }

  return $return;
}

/**
 * Theme function for group rating.
 */
function theme_raters_evaluate_group_container_theme($variables) {
  // dpm($variables, '$variables');
  $elements = $variables['element'];
  global $base_url;

  $all_users_rated = $elements['#storage']['all_users_rated'];

  // Preparing image.
  $path_to_theme = drupal_get_path('theme', 'm6connect');
  $img_src = $base_url . '/' . $path_to_theme . '/images/scorecard_company_icon_small.png';

  // Preparing table headers.
  $header = array(
    array('data' => t('Question'), 'class' => array('col-md-4')),
  );
  foreach ($all_users_rated as $key => $value) {
    $udata = _get_user_data_by_uid($value);
    $name = ucwords($udata['name']); //Username
    if (!empty($udata['first_name'])) {
      // If firstname is available.
      $name = ucwords($udata['first_name']);
    }
    $header[] = array('data' => $name, 'class' => array('col-md-1'));
  }
  $header[] = array('data' => t('Total'), 'class' => array('col-md-1'));

  // Preparing data.
  $rows = array();
  $output = '';
  $show_table = TRUE;

  $input_type_disabled = array(
    '#type'          => 'textfield',
    '#title'         => t('Total'),
    '#title_display' => 'invisible',
    '#disabled'      => TRUE,
    '#attributes'    => array('class' => array('pointer-events-none')),
    '#prefix'        => '<div style="cursor: not-allowed;">',
    '#suffix'        => '</div>',
  );

  foreach ($elements as $key => $value) {
    if (strrpos($key, '#') === 0) {
      continue;
    }

    if (strpos($key, 'no_questions') === 0) {
      $show_table = FALSE;
      $output .= '<div class="clearfix text-center text-muted">
                    <h4>' . drupal_render($value) . '</h4>
                  </div>';
      break; // If there are no questions, then exit the loop.
    }
    else {
      if (strpos($key, 'cat_title') === 0) {
        $output .= '<div class="clearfix purple-image">
                    <div class="display-inline-block select-product-display-image padding-right-10">
                      <img src="' . $img_src . '">
                    </div>
                    <h4 class="display-inline-block">' . drupal_render($value) . '</h4>
                  </div>';
      }
      else {
        $row = array();
        $row[] = array('data' => drupal_render($value['sr_no']) . ' ' . drupal_render($value['question']));
        $i = 0;
        foreach ($all_users_rated as $key1 => $value1) {
          $i++;
          $row[] = array('data' => drupal_render($value['user_rating_' . $value1]), 'class' => array('row-column-item','table-td-50', 'row-column-item-' . $i, 'text-center'));
        }
        $row[] = array('data' => render($input_type_disabled), 'class' => array('row-total-js', 'table-td-50'));

        $rows[] = $row;
      }
    }
  }

  if ($show_table) {
    // Adding a column total.
    $row = array();
    $row[] = array('data' => '<label>' . t('Total') . '</label>', 'class' => array('text-right'));
    $i = 0;
    foreach ($all_users_rated as $key1 => $value1) {
      $i++;
      $row[] = array('data' => render($input_type_disabled), 'class' => array('column-total-js','table-td-50', 'column-total-js-' . $i));
    }
    $row[] = array('data' => render($input_type_disabled), 'class' => array('column-total-js-total','table-td-50'));
    $rows[] = $row;

    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('table', 'table-hover', 'qbuilder-table', 'group-raters-table'))));
  }

  $output .= drupal_render_children($element);

  return $output;
}


/*
 * Fetching selected scorecard related data
 */
function _update_scorecard_based_data_view_share($form,&$form_state) { 
  $commands = array();
  $triggering_element = $form_state['triggering_element'];
  $scorecardNid = $triggering_element['#value'];
  $scorecardData = node_load($scorecardNid);
  _make_scorecard_active($scorecardData);  
  //$commands[] = ajax_command_replace("#alert-container-section", render($form['main_container2']));
  //$commands[] = ctools_ajax_command_redirect('/'.current_path());
  return array('#type' => 'ajax','#commands' => $commands);
}

function _update_scorecard_status_active($nodeId) {
  $node = node_load($nodeId);
  _make_scorecard_active($node);
  drupal_json_output(array('result'=> 1));
  drupal_exit(0);
}

function  justification_main_container2_process($elements, &$form_state) {
  $form_called = $form_state['build_info']['form_id'] == '_casemanager_scorecard_decision_form' ? 'decision' : 'casemanager';

  global $company;

  $output  = '';
  $getNodesNids = _fetching_scorecard_information_active('scm_scorecard');

  $query = db_select('m6connect_qbuilder_data','qbd');
  $query->leftjoin('m6connect_qbuilder_rating','qbr','qbr.cid=qbd.category_id AND qbd.id=qbr.qid');
  $query->fields('qbd', array('category_id', 'weight'));
  $query->fields('qbr', array('cid', 'pid', 'ratings', 'company_nid'));
  $query->condition('qbd.scorecard_nid', $getNodesNids);
  $query->condition('qbd.status', 1);
  $query->condition(db_or()->isNotNull('qbr.pid')->isNotNull('qbr.company_nid'));

  $result = $query->execute()->fetchAll();

  $cat = array();
  $totalrating = array();

  if (!empty($result)) {
    $first_result = $result[0];
    $element = !empty($first_result->pid) ? 'pid' : 'company_nid';
    $table_header = !empty($first_result->pid) ? t('Vendor | Product') : t('Vendor');
    $fetch_function = !empty($first_result->pid) ? '_get_all_products_by_scorecard' : '_get_all_products_companies_by_scorecard';

    foreach ($result as $key => $value) {
      $cat[$value->cid] = $value->cid;
      $totalrating[$value->{$element}][$value->cid] += $value->ratings*$value->weight;
    }

    $products = $fetch_function($getNodesNids, 1);

    if ($form_called == 'decision') {
      $elements['product-or-company'] = array(
        '#type'   => 'value',
        '#value' => $element,
      );
    }

    $getdata = db_select('m6connect_scorecard_decision_justification', 'sdj');
    $getdata->fields('sdj', array($element, 'justification'));
    $getdata->condition('sdj.scorecard_nid', $getNodesNids);
    $getdata->condition(db_or()->isNotNull('sdj.pid')->isNotNull('sdj.company_nid'));
    $getdefault = $getdata->execute()->fetchAllKeyed(0,1);

    foreach ($products as $pkey => $pvalue) {
      $rows = $header = array();

      $header[$pkey] = array('data' => t(_get_company_product_name_by_pid($pvalue)), 'class' => array('text-center'));
      $rows[$pkey]['data'][$pkey] = array('data' => t('Rating Scores'),'class' => array('text-center'));

      $tscore = '';

      foreach ($cat as $ckey) {
        $rvalue = (isset($totalrating[$pvalue][$ckey])?$totalrating[$pvalue][$ckey]:0);
        $header[] = array('data' => t(_get_question_category_title_by_id($ckey)), 'class' => array('text-center'));

        $rows[$pkey]['data'][] = array('data' => $rvalue,'class' => array('text-center','category-rating'));
        $tscore +=$rvalue;
      }

      // Creating remove link.
      $removelink = '';
      if ($form_called == 'decision') {
        $removelink = l('<i class="fa fa-trash-o" aria-hidden="true"></i>', 'javascript:void(0);', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('pvalue' => $pvalue, 'class' => array('pull-right', 'justremove-item'))));
      }

      $rows[$pkey]['data'][] = array('data' => $tscore . $removelink, 'class' => array('text-center', 'category-rating-total'));

      $header[] = array('data' => t('Total Score'), 'class' => array('text-center'));

      $output1 = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No scorecard created yet!'), 'attributes' => array('class' => array('table', 'm6connect-custom-program-table', 'm6init-datatable', 'm6connect-program-estimate-table-main-estimate', 'table-hover', 'text-center', 'm6connect-custom-table', 'm6connect-table-border')), 'id' => 'search-m6id-form'));

      $current_def_val = !empty($getdefault) ? $getdefault[$pvalue] : '';

      if ($form_called == 'decision') {
        $elements['product-company-nid-' . $pkey] = array(
          '#type'    => 'value',
          '#value'   => $pvalue,
          '#parents' => array('justification', $pkey, 'product-company-nid-' . $pkey),
        );

        $elements['decision-justification-' . $pkey] = array(
          '#type'          => 'textarea',
          '#default_value' => $current_def_val,
          '#attributes'    => array('placeholder' => t('Type justification for choosing this product')),
          '#prefix'        => '<div class="justification-table justification-' . $pvalue . '">' . $output1 . '<div class="justification-data padding-10"><label class="margin-top-10">Justification</label>',
          '#suffix'        => '</div></div>',
          '#parents'       => array('justification', $pkey, 'decision-justification-' . $pkey),
        );
      }
      else {
        if (empty($current_def_val)) {
          $current_def_val = t('N.A.');
        }

        $elements['table-markup-' . $pkey] = array(
          '#markup' => $output1,
          '#prefix' => '<div class="justification-table">',
          '#suffix' => '<div class="justification-data padding-10"><label class="margin-top-10">Justification - </label>' . $current_def_val . '</div></div>',
        );
      }
    }
  }

  if ($form_called == 'decision') {
    $elements['justification-remove-item'] = array(
      '#type'       => 'hidden',
      '#attributes' => array('class' => array('justification-rowremove')),
    );
  }

  return $elements;
}

function justification_submit($form, &$form_state) {
  //dpm($form_state['values']);
  global $user,$company;
  $values = $form_state['values'];
  if(!empty($values) && !empty($values['justification']) && !empty($values['scorecard-number-select'])){
    $removeitem = (!empty($values['justification-remove-item'])?explode(',',$values['justification-remove-item']):'');
    $product_nid = NULL;
    $company_nid = NULL;
    db_delete('m6connect_scorecard_decision_justification')  
    ->condition('scorecard_nid', $values['scorecard-number-select'])
    ->execute();
    //dpm($removeitem,'$removeitem');

    /*if(isset($removeitem) && !empty($removeitem)){
      $delrow = db_select('m6connect_qbuilder_data','qbdata');
      //$delrow->condition('qbdata.uid',$user->uid);
      $delrow->condition('qbdata.company_nid', $company->nid);
      $delrow->condition('qbdata.scorecard_nid', $values['scorecard-number-select']);
      $delrow->fields('qbdata',array('id'));
      $oldcatkey = $delrow->execute()->fetchCol();
      db_delete('m6connect_qbuilder_rating')      
      ->condition($values['product-or-company'], $removeitem, 'IN')
      ->condition('qid', $oldcatkey,'IN')
      ->execute();
      db_delete('m6connect_qbuilder_comments')
      ->condition($values['product-or-company'], $removeitem, 'IN')
      ->condition('qid', $oldcatkey,'IN')
      ->execute();
    }*/
    if(isset($removeitem) && !empty($removeitem)){
      if($values['product-or-company'] == 'pid'){
         db_update('scorecard_references')->fields(array('status'=>0))
        ->condition('product_nid', $removeitem, 'IN')
        ->condition('company_nid', $company->nid, '=')
        ->execute();
      }
      if($values['product-or-company'] == 'company_nid'){
        $query = db_select('field_data_field_manufacture_reference','sr');
        $query->fields('sr',array('entity_id'));
        $query->condition('sr.field_manufacture_reference_nid',$removeitem,'IN');
        $getPidByCompanynid = $query->execute()->fetchCol();

         db_update('scorecard_references')->fields(array('status'=>0))
        ->condition('product_nid', $getPidByCompanynid, 'IN')
        ->condition('company_nid', $company->nid, '=')
        ->execute();
      }
    }
    foreach ($values['justification'] as $key => $record) {
      if(isset($removeitem) && !in_array($record['product-company-nid-'.$key], $removeitem)){
        if($values['product-or-company'] == 'pid'){
          $product_nid = $record['product-company-nid-'.$key];
        }else if($values['product-or-company'] == 'company_nid'){
          $company_nid = $record['product-company-nid-'.$key];
        }
        db_insert('m6connect_scorecard_decision_justification')
        ->fields(array(
          'uid' => $user->uid,
          'scorecard_nid' => $values['scorecard-number-select'],
          'pid' => $product_nid,
          'company_nid' => $company_nid,
          'justification' => check_plain($record['decision-justification-'.$key]),
          'status' => 1,
          'created' => REQUEST_TIME,
        ))
        ->execute();
      }
    }
  }
}

function _decision_inner_menu($where = 'scorecard') {
  $output = '';
  if ($where == 'scorecard') {
    $decisionList = array(
      'scorecard/decision'               => 'Summary',
      'scorecard/decision/stakeholder'   => 'Stakeholder Ratings',
      'scorecard/decision/comments'      => 'Comments',
      'scorecard/decision/justification' => 'Justification',
    );
  }
  elseif ($where == 'casemanager') {
    $decisionList = array(
      'scm/scorecard/decision'               => 'Summary',
      'scm/scorecard/decision/stakeholder'   => 'Stakeholder Ratings',
      'scm/scorecard/decision/comments'      => 'Comments',
      'scm/scorecard/decision/justification' => 'Justification',
    );
  }
  $currentPath = current_path();
  $output .= '<ul class="list-unstyled list-inline custom-list scm-menu-links clearfix">';

  foreach ($decisionList as $link => $label) {
    $class = $currentPath == $link ? 'active ' : '';
    if ($where == 'casemanager') {
      $data = strtolower(str_replace(' ', '', $label));
      $output .= '<li class="' . $class . 'menu-item">' . l(strtoupper($label), 'javascript:void(0)', array('external' => TRUE, 'attributes' => array('data' => $data, 'class' => array('switch-scorecard-menus')))) . '</li>';
    }
    else {
      $output .= '<li class="' . $class . 'menu-item">' . l(strtoupper($label), $link) . '</li>';
    }
  }

  $output .= '</ul>';
  return $output;
}

function _get_company_product_name_by_pid($pid = NULL) {
  $output = '';

  if (!empty($pid)) {
    $node = node_load($pid);
    if ($node->type == 'organization') {
      $output = $node->title;
    }
    elseif (!empty($node->field_manufacture_reference['und'][0]['nid'])) {
      $output = _get_title_of_node($node->field_manufacture_reference['und'][0]['nid']).'|' .$node->title;
    }
  }

  return $output;
}

function _get_request_sub_type_from_settings_by_typebymailcat($id) {
  global $user,$company;
  $query = db_select('m6connect_scm_request_subtype_setting', 'scmsubtype');
  $query->fields('scmsubtype', array('id', 'title'));
  $query->condition('scmsubtype.main_type', $id, '=');
  //$query->condition('scmsubtype.nid', $company->nid, '=');
  $query->orderBy('scmsubtype.timestamp', 'ASC');
  $result = $query->execute()->fetchAllKeyed(0,1);
  foreach($result as $key=>$value) {
    $resultsub[$key] = ucwords($value); 
  }
  return $resultsub;
}

/**
 * Helper function to get scorecard table.
 */
function _get_scorecard_summary_table_data($where = '', $pr = '') {
  global $company;
  $rows = array();

  $header = array(
    array('data' => t('Scorecard Number'), 'class' => array('text-left')),
    array('data' => t('Scorecard Name'), 'class' => array('text-left')),
    array('data' => t('Entity'), 'class' => array('text-left')),
    array('data' => t('Project'), 'class' => array('text-center')),
    array('data' => t('Due Date'), 'class' => array('text-center')),
    array('data' => t('Status'), 'class' => array('text-center')),
    array('data' => t('Evaluate'), 'class' => array('text-center')),
    array('data' => t('Decision'), 'class' => array('text-center')),
    array('data' => t('Action'), 'class' => array('text-center','no-sort')),
  );

  if ($where != 'scorecard') {
    unset($header[8]);
  }

  if (!empty($pr)) {
    $getNodesNids = _fetching_scorecard_informationdata('scm_scorecard',$pr);
  }
  else {
    $getNodesNids = _fetching_scorecard_informationdata('scm_scorecard');
  }
  
  foreach ($getNodesNids as $delta => $nodeIds) {
    $scorecardData = node_load($nodeIds);

    $getProject = isset($scorecardData->field_project_nid_for_scm[LANGUAGE_NONE]) ? node_load($scorecardData->field_project_nid_for_scm[LANGUAGE_NONE][0]['value'])->title : 'None';
    $getRFP = isset($scorecardData->field_rfp_nid_for_scm[LANGUAGE_NONE]) ? node_load($scorecardData->field_rfp_nid_for_scm[LANGUAGE_NONE][0]['value'])->title : 'None';

    $ratingDueDate = isset($scorecardData->field_rating_due_date[LANGUAGE_NONE]) ? date('m/d/Y', strtotime($scorecardData->field_rating_due_date['und'][0]['value'])) : 'None';

    $date_class = '';
    if (!empty($scorecardData->field_rating_due_date[LANGUAGE_NONE][0]['value'])) {
      // If date is past, then add a class to show it in red.
      if (strtotime($scorecardData->field_rating_due_date[LANGUAGE_NONE][0]['value']) < strtotime('today midnight')) {
        $date_class = 'form-required';
      }
    }

    $scorecard_state = !empty($scorecardData->field_scorecard_state[LANGUAGE_NONE][0]['value']) ? $scorecardData->field_scorecard_state[LANGUAGE_NONE][0]['value'] : t('In-Progress');

    // Ratings
    $ratings = l(t('Ratings'), 'scorecard/evaluate/' . $nodeIds);

    // Decision
    $decision = l(t('Make Decision'), 'scorecard/decision');
    $sharerecommendation = '';
    if ($scorecard_state == 'Complete') {
      $ratings = l(t('Ratings'), 'scorecard/evaluate/' . $nodeIds, array('attributes' => array('class' => array('text-decoration-none', 'text-black'))));

      // Now, for decision we shall get names of all the companies or products.
      $question_builder_node = _get_question_builder_node_by_scorecard($scorecardData);
      $fetch_function = $question_builder_node->field_selection_criteria['und'][0]['value'] == 'product_based' ?  '_get_all_products_by_scorecard' : '_get_all_products_companies_by_scorecard';
      $products = $fetch_function($scorecardData->nid, 1);
      if (!empty($products)) {
        $prod_names = array_map(
          function($nid) {
            return ucwords(_get_node_title_by_nid($nid));
          },
          $products
        );
      }

      if (!empty($prod_names)) {
        $decision = implode(', ', $prod_names);
      }
      $sharerecommendation = 'pointer-events-none ';
    }
    
    if (!empty($where) && $where == 'scorecard') {
      $action = '<div class="project-action '.$sharerecommendation.'">
                  <div class="btn-group">
                    <div class="dropdown">
                      <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-cog" aria-hidden="true"></i>&nbsp;<i class="fa fa-caret-down" aria-hidden="true"></i></button>
                      <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                        <li>' . l('Edit', 'edit/' . $nodeIds, array('attributes' => array('class' => 'edit-scorecard', 'for' => $nodeIds))) . '</li>
                        <li>' . l('Delete', url('deletenode/nojs/' . $nodeIds), array('query'=> array('redirect_node_url' => current_path()), 'external' => TRUE, 'attributes' => array('class' => array('ctools-use-modal', ' ctools-modal-assign-dashboard-popup-style')))) . '</li>
                      </ul>
                    </div>
                  </div>
                </div>';
    }
    
    $rows[] = array(
      'data' => array(
        array('data' => l(ucwords($scorecardData->title), 'edit/' . $nodeId, array('attributes' => array('class' => array('edit-scorecard'), 'for' => $nodeIds, 'id' => 'scorecard-td-' . $nid))), 'class' => array('text-left', 'est-load-budget')),
        array('data' => t(ucwords($scorecardData->field_scorecard_name['und'][0]['value'])), 'class' => array('text-left')),
        array('data' => 'None', 'class' => array('text-center')),
        array('data' => $getProject, 'class' => array('text-center')),
        array('data' => $ratingDueDate, 'class' => array('text-center', $date_class)),
        array('data' => $scorecard_state, 'class' => array('text-center')),
        array('data' => $ratings, 'class' => array('text-center')),
        array('data' => $decision, 'class' => array('text-center'), 'width' => '270px'),
      ),
    );

    if ($where == 'scorecard') {
      $rows[$delta]['data'][8]['data'] = $action;
      $rows[$delta]['data'][8]['class'][0] = 'text-center';
    }
  }

  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No Scorecard created yet'), 'attributes' => array('class' => array('table', 'm6init-datatable', 'table-hover', 'text-center', 'm6connect-custom-table', 'm6connect-table-border')), 'id'=>'search-m6id-form'));
}

function _fetching_scorecard_informationdata($type,$pr) {
  global $company;  
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->fields('n', array('nid'));
  if(!empty($pr)){
    $query->join('field_data_field_project_nid_for_scm','dpr','dpr.entity_id = n.nid');  
    $query->condition('dpr.field_project_nid_for_scm_value',$pr,'=');
  }
  $query->condition('n.type',$type,'=');  
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getNodesNids = $query->execute()->fetchCol();
  return $getNodesNids;
}

function _get_question_builder_data_by_scorecard($scorecard_nid = NULL, $status = FALSE){
  global $company;
  $output = array();
  if ($scorecard_nid) {  
   $getNodesNids = $scorecard_nid;
  }else{
    $getNodesNids = _fetching_scorecard_information_active('scm_scorecard');
  }    
 $ListingNode = db_select('m6connect_qbuilder_data','squ');    
 $ListingNode->fields('squ');
  //$ListingNode->condition('squ.uid',$user->uid,'=');
  $ListingNode->condition('squ.company_nid',$company->nid,'=');
  $ListingNode->condition('scorecard_nid', $getNodesNids);
  //$ListingNode->condition('squ.category_id',$catid ,'=');
  $qbdata = $ListingNode->execute()->fetchAll();//rowCount();
  if(!empty($qbdata)){
    $output = $qbdata;
  }
  return $output;
}

function share_recommendation_callback($scoreCard, $ajax = TRUE) {
  global $company;
  
  $getAllScoreCards = _fetching_scorecard_information_evaluate('scm_scorecard',$company->nid);
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => $getAllScoreCards[$scoreCard->nid],
      'scorecard' => $scoreCard,
    );
    $output = ctools_modal_form_wrapper('scm_share_recommendation_callback_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }    
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('scm_share_recommendation_callback_form');
  } 
}

/**
 * Function to get form to share recommendation in SCM.
 */
function scm_share_recommendation_callback_form($form, &$form_state) {
  $form = array();
  $form['confirmation'] = array(
    '#type' => 'markup',
    '#markup' => t('Are you sure you want to share recommendation this scorecard? This action can\'t be undone.') . '<br/><br/>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Yes'),
  );
  if ($form_state['ajax']) {
    $form['close'] = array(
      '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
      '#suffix' => '</div></div>',
    );
  }

  return $form;
}

/**
 * Submit handler for share recommendation in SCM.
 */
function scm_share_recommendation_callback_form_submit($form, &$form_state) {//dpm($form_state);
  global $user,$company;
  if(!empty($form_state['triggering_element']['#value']) && $form_state['triggering_element']['#value']=='Yes' && !empty($form_state['scorecard'])){
    $form_state['scorecard']->field_scorecard_state['und'][0]['value'] = 'Complete';
    field_attach_presave('node', $form_state['scorecard']);
    field_attach_update('node', $form_state['scorecard']);
    entity_get_controller('node')->resetCache(array($form_state['scorecard']->nid));


    $shuser = array();
    $query = db_select('field_data_field_scorecard_reference', 'fsr');
    $query->leftjoin('field_data_field_share_with_user','fswu','fswu.entity_id=fsr.entity_id');
    $query->leftjoin('field_data_field_share_with_team','fswt','fswt.entity_id=fsr.entity_id');
    $query->fields('fsr', array('entity_id'));
    $query->fields('fswu');
    $query->fields('fswt');
    $query->condition('fsr.field_scorecard_reference_nid', $form_state['scorecard']->nid);
    $results = $query->execute()->fetchAll(); 
      foreach($results as $key=>$value){
        if($value->field_share_with_user_value){
          $shuser[] = $value->field_share_with_user_value;
        }
        if($value->field_share_with_team_value){

          $shuser = array_merge($shuser,_get_team_users($value->field_share_with_team_value));
        }
      }
    if(!empty($shuser)){
      
      foreach(array_unique($shuser) as $shuids){
        if (db_table_exists('m6connect_notification')) {
          $m6connect_notification = array(
            'type'         => 'scm',
            'event'        => 'share_recommendation',
            'entity_id'    => $form_state['scorecard']->nid,
            'company_nid'  => $company->nid,
            'message'      => NULL,
            'request_from' => $form_state['scorecard']->uid,
            'request_to'   => $shuids,
            'status'       => 1,
            'timestamp'    => REQUEST_TIME,
          );
          entity_save('m6connect_notification', (object) $m6connect_notification);
        }
      }
    }
    $form_state['ajax_commands'][] = ctools_ajax_command_redirect('/scorecard/my-scorecards');
  }

  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
}

function get_share_recommendation_status_by_scoreCard($scoreCard=null){
  $output = FALSE;
  $scoreCardNode = '';
  if(!empty($scoreCard)){
    $scoreCardNode = node_load($scoreCard);
  }else{
    $getNodesNids = _fetching_scorecard_information_active('scm_scorecard');
    $scoreCardNode = node_load($getNodesNids);
  }
  if(!empty($scoreCardNode) && !empty($scoreCardNode->field_scorecard_state['und'][0]['value']) && $scoreCardNode->field_scorecard_state['und'][0]['value'] == 'Complete'){
    $output = TRUE;
  }
  return $output;
}

function _get_teams_listing($only_array = FALSE, $view_type = 'grid', $project_nid = FALSE) {
  global $user, $company, $base_url;

  $path_to_theme = drupal_get_path('theme', 'm6connect');

  $active_project = '0';

  if (!empty($_SESSION['scm_project_nid'])) {
    $active_project = $_SESSION['scm_project_nid'];
  }

  if ($project_nid !== FALSE && !empty($project_nid)) {
    $active_project = $project_nid;
  }

  $color_classes = array(
    'active'   => 'green',
    'inactive' => 'red',
    'away'     => 'yellow',
    'offline'  => 'gray'
  );

  $query = db_select('node', 'n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_reference','pr','pr.entity_id=n.nid');
  $query->fields('n', array('nid','title'));
  $query->condition('n.type', 'scm_team');
  $query->condition('om.gid', $company->nid, '=');
  $query->condition('pr.field_project_reference_nid', $active_project);
  $query->orderBy('n.nid', 'DESC');

  $teams = $query->execute()->fetchAllKeyed(0,1);

  if ($only_array) {
    return $teams;
  }

  // Formatting the output.
  if (!empty($teams)) {
    $output = '';

    if ($view_type == 'list') {
      // If list type is requested, creating the table header.
      $header = array(
        array('data' => t('Image'), 'class' => array('col-md-2', 'text-center')),
        array('data' => t('Name'), 'class' => array('col-md-4', 'text-center')),
        array('data' => t('Members'), 'class' => array('col-md-5', 'text-center')),
        array('data' => t('Action'), 'class' => array('col-md-1', 'text-center')),
      );

      $rows = array();
    }

    foreach ($teams as $nid => $title) {
      $node = node_load($nid);

      // Members.
      $members = array();
      $extended_members = array();

      if (!empty($node->field_contact_details[LANGUAGE_NONE])) {
        if (count($node->field_contact_details[LANGUAGE_NONE]) > 4) {
          // We only need to show 4 members.
          $members = array_slice($node->field_contact_details[LANGUAGE_NONE], 0, 4, TRUE);
          $extended_members = array_slice($node->field_contact_details[LANGUAGE_NONE], 4, NULL, TRUE);
        }
        else {
          $members = $node->field_contact_details[LANGUAGE_NONE];
        }
      }

      // Image.
      $img_url = $$base_url . '/' . $path_to_theme . '/images/team_default_img.png';
      if (!empty($node->field_file[LANGUAGE_NONE][0]['fid'])) {
        $img_uri = $node->field_file[LANGUAGE_NONE][0]['uri'];
        $img_url = image_style_url('media_thumbnail', $img_uri);
      }

      // Action.
      $action = '<div class="project-action">
                  <div class="btn-group">
                    <div class="dropdown">
                      <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-cog" aria-hidden="true"></i>&nbsp;<i class="fa fa-caret-down" aria-hidden="true"></i></button>
                      <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                        <li>' . l('Edit', 'edit/' . $nid, array('attributes' => array('class' => 'edit-team', 'for' => $nid))) . '</li>
                        <li>' . l('Delete', url('deletenode/nojs/' . $nid), array('query'=> array('redirect_node_url' => 'scm/thread'), 'external' => TRUE, 'attributes' => array('class' => array('ctools-use-modal', ' ctools-modal-assign-dashboard-popup-style')))) . '</li>
                      </ul>
                    </div>
                  </div>
                </div>';

      // Names List.
      $names_list = '';
      $names_list .= '<div class="names-list">';
      $color_code = 'active_s';

      if (!empty($node->field_contact_details[LANGUAGE_NONE])) {
        $names_list .= '<ul class="list-group">';

        foreach ($members as $key => $value) {
          if (is_numeric($value['value'])) {
            $uname = _get_user_full_name($value['value']);
          }
          else {
            $uname = $value['value'];
          }

          switch ($color_code) {
            case 'active_s':
              $color_code = 'active';
              break;
            case 'active':
              $color_code = 'inactive';
              break;
            case 'inactive':
              $color_code = 'away';
              break;
            case 'away':
              $color_code = 'offline';
              break;
            case 'offline':
              $color_code = 'active';
              break;
            
            default:
              $color_code = 'active';
              break;
          }

          $remove_member_link = l('<i class="fa fa-times" aria-hidden="true"></i>', 'remove-team-member/' . $nid . '/' . $key . '/nojs', array('html' => TRUE, 'attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'))));
          $names_list .= '<li class="list-group-item circle-color-' . $color_classes[$color_code] . '">
                        <span class="badge">
                        ' . $remove_member_link . '
                        </span>' . $uname . '
                      </li>';
        }

        $names_list .= '</ul>';
      }
      else {
        $names_list .= t('No team members yet!');
      }

      // See all link.
      // Showing when names are more than 4.
      if (count($node->field_contact_details[LANGUAGE_NONE]) > 4) {
        $names_list .= '<div class="see-all-link">';
        $names_list .= l(t('See All...'), 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('see-all-members', 'pull-left', 'closed'))));
        $names_list .= '</div>';

        $names_list .= '<div class="team-list-extended" style="display:none;">';
        $names_list .= '<ul class="list-group">';

        foreach ($extended_members as $key => $value) {
          if (is_numeric($value['value'])) {
            $uname = _get_user_full_name($value['value']);
          }
          else {
            $uname = $value['value'];
          }

          switch ($color_code) {
            case 'active_s':
              $color_code = 'active';
              break;
            case 'active':
              $color_code = 'inactive';
              break;
            case 'inactive':
              $color_code = 'away';
              break;
            case 'away':
              $color_code = 'offline';
              break;
            case 'offline':
              $color_code = 'active';
              break;
            
            default:
              $color_code = 'active';
              break;
          }

          $remove_member_link = l('<i class="fa fa-times" aria-hidden="true"></i>', 'remove-team-member/' . $nid . '/' . $key . '/nojs', array('html' => TRUE, 'attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'))));
          $names_list .= '<li class="list-group-item circle-color-' . $color_classes[$color_code] . '">
                        <span class="badge">
                        ' . $remove_member_link . '
                        </span>' . $uname . '
                      </li>';
        }

        $names_list .= '</ul>';
        $names_list .= '</div>'; // End team-list-extended
      }

      $names_list .= '</div>'; // End names-list
      if ($view_type == 'grid') {
        $output .= '<div class="col-md-6 col-sm-6 col-xs-12 team-boxes">';

        $output .= '<div class="team-list-item thumbnail dashboard-block-content">';

        $output .= '<div class="team-image clearfix text-center well-sp-2">';
        $output .= '<img src="' . $img_url . '" class="thumbnail display-inline-block" />';
        $output .= '<div class="team-actions">';
        $output .= $action;
        $output .= '</div>';
        $output .= '</div>';

        // Title.
        $output .= '<div class="clearfix team-title text-center">';
        $output .= '<h4>' . ucwords($title) . '</h4>';
        $output .= '</div>';

        // New Name textfield.
        $member_form = drupal_get_form('add_member_form_' . $nid, $node);
        $output .= render($member_form);

        // Members List.
        $output .= $names_list;

        $output .= '</div>'; // End team-list-item
        $output .= '</div>'; // End col-md-6 col-sm-6 col-xs-12
      }
      else {
        $rows[] = array(
          array('data' => '<img src="' . $img_url . '" class="thumbnail">'),
          array('data' => ucwords($node->title)),
          array('data' => $names_list),
          array('data' => $action),
        );
      }
    }

    if ($view_type == 'list') {
      $output = '<div class="col-md-12 col-sm-12 col-xs-12">';
      $output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No Teams Created Yet!'), 'attributes' => array('class' => array('table', 'scm-border-team', 'm6connect-custom-table', 'm6connect-table-border', 'm6init-datatable', 'margin-0', 'team-list-item'))));
      $output .= '</div>';
    }
  }
  else {
    $output = '';
  }

  return $output;
}

/**
 * Helpe function to get all teams by scorecard.
 * If a scorecard nid is not provided then current active scorecard is
 * used.
 */
function _get_all_teams_by_scorecard($scorecard_nid = FALSE) {
  if ($scorecard_nid === FALSE || empty($scorecard_nid)) {
    $scorecard_nid = _fetching_scorecard_information_active('scm_scorecard');
  }

  if (empty($scorecard_nid)) {
    // If we do not have scorecard nid for any reason, then abort. Although it
    // should never happen.
    return array();
  }

  // Getting project of scorecard.
  $scorecard_node = node_load($scorecard_nid);

  if (empty($scorecard_node->field_project_nid_for_scm[LANGUAGE_NONE][0]['value'])) {
    // If a scorecard was created wihtout any project's reference, then we shall
    // abort for now.
    return array();
  }

  $project_nid = $scorecard_node->field_project_nid_for_scm[LANGUAGE_NONE][0]['value'];

  $q = db_select('node', 'n');
  $q->fields('n', array('nid', 'title'));
  $q->join('field_data_field_project_reference', 'pr', 'pr.entity_id=n.nid');
  $q->condition('pr.field_project_reference_nid', $project_nid);
  $q->condition('n.type', 'scm_team');
  $q->orderBy('n.nid', 'DESC');

  $teams = $q->execute()->fetchAllKeyed(0, 1);

  return $teams;
}

/**
 * Implements hook_forms().
 *
 * All add new member forms share the same form handler.
 */
function m6connect_scm_forms() {
  $forms = array();

  $teams = _get_teams_listing(TRUE);
  if (!empty($teams)) {
    foreach (array_keys($teams) as $nid) {
      $forms['add_member_form_' . $nid]['callback'] = 'add_new_member_form';
    }
  }
  return $forms;
}

function add_new_member_form($form, &$form_state, $node) {
  $form_state['node'] = $node;
  $form['#action'] = url('scm/thread');
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#title_display' => 'invisible',
    '#autocomplete_path' => 'users/scm-autocomplete',
    '#prefix' => '<div class="clearfix team-new-name margin-bottom-10"><div class="input-group">',
    '#attributes' => array('placeholder' => t('Name'), 'class' => array('form-control'))
  );

  $form['submit'] = array(
    '#type'       => 'submit',
    '#value'      => '+',
    '#suffix'     => '</div></div>',
    '#attributes' => array('class' => array('input-group-addon', 'btn', 'btn-primary')),
  );

  return $form;
}

function add_new_member_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['name']) && !empty($form_state['node'])) {
    $account = user_load_by_name($form_state['values']['name']);
    if ($account) {
      $node = $form_state['node'];
      $already_added = FALSE;
      if (!empty($node->field_contact_details[LANGUAGE_NONE])) {
        // We need to see that the requested user is not already added to the
        // node. If so then skip.
        foreach ($node->field_contact_details[LANGUAGE_NONE] as $key => $value) {
          if ($value['value'] == $account->uid) {
            drupal_set_message(t('The requested user is already a member of team!'), 'warning', FALSE);
            $already_added = TRUE;
            break;
          }
        }
      }

      if (!$already_added) {
        $node->field_contact_details[LANGUAGE_NONE][] = array('value' => $account->uid);
        field_attach_presave('node', $node);
        field_attach_update('node', $node);
        entity_get_controller('node')->resetCache(array($node->nid));
        drupal_set_message(t('The user added to team successfully.'), 'status', FALSE);
      }
    }
  }

  // $commands = array();
  // $commands[] = ajax_command_html('.team-members-listing', _get_teams_listing());

  // return array('#type' => 'ajax', '#commands' => $commands);
}

function user_scm_autocomplete($string = '') {
  $matches = array();
  global $company;
  $users = _get_user_mappping_by_group_company_nid($company->nid);

  if ($string && $users) {
    $users = array_keys($users);
    $result = db_select('users')
      ->fields('users', array('name'))
      ->condition('name', db_like($string) . '%', 'LIKE')
      ->condition('uid', $users, 'IN')
      ->range(0, 10)
      ->execute();
    foreach ($result as $user) {
      $matches[$user->name] = check_plain($user->name);
    }
  }

  drupal_json_output($matches);
}

function get_scm_user_database_datasall($rolename) {
  global $user;
  global $company;  
  $userList = _get_company_users_by_og_roles($company->nid,$rolename);
  foreach ($userList as $key => $value) {
     $result[$value] = user_load($value)->realname;
  }
  return $result;
}

/**
 * Helper function to clear associative array.
 */
function _clear_associative_array_teams($fields = array(), $return = array()) {
  if (!empty($fields)) {
    if (is_array($fields)) {
      foreach ($fields as $key => $value) {
        if (is_scalar($value)) {
          $return[$value] = $value;
        }
        if (is_array($value) && !empty($value)) {
          $return = _clear_associative_array_teams($value, $return);
        }
      }
    }
  }
  return $return;
}

function _get_team_users_multiple($teams = array()) {
  if (empty($teams)) {
    return array();
  }

  $return = array();

  foreach ($teams as $key => $value) {
    $node = node_load($value);
    if (!empty($node->field_contact_details[LANGUAGE_NONE])) {
      foreach ($node->field_contact_details[LANGUAGE_NONE] as $data) {
        $return[$value][] = $data['value'];
      }
    }
    else {
      $return[$value] = array();
    }
  }

  return $return;
}

function _get_team_users($team = '') {
  if (!is_scalar($team)) {
    // We do not accept arrays or objects in this function.
    return array();
  }
  $d =  _get_team_users_multiple(array($team));
  if (empty($d)) {
    return array();
  }

  // For single request return the first set, as _get_team_users_multiple()
  // returns associative array.
  return array_shift($d);
}

/**
 * Helper function to get all main categories.
 */
function _get_all_main_categories_scm() {
  global $company;
  return db_select('m6connect_scm_settings_categories', 'c')
    ->fields('c', array('id', 'title'))
    ->condition('company', $company->nid)
    ->condition('parent', 0, '=')
    ->execute()
    ->fetchAllKeyed();
}

/**
 * Helper function to get all main categories.
 */
function _get_all_sub_categories_scm($parent = '') {
  if (empty($parent)) {
    return array();
  }

  global $company;
  return db_select('m6connect_scm_settings_categories', 'c')
    ->fields('c')
    ->condition('parent', $parent, '=')
    ->execute()
    ->fetchAll();
}

/**
 * Helper function to get all sub categories for select option.
 */
function _get_all_sub_categories_scm_keyed($parent = '') {
  if (empty($parent)) {
    return array();
  }

  global $company;
  return db_select('m6connect_scm_settings_categories', 'c')
    ->fields('c', array('id', 'title'))
    ->condition('parent', $parent, '=')
    ->execute()
    ->fetchAllKeyed();
}

/**
 * Helper function to get all scm categories grouped by SCL.
 */
function _get_all_sub_categories_scm_grouped_by_scl($parent = NULL) {
  $sub_cats_diff = array();

  if (empty($parent)) {
    return $sub_cats_diff;
  }

  $all_cats = _get_all_sub_categories_scm($parent);

  if (empty($all_cats)) {
    return $sub_cats_diff;
  }

  foreach ($all_cats as $key => $value) {
    $sub_cats_diff[$value->scl][$value->id] = $value->title;
  }

  return $sub_cats_diff;
}

/**
 * Helper function to get main cat SCL.
 */
function _get_main_cat_scl($main_cat_id = NULL) {
  if (empty($main_cat_id)) {
    return NULL;
  }

  return db_select('m6connect_scm_settings_categories', 'u')
    ->fields('u', array('scl'))
    ->condition('id', $main_cat_id)
    ->execute()
    ->fetchField();
}

/**
 * Helper function to load a category.
 */
function scm_category_load($cat_id = NULL) {
  if (empty($cat_id)) {
    return array();
  }

  return db_select('m6connect_scm_settings_categories', 'c')
    ->fields('c')
    ->condition('id', $cat_id)
    ->execute()
    ->fetchObject();
}

function m6_contact_site_after_build_custom($form) {
  $form['captcha']['captcha_widgets']['captcha_response']['#title'] = t('How\'s Your Math?');
  $form['captcha']['captcha_widgets']['captcha_response']['#description'] = '';
  $form['name']['#title'] = t('Name');
  $form['mail']['#title'] = t('Email');
  $form['mail']['#title'] = t('Email');
  return $form;
}