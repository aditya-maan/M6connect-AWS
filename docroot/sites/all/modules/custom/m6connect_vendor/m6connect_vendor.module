<?php

/**
 * @file Integrates Vendor Services into M6Connect.
 * Developed by Saurabh Bhardwaj (saurabh@maansoftwares.com)
 * Timestamp = 1487748013
 */

/**
 * Implements hook_init().
 */
function m6connect_vendor_init() {
  // Adding company ratings.
  if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
    $node = menu_get_object();
    if ($node->type == 'organization') {
      // Adding current company ratings also.
      $vendor_ratings_js_data = array();
      // $vendor_ratings_options = variable_get('vendor_rating_types', array());
      $vendor_ratings_options = _get_vendor_ratings_options($node->nid, 'ratings');
      $vendor_ratings = _get_vendor_ratings($node, 'm6reach', TRUE, TRUE, FALSE, TRUE);

      foreach ($vendor_ratings_options as $key => $value) {
        $vendor_ratings_js_data[$key] = array('value' => $value, 'rating' => !empty($vendor_ratings[$key]) ? $vendor_ratings[$key] : 0,);
      }

      $argument = array('m6reach_vendor_rating_options_banner' => $vendor_ratings_js_data);
      drupal_add_js($argument, 'setting');

      // Adding company page JS
      drupal_add_js(drupal_get_path('module', 'm6connect_vendor') . '/js/' . 'company_page.js');
    }
  }
}

/**
 * Implements hook_menu().
 */
function m6connect_vendor_menu() {
  $items = array();

  // M6Reach/Ratings callbacks.
  $items['vendor/dashboard'] = array(
    'title'           => '',
    'page callback'   => 'vendor_m6reach_dashboard',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['vendor/m6reach'] = array(
    'title'           => '',
    'page callback'   => 'vendor_m6reach_content',
    'access callback' => '_is_m6_user_logged_in',
    'page arguments'  => array('m6reach'),
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['vendor/preferred'] = array(
    'title'           => '',
    'page callback'   => 'vendor_m6reach_content',
    'access callback' => '_is_m6_user_logged_in',
    'page arguments'  => array('preferred'),
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['vendor/preferred/spending/summary'] = array(
    'title'           => '',
    'page callback'   => 'vendor_m6reach_content_spending',
    'page arguments'  => array('summary'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['vendor/preferred/spending/detail'] = array(
    'title'           => '',
    'page callback'   => 'vendor_m6reach_content_spending',
    'page arguments'  => array('detail'),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['vendor/pending'] = array(
    'title'           => '',
    'page callback'   => 'vendor_m6reach_content',
    'access callback' => '_is_m6_user_logged_in',
    'page arguments'  => array('pending'),
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['vendor-manager-messaging/%node/%node/%user/%ctools_js'] = array(
    'page callback'   => 'vendor_manager_messaging',
    'page arguments'  => array(1, 2, 3, 4),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['add-minority-vendor/%/%ctools_js'] = array(
    'page callback'   => 'add_minority_vendor',
    'page arguments'  => array(1, 2),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['remove-vendor/%node/%ctools_js'] = array(
    'page callback'   => 'remove_vendor_ajax',
    'page arguments'  => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['request-feedback/%node/%node/%ctools_js'] = array(
    'page callback'   => 'request_feedback_m6reach',
    'page arguments'  => array(1,2,3),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['export/vendor-spending/%ctools_js'] = array(
    'page callback'   => 'export_vendor_data',
    'page arguments'  => array(2),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['vendor/testpdf'] = array(
    'page callback'   => 'vendor_testpdf',
    'page arguments'  => array(2),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'm6reach.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );

  // Settings callbacks.
  $items['vendor/settings'] = array(
    'title'           => '',
    'page callback'   => 'vendor_m6reach_settings',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'settings.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['remove-m6reach-options'] = array(
    'title'           => '',
    'page callback'   => 'remove_m6reach_options_ajax',
    'access callback' => TRUE,
    'file'            => 'settings.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );

  // Common Callbacks.
  $items['service-message-remove/%/%ctools_js'] = array(
    'page callback'   => 'service_message_remove',
    'page arguments'  => array(1, 2),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['thumbs-note/%'] = array(
    'page callback'   => 'thumbs_up_down_notes',
    'page arguments'  => array(1),
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['edit-note/%/%ctools_js'] = array(
    'page callback'   => 'edit_note_vendor',
    'page arguments'  => array(1,2),
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['remove-note/%/%ctools_js'] = array(
    'page callback'   => 'remove_note_vendor',
    'page arguments'  => array(1,2),
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['request-feedback-company/%node/%ctools_js'] = array(
    'page callback'   => 'request_feedback_company',
    'page arguments'  => array(1,2),
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['add-note/%/%/%ctools_js'] = array(
    'page callback'   => 'add_new_note_vendor',
    'page arguments'  => array(1,2,3),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['approve-m6reach/%/%node/%/%ctools_js'] = array(
    'page callback'   => 'approve_m6reach_ratings_notes',
    'page arguments'  => array(1,2,3,4),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['delete-m6reach/%/%node/%/%ctools_js'] = array(
    'page callback'   => 'delete_m6reach_ratings_notes',
    'page arguments'  => array(1,2,3,4),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['become-vendor/%node/%node/%ctools_js'] = array(
    'page callback'   => 'become_vendor_company',
    'page arguments'  => array(1,2,3),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['acknowledge-vendor/%node/%node/%ctools_js'] = array(
    'page callback'   => 'acknowledge_vendor_request_additional_info_vendor',
    'page arguments'  => array(1,2,3, 'acknowledge_vendor'),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['request-info-vendor/%node/%node/%ctools_js'] = array(
    'page callback'   => 'acknowledge_vendor_request_additional_info_vendor',
    'page arguments'  => array(1,2,3, 'request_additional_info_vendor'),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['vendor-insert-message'] = array(
    'page callback'   => 'vendor_insert_message_ajax',
    'access callback' => 'user_is_logged_in',
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['vendor-refresh-message'] = array(
    'page callback'   => 'vendor_refresh_message_ajax',
    'access callback' => 'user_is_logged_in',
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['approve-deny-vendor/%/%node/%node/%ctools_js'] = array(
    'page callback'   => 'approve_deny_vendor_callback',
    'page arguments'  => array(1,2,3,4),
    'access callback' => 'user_is_logged_in',
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['vendor/import'] = array(
    'page callback'   => 'import_vendor_csv',
    'access callback' => 'user_is_logged_in',
    'file'            => 'common.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
    'type'            => MENU_NORMAL_ITEM,
  );

  // Worker feedback
  $items['vendor/worker-feedback'] = array(
    'title'           => '',
    'page callback'   => 'vendor_worker_feedback_content',
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'worker_feedback.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['add-worker-vendor/%ctools_js'] = array(
    'title'           => '',
    'page callback'   => 'add_worker_vendor_content',
    'page arguments'  => array(1),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'worker_feedback.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['add-note-worker/%/%ctools_js'] = array(
    'page callback'   => 'add_new_note_worker',
    'page arguments'  => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'worker_feedback.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['worker-feedback-messaging/%user/%ctools_js'] = array(
    'page callback'   => 'worker_feedback_messaging',
    'page arguments'  => array(1, 2),
    'access callback' => '_is_m6_user_logged_in',
    'file'            => 'worker_feedback.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );
  $items['remove-worker-feedback/%user/%ctools_js'] = array(
    'page callback'   => 'remove_worker_feedback_ajax',
    'page arguments'  => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type'            => MENU_CALLBACK,
    'file'            => 'worker_feedback.inc',
    'file path'       => drupal_get_path('module', 'm6connect_vendor') . '/includes',
  );

  return $items;
}

/**
 * Function to return table for vendor m6reach content.
 * @param $type.
 *   An string indicating what type vendors are requested.
 *   Possible options:
 *    - m6reach = Only diversity vendors (pending and accepted)
 *    - preferred = All vendors (only accepted)
 *    - pending = All vendors (only pending)
 * @param $start_range.
 *   The start range to fetch data. Used in pagers.
 * @param $end_range.
 *   The end range to fetch data. Used in pagers.
 */
function _get_vendor_m6reach_table($type = 'm6reach') {
  global $user, $company;

  // Adding css for vendor notes table content.
  drupal_add_css(
    '.vendor-like-note {
       float: left;
       width: 53px;
    }
    .vendor-dislike-note {
      float: right;
      width: 53px;
    }',
    array('type' => 'inline')
  );

  // Saving original type.
  $type_org = $type;

  if ($type_org == 'm6reach') {
    $header = array(
      array('data' => 'Company','class'=>array('text-center')),
      array('data' => 'M6 Number','class'=>array('text-center')),
      array('data' => 'Ratings','class'=>array('text-center', 'custom-rating-sort'), 'width' => '150px;', 'onclick' => 'jQuery(\'.custom-rating-sort-it-instead\').click(); return false;'),
      array('data' =>  'Ratings Sorted', 'class'=>array('hidden', 'custom-rating-sort-it-instead')),
      array('data' => 'Preferred Vendor Status','class'=>array('text-center')),
      array('data' => 'Locations','class'=>array('text-center')),
      array('data' => 'Notes','class'=>array('text-center'), 'width' => '130px;'),
      array('data' => 'Asset List','class'=>array('text-center')),
      array('data' => 'RFP | Awarded','class'=>array('text-center')),
      array('data' => 'Actions','class'=>array('text-center')),
    );
  }
  elseif ($type_org == 'preferred' || $type_org == 'pending') {
    $header = array(
      array('data' => 'Company','class'=>array('text-center')),
      array('data' => 'M6 Number','class'=>array('text-center')),
      array('data' => 'Ratings','class'=>array('text-center', 'custom-rating-sort'), 'width' => '150px;', 'onclick' => 'jQuery(\'.custom-rating-sort-it-instead\').click(); return false;'),
      array('data' => 'Ratings Sorted', 'class'=>array('hidden', 'custom-rating-sort-it-instead')),
      // array('data' => 'Preferred Vendor Status','class'=>array('text-center')),
      // array('data' => 'Region','class'=>array('text-center')),
      array('data' => 'M6 Company type','class'=>array('text-center')),
      array('data' => 'Submitted Proposals','class'=>array('text-center')),
      array('data' => 'Awarded Proposals','class'=>array('text-center')),
      // array('data' => 'Notes','class'=>array('text-center'), 'width' => '130px;'),
      array('data' => 'Asset List','class'=>array('text-center')),
      array('data' => 'Actions','class'=>array('text-center')),
    );
  }
  else {
    $header = array(
      array('data' => 'Company','class'=>array('text-center')),
      array('data' => 'M6 Number','class'=>array('text-center')),
      array('data' => 'Ratings','class'=>array('text-center', 'custom-rating-sort'), 'width' => '150px;', 'onclick' => 'jQuery(\'.custom-rating-sort-it-instead\').click(); return false;'),
      array('data' => 'Ratings Sorted', 'class'=>array('hidden', 'custom-rating-sort-it-instead')),
      array('data' => 'Preferred Vendor Status','class'=>array('text-center')),
      array('data' => 'Locations','class'=>array('text-center')),
      array('data' => 'Notes','class'=>array('text-center')),
      array('data' => 'Actions','class'=>array('text-center')),
    );
  }

  $rows = array();

  // Getting current company's vendor managers.
  $company_admins = _get_company_users_by_og_roles_with_status($company->nid, 'company admin', 1);
  $vendor_managers = _get_company_users_by_og_roles_with_status($company->nid, 'Vendor Manager', 1);
  $eligible_users = array_unique(array_merge($company_admins, $vendor_managers));
  
  if ($type_org == 'm6reach') {
    $query = db_select('node', 'n');
  }
  else {
    $query = db_select('node', 'n')->extend('PagerDefault')->limit(50);
  }
  $query->join('field_data_field_vendor_type', 'm6r', 'm6r.entity_id=n.nid');

  if ($type_org == 'pending') {
    $query->join('og_membership', 'om', 'om.etid=n.nid');
    $query->condition('om.gid', $company->nid, '=');
    $query->condition('n.status', 0);
  }
  elseif ($type_org == 'preferred') {
    $query->condition('n.status', 1);
  }

  $query->fields('n', array('nid'));

  if ($type_org != 'pending') {
    if (!empty($eligible_users)) {
      $db_or = db_or()->condition('n.uid', $user->uid)->condition('n.uid', $eligible_users);
      $query->condition($db_or);
    }
    else {
      $query->condition('n.uid', $user->uid);
    }
  }

  if ($type == 'preferred' || $type == 'pending') {
    $type = 'm6reach';
  }
  $query->condition('n.type', 'vendor');
  $query->condition('m6r.field_vendor_type_value', $type);
  $query->orderBy('n.created', 'DESC');

  if ($type_org == 'm6reach') {
    $query2 = db_select('node', 'n')->extend('PagerDefault')->limit(50);
    $query2->fields('n', array('nid'));
    $query2->join('og_membership', 'om', 'om.etid=n.nid');
    $query2->join($query, 'oq', 'oq.nid=n.nid');
    $query2->join('field_data_field_diversity_credentials', 'fd', 'fd.entity_id=om.gid');
    $query2->groupBy('fd.entity_id');
    $execute = $query2->execute();
  }
  else {
    $execute = $query->execute();
  }

  if ($execute->rowCount() > 0) {
    // Getting current user's OG Roles.
    $is_user_vendor_manager = _is_user_vendor_manager($company, $user);

    while ($result = $execute->fetchField()) {
      $vendor_node = node_load($result);
      $m6number = $vendor_node->field_m6number[LANGUAGE_NONE][0]['value'];
      $vendor_status = $vendor_node->field_vendor_status[LANGUAGE_NONE][0]['value'];
      $vendor_status = ucwords(str_replace('_', ' ', $vendor_status));

      $vendor_ratings = _get_vendor_ratings($vendor_node, $type);
      $vendor_ratings_uf = _get_vendor_ratings($vendor_node, $type, TRUE);
      if (!empty($vendor_ratings_uf)) {
        $m6rank_ratings_uf = number_format(array_sum($vendor_ratings_uf) / count($vendor_ratings_uf), 1, '.', '');
      }
      else {
        $m6rank_ratings_uf = 0;
      }

      $og_nid = !empty($vendor_node->og_group_ref[LANGUAGE_NONE][0]['target_id']) ? $vendor_node->og_group_ref[LANGUAGE_NONE][0]['target_id'] : '';
      $requestor_company = !empty($vendor_node->field_requestor_company[LANGUAGE_NONE][0]['target_id']) ? node_load($vendor_node->field_requestor_company[LANGUAGE_NONE][0]['target_id']) : '';

      $og_node = node_load($og_nid);
      // Get diversity
      $diverArr = array('No diversity defined!');
      if ($type == 'm6reach' && !empty($og_nid)) {

        if (!empty($og_node->field_diversity_credentials['und'])) {
          $diverArr = array();
          foreach ($og_node->field_diversity_credentials['und'] as $diverKey => $diverVal) {
            $diverArr[] = node_load($diverVal['target_id'])->title;
          }
        }

        // Getting RFP awarded.
        $rfp_awarded = _get_rfp_awarded_by_cnid($og_node);
        $rfp_awarded_unf = _get_rfp_awarded_by_cnid($og_node, TRUE);
        $rfp_awarded_ratio = '-';
        if (!empty($rfp_awarded_unf['rfp']) && !empty($rfp_awarded_unf['awarded'])) {
          $rfp_awarded_ratio = ($rfp_awarded_unf['awarded'] / $rfp_awarded_unf['rfp']) * 100;
          $rfp_awarded_ratio = number_format($rfp_awarded_ratio, 2, '.', '') . '%';
        }

        $rfp_awarded_alone = '-';
        $rfp_rfp_alone = '-';
        if (!empty($rfp_awarded_unf['awarded'])) {
          $rfp_awarded_alone = '<strong>$' . number_format($rfp_awarded_unf['awarded']) . '</strong>';
        }
        if (!empty($rfp_awarded_unf['rfp'])) {
          $rfp_rfp_alone = '<strong>$' . number_format($rfp_awarded_unf['rfp']) . '</strong>';
        }
      }

      if ($type_org == 'pending' && !empty($requestor_company)) {
        $company_details = _get_vendor_company_details($requestor_company, FALSE, FALSE, 'autocomplete_company_logo');
        $only_address = _get_vendor_company_details($requestor_company, TRUE);

        $m6_company_type = _get_m6_company_type($requestor_company);
      }
      else {
        $company_details = _get_vendor_company_details($og_node, FALSE, FALSE, 'autocomplete_company_logo');
        $only_address = _get_vendor_company_details($og_node, TRUE);

        $m6_company_type = _get_m6_company_type($og_node);
      }

      if (empty($m6_company_type)) {
        $m6_company_type = '-';
      }

      // <li>' . l(t('Email'), 'email-vendor/' . $vendor_node->nid) . '</li>
      // Making links according to user roles.
      $remove_link = '';
      $email_link = '';
      $message_link = '';
      $acknowledge_link = '';
      $request_info_link = '';

      if (empty($vendor_node->og_group_ref[LANGUAGE_NONE][0]['target_id'])) {
        $email_link = '<li>' . l(t('Email'), 'javascript:void(0)', array('external' => TRUE, 'HTML' => TRUE,)) . '</li>';
      }

      // Message link is for vendor managers only. And should be shown to VMs
      // only when the vendor is connected with a company.
      // If a vendor is still invited, and not yet joined, then there is no
      // sense of showing message link. As the message will happen between VM
      // and company admin.
      if (!empty($og_nid) && $is_user_vendor_manager) {
        $message_link = '<li>' . l(t('Message'), 'vendor-manager-messaging/' . $og_nid . '/' . $vendor_node->nid . '/' . $user->uid . '/nojs', array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-onboarding-message-popup-style', 'trigger-edit')))) . '</li>';
        $acknowledge_link = '<li>' . l(t('Acknowledge Receipt'), 'acknowledge-vendor/' . $og_nid . '/' . $vendor_node->nid . '/nojs', array('attributes' => array('class' => array('acknowledge-vendor-link', 'use-ajax', 'trigger-edit')))) . '</li>';
        $request_info_link = '<li>' . l(t('Request Additional Information'), 'request-info-vendor/' . $og_nid . '/' . $vendor_node->nid . '/nojs', array('attributes' => array('class' => array('request-additional-info-link', 'use-ajax', 'trigger-edit')))) . '</li>';
      }

      $edit_link = '<li>' . l(t('Edit'), 'edit-vendor/' . $vendor_node->nid, array('attributes' => array('class' => array('edit-vendor-node-link')))) . '</li>';

      // Getting notes on a vendor.
      $vender_notes = _get_notes_for_vendor($vendor_node);

      // If user is vendor manager.
      if ($is_user_vendor_manager) {
        $remove_link = '<li>' . l(t('Remove'), 'remove-vendor/' . $vendor_node->nid . '/nojs', array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style')))) . '</li>';
      }

      $action = '<div class="vendor-action">
        <div class="btn-group"><div class="dropdown">
        <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
        <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">' . $edit_link . $remove_link . $email_link . $message_link . $acknowledge_link . $request_info_link . '
        </ul></div></div></div>';

      if ($type_org == 'm6reach') {
        $rows[] = array(
          array('data' => $company_details, 'class'=>array('text-center')),
          array('data' => $m6number, 'class'=>array('text-center')),
          array('data' => $vendor_ratings, 'class'=>array('text-left')),
          array('data' => $m6rank_ratings_uf, 'class'=>array('hidden')),
          array('data' => $vendor_status, 'class'=>array('text-center')),
          array('data' => $only_address, 'class'=>array('text-center')),
          array('data' => $vender_notes, 'class'=>array('text-center')),
          array('data' => implode(', ', $diverArr), 'class'=>array('text-center')),
          array('data' => $rfp_awarded, 'class'=>array('text-center')),
          array('data' => $action, 'class'=>array('text-center')),
        );
      }
      elseif ($type_org == 'preferred' || $type_org == 'pending') {
        $rows[] = array(
          array('data' => l($company_details, 'javascript:void(0)', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('trigger-edit')))), 'class'=>array('text-center')),
          array('data' => $m6number, 'class'=>array('text-center')),
          array('data' => $vendor_ratings, 'class'=>array('text-left')),
          array('data' => $m6rank_ratings_uf, 'class'=>array('hidden')),
          // array('data' => $vendor_status, 'class'=>array('text-center')),
          // array('data' => $only_address, 'class'=>array('text-center')),
          array('data' => $m6_company_type, 'class'=>array('text-center')),
          array('data' => $rfp_awarded_alone, 'class'=>array('text-center')),
          array('data' => $rfp_rfp_alone, 'class'=>array('text-center')),
          array('data' => implode(', ', $diverArr), 'class'=>array('text-center')),
          array('data' => $action, 'class'=>array('text-center')),
        );
      }
      else {
        $rows[] = array(
          array('data' => $company_details, 'class'=>array('text-center')),
          array('data' => $m6number, 'class'=>array('text-center')),
          array('data' => $vendor_ratings, 'class'=>array('text-left')),
          array('data' => $m6rank_ratings_uf, 'class'=>array('hidden')),
          array('data' => $vendor_status, 'class'=>array('text-center')),
          array('data' => $only_address, 'class'=>array('text-center')),
          array('data' => $vender_notes, 'class'=>array('text-center')),
          array('data' => $action, 'class'=>array('text-center')),
        );
      }
    }
  }

  $return = '';
  $return .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No Vendor(s) Yet'), 'sticky' => FALSE, 'attributes' => array('class' => array('table', 'm6connect-custom-table', 'm6connect-custom-vendor-manager-main-table', 'table-hover', 'table-bordered', 'text-center', 'm6init-datatable'))));

  $return .= theme('pager');
  return $return;
}

/**
 * Helper function to get preferred spending table.
 */
function _get_vendor_preferred_spending_table($type = 'summary') {
  global $user, $company;

  $header = array(
    array('data' => t('Company'), 'class' => array('text-center')),
    array('data' => t('Region of Work'), 'class' => array('text-center')),
    array('data' => t('Site'), 'class' => array('text-center')),
    array('data' => t('Total Expense'), 'class' => array('text-center')),
    array('data' => t('Total Capital'), 'class' => array('text-center')),
    array('data' => t('Total'), 'class' => array('text-center')),
    array('data' => t('Accounting Unit Description'), 'class' => array('text-center')),
    array('data' => t('Diversity Type'), 'class' => array('text-center')),
  );
  if ($type == 'detail') {
    // Providing edit option for detail page.
    $header = array();
    $header = array(
      array('data' => t('Company'), 'class' => array('text-center')),
      array('data' => t('Region of Work'), 'class' => array('text-center')),
      array('data' => t('Site'), 'class' => array('text-center')),
      array('data' => t('Total Expense'), 'class' => array('text-center')),
      array('data' => t('Total Capital'), 'class' => array('text-center')),
      array('data' => t('Total'), 'class' => array('text-center')),
      array('data' => t('Accounting Unit Description'), 'class' => array('text-center')),
      array('data' => t('Account Description'), 'class' => array('text-center')),
      array('data' => t('Actions'), 'class' => array('text-center')),
    );
  }

  $rows = array();

  // Getting current company's vendor managers.
  $company_admins = _get_company_users_by_og_roles_with_status($company->nid, 'company admin', 1);
  $vendor_managers = _get_company_users_by_og_roles_with_status($company->nid, 'Vendor Manager', 1);
  $eligible_users = array_unique(array_merge($company_admins, $vendor_managers));
  
  $query = db_select('node', 'n')->extend('PagerDefault')->limit(50);
  $query->join('field_data_field_vendor_type', 'm6r', 'm6r.entity_id=n.nid');
  $query->fields('n', array('nid'));

  if (!empty($eligible_users)) {
    $db_or = db_or()->condition('n.uid', $user->uid)->condition('n.uid', $eligible_users);
    $query->condition($db_or);
  }
  else {
    $query->condition('n.uid', $user->uid);
  }

  $query->condition('n.status', 1);
  $query->condition('n.type', 'vendor');
  $query->condition('m6r.field_vendor_type_value', 'm6reach');
  $query->orderBy('created', 'DESC');
  $execute = $query->execute();

  if ($execute->rowCount() > 0) {
    // Getting current user's OG Roles.
    $is_user_vendor_manager = _is_user_vendor_manager($company, $user);

    while ($result = $execute->fetchField()) {
      $vendor_node = node_load($result);
      $og_nid = !empty($vendor_node->og_group_ref[LANGUAGE_NONE][0]['target_id']) ? $vendor_node->og_group_ref[LANGUAGE_NONE][0]['target_id'] : '';
      $og_node = node_load($og_nid);

      $diverArr = array('No diversity defined!');
      if (!empty($og_node->field_diversity_credentials['und'])) {
        $diverArr = array();
        foreach ($og_node->field_diversity_credentials['und'] as $diverKey => $diverVal) {
          $diverArr[] = node_load($diverVal['target_id'])->title;
        }
      }

      // Getting the company details.
      $company_details = _get_vendor_company_details($og_node, FALSE, FALSE, 'autocomplete_company_logo');

      // Collecting more info on the vendor.
      $region = '-';
      $regions = _get_area_of_work_options($vendor_node);
      if (!empty($regions)) {
        $region = implode(',', $regions);
      }
      else {
        $regions = _get_area_of_work_options($og_node);
        if (!empty($regions)) {
          $region = implode(',', $regions);
        }
      }

      $pl_name = !empty($vendor_node->field_pl_name['und'][0]['value']) ? $vendor_node->field_pl_name['und'][0]['value'] : '-';
      // $invoice_no = !empty($vendor_node->field_invoice_number_cal['und'][0]['value']) ? $vendor_node->field_invoice_number_cal['und'][0]['value'] : '-';
      // $invoice_date = !empty($vendor_node->field_invoice_date['und'][0]['value']) ? date('m/d/Y', strtotime($vendor_node->field_invoice_date['und'][0]['value'])) : '-';
      // $invoice_amount = !empty($vendor_node->field_invoice_amount['und'][0]['value']) ? '$' . number_format($vendor_node->field_invoice_amount['und'][0]['value'], 2) : '-';
      // $po_number = !empty($vendor_node->field_po_number['und'][0]['value']) ? $vendor_node->field_po_number['und'][0]['value'] : '-';
      $account_unit_desc = !empty($vendor_node->field_account_unit_desc['und'][0]['value']) ? $vendor_node->field_account_unit_desc['und'][0]['value'] : '-';
      $account_desc = !empty($vendor_node->field_account_desc['und'][0]['value']) ? $vendor_node->field_account_desc['und'][0]['value'] : '-';
      // $cheque_no = !empty($vendor_node->field_check_numner['und'][0]['value']) ? $vendor_node->field_check_numner['und'][0]['value'] : '-';
      // $payment_type = !empty($vendor_node->field_payment_type['und'][0]['value']) ? $vendor_node->field_payment_type['und'][0]['value'] : '-';
      // $cheque_date = !empty($vendor_node->field_cheque_date['und'][0]['value']) ? date('m/d/Y', strtotime($vendor_node->field_cheque_date['und'][0]['value'])) : '-';

      // Getting expenses and capital and there total.
      $capital_unformatted = _get_capital_expense_vendor_spending($vendor_node, 'capital');
      $expense_unformatted = _get_capital_expense_vendor_spending($vendor_node, 'expense');
      $total_unformatted = $capital_unformatted + $expense_unformatted;

      $capital = _vendor_format_amount_currency($capital_unformatted);
      $expense = _vendor_format_amount_currency($expense_unformatted);
      $total = _vendor_format_amount_currency($total_unformatted);

      if ($type == 'summary') {
        $rows[] = array(
          array('data' => $company_details, 'class'=>array('text-center')),
          array('data' => $region, 'class' => array('text-center')),
          array('data' => $pl_name, 'class' => array('text-center')),
          array('data' => $expense, 'class' => array('text-center')),
          array('data' => $capital, 'class' => array('text-center')),
          array('data' => $total, 'class' => array('text-center')),
          array('data' => $account_unit_desc, 'class' => array('text-center')),
          // array('data' => $account_desc, 'class' => array('text-center')),
          array('data' => implode(', ', $diverArr), 'class'=>array('text-center')),
        );
      }
      if ($type == 'detail') {
        // Providing edit option for detail page.
        // Making a edit id for the link.
        // @todo Make edit id.
        $edit_id = $vendor_node->nid;
        $edit_link = '<li>' . l(t('Edit'), 'edit-vendor-spending/' . $edit_id, array('attributes' => array('class' => array('edit-vendor-spending',)))) . '</li>';
        $action = '<div class="vendor-spending-action">
          <div class="btn-group"><div class="dropdown">
          <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
          <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">' . $edit_link . '
          </ul></div></div></div>';
        $rows[] = array(
          array('data' => $company_details, 'class'=>array('text-center')),
          array('data' => $region, 'class' => array('text-center')),
          array('data' => $pl_name, 'class' => array('text-center')),
          array('data' => $expense, 'class' => array('text-center')),
          array('data' => $capital, 'class' => array('text-center')),
          array('data' => $total, 'class' => array('text-center')),
          array('data' => $account_unit_desc, 'class' => array('text-center')),
          array('data' => $account_desc, 'class' => array('text-center')),
          array('data' => $action, 'class' => array('text-center')),
        );
      }
    }
  }
  $return = '';
  $return .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No Vendor(s) Yet'), 'sticky' => FALSE, 'attributes' => array('class' => array('table', 'm6connect-custom-table', 'm6connect-custom-preferred-spending-main-table', 'table-hover', 'table-bordered', 'text-center', 'm6init-datatable'))));

  $return .= theme('pager');
  return $return;
}

/**
 * Helper functions to get vendor settings tab links.
 */
function _get_preferred_tab_links() {
  $links = array(
    'vendor/preferred' => 'Ratings',
    'vendor/preferred/spending/summary' => 'Summary Spending',
    'vendor/preferred/spending/detail' => 'Detail Spending',
  );

  $output = '<ul class="list-unstyled list-inline custom-list vendor-setting-menu-links clearfix">';
  foreach($links as $link_path => $link_label) {
    $class = (current_path() == $link_path) ? ' active': '';
    $output .= '<li class="menu-item'.$class.'">'.l($link_label,$link_path).'</li>';
  }
  $output .= '</ul>';
  return $output;
}

/**
 * Implements hook_block_info().
 */
function m6connect_vendor_block_info() {
  $blocks = array();
  $blocks['vendor_top_ribbon'] = array(
    'info'  => t('Vendor Top Ribbon'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function m6connect_vendor_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'vendor_top_ribbon':
      $block['subject'] = '';
      $block['content'] = vendor_top_ribbon_content();
    
    break;
  }
  return $block;
}

/**
 * Helper function to get vendor page ribbon content.
 */
function vendor_top_ribbon_content() {
  global $user, $company;
  // Checking comment
  $account = user_load($user->uid);
  $_is_user_vendor_manager = _is_user_vendor_manager($company, $account);
  $_is_user_vendor_manager = 1;

  // if ($account->field_gender[LANGUAGE_NONE][0]['value'] == 'male') {
  //   $img = '<img src="/sites/all/themes/m6connect/images/icon-detective.png" />';
  // }
  // else {
  //   $img = '<img src="/sites/all/themes/m6connect/images/icon-manager.png" />';
  // }

  $img = '<img src="/sites/all/themes/m6connect/images/u2603.png" />';

  $banner_title = t('Vendor Manager');
  $new_vendor_link = '';

  if (arg(1) == 'm6reach') {
    $banner_title = t('Vendor Manager - M6Reach');
    if ($_is_user_vendor_manager) {
      $new_vendor_link = l('<i class="glyphicon glyphicon-plus"></i> Invite Vendors', 'add-minority-vendor/m6reach/nojs',array('html' => TRUE, 'attributes' => array('class' => array('add-project', 'ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'))));
    }
  }
  if (arg(1) == 'preferred' && empty(arg(2))) {
    $banner_title = t('Vendor Manager - Approved Vendors');
    if ($_is_user_vendor_manager) {
      $new_vendor_link = l('<i class="glyphicon glyphicon-plus"></i> Invite Vendors', 'add-minority-vendor/preferred/nojs',array('html' => TRUE, 'attributes' => array('class' => array('add-project', 'ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'))));
    }
  }
  if (arg(1) == 'preferred' && arg(2) == 'spending') {
    if (arg(3) == 'summary') {
      $banner_title = t('Vendor Manager - Summary Spending');
    }
    if ($_is_user_vendor_manager && arg(3) == 'detail') {
      $banner_title = t('Vendor Manager - Detail Spending');
      $new_vendor_link = l('<i class="glyphicon glyphicon-plus"></i> Add Spending', 'javascript:void(0)',array('html' => TRUE, 'attributes' => array('class' => array('add-vendor-spending'))));
    }
  }
  if (arg(1) == 'pending') {
    $banner_title = t('Vendor Manager - New Vendor Requests');
    if ($_is_user_vendor_manager) {
      $new_vendor_link = l('<i class="glyphicon glyphicon-plus"></i> Invite Vendors', 'add-minority-vendor/pending/nojs',array('html' => TRUE, 'attributes' => array('class' => array('add-project', 'ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'))));
    }
  }
  if (arg(1) == 'settings') {
    $banner_title = t('Vendor Manager - Settings');
  }
  if (arg(1) == 'import') {
    $banner_title = t('Vendor Manager - Import CSV');
  }
  if (arg(1) == 'worker-feedback') {
    $banner_title = t('Vendor Mangager - Worker Feedback');
    if ($_is_user_vendor_manager) {
      $new_vendor_link = l('<i class="glyphicon glyphicon-plus"></i> Add Worker(s)', 'add-worker-vendor/nojs',array('html' => TRUE, 'attributes' => array('class' => array('add-project', 'ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'))));
    }
  }

  $output = '<div class="main_content">
  <div class="box box-with-image">
    <div class="box-header-main box-header">
    <div class="box-image-wrapper"> <a href="#"> ' . $img . '<!--<i class="fa fa-user-secret" aria-hidden="true"></i> --></a> </div>
      <div class="box-right-entity">
         <div class="row">
         <div class="col-md-8 col-sm-6 col-xs-12">
          <h1>' . $banner_title . '</h1>
          <p>Add New Vendors, Get Feedback from Internal Users and Rate Vendors.</p>
         </div>
         <div class="col-md-4 col-sm-6 col-xs-12 box-actions text-right">' . $new_vendor_link . '</div>
      </div>
      </div>
    </div>
    </div>
  </div>';
  
  return $output;
}



/**
 * Helper function to get vendor names.
 */
function _get_vendor_names($type = 'm6reach', $account = FALSE) {
  global $user, $company;
  if (empty($account->uid)) {
    $account = $user;
  }

  $type_org = $type;
  // Getting vendor managers of the company.
  $vendor_managers = _get_vendor_manager_of_company($company);

  $query = db_select('node', 't')->fields('t', array('nid', 'title'));
  $query->join('field_data_field_vendor_type', 'm6r', 'm6r.entity_id=t.nid');
  $query->condition('t.type', 'vendor');

  if ($type_org == 'pending') {
    $query->join('og_membership', 'om', 'om.etid=t.nid');
    $query->condition('om.gid', $company->nid, '=');
    $query->condition('t.status', 0);
  }
  if ($type_org == 'preferred' || $type_org == 'pending') {
    $type = 'm6reach';
  }

  if ($type_org != 'pending') {
    if (!empty($vendor_managers)) {
      $db_or = db_or()->condition('t.uid', $account->uid)->condition('t.uid', $vendor_managers);
      $query->condition($db_or);
    }
    else {
      $query->condition('t.uid', $account->uid);
    }
  }

  $query->condition('m6r.field_vendor_type_value', $type);
  $query->orderBy('t.created', 'DESC');

  return $query->execute()->fetchAllKeyed(0,1);
}

/**
 * Helper function to get Vendor Ratings.
 * @param $node
 *   If the $all_data is TRUE, then this variable has company node, vendor node
 *   otherwise.
 * @param $type
 *   Matters only when $all_data is FALSE.
 * @param $unformatted
 *   Boolean to get only data (unformatted) in an associative array.
 * @param $all_data
 *   This boolean decides, whether all data for a company is requested or data
 *   for a vendor is requested.
 * @param $uid
 *   If this parameter is available, then request is generated for a single
 *   user, or a list of users (in case we need a companies all user's ratings).
 * @param $approved
 *   This boolean is to get approved or unapproved or all data.
 *   0 = Unapproved
 *   1 = Approved
 *   FALSE = Not to be included
 *
 * @return HTML
 *   Formatted HTML when $unformatted is FALSE(Formatted using theme_item_list).
 * @return array
 *   When $unformatted is TRUE (Associative array).
 */
function _get_vendor_ratings($node, $type = 'm6reach', $unformatted = FALSE, $all_data = FALSE, $uid = FALSE, $approved = FALSE) {
  global $user;
  $variables = array();

  if ($all_data && $node->type == 'organization') {
    // Double check that a company node is received, otherwise obsolete data
    // may be fetched.
    $query = db_select('m6reach_ratings', 'r');
    $query->fields('r', array('data'));
    $query->condition('cnid', $node->nid);
    $query->condition('type', $type);
    if (!empty($uid)) {
      $query->condition('uid', $uid);
    }
    if ($approved !== FALSE) {
      $query->condition('approved', $approved);
    }
    $query = $query->execute()->fetchAll();
  }
  else {
    $cnid = _get_company_nid_by_vendor($node);
    if ($cnid) {
      $query = db_select('m6reach_ratings', 'r')
        ->fields('r', array('data'))
        ->condition('cnid', $cnid)
        ->condition('vnid', $node->nid)
        ->condition('type', $type)
        ->execute()
        ->fetchAll();
    }
  }

  $ratings_all = array();
  if (!empty($query)) {
    foreach ($query as $key => $value) {
      if (!empty($value->data)) {
        $data = unserialize($value->data);
        foreach ($data as $key => $value) {
          $ratings_all[$key][] = $value;
        }
      }
    }
    // If we have some data to process.
    if (!empty($ratings_all)) {
      $ratings_data = array();
      foreach ($ratings_all as $key => $value) {
        if (!empty($value)) {
          // Getting average for each rating.
          $ratings_data[$key] = number_format(array_sum($value) / count($value), 1, '.', '');
        }
      }

      if (!empty($ratings_data)) {
        if ($unformatted) {
          // If only data is to be returned.
          return $ratings_data;
        }
        $items = array();
        foreach ($ratings_data as $key => $value) {
          $name = ucwords(str_replace('_', ' ', $key));
          $items[] = $name . ' <span class="pull-right"> ' . $value . '</span>';
        }
        $m6_total_ratings_average = number_format(array_sum($ratings_data) / count($ratings_data), 1, '.', '');
        $items[] = t('M6 Rank') . ' <span class="pull-right"> ' . $m6_total_ratings_average . '</span>';
        $variables['items'] = $items;
        $variables['type'] = 'ul';
        $variables['attributes'] = array('class' => 'list-unstyled');
        return theme_item_list($variables);
      }
    }
  }

  return $unformatted ? array() : '<p>' . t('No ratings yet!') . '</p>';
}

/**
 * Helper function to get Vendor Company details.
 * @param $node
 *   The node for which data is requested.
 * @param $only_address
 *   Boolean to get only address.
 * @param $only_image
 *   Boolean to get only image.
 * @param $image_style
 *   The image style in which image is to be formatted.
 *   If no image is provided, then user_image_default is assumed.
 *
 * @return Formatted HTML (Logo, Address and Name) OR Only Address.
 */
function _get_vendor_company_details($node, $only_address = FALSE, $only_image = FALSE, $image_style = 'user_image_default') {
  global $user, $base_url;
  $theme_path = drupal_get_path('theme', 'm6connect');

  if (!empty($node->field_logo[LANGUAGE_NONE][0]['uri'])) {
    $uri = $node->field_logo[LANGUAGE_NONE][0]['uri'];
    $img_src = image_style_url($image_style, $uri);
    $img = '<img src = "' . $img_src . '">';
  }
  else {
    $hw_data = array('height' => '25', 'width' => '25');
    $is_data = _get_image_dimensions_by_style_name($image_style);

    if (!empty($is_data)) {
      $hw_data = $is_data;
    }

    $img_src = $base_url . '/' . $theme_path . '/images/default_company_profilepdf.png';
    $img = '<img src = "' . $img_src . '" style="height:' . $hw_data['height'] . 'px; width:' . $hw_data['width'] . 'px">';
  }

  // If $only_image is requested, then returning image.
  if ($only_image) {
    return $img;
  }

  $locality = !empty($node->field_org_address[LANGUAGE_NONE][0]['locality']) ? $node->field_org_address[LANGUAGE_NONE][0]['locality'] . ', ' : '';
  $state = !empty($node->field_org_address[LANGUAGE_NONE][0]['administrative_area']) ? $node->field_org_address[LANGUAGE_NONE][0]['administrative_area'] : '';
  // $city = !empty($node->field_incorporated_state[LANGUAGE_NONE][0]['value']) ? $node->field_incorporated_state[LANGUAGE_NONE][0]['value'] . ', ' : '';
  $address = $locality . $state; //  . $node->field_incorporated_country[LANGUAGE_NONE][0]['value']
  $name = $node->title;

  if ($only_address) {
    return empty($address) ? t('Not Available') : $address;
  }

  $output = '<div class="row margin-5">
      <div class="col-md-4 margin-bottom-10 padding-5"><div class="dashboard_field_logo">
      ' . $img . '
      </div></div>
      <div class="col-md-8 margin-bottom-10 padding-5">
        <div class="dashboard_company_title">' . $name . '</div>
        <div class="dashboard_field_main_location_grp">' . $address . '</div>
      </div>
    </div>';

  return $output;
}

/**
 * Helper function to get Company nid by vendor.
 */
function _get_company_nid_by_vendor($node) {
  return !empty($node->og_group_ref[LANGUAGE_NONE][0]['target_id']) ? $node->og_group_ref[LANGUAGE_NONE][0]['target_id'] : FALSE;
}

/**
 * Helper function to get M6Reach Form data.
 */
function _get_m6reach_form_data($cnid, $uid, $vnid, $type, $approved = FALSE, $ignore_vendor = TRUE) {
  $query = db_select('m6reach_ratings', 'm6r');
  $query->fields('m6r');
  $query->condition('cnid', $cnid);
  $query->condition('uid', $uid);
  if (!$ignore_vendor) {
    $query->condition('vnid', $vnid);
  }
  $query->condition('type', $type);
  if ($approved !== FALSE) {
    $query->condition('approved', $approved);
  }
  return $query->execute()->fetchAssoc();
}

/**
 * Helper function to get RFP | Awarded amount for a company.
 * @var Node Object.
 */
function _get_rfp_awarded_by_cnid($node, $unformatted = FALSE) {
  // Getting all RFPs for this company.
  $query = db_select('node', 'n');
  // Joining company.
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->condition('om.gid', $node->nid, '=');

  // Joing Amount.
  $query->join('field_data_field_estimated_cost', 'fec', 'fec.entity_id=n.nid');

  $query->condition('n.type', 'rfp');
  $query->fields('n', array('nid'));
  $query->fields('fec', array('field_estimated_cost_value'));
  $results = $query->execute()->fetchAll();

  if (empty($results)) {
    return 'No RFPs yet';
  }

  $rfp_amount = 0;
  $award_amount = 0;
  
  foreach ($results as $result) {
    if (!empty($result->field_estimated_cost_value)) {
      $amount = preg_replace('/[^0-9.]*/', '', $result->field_estimated_cost_value);  // Making it integer or float.
      if ($amount) {
        $rfp_amount += $amount;
      }
    }

    // Checking if this RFP has any proposals, and if it has, then checking if
    // the proposal is awarded, and if awarded, then getting its amount.
    $query = db_select('node', 'n');
    $query->join('field_data_field_submit_proposal_in_respons', 'fsp', 'fsp.entity_id=n.nid AND fsp.entity_type=:entityType', array(':entityType'=>'node'));
    $query->condition('fsp.field_submit_proposal_in_respons_target_id', $result->nid); //RFP node id.
    $query->condition('n.type', 'my_proposal');
    $query->condition('n.status', 1);
    $query->fields('n', array('nid'));
    $results_awards = $query->execute()->fetchAll();

    if (!empty($results_awards)) {
      // If there are any proposals associated with this RFP.
      foreach ($results_awards as $results_award) {
        if (db_table_exists('proposal_award')) {
          $awared = db_select('proposal_award', 'pa')
            ->fields('pa', array('node_id'))
            ->condition('pa.node_id', $results_award->nid)
            ->condition('pa.status', 1)
            ->execute()
            ->fetchCol();

          if (!empty($awared) && in_array($results_award->nid, $awared)) {
            // If the proposal is awarded, then getting it's amount.
            $proposal_node = node_load($results_award->nid);
            if (!empty($proposal_node->field_proposal_bid_amount[LANGUAGE_NONE][0]['value'])) {
              // If the proposal has amount, then adding it in.
              $amount = $proposal_node->field_proposal_bid_amount[LANGUAGE_NONE][0]['value'];
              $amount = preg_replace('/[^0-9.]*/', '', $amount); // Making it integer or float.
              if ($amount) {
                $award_amount += $amount;
              }
            }
          }
        }
      }
    }
  }

  if ($unformatted) {
    return array('rfp' => $rfp_amount, 'awarded' => $award_amount);
  }
  $rfp_amount = '$' . number_format($rfp_amount);
  $award_amount = '<strong>$' . number_format($award_amount) . '</strong>';
  return $rfp_amount . ' | ' . $award_amount;
}

/**
 * Get menu links for vendor manager.
 */
function vendor_manager_menu_links() {
  $currentPath = current_path();
  $links_list = array(
    'vendor/m6reach' => 'M6 Reach',
    'vendor/ratings' => 'Vendor Ratings',
    'vendor/settings' => 'Settings',
  );
  
  $output = '<ul class="list-unstyled list-inline custom-list program-project-menu-links clearfix">';

  foreach($links_list as $menuPath => $label) {
    $class = $currentPath == $menuPath ? ' active' : '';
    $output .= '<li class="menu-item' . $class . '">' . l($label, $menuPath) . '</li>';
  }

  $output .= '</ul>';
  return $output;
}

/**
 * Get Notes table for a company/vendor.
 * @param $company_node
 *   The company node for which table data is requested.
 * @param $vendor_node
 *   The vendor node for which table data is requested.
 *   If vendor node is null, then table is requested from company profile page,
 *   and we shall not be taking vendor node in consideration, whereas when
 *   vendor node is available, then it means it is called from vendor manager.
 *   Therefore we need to take vendor node in consideration.
 */
function vendor_notes_table($company_node = NULL, $vendor_node = FALSE) {
  global $user, $base_url;
  $theme_path = drupal_get_path('theme', 'm6connect');
  $rows = array();
  $output = '';
  $output_links = '';

  if (is_numeric($company_node)) {
    $company_node = node_load($company_node);
  }
  if (is_numeric($vendor_node)) {
    $vendor_node = node_load($vendor_node);
  }

  $header = array(
    array('data'=>'Note#','class'=>array('text-center')),
    array('data'=>'Date Made','class'=>array('text-center')),
    array('data'=>'Thumbs up / Thumbs down','class'=>array('text-center')),
    array('data'=>'User','class'=>array('text-center')),
    array('data'=>'Description','class'=>array('text-center'), 'width' => '350px;'),
    array('data'=>'Actions','class'=>array('text-center')),
  );
  if ($company_node && is_object($company_node) && !empty($company_node->nid)) {
    // At least company node is required for getting notes.
    $query = db_select('m6reach_notes', 'n');
    $query->fields('n');
    $query->condition('cnid', $company_node->nid);

    if ($vendor_node && is_object($vendor_node) && !empty($vendor_node->nid)) {
      // If vendor node is available, then getting notes accordingly.
      $query->condition('vnid', $vendor_node->nid);
    }

    // $query->condition('approved', 1);
    $query->orderBy('created', 'DESC');
    $result = $query->execute()->fetchAll();

    if (!empty($result)) {
      // If there are notes for this vendor.
      // <span style="border-radius: 15px; line-height: 16px; font-size: 10px; background: #FFF; height: 20px; width: 20px; text-align: center; font-weight: bold; margin: 0 0 0 5px; border: 2px solid #49a049; color: #49a049; padding:3px 5px 3px 5px;">A</span>
      foreach ($result as $note_data) {
        $note_id = $note_data->id;
        $account = user_load($note_data->uid);

        // $mark_data = '';
        // if ($account->uid == $user->uid) {
        //   $mark_data = '<span style="border-radius: 15px; line-height: 16px; font-size: 10px; background: #FFF; height: 20px; width: 20px; text-align: center; font-weight: bold; margin: 0 0 0 5px; border: 2px solid #49a049; color: #49a049; padding:3px 5px 3px 5px;" title="Approved">A</span>';

        //   if ($note_data->approved == 0) {
        //     $mark_data = ' <span style="border-radius: 15px; line-height: 16px; font-size: 10px; background: #FFF; height: 20px; width: 20px; text-align: center; font-weight: bold; margin: 0 0 0 5px; border: 2px solid #ed5; color: #ed5; padding:3px 5px 3px 5px;" title="Waiting to be reviewed.">W</span>'; //Yellow
        //   }

        //   if ($note_data->approved == 2) {
        //     $mark_data = ' <span style="border-radius: 15px; line-height: 16px; font-size: 10px; background: #FFF; height: 20px; width: 20px; text-align: center; font-weight: bold; margin: 0 0 0 5px; border: 2px solid #8c2e0b; color: #8c2e0b; padding:3px 5px 3px 5px;" title="Disapproved.">D</span>'; // Red
        //   }
        // }
        // else {
        //   if ($note_data->approved != 1) {
        //     continue;
        //   }
        // } Functionality removed wef 15th May 17

        $name_data = _get_user_data_by_uid($account->uid);
        $name = !empty($name_data['realname']) ? ucwords($name_data['realname']) : $account->name;

        // $note_number = $note_data->note_number . $mark_data;
        $note_number = $note_data->note_number;
        $note = $note_data->note;

        $created = $note_data->created;
        $date_made = '<strong>' . date('m/d/Y', $created) . '</strong><br/>';
        $date_made .= '<span style="font-size: 12px;">(' . t('%time ago', array('%time' => format_interval(REQUEST_TIME - $created))) . ')</span>';

        // Creating thumbs up/thumbs down images.
        $up_img = $base_url . '/' . $theme_path . '/images/thumb-right1.png';
        $down_img = $base_url . '/' . $theme_path . '/images/thumb-left1.png';

        $thumbs_up_count = _get_thumbs_count('m6reach', 'up', $note_id);
        $thumbs_down_count = _get_thumbs_count('m6reach', 'down', $note_id);

        $liked = $disliked = '';
        $is_note_liked = _get_thumbs_count('m6reach', 'up', $note_id, $user);
        $is_note_disliked = _get_thumbs_count('m6reach', 'down', $note_id, $user);
        if ($is_note_liked) {
          $liked = ' processed';
        }
        if ($is_note_disliked) {
          $disliked = ' processed';
        }

        $spinner = '<div class="pull-left"><i class="fa fa-spinner fa-spin vendor-spinner" aria-hidden="true" style="display:none;"></i></div>';

        $thumb_up = '<img src="' . $up_img . '" data="' . $note_id . '" class="like-note-user' . $liked . '" title="Thumbs Up for this Note." style="height:30px; width:30px; cursor:pointer"/>' . '<span class="thumbs-up-count">' . $thumbs_up_count . '</span>';
        $thumb_down = '<img src="' . $down_img . '" data="' . $note_id .'" class="dislike-note-user' . $disliked . '" title="Thumbs Down for this Note." style="height:30px; width:30px; cursor:pointer"/>' . '<span class="thumbs-down-count">' . $thumbs_down_count . '</span>';

        // Preparing actions for the note.
        $edit_link = '';
        // $remove_link = '';

        if ($account->uid == $user->uid) {
          // If the user of note is current user, then he has privilage to edit
          // or delete the note.
          $edit_link = '<li>' . l(t('Edit'), 'edit-note/' . $note_id . '/nojs', array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style',)))) . '</li>';
          // $remove_link = '<li>' . l(t('Remove'), 'remove-note/' . $note_id . '/nojs', array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style',)))) . '</li>';
        }

        if (_is_user_vendor_manager()) {
          // If user is vendor manager, then providing only remove link.
          // $remove_link = '<li>' . l(t('Remove'), 'remove-note/' . $note_id . '/nojs', array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style',)))) . '</li>';
        }
        
        $action = '-';
        if (!empty($edit_link) || !empty($remove_link)) {
          // If both the links are not available for user
          $action = '<div class="vendor-action">
            <div class="btn-group"><div class="dropdown">
            <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
            <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">' . $edit_link . $remove_link . '
            </ul></div></div></div>';
        }

        $rows[] = array(
          array('data' => $note_number, 'class' => array('text-center', 'approved-denied-sign')),
          array('data' => $date_made, 'class' => array('text-center')),
          array('data' => $spinner . $thumb_up . ' | ' . $thumb_down, 'class' => array('text-center')),
          array('data' => $name, 'class' => array('text-center')),
          array('data' => $note, 'class' => array('text-center')),
          array('data' => $action, 'class' => array('text-center')),
        );
      }
    }

    $output_links .= '<div class="vendor-notes-table-links">';
    $output_links .= '<div class="clearfix margin-bottom-10 pull-right">';

    if ($vendor_node && is_object($vendor_node) && !empty($vendor_node->nid)) {
      $output_links .= l(t('Add new note'), 'add-note/' . $company_node->nid . '/' . $vendor_node->nid . '/nojs', array('attributes' => array('class' => array('text-white', 'form-submit', 'new-note-custom-button', 'ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'))));
    }
    else {
      $output_links .= l(t('Add new note'), 'add-note/' . $company_node->nid . '/0/nojs', array('attributes' => array('class' => array('text-white', 'form-submit', 'new-note-custom-button', 'ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'))));
    }
    $output_links .= '<input class="cancel-button form-submit hide-notes-table" type="button" name="op" value="Cancel">';

    $output_links .= '</div>';
    $output_links .= '</div>';
  }

  $output .= '<div class="vendor-notes-table-outer">';

  // Adding add a Note link and Hide Notes Button.
  $output .= $output_links;

  $output .= '<div class="vendor-notes-table-table">';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Note(s) Yet!', 'sticky' => FALSE, 'attributes' => array('class' => array('table', 'm6connect-custom-table', 'm6connect-custom-vendor-manager-notes-table', 'table-hover', 'table-bordered', 'text-center'))));
  $output .= '</div>';

  $output .= '</div>';
  return $output;
}

/**
 * Helper function to get thumbs count.
 */
function _get_thumbs_count($table = 'm6reach', $up_down, $note_id, $account = FALSE) {
  $table_ = $table . '_likes';
  $query =  db_select($table_, 'l')->fields('l')->condition('note_id', $note_id);
  $query->condition('thumbs_' . $up_down, 1);
  if (!empty($account->uid)) {
    $query->condition('uid', $account->uid);
  }
  return $query->execute()->rowCount();
}

/**
 * Helper function to get message content of vendor manager.
 *
 * @param $vendor_manager_ids
 *   IDs of vendor managers.
 * @param $account
 *   User requesting.
 * @param $node
 *   Vendor node.
 *
 * @return HTML of the messages.
 */
function _get_vendor_manager_message_content($company_admins, $account, $node) {
  // Checking if user is vendor manager or not.
  if (in_array($account->uid, $company_admins)) {
    $curruserclass = 'cuser-is-submitter-approver';
  }
  else {
    $curruserclass = 'cuser-not-submitter-approver';
  }

  // Getting type of vendor.
  $type = !empty($node->field_vendor_type['und'][0]['value']) ? $node->field_vendor_type['und'][0]['value'] : 'm6reach';

  $results = _get_service_messaging_message_content($type, $account->uid, $node->nid);

  $output = '<div class="bidder-feedback-msg-list ' . $curruserclass . ' clearfix">';

  $first = TRUE;
  if (!empty($results)) {
    foreach ($results as $date => $result_out) {
      if (!empty($result_out)) {
        if (!$first) {
          $output .= '<div class="message-date-data">';
        }
        $output .= '<div class="message-date-data text-center margin-bottom-10">' . $date . '</div>';
        if (!$first) {
          $output .= '</div>';
        }
        $first = FALSE;
        foreach ($result_out as $result) {
          if (empty($result['message']) && empty($result['attachment'])) {
            continue;
          }
          if (!empty($result['deleted_from']) && in_array($account->uid, $result['deleted_from'])) {
            continue;
          }
          if (empty($result['message']) && !empty($result['attachment'])) {
            // This is an attachment.
            $file = file_load($result['attachment']);
            // $file_url = file_create_url($file->uri);
            // $filename = $file->filename;
            // $fileicondrive = _get_file_icon_m6drive($file->filemime, TRUE);
            // if($fileicondrive) {
            //   $message_img_html = $fileicondrive;
            // }
            // else {
            //   $img_url = image_style_url('pic_40x40', $file->uri);
            //   $message_img_html = '<img src="' . $img_url . '" />';
            // }
            // $message_img_html = '<a href="' . $file_url . '">' . $message_img_html . '</a>';
            $message_img_html = get_m6message_attachment_box($file->fid, $file->uri, $file->filename, $file->filemime);
            $result['message'] = $message_img_html;
            // $result['message'] = $filename . $message_img_html;
          }

          $alignclass = ($account->uid != $result['sender']) ? 'feedback-msg-reader' : 'feedback-msg-writer';

          // Getting user image of sender and receiver.
          $userimg = _get_message_user_image($result['sender']);

          $output .= '<div class="bidder-feedback-msg routing-feedback-msg-' . $result['id'] . ' clearfix ' . $alignclass . '" id="' . $result['id'] . '">';
          $output .= '<div class="bidder-feedback-msg-attr pull-left">';
          $output .= '<span class="bidder-feedback-msg-time"><span class="msg-aut-img">' . $userimg . '</span></span>';
          $output .= '<span class="bidder-feedback-msg-msg"><strong>' . $result['realname'] . '</strong> - </span><span class="bidder-feedback-msg-content">' . $result['message'] . '</span><p class="message-post-time text-right clearfix">' . date('h:i A', $result['created']) . '</p>';
          $output .= '</div>';


          if ($account->uid == $result['sender']) {
            $output .= '<div class="bidder-feedback-msg-delete">';
            $output .= l('<i class="fa fa-times-circle"></i>', 'service-message-remove/' . $result['id'] . '/nojs', array('html' => TRUE, 'attributes' => array('class' => array('bidder-feedback-msg-delete-link', 'use-ajax'))));
            $output .= '</div>';
          }
          $output .= '</div>';
        }
      }
    }
  }
  $output .= '</div>';
  return $output;
}

/**
 * Helper function to get vendor manager of a company.
 */
function _get_vendor_manager_of_company($company) {
  if (!is_object($company) || empty($company->nid)) {
    global $company;
  }
  global $user;

  $return = array();
  $company_users = _get_user_mappping_by_group_company_nid($company->nid);
  if (!empty($company_users)) {
    foreach ($company_users as $key => $value) {
      $og_roles = og_get_user_roles('node', $company->nid, $key);
      if (in_array('Vendor Manager', $og_roles)) {
        $return[] = $key;
      }
    }
  }

  if (!empty($return)) {
    $return = array_unique($return);
    $return = array_diff($return, array($user->uid));
    $return = array_values($return);
  }
  return $return;
}

/**
 * Helper function to know if a user is vendor manager.
 */
function _is_user_vendor_manager($company = FALSE, $user = FALSE) {
  if (empty($company->nid)) {
    global $company;
  }

  if (empty($user->uid)) {
    global $user;
  }

  $user_og_roles = og_get_user_roles('node', $company->nid, $user->uid, FALSE);
  return in_array('Vendor Manager', $user_og_roles);
}



/**
 * Helper function to get mapping id between two users.
 * This function gets a mapping id for two users, for the desired service and
 * reference.
 * If a mapping id is found, then it returns that id, else new is created.
 *
 * @var $service
 *   The service requesting. (Required)
 * @var $sender
 *   The uid of sender. (Required)
 * @var $receiver
 *   The uid of receiver. (Required, in case new entry is made.)
 * @var $reference
 *   Reference ID for the messaging. (Optional)
 * @var $check_receiver
 *   Boolena if receiver is to be checked.
 * @return Mapping ID.
 */
function _get_mapping_id_service_messaging($service, $sender, $receiver, $reference = NULL, $check_receiver = FALSE) {
  // Getting mapping id on the basis of sender and company node.
  $query = db_select('service_messaging', 's')->fields('s', array('mapping_id'));
  $query->condition('sender', $sender);
  $query->condition('service', $service);
  if ($check_receiver) {
    // If receiver is to be checked.
    if (is_array($receiver)) {
      $receiver_imp = implode(',', $receiver);
      $query->condition('receiver', $receiver_imp);
    }
    else {
      $query->condition('receiver', $receiver);
    }
  }
  if (empty($reference)) {
    $query->isNull('reference');
  }
  else {
    $query->condition('reference', $reference);
  }
  $mapping_id = $query->execute()->fetchField();

  if (!empty($mapping_id)) {
    return $mapping_id;
  }

  // If there is not any mapping id, then creating new and saving.
  $receiver_end = '';
  if (!empty($reference)) {
    $receiver_end = $reference;
    if (is_numeric($receiver)) {
      $receiver_end = $receiver;
    }
    elseif (is_array($receiver)) {
      $receiver_end = $received[0];
    }
  }

  if (is_array($receiver)) {
    $receiver = implode(',', $receiver);
  }

  $mapping_id = md5($sender . '-' . $receiver_end . '-' . $receiver . '-' . $service . time());
  db_insert('service_messaging')
    ->fields(array(
      'reference' => $reference,
      'sender' => $sender,
      'receiver' => $receiver,
      'mapping_id' => $mapping_id,
      'service' => $service,
      'created' => REQUEST_TIME,
    ))
    ->execute();

  return $mapping_id;
}

/**
 * Helper function to update user_messaging service with the current mapping_id.
 *
 * @var $mapping_id
 *   Mapping ID (Required)
 * @var $sender
 *   User ID of sender. (Required)
 * @var $receiver
 *   User ID of receiver. (Required)
 *   Array.
 * @return TRUE on success, FALSE otherwise.
 */
function _update_mapping_id_user_messaging($mapping_id, $sender, $receiver) {
  // If any one of the three parameters not received, then returning FALSE.
  if (empty($mapping_id) || empty($sender) || empty($receiver)) {
    return FALSE;
  }

  if (!is_array($receiver) && is_numeric($receiver)) {
    $receiver = array($receiver);
  }

  $query = db_select('m6connect_messaging_connect', 'm')
    ->fields('m')
    ->condition('mapping_id', $mapping_id)
    ->execute()
    ->rowCount();

  if ($query > 0) {
    // If there is a mapping_id in this table, then it should also be in the
    // 'm6connect_messaging_connect_users' table. But checking once again.

    $query = db_select('m6connect_messaging_connect_users', 'm')
      ->fields('m')
      ->condition('mapping_id', $mapping_id)
      ->execute()
      ->rowCount();

    if (($query - 1) == count($receiver)) {
      // If number of receiver equal to count -1, then we are doing good.
      return TRUE;
    }

    // If compiler is here, then there has been some mistake, updating the 
    // entnies again.
    db_delete('m6connect_messaging_connect_users')
      ->condition('mapping_id', $mapping_id)
      ->execute();
  }

  // If compiler is here, then we need to create records.

  // Inserting in m6connect_messaging_connect.
  $mapping_group = _get_mapping_group_vendor_messaging($receiver);

  // Deleting any prior records.
  db_delete('m6connect_messaging_connect')
    ->condition('mapping_id', $mapping_id)
    ->execute();

  db_insert('m6connect_messaging_connect')
    ->fields(array(
      'mapping_id' => $mapping_id,
      'created_by' => $sender,
      'mapping_group' => $mapping_group,
      'mapping_gid' => $sender,
      'timestamp' => REQUEST_TIME,
      'updated' => REQUEST_TIME,
    ))
    ->execute();

  $receiver[] = $sender;
  foreach ($receiver as $user_id) {
    db_merge('m6connect_messaging_connect_users')
      ->key(array(
        'mapping_id' => $mapping_id,
        'user_uid' => $user_id,
      ))
      ->fields(array(
        'mapping_id' => $mapping_id,
        'user_uid' => $user_id,
        'mapping_type' => $mapping_group,
        'status' => 1,
        'join_timestamp' => REQUEST_TIME,
        'leave_timestamp' => NULL
      ))
      ->execute();
  }
  return TRUE;
}

/**
 * Helper function to send a message to user messaging system.
 *
 * @var $mapping_id
 *   The Mapping ID for the message. (Required)
 * @var $sender
 *   The User ID of the sender. (Required)
 * @var $message
 *   The message to send/store. (Required)
 * @return Nothing.
 */
function _send_message_to_user_messaging($mapping_id, $sender, $message = NULL, $attachment = NULL) {
  // If any on the three parameters are not received, ABORT.
  if (empty($mapping_id) || empty($sender) || (empty($message) && empty($attachment))) {
    return;
  }

  $fields = array();
  $fields = array(
    'mapping_id' => $mapping_id,
    'author_uid' => $sender,
    'render_state' => 1,
    'timestamp' => REQUEST_TIME,
    'seen_by' => $sender,
  );

  if (!empty($message)) {
    $fields['message_text'] = $message;
  }

  if (!empty($attachment)) {
    $fields['attachment'] = $attachment;
  }

  $insert_id = db_insert('m6connect_messaging_connect_message')
    ->fields($fields)
    ->execute();

  return $insert_id;
}

/**
 * Helper function to get service messaging content.
 */
function _get_service_messaging_message_content($service, $sender, $reference = NULL) {
  $return = array();

  if (empty($service) || empty($sender)) {
    return $return;
  }

  $query = db_select('service_messaging', 'm')->fields('m', array('mapping_id', 'receiver', 'sender'));
  $query->condition('sender', $sender);
  $query->condition('service', $service);

  if (empty($reference)) {
    $query->isNull('reference');
  }
  else {
    $query->condition('reference', $reference);
  }

  $mapping_ids = $query->execute()->fetchAll();

  if (!empty($mapping_ids)) {
    foreach ($mapping_ids as $key => $value) {
      $mapping_id = $value->mapping_id;
      // Now since we have a mapping id, we can get messages between two users.
      $messages = _get_messages_by_mapping_id($mapping_id);
      if (!empty($messages)) {
        foreach ($messages as $message) {
          $date = date('m/d/Y', $message->timestamp);
          $return_arr = array(
            'mapping_id' => $mapping_id,
            'id' => $message->id,
            'sender' => $message->author_uid,
            'receiver' => ($message->author_uid != $value->receiver) ? $value->receiver : $value->sender,
            'created' => $message->timestamp,
            'message' => $message->message_text,
            'attachment' => $message->attachment,
            'realname' => _get_user_full_name($message->author_uid),
          );
          if (!empty($message->deleted_from)) {
            $return_arr['deleted_from'] = explode(',', $message->deleted_from);
          }
          $return[$date][] = $return_arr;
        }
      }
    }
  }

  return $return;
}

/**
 * Helper function to get messages by a mapping_id.
 */
function _get_messages_by_mapping_id($mapping_id) {
  return db_select('m6connect_messaging_connect_message', 'm')
    ->fields('m')
    ->condition('mapping_id', $mapping_id)
    ->execute()
    ->fetchAll();
}

/**
 * Helper function to get user message image.
 * Using drupal_static_cache.
 *
 * @var $uid
 *   The user id of the user.
 *
 * @return HTML of the image.
 *   If the user has image, then user image else default image.
 */
function _get_message_user_image($uid) {
  $users = &drupal_static(__FUNCTION__);

  if (!isset($users)) {
    // If the request is for the first time after the page load.
    $account = user_load($uid);
    $uri = !empty ($account->field_user_profile_photo['und'][0]['uri']) ? $account->field_user_profile_photo['und'][0]['uri'] : 'public://images_13.png';

    $image =  image_style_url('user_pic_40x40', $uri);
    $image_html = '<img src="' . $image . '">';
    $users[$uid] = $image_html;
  }

  if (!isset($users[$uid])) {
    // If the request is for the user first time.
    $account = user_load($uid);
    $uri = !empty ($account->field_user_profile_photo['und'][0]['uri']) ? $account->field_user_profile_photo['und'][0]['uri'] : 'public://images_13.png';

    $image =  image_style_url('user_pic_40x40', $uri);
    $image_html = '<img src="' . $image . '">';
    $users[$uid] = $image_html;
  }

  return $users[$uid];
}

/**
 * Helper function to get name by mapping id.
 */
function _get_new_group_name_by_mapping_id($mapping_id, $realname = '', $uid = NULL) {
  $name = FALSE;

  if (empty($realname) && !empty($uid)) {
    $user_data = _get_user_mail_realname_by_uid($uid);
    if (empty($user_data['realname'])) {
      $user_data['realname'] = $user_data['name'];
    }
    $realname = $user_data['realname'];
  }

  $query = db_select('service_messaging', 's')
    ->fields('s')
    ->condition('mapping_id', $mapping_id)
    ->range(0,1)
    ->execute()
    ->fetchObject();

  if (!empty($query)) {
    $service = $query->service;
    if ($service == 'm6reach') {
      // If we are dealing with vendor manager messages.
      $service = ucwords(str_replace('_', ' ', $service));
      $title = '';
      if (!empty($query->reference)) {
        if ($node = node_load($query->reference)) {
          if (!empty($node->og_group_ref['und'][0]['target_id'])) {
            $title = _get_title_of_node($node->og_group_ref['und'][0]['target_id']);
            $title = ' - ' . ucwords(str_replace('_', ' ', $title));
          }
        }
      }

      $name = $realname . ' (' . $service . $title . ')';
    }

    if ($service == 'scm') {
      // If we are dealing with supply chain manager.
      $user_type = _get_current_user_type_scm($uid);
      // $title = '';
      // if (!empty($query->reference)) {
      //   $title = strtoupper(_get_title_of_node($query->reference));
      // }
      if (!empty($user_type)) {
        $name = $realname . ' - ' . $user_type;
      }
      else {
        $name = $realname;
      }
    }
  }

  return $name;
}

/**
 * Helper function to get notes on a vendor.
 */
function _get_notes_for_vendor($node, $unformatted = FALSE) {
  $return = t('No notes Yet');

  if (empty($node->nid)) {
    // If node not received.
    return $unformatted ? array() : $return;
  }

  $query = db_select('m6reach_likes', 'l')->fields('l');
  $query->join('m6reach_notes', 'n', 'n.id=l.note_id');
  $query->condition('n.vnid', $node->nid);
  $results = $query->execute()->fetchAll();

  if (!empty($results)) {
    global $base_url;
    $theme_path = drupal_get_path('theme', 'm6connect');

    $up_img = $base_url . '/' . $theme_path . '/images/thumb-right1.png';
    $down_img = $base_url . '/' . $theme_path . '/images/thumb-left1.png';
    
    $thumbs_up = 0;
    $thumbs_down = 0;
    foreach ($results as $result) {
      $thumbs_up = !empty($result->thumbs_up) ? $thumbs_up + 1 : $thumbs_up;
      $thumbs_down = !empty($result->thumbs_down) ? $thumbs_down + 1 : $thumbs_down;
    }

    if ($unformatted) {
      return array(
        'thumbs_up' => $thumbs_up,
        'thumbs_down' => $thumbs_down,
      );
    }

    $thumbs_up_markup = '<div class="vendor-like-note" id="vendor-like-' . $node->nid . '"><img src="' . $up_img . '" title="Thumbs Up for this Note." style="height:30px; width:30px; cursor:pointer"/>' . '<span class="thumbs-up-count">' . $thumbs_up . '</span></div>';
    $thumbs_down_markup = '<div class="vendor-dislike-note" id="vendor-dislike-' . $node->nid . '"><img src="' . $down_img . '" title="Thumbs Down for this Note." style="height:30px; width:30px; cursor:pointer"/>' . '<span class="thumbs-down-count">' . $thumbs_down . '</span>';

    $return = $thumbs_up_markup . ' | ' . $thumbs_down_markup;
  }

  return $unformatted ? array() : $return;
}

/**
 * Helper function to get vendor node id by note_id.
 */
function _get_node_id_by_note_id($note_id = FALSE) {
  if (empty($note_id)) {
    return NULL;
  }

  return db_select('m6reach_notes', 'n')
    ->fields('n', array('vnid'))
    ->condition('id', $note_id)
    ->execute()
    ->fetchField();
}

/**
 * Helper function to get table data for vendor worker feedback.
 */
function _get_vendor_worker_feedback_table() {
  global $user, $company;
  $rows = array();

  // Adding css for vendor notes table content.
  drupal_add_css(
    '.worker-like-note {
       float: left;
       width: 53px;
    }
    .worker-dislike-note {
      float: right;
      width: 53px;
    }',
    array('type' => 'inline')
  );

  $header = array(
    array('data' => 'Company','class'=>array('text-center')),
    array('data' => 'M6ID','class'=>array('text-center')),
    array('data' => 'Ratings','class'=>array('text-center')),
    array('data' => 'Worker Name','class'=>array('text-center')),
    array('data' => 'Locations','class'=>array('text-center')),
    array('data' => 'Status / Thumbs','class'=>array('text-center')),
    array('data' => 'Actions','class'=>array('text-center')),
  );

  $users = _get_users_added_as_workers(TRUE);
  if (!empty($users)) {
    // Loading global variable.
    global $conf;
    foreach ($users as $user_data) {
      // $account = user_load($user_data->uid);
      $worker_name = _get_user_full_name($user_data->uid);
      $worker_status = !empty($user_data->status) ? '<strong>(' . ucwords(str_replace('_', ' ', $user_data->status)) . ')</strong>' : '';
      $worker_name = $worker_name . '<br/>' . $worker_status;

      // Getting M6ID of user.
      $m6id = _get_m6id_of_user_by_uid($user_data->uid);

      // Getting worker notes.
      $worker_notes = _get_notes_for_worker($user_data->uid);

      $var_name = 'company_' . $user_data->uid;
      $user_company_nid =  isset($conf[$var_name]) ? $conf[$var_name] : '';

      $company_details = T('Not Available');
      $only_address = T('Not Available');

      if ($user_company_nid) {
        $user_company = node_load($user_company_nid);
        $company_details = _get_vendor_company_details($user_company, FALSE, FALSE, 'thumbnail');
        $only_address = _get_vendor_company_details($user_company, TRUE);
      }

      // Getting ratings.
      $worker_ratings = _get_worker_ratings_by_uid($user_data->uid);

      // Making links according to user roles.
      $remove_link = '';

      $email_link = '<li>' . l(t('Email'), 'javascript:void(0)', array('external' => TRUE, 'HTML' => TRUE,)) . '</li>';
      $message_link = '<li>' . l(t('Message'), 'worker-feedback-messaging/' . $user_data->uid . '/nojs', array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-onboarding-message-popup-style')))) . '</li>';
      $edit_link = '<li>' . l(t('Edit'), 'edit-worker-feedback/' . $user_data->uid, array('attributes' => array('class' => array('edit-worker-feedback-link')))) . '</li>';

      // If user is vendor manager.
      if (_is_user_vendor_manager()) {
        $remove_link = '<li>' . l(t('Remove'), 'remove-worker-feedback/' . $user_data->uid . '/nojs', array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style')))) . '</li>';
      }

      $action = '<div class="worker-feedback-action">
        <div class="btn-group"><div class="dropdown">
        <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
        <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">' . $edit_link . $remove_link . $email_link . $message_link . '
        </ul></div></div></div>';

      $rows[] = array(
        array('data' => $company_details,'class'=>array('text-center')),
        array('data' => $m6id,'class'=>array('text-center')),
        array('data' => $worker_ratings,'class'=>array('text-center')),
        array('data' => $worker_name,'class'=>array('text-center')),
        array('data' => $only_address,'class'=>array('text-center')),
        array('data' => $worker_notes,'class'=>array('text-center')),
        array('data' => $action,'class'=>array('text-center')),
      );
    }
  }

  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Workers(s) Yet', 'sticky' => FALSE, 'attributes' => array('class' => array('table', 'm6connect-custom-table', 'm6connect-custom-vendor-worker-feedback-main-table', 'table-hover', 'table-bordered', 'text-center', 'm6init-datatable'))));
}

/**
 * Helper function to get workers names.
 * This function returns from the custom table, which we have saved.
 */
function _get_worker_names() {
  $return = array();

  // Getting all workers for current user and company.
  $all_users = _get_worker_names_all(TRUE);

  if (empty($all_users)) {
    return $return;
  }
  
  $query = db_select('worker_feedback', 'w')
    ->fields('w')
    ->condition('uid', $all_users)
    ->execute()
    ->fetchAll();

  if (!empty($query)) {
    foreach ($query as $key => $value) {
      $return[$value->uid] = _get_user_full_name($value->uid);
    }
  }

  return $return;
}

/**
 * Helper function to get workers names all.
 * This function returns all the workers of all companies of a user.
 */
function _get_worker_names_all($only_ids = FALSE) {
  $return = array();
  // Getting all users of all companies of current user.
  // This request can be generated by a vendor manager only.

  global $user, $company;
  // Getting all companies of user.
  $all_companies = _get_companies_details_by_user_uid($user->uid);

  if (empty($all_companies)) {
    return $return;
  }

  foreach ($all_companies as $value) {
    // Getting all users of the company.
    $users = _get_user_mappping_by_group_company_nid($value->nid);
    if (!empty($users)) {
      foreach ($users as $uid => $name) {
        if (!isset($return[$uid])) {
          $return[$uid] = ucwords($name);
        }
      }
    }
  }

  if (!empty($return)) {
    // Removing the current user.
    if (isset($return[$user->uid])) {
      unset($return[$user->uid]);
    }
  }

  // @todo remove users which are already added.

  return $only_ids ? array_keys($return) : $return;
}

/**
 * Helper function to get all the users added as workers.
 */
function _get_users_added_as_workers($full_data = FALSE) {
  $return = array();

  // Getting all users.
  $all_users = _get_worker_names_all(TRUE);
  if (empty($all_users)) {
    return $return;
  }

  // Gettings all users added as workers.
  $query = db_select('worker_feedback', 'w')
    ->fields('w')
    ->condition('uid', $all_users)
    ->execute()
    ->fetchAll();

  if (!empty($query)) {
    if ($full_data) {
      $return = $query;
    }
    else {
      foreach ($query as $key => $value) {
        $return[] = $value->uid;
      }
    }
  }

  return $return;
}

/**
 * Helper function to get worker info by uid/account.
 */
function _get_worker_info_by_uid($account = FALSE) {
  $return = array();

  if (empty($account)) {
    return $return;
  }

  $uid = (is_object($account)) ? $account->uid : $account;

  if (empty($uid)) {
    return $return;
  }

  $query = db_select('worker_feedback', 'w')
    ->fields('w')
    ->condition('uid', $uid)
    ->execute()
    ->fetchAssoc();

  return empty($query) ? $return : $query;
}

/**
 * Helper function to get worker ratings using uid/account.
 * Formatted using theme_item_list.
 * @return Formatted HTML.
 */
function _get_worker_ratings_by_uid($account = FALSE, $unformatted = FALSE) {
  $return = array();

  // If no uid/account received.
  if (empty($account)) {
    return $return;
  }

  $uid = (is_object($account)) ? $account->uid : $account;

  if (empty($uid)) {
    return $return;
  }

  $query = db_select('worker_feedback_ratings', 'wr')
    ->fields('wr')
    ->condition('uid', $uid)
    ->execute()
    ->fetchAll();

  $ratings_all = array();
  if (!empty($query)) {
    foreach ($query as $key => $value) {
      if (!empty($value->data)) {
        $data = unserialize($value->data);
        foreach ($data as $key => $value) {
          $ratings_all[$key][] = $value;
        }
      }
    }

    if (!empty($ratings_all)) {
      $ratings_data = array();
      foreach ($ratings_all as $key => $value) {
        if (!empty($value)) {
          $ratings_data[$key] = number_format(array_sum($value) / count($value), 1, '.', '');
        }
      }

      if (!empty($ratings_data)) {
        if ($unformatted) {
          // If only data is to be returned.
          return $ratings_data;
        }

        $items = array();
        foreach ($ratings_data as $key => $value) {
          $name = ucwords(str_replace('_', ' ', $key));
          $items[] = $name . ' - ' . $value;
        }
        $variables['items'] = $items;
        $variables['type'] = 'ul';
        return theme_item_list($variables);
      }
    }
  }

  return $unformatted ? array() : '<p>' . t('No ratings yet!') . '</p>';
}

/**
 * Helper function to get a worker's rating.
 */
function _get_workers_rating_by_individual($worker_uid = FALSE, $author_uid = FALSE) {
  $return = array();

  // If any one of the two parameters are not received then abort.
  if (empty($worker_uid) ||empty($author_uid)) {
    return $return;
  }

  $return = db_select('worker_feedback_ratings', 'w')
    ->fields('w')
    ->condition('uid', $worker_uid)
    ->condition('author', $author_uid)
    ->execute()
    ->fetchObject();

  return $return;
}

/**
 * Helper function to get M6ID of the user by UID.
 */
function _get_m6id_of_user_by_uid($account = FALSE) {
  $return = 'Not Found';

  // If no uid/account received.
  if (empty($account)) {
    return $return;
  }

  $uid = (is_object($account)) ? $account->uid : $account;

  if (empty($uid)) {
    return $return;
  }

  $query = db_select('users','u');
  $query->leftjoin('field_data_field_m6id', 'm6id', 'm6id.entity_id=u.uid AND m6id.bundle=:userBundle', array(':userBundle' => 'user'));
  $query->fields('m6id', array('field_m6id_value'));
  $query->condition('u.uid', $uid);
  $result = $query->execute()->fetchField();

  if (!empty($result)) {
    $return = $result;
  }

  return $return;
}

/**
 * Get Worker Feedback notes table.
 */
function _get_worker_notes_table($account = FALSE) {
  global $user, $base_url;
  $theme_path = drupal_get_path('theme', 'm6connect');
  $rows = array();
  $output = '';

  $header = array(
    array('data'=>'Note#','class'=>array('text-center')),
    array('data'=>'Date Made','class'=>array('text-center')),
    array('data'=>'Thumbs up / Thumbs down','class'=>array('text-center')),
    array('data'=>'User','class'=>array('text-center')),
    array('data'=>'Description','class'=>array('text-center'), 'width' => '350px;'),
  );

  $uid = !empty($account) ? ((is_object($account)) ? $account->uid : $account) : '';

  if (!empty($uid)) {
    // If we have a user, then proceeding further.
    $query = db_select('worker_feedback_notes', 'n')
      ->fields('n')
      ->condition('uid', $uid)
      ->orderBy('created', 'DESC')
      ->execute()
      ->fetchAll();

    if (!empty($query)) {
      // If there are notes for this vendor.
      foreach ($query as $note_data) {
        $note_id = $note_data->id;

        $name = _get_user_full_name($note_data->author);

        $note_number = $note_data->note_number;
        $note = $note_data->note;

        $created = $note_data->created;
        $date_made = '<strong>' . date('m/d/Y', $created) . '</strong><br/>';
        $date_made .= '<span style="font-size: 12px;">(' . t('%time ago', array('%time' => format_interval(REQUEST_TIME - $created))) . ')</span>';

        // Creating thumbs up/thumbs down images.
        $up_img = $base_url . '/' . $theme_path . '/images/thumb-right1.png';
        $down_img = $base_url . '/' . $theme_path . '/images/thumb-left1.png';

        $thumbs_up_count = _get_thumbs_count('worker_feedback', 'up', $note_id);
        $thumbs_down_count = _get_thumbs_count('worker_feedback', 'down', $note_id);

        $liked = $disliked = '';
        $is_note_liked = _get_thumbs_count('worker_feedback', 'up', $note_id, $user);
        $is_note_disliked = _get_thumbs_count('worker_feedback', 'down', $note_id, $user);

        if ($is_note_liked) {
          $liked = ' processed';
        }
        if ($is_note_disliked) {
          $disliked = ' processed';
        }

        $spinner = '<div class="pull-left"><i class="fa fa-spinner fa-spin vendor-spinner" aria-hidden="true" style="display:none;"></i></div>';

        $thumb_up = '<img src="' . $up_img . '" data="' . $note_id . '" class="like-note-user' . $liked . '" title="Thumbs Up for this Note." style="height:30px; width:30px; cursor:pointer"/>' . '<span class="thumbs-up-count">' . $thumbs_up_count . '</span>';
        $thumb_down = '<img src="' . $down_img . '" data="' . $note_id .'" class="dislike-note-user' . $disliked . '" title="Thumbs Down for this Note." style="height:30px; width:30px; cursor:pointer"/>' . '<span class="thumbs-down-count">' . $thumbs_down_count . '</span>';

        $rows[] = array(
          array('data' => $note_number, 'class' => array('text-center')),
          array('data' => $date_made, 'class' => array('text-center')),
          array('data' => $spinner . $thumb_up . ' | ' . $thumb_down, 'class' => array('text-center')),
          array('data' => $name, 'class' => array('text-center')),
          array('data' => $note, 'class' => array('text-center')),
        );
      }
    }
  }

  $output .= '<div class="vendor-notes-table-outer">';
  $output .= '<div class="vendor-notes-table-links">';

  // Adding add a Note link and Hide Notes Button.
  // $output .= '<div class="clearfix pull-left">';

  $output .= '<div class="clearfix margin-bottom-10 pull-right">';

  $output .= l(t('Add new note'), 'add-note-worker/' . $uid . '/nojs', array('attributes' => array('class' => array('text-white', 'form-submit', 'new-note-custom-button', 'ctools-use-modal', 'ctools-modal-assign-dashboard-popup-style'))));
  $output .= '<input class="cancel-button form-submit hide-notes-table" type="button" name="op" value="Close">';
  $output .= '</div>';

  // $output .= '<i class="fa fa-times icon-2x hide-notes-table" aria-hidden="true" style="cursor:pointer; zoom:2.5;"></i>';
  // $output .= '</div>';

  $output .= '</div>';

  $output .= '<div class="vendor-notes-table-table">';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Note(s) Yet!', 'sticky' => FALSE, 'attributes' => array('class' => array('table', 'm6connect-custom-table', 'm6connect-custom-worker-feedback-notes-table', 'table-hover', 'table-bordered', 'text-center'))));
  $output .= '</div>';

  $output .= '</div>';
  return $output;
}

/**
 * Helper function to get Worker UID by note_id.
 */
function _get_worker_uid_by_note_id($note_id = FALSE) {
  $return = FALSE;

  // If no note_id received.
  if (empty($note_id)) {
    return $return;
  }

  return db_select('worker_feedback_notes', 'n')
    ->fields('n', array('uid'))
    ->condition('id', $note_id)
    ->execute()
    ->fetchField();
}

/**
 * Helper function to get Notes count/HTML for a worker by UID.
 */
function _get_notes_for_worker($account, $unformatted = FALSE) {
  $return = t('No notes Yet');
  // If no uid/account received.
  if (empty($account)) {
    return $unformatted ? array() : $return;
  }

  $uid = (is_object($account)) ? $account->uid : $account;

  if (empty($uid)) {
    return $unformatted ? array() : $return;
  }

  $query = db_select('worker_feedback_likes', 'l')->fields('l');
  $query->join('worker_feedback_notes', 'n', 'n.id=l.note_id');
  $query->condition('n.uid', $uid);
  $results = $query->execute()->fetchAll();

  if (!empty($results)) {
    global $base_url;
    $theme_path = drupal_get_path('theme', 'm6connect');

    $up_img = $base_url . '/' . $theme_path . '/images/thumb-right1.png';
    $down_img = $base_url . '/' . $theme_path . '/images/thumb-left1.png';
    
    $thumbs_up = 0;
    $thumbs_down = 0;
    foreach ($results as $result) {
      $thumbs_up = !empty($result->thumbs_up) ? $thumbs_up + 1 : $thumbs_up;
      $thumbs_down = !empty($result->thumbs_down) ? $thumbs_down + 1 : $thumbs_down;
    }

    if ($unformatted) {
      return array(
        'thumbs_up' => $thumbs_up,
        'thumbs_down' => $thumbs_down,
      );
    }

    $thumbs_up_markup = '<div class="worker-like-note" id="worker-like-' . $uid . '"><img src="' . $up_img . '" title="Thumbs Up for this Note." style="height:30px; width:30px; cursor:pointer"/>' . '<span class="thumbs-up-count">' . $thumbs_up . '</span></div>';
    $thumbs_down_markup = '<div class="worker-dislike-note" id="worker-dislike-' . $uid . '"><img src="' . $down_img . '" title="Thumbs Down for this Note." style="height:30px; width:30px; cursor:pointer"/>' . '<span class="thumbs-down-count">' . $thumbs_down . '</span>';

    $return = $thumbs_up_markup . ' | ' . $thumbs_down_markup;
  }

  return $unformatted ? array() : $return;
}

/**
 * Helper function to get message content for worker feedback. (HTML)
 * @var $account
 *   The receiver's account or UID.
 * @var $user
 *   The sender's account or UID.
 */
function _get_worker_feedback_message_content($user) {
  $curruserclass = 'cuser-not-submitter-approver';

  if (empty($user)) {
    global $user;
  }

  // Getting type of vendor.
  $type = 'worker_feedback';

  $results = _get_service_messaging_message_content($type, $user->uid);

  $output = '<div class="bidder-feedback-msg-list ' . $curruserclass . ' clearfix">';

  if (!empty($results)) {
    foreach ($results as $result) {
      if (empty($result['message']) && empty($result['attachment'])) {
        continue;
      }
      if (!empty($result['deleted_from']) && in_array($account->uid, $result['deleted_from'])) {
        continue;
      }
      if (empty($result['message']) && !empty($result['attachment'])) {
        // This is an attachment.
        $file = file_load($result['attachment']);
        $attachment_img = image_style_url('pic_40x40', $file->uri);
        $attachment_img_url = '<img src="' . $attachment_img . '" />';
        $result['message'] = $attachment_img_url;
      }
      // Checking if the sender is vendor manager.
      $_is_user_vendor_manager = _is_user_vendor_manager(NULL, $result['sender']);
      $alignclass = ($user->uid != $result['sender']) ? 'feedback-msg-reader' : 'feedback-msg-writer';

      // Getting user image of sender and receiver.
      $userimg = _get_message_user_image($result['sender']);

      $output .= '<div class="bidder-feedback-msg routing-feedback-msg-' . $result['id'] . ' clearfix ' . $alignclass . '">';
      $output .= '<div class="bidder-feedback-msg-attr pull-left">';

      $output .= '</div>';
      $output .= '<span class="bidder-feedback-msg-time"><span class="msg-aut-img">' . $userimg . '</span></span>';
      $output .= '<span class="bidder-feedback-msg-msg"><strong>' . $result['realname'] . '</strong> - </span><span class="bidder-feedback-msg-content">' . $result['message'] . '</span><p class="message-post-time text-right clearfix">' . date('h:i A', $result['created']) . '</p>';
      $output .= '</div>';

      if ($user->uid == $result['sender']) {
        $output .= '<div class="bidder-feedback-msg-delete">';
        $output .= l('<i class="fa fa-times-circle"></i>', 'service-message-remove/' . $result['id'] . '/nojs', array('html' => TRUE, 'attributes' => array('class' => array('bidder-feedback-msg-delete-link', 'use-ajax'))));
        $output .= '</div>';
      }
      $output .= '</div>';
    }
  }
  
  $output .= '</div>';
  return $output;
}

/**
 * Addition submit handler for user register form, to set redirect in form_state.
 */
function vendor_custom_redirect_handler($form, &$form_state) {
  if (!empty($_SESSION['vendor_register']) && !empty($_SESSION['vendor_register']['vendor_nid']) && !empty($_SESSION['vendor_register']['vendor_uid'])) {
    // If the user has been invited via vendor manager.
    $form_state['redirect'] = 'new/organization';
  }
  if (!empty($_SESSION['vendor_register']) && !empty($_SESSION['vendor_register']['cnid'])) {
    // If the user has been invited via vendor manager.
    $form_state['redirect'] = 'new/organization';
  }
}

/**
 * Function to get company users by role and company id.
 * Same as function defined in common module, but extended functionality to
 * get active, inactive or both type of users.
 * @see _get_company_users_by_og_roles; m6connect_common.module
 */
function _get_company_users_by_og_roles_with_status($cmpNid, $roleName, $status = FALSE) {
  $query = db_select ('users', 'u');
  $query->join('og_membership', 'og', 'og.etid=u.uid AND og.entity_type=:EntityType', array(':EntityType' => 'user'));
  $query->join('og_users_roles', 'ogur', 'ogur.uid=og.etid AND ogur.gid=og.gid AND ogur.group_type=:GroupType', array(':GroupType' => 'node'));
  $query->join('og_role', 'ogr', 'ogur.rid = ogr.rid');
  
  $query->fields('u', array('uid'));

  if ($status !== FALSE && ($status == 0 || $status == 1)) {
    // Checking if to get only active or inactive users.
    $query->condition('u.status', $status);
  }

  $query->condition('og.gid', $cmpNid);
  $query->condition('ogr.group_bundle', 'organization');
  $query->condition('ogr.name', $roleName);
  return $query->execute()->fetchCol();
}

/**
 * Helper function to get company messages.
 * Saving content statically, as user can switch between chats several times
 * in a page load.
 */
function _get_company_messages($node, $active_map = '') {
  // Adding company js.
  drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/js/' . 'm6messaging.js');
  return user_messaging_callback();
  
  $company_data = &drupal_static(__FUNCTION__);
  $data_set = TRUE;

  if (!isset($company_data)) {
    $data_set = FALSE;
  }
  if (!isset($company_data[$node->nid])) {
    $data_set = FALSE;
  }

  if ($data_set) {
    return $company_data[$node->nid];
  }

  $company_data[$node->nid] = t('No messages yet.');
  // Getting the vendors related to current node.
  $vendors = _get_vendors_by_company($node);

  // If we have some vendors to work on.
  if (!empty($vendors)) {
    $vendor_mappings = array();
    foreach ($vendors as $vendor_nid) {
      $query = db_select('service_messaging', 'sm')
        ->fields('sm')
        ->condition('reference', $vendor_nid)
        ->condition('service', 'm6reach')
        ->orderBy('created', 'DESC')
        ->execute()
        ->fetchAll();

      if (!empty($query)) {
        // If any messages are send for the current vendor.
        foreach ($query as $value) {
          $vendor_mappings[$value->mapping_id][] = array('sender' => $value->sender, 'receiver' => $value->receiver, 'reference' => $value->reference,);
        }
      }
    }

    if (!empty($vendor_mappings)) {
      $message_data = array();
      // Now we are to judge that who is the sender and who is receiver for
      // each mapping entry. The best guess is, a conversation is always started
      // by a vendor manager to company admin, and not vice versa.
      // So the first entry in our array would mean that sender is vendor
      // manager and receiver is company admin.
      foreach ($vendor_mappings as $mapping_id => $data) {
        // For each entry we need to make a chat bubble, using the receiver.
        $receiver = !empty($data[0]['receiver']) ? $data[0]['receiver'] : (!empty($data[0]['sender']) ? $data[0]['sender'] : '');
        $sender = !empty($data[0]['sender']) ? $data[0]['sender'] : (!empty($data[0]['receiver']) ? $data[0]['receiver'] : '');
        $messages = _get_service_messaging_message_content('m6reach', $sender, $data[0]['reference']);

        if (!empty($sender)) {
          $message_data[$mapping_id] = array('user' => $sender, 'messages' => $messages,);
        }
      }
    }

    // If we have message data, then getting its html and returning it.
    if (!empty($message_data)) {
      return $message_data;
      $company_data[$node->nid] = _get_message_data_for_company_profile_html($message_data, $active_map);
      return $company_data[$node->nid];
    }
  }
}

/**
 * Helper function to get vendors by company node.
 * @param $node
 *   Either nid or fully loaded node object.
 */
function _get_vendors_by_company($node = FALSE, $current_user = FALSE) {
  global $user, $company;

  $return = array();
  if (is_numeric($node)) {
    $node = node_load($node);
  }

  if (empty($node)) {
    return $return;
  }

  $query = db_select('node', 'n')->fields('n', array('nid'));
  $query->leftjoin('og_membership', 'og', 'og.etid=n.nid AND og.entity_type=:entity_type', array(':entity_type' => 'node'));
  $query->condition('og.gid', $node->nid);
  if ($current_user) {
    // If for current user is requested, it means that we need to search for
    // entire eligible users of the current company.
    $company_admins = _get_company_users_by_og_roles_with_status($company->nid, 'company admin', 1);
    $vendor_managers = _get_company_users_by_og_roles_with_status($company->nid, 'Vendor Manager', 1);
    $eligible_users = array_merge($company_admins, $vendor_managers);
    $eligible_users = array_unique($eligible_users);

    if (!empty($eligible_users)) {
      $db_or = db_or()->condition('n.uid', $user->uid)->condition('n.uid', $eligible_users);
      $query->condition($db_or);
    }
    else {
      $query->condition('n.uid', $user->uid);
    }
  }
  $query->condition('n.type', 'vendor');
  $query->orderBy('n.created', 'DESC');
  $results = $query->execute()->fetchAll();
  
  if (!empty($results)) {
    foreach ($results as $result) {
      $return[] = $result->nid;
    }
  }
  
  return $return;
}

/**
 * Helper function to know if messages are available for a company.
 */
function _messages_available_for_company($node) {
  if (empty($node)) {
    return FALSE;
  }
  if (is_numeric($node)) {
    $node = node_load($node);
    if (!$node) {
      return FALSE;
    }
  }
  if (empty($node->nid)) {
    return FALSE;
  }

  // Checking if any vendors are available for a node.
  // If vendors are available, then we check atleast a single message thread is
  // initiated for this company. If so return true, false otherwise.
  $vendors = _get_vendors_by_company($node);
  if (empty($vendors)) {
    // If there are no vendors for this company, then there would be no messages
    // also.
    return FALSE;
  }

  $query = db_select('service_messaging', 's');
  $query->fields('s');
  $query->condition('reference', $vendors);
  $query->condition('service', 'm6reach');
  $count = $query->execute()->rowCount();

  return $count > 0 ? TRUE : FALSE;
}

/**
 * Helper function to get messages HTML for company profile page.
 */
function _get_message_data_for_company_profile_html($message_data, $active_map) {
  $return = t('No messages yet.');
  if (empty($message_data)) {
    return $return;
  }

  $return = '';
  $elements = array();
  $elements['left-data'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="col-md-3 col-sm-4 col-xs-12 padding-5">',
    '#suffix' => '</div>',
    );

  // Preparing left data.
  $left_data = '';

  reset($message_data);
  if (empty($active_map)) {
    $active_map = key($message_data);
  }

  foreach ($message_data as $mapping_id => $data) {
    // Getting user image.
    $user_img = _get_message_user_image($data['user']);

    $user_active = $mapping_id == $active_map ? ' user-active' : '';

    $left_data .= '<div class="msg-connected-user-info msg-connected-user-2 clearfix' . $user_active . '" id="' . $mapping_id . '">';

    $left_data .= '<div class="msg-connected-info">';

    $left_data .= '<div class="msg-connected-picture msg-connected-user-inner padding-5">
    <span class="msg-pic">' . $user_img . '</span>
    </div>';

    $left_data .= '<div class="msg-connected-user-data msg-connected-user-inner padding-5">
    <div class="msg-connected-user-name">' . _get_user_full_name($data['user']) . '</div>
    </div>';

    $left_data .= '</div>';

    $left_data .= '</div>';
  }

  $elements['left-data']['#markup'] = $left_data;

  // Preparing right data.
}

/**
 * Helper function to get company markup.
 * Company Profile Image.
 */
function _get_company_markup($nid = '') {
  $return = '';
  if (empty($nid)) {
    return $return;
  }

  $node = node_load($nid);

  // Banner Image.
  $return .= '<div class="company-header" id="company-banner-custom-header">';
  if (!empty($node->field_company_profile_cover_img['und'][0]['uri'])) {
    $banner_image = '<img src="' . image_style_url('company_cover_1073_394', $node->field_company_profile_cover_img['und'][0]['uri']) . '">';
  }
  else {
    $cirtificate = m6connect_company_get_circtficat($node);
    if ($cirtificate) {
      $banner_image = '<img src="/sites/all/themes/m6connect/images/default-company-cover_c.jpg" alt="default-company-cover">';
    } else {
      $banner_image = '<img src="/sites/all/themes/m6connect/images/default-company-cover-new.jpg" alt="default-company-cover">';
    }
  }
  $return .= $banner_image;
  $return .= '</div>';

  // Logo Image.
  $return .= '<div class="company_logo_details_m6reach" id="company-logo-custom-header">';
  if (!empty($node->field_logo['und']['0']['uri'])) {
    $user_pic_uri = $node->field_logo['und']['0']['uri'];
    $user_pic = image_style_url('company_logo', $user_pic_uri);
    $original_pic = file_create_url($user_pic_uri);
  }
  else {
    $user_pic = $original_pic = '/sites/all/themes/m6connect/images/default_company_profile.jpg';
  }

  $return .= l('<img src="' . $user_pic . '">', $original_pic, array('html' => TRUE, 'attributes' => array('class' => array('colorbox-load'))));

  $return .= '</div>';
  return $return;
}

/**
 * Helper function to get user list for request feedback.
 */
function _get_user_options_for_request_feedback($company = FALSE) {
  if (empty($company)) {
    global $company;
  }
  global $user;

  // Getting all users of the current company.
  $all_users = _get_user_mappping_by_group_company_nid($company->nid);
  if (!empty($all_users)) {
    $users = array_diff_key($all_users, array($user->uid => 'current user'));
    if (!empty($users)) {
      return $users;
    }
  }

  return array();
}

/**
 * Helper function to check whether a user is allowed to rate a company on it's
 * profile page.
 * Functionality changed on May 12, 2017. Now ratings are not saved for review
 * and directly approved.
 * New @return
 *   0 => Not Allowed.
 *   1 => Allowed and has not rated yet.
 *   2 => Allowed and rated already.
 *
 * Obsolate now
 * @return 
 *   0 => If user is not allowed.
 *   1 => If user was requested by vendor manager, is allowed, AND also has
 *        not rated already.
 *   2 => Same as 1, but user has rated already.
 *   3 => If user is company admin of the company whose profile is opened.
 *   4 => If user was requested directly by the company admin AND has not rated
 *        yet.
 *   5 => Same as 4, but user has rated it already.
 *   6 => If user was not invited, AND has not rated this company already.
 *   7 => If user was not invited, AND has rated this company already and 
 *        ratings are not approved (still waiting to be approved).
 *   8 => Same as 7 but ratings are approved.
 *   9 => Same as 7 but ratings are denied.
 */
function _is_user_allowed_to_rate() {
  $return = 0;

  if (arg(0) != 'node' || !is_numeric(arg(1))) {
    // We are directly returning 0 if the user is not on node page.
    return $return;
  }

  $node = menu_get_object();
  if (!$node || $node->type != 'organization') {
    // We are directly returning 0 if the user is not on company profile page.
    return $return;
  }

  global $user;

  if (_is_user_company_admin($node, $user)) {
    return 3;
  }

  $data = _get_m6reach_form_data($node->nid, $user->uid, 0, 'm6reach');
  if (!empty($data)) {
    return 2;
  }
  if (!empty($_GET['vendor']) && is_numeric($_GET['vendor'])) {
    $data = _get_m6reach_form_data($node->nid, $user->uid, $_GET['vendor'], 'm6reach');
    if (!empty($data)) {
      return 2;
    }
  }

  return 1;

  if (!isset($_GET['vendor'])) {
    // If user is just browsing the company's profile page.
    $return = 6;

    // Checking whether current user has ever rated for this company.
    // We check whether user has rated by invitation of the company admin only,
    // (means only in `m6reach_company_invites` table) and not by the
    // vendor manager.
    $query = db_select('m6reach_company_invites', 'i')
      ->fields('i')
      ->condition(db_or()->condition('uid', $user->uid)->condition('email', $user->mail))
      ->condition('company', $node->nid)
      ->execute()
      ->fetchObject();

    if (!empty($query)) {
      // If a user opened this page without any invitation for feedback, but was
      // invited in past.
      if ($query->rated == 0) {
        // Here is the game changer. If user was invited but has not rated yet,
        // then we treat him as if he was invited so that his ratings and notes
        // are not sent for review to company admin and published immediately.
        $return = 4;
      }
      else {
        $return = 5;
      }
    }
    else {
      // We also need to check, whether user had anonymously rated the company
      // and was approved.
      $data = _get_m6reach_form_data($node->nid, $user->uid, 0, 'm6reach');
      if (!empty($data)) {
        if ($data['approved'] == 0) {
          $return = 7;
        }
        elseif ($data['approved'] == 1) {
          $return = 8;
        }
        else {
          $return = 9;
        }
      }
    }
  }

  // If query parameter has 'vendor' with value of 'default', then it means that
  // a rating is requested by the company admin directly without the reference
  // of any vendor.
  // We check for actual query string and are not relying here on $_GET. Because
  // above we have manually put a `default` value in $_GET if a certain
  // condition meets. So if the compiler goes in above condition then there is
  // no sense in going in this condition.
  $query_string = !empty($_SERVER['QUERY_STRING']) && strpos($_SERVER['QUERY_STRING'], 'vendor=default') !== FALSE;
  if ($query_string) {
    $query_rated = _get_m6reach_form_data($node->nid, $user->uid, 0, 'm6reach');
    // Here it may be possible that user was invited to M6, and did not had an
    // account with M6. So we check with mail or uid.
    // If user has already rated returning 5, else 4.
    $query = db_select('m6reach_company_invites', 'i')
      ->fields('i')
      ->condition(db_or()->condition('uid', $user->uid)->condition('email', $user->mail))
      ->condition('company', $node->nid)
      ->execute()
      ->fetchObject();

    if (!empty($query)) {
      // If user was invited, then checking whether user rated it or not.
      $return = $query->rated == 0 ? 4 : 5;

      // There may be a possibility that user had rated before in the past and
      // invited later.
      if (!empty($query_rated)) {
        $return = 5;
      }
    }
    else {
      // In case user was not invited, and opened up this page intentionally.
      $return = 6;

      // There is a possibility that the user may have rated this company prior
      // to invitation. Checking that.
      if (!empty($query_rated)) {
        if ($query_rated['approved'] == 0) {
          $return = 7;
        }
        elseif ($query_rated['approved'] == 1) {
          $return = 8;
        }
        else {
          $return = 9;
        }
      }
    }
  }

  // If the page was opened for rating, then checking whether the current user
  // is asked to rate or not.
  if (isset($_GET['vendor']) && $_GET['vendor'] != 'default') {
    $query = db_select('m6reach_invites', 'i')
      ->fields('i')
      ->condition('uid', $user->uid)
      ->condition('company', $node->nid)
      ->condition('vendor', $_GET['vendor'])
      ->execute()
      ->fetchObject();

    if (!empty($query)) {
      $return = $query->rated == 0 ? 1 : 2;
    }
    else {
      // In case user was not invited, and opened up this page intentionally.
      $return = 6;
      // There is a possibility that the user may have rated this company prior
      // to invitation. Checking that.
      $query_data = _get_m6reach_form_data($node->nid, $user->uid, $_GET['vendor'], 'm6reach');
      if (!empty($query_data)) {
        $return = 2;
      }
      
    }
  }

  // Checking if current user is company admin of current company. Because we
  // need to show the ratings tab always to company admin, so that admin can
  // request feedback for the company to desired companies/outside companies.
  if (_is_user_company_admin($node, $user)) {
    $return = 3;
  }

  return $return;
}

/**
 * Helper function to get rated data of the current user.
 * This function is called after all checks, so we don't need to check here
 * anything.
 * @see ds-1col--node-organization.tpl.php
 */
function _get_rate_data($where = 'm6reach') {
  global $user;
  $node = menu_get_object();

  if ($where == 'm6reach') {
    return db_select('m6reach_invites', 'i')
      ->fields('i')
      ->condition('uid', $user->uid)
      ->condition('company', $node->nid)
      ->condition('vendor', $_GET['vendor'])
      ->execute()
      ->fetchObject();
  }
  if ($where == 'company') {
    return db_select('m6reach_company_invites', 'i')
      ->fields('i')
      ->condition(db_or()->condition('uid', $user->uid)->condition('email', $user->mail))
      ->condition('company', $node->nid)
      ->execute()
      ->fetchObject();
  }
}

/**
 * Function to get form to rate vendor on company page.
 * This function is used to build form for both types of ratings, i.e. When
 * a vendor is available or when vendor is not avialable.
 * This is judged by the build info arguments.
 */
function rating_node_form_vendor($form, &$form_state) {
  global $user, $company;

  $company_node = menu_get_object();
  $vendor_node = !empty($_GET['vendor']) && is_numeric($_GET['vendor']) ? node_load($_GET['vendor']) : NULL;
  $type = 'm6reach';

  $args = $form_state['build_info']['args'];

  // Checking whether the form was submitted by a user who was directly invited
  // by the company admin to rate his company.
  // If $vendor_default is TRUE, then we build the form little differently.
  // $vendor_default = in_array('vendor_default', $args);

  // Checking whether user is just browsing and not invited by either company
  // admin or vendor manager.
  // $vendor_anonymous = in_array('anonymous', $args);

  // Checking if user has already rated it or not.
  // If user has rated already, then showing the whole form, but disabling the
  // submission of ratings.
  $user_already_rated = in_array('rated', $args);

  // If current user has already rated, then getting data.
  if ($user_already_rated) {
    if ($vendor_node) {
      // If vendor node is available then getting data accordingly.
      $user_ratings = _get_m6reach_form_data($company_node->nid, $user->uid, $vendor_node->nid, $type);
    }
    else {
      $user_ratings = _get_m6reach_form_data($company_node->nid, $user->uid, 0, $type);
    }

    if (!empty($user_ratings)) {
      $user_ratings_data = !empty($user_ratings['data']) ? unserialize($user_ratings['data']) : NULL;
      $user_ratings_data_2 = $user_ratings_data;
      $user_attributes_data = !empty($user_ratings['attributes']) ? unserialize($user_ratings['attributes']) : NULL;

      if (!empty($user_attributes_data)) {
        $user_ratings_data += $user_attributes_data;
      }

      if (!empty($user_ratings_data)) {
        // Saving into form_state only when we have data to save.
        $form_state['m6reach_user_ratings'] = $user_ratings_data;
      }
    }
  }

  // Pre form building work.

  // Getting Total M6 Rating for the current company irrespective of users or
  // vendors.
  // $vendor_ratings_options = variable_get('vendor_rating_types', array());
  $vendor_ratings_options = _get_vendor_ratings_options($company_node->nid, 'ratings');
  $vendor_attributes_options = _get_vendor_ratings_options($company->nid, 'attributes');

  // if ($vendor_default || $vendor_anonymous) {
  //   $vendor_ratings = _get_vendor_ratings($company_node, $type, TRUE, TRUE, FALSE, TRUE);
  // }
  // else {
  //   $vendor_ratings = _get_vendor_ratings($vendor_node, $type, TRUE, FALSE, FALSE, TRUE);
  // }
  $vendor_ratings = _get_vendor_ratings($company_node, $type, TRUE, TRUE, FALSE, TRUE);

  $form_state['include_m6rank_inc'] = TRUE;

  // We need to get companies data, and also the one figure average for the
  // M6, Company, and User's ratings, so as to generate the last bar.
  $company_ratings_average = 0.0;
  $user_ratings_average = 0.0;
  $m6_total_ratings_average = 0.0;

  // First getting company ratings average.
  $company_users = _get_user_mappping_by_group_company_nid($company->nid);
  if (!empty($company_users)) {
    $company_users = array_keys($company_users);
    $company_ratings = _get_vendor_ratings($company_node, $type, TRUE, TRUE, $company_users, TRUE);
    if (!empty($company_ratings)) {
      $company_ratings_average = number_format(array_sum($company_ratings) / count($company_ratings), 1, '.', '');
    }
  }

  // Secondly getting user ratings average.
  if (!empty($user_ratings_data_2)) {
    $user_ratings_average = number_format(array_sum($user_ratings_data_2) / count($user_ratings_data_2), 1, '.', '');
  }

  // Thirdly getting Total M6Reach ratings average.
  if (!empty($vendor_ratings)) {
    $m6_total_ratings_average = number_format(array_sum($vendor_ratings) / count($vendor_ratings), 1, '.', '');
  }

  $m6rank_ratings_js_data = array();
  foreach (array('user' => 'user_ratings_average', 'company' => 'company_ratings_average', 'm6' => 'm6_total_ratings_average') as $key => $value) {
    $m6rank_ratings_js_data[$key] = $$value;
  }

  $argument = array('m6rank_ratings_js_data_options' => $m6rank_ratings_js_data);
  drupal_add_js($argument, 'setting');

  // Adding drupal settings data.
  $vendor_ratings_js_data = array();
  foreach ($vendor_ratings_options as $key => $value) {
    $vendor_ratings_js_data[$key] = array('value' => $value, 'rating' => !empty($vendor_ratings[$key]) ? $vendor_ratings[$key] : 0,);
  }
  if (!empty($vendor_ratings_js_data)) {
    $vendor_ratings_js_data['m6rank_inc'] = array('value' => t('M6 Rank'), 'rating' => $m6_total_ratings_average);
  }
  $argument = array('m6reach_vendor_rating_options' => $vendor_ratings_js_data);
  drupal_add_js($argument, 'setting');

  // Adding attributes options to JS
  $m6reach_attributes_options_js_data = array();
  if (!empty($company_users) && !empty($vendor_attributes_options)) {
    $attribute_ratings = _get_attribute_ratings($company_node, $company_users);
    foreach ($vendor_attributes_options as $key => $value) {
      $m6reach_attributes_options_js_data[$key] = array('value' => $value, 'rating' => !empty($attribute_ratings[$key]) ? $attribute_ratings[$key] : 0,);
    }
    $argument = array('m6reach_attributes_options_js_data' => $m6reach_attributes_options_js_data);
    drupal_add_js($argument, 'setting');
  }

  // We need to calculate average of rating on the fly when slider is moved by
  // user. So, for this we get ratings for each service (total except the
  // current user) and send in JS, and when user slides the rating div, then
  // we calculate the rating and display it to user.
  $ratings_on_the_fly = _get_ratings_attributes_otf($company_node, 'ratings');
  $attributes_on_the_fly = _get_ratings_attributes_otf($company_node, 'attributes');
  $rating_attributes_otf_js_data = array();
  $rating_attributes_otf_js_data['ratings'] = $ratings_on_the_fly;
  $rating_attributes_otf_js_data['attributes'] = $attributes_on_the_fly;
  $argument = array('rating_attributes_otf_js_data' => $rating_attributes_otf_js_data);
  drupal_add_js($argument, 'setting');

  // Adding JS.
  drupal_add_js(drupal_get_path('module', 'm6connect_vendor') . '/js/' . 'company_page.js');

  // Including m6reach inc file.
  module_load_include('inc', 'm6connect_vendor', '/includes/m6reach');

  $form['notes_dialog'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="like-dislike-processed-dialog" style="display:none;"></div>',
  );

  $form_state['cnid'] = $company_node->nid;

  $form['cnid'] = array(
    '#type' =>'hidden',
    '#value' => $company_node->nid,
  );
  $form['vnid'] = array(
    '#type' => 'hidden',
    '#value' => !empty($vendor_node->nid) ? $vendor_node->nid : NULL,
  );
  $form['m6reach_type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );

  $form['vendor_ratings'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('edit-vendor-ratings')),
    '#process' => array('vendor_ratings_container_process'),
    '#prefix' => '<div class="form-inline"><div class="vendor-ratings-container margin-bottom-45">',
    '#suffix' => '</div></div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $user_already_rated ? t('Update Feedback') : t('Submit Feedback'),
    '#submit' => array('vendor_m6reach_edit_form_submit'), // From m6reach.inc
  );

  $form['view_feedback'] = array(
    '#type' => 'button',
    '#value' => t('View Notes'),
    '#attributes' => array('class' => array('view-feedback-m6reach')),
  );

  $notes_table = vendor_notes_table($company_node, $vendor_node);
  $form['notes-table'] = array(
    '#type' => 'markup',
    '#markup' => '<div class = "clearfix margin-bottom-10 padding-10"><div id="notes-table-vendor" style="display:none;">' . $notes_table . '</div></div>',
  );

  if ($vendor_default || $vendor_anonymous) {
    // We do not need these things in this condition.
    unset($form['vnid'], $form['m6reach_type']);
  }

  return $form;
}

/**
 * Helper function to get note data by note_id.
 */
function _get_note_data_by_id($note_id = FALSE) {
  $return = array();
  if (empty($note_id)) {
    return $return;
  }

  $return = db_select('m6reach_notes', 'n')
    ->fields('n')
    ->condition('id', $note_id)
    ->execute()
    ->fetchObject();

  return $return;
}

/**
 * Helper function to update m6reach company invites table data.
 * @param array $data
 *   $data is an indexed array, consisting either numeric values (uids) or
 *   string values (emails)
 *   If uid is provided, then the request is sent to company admin.
 *   If email is provided, then the request is sent to outside company.
 */
function _update_m6reach_company_invites_data($data = array()) {
  if (empty($data) || !is_array($data)) {
    return;
  }
  global $company;

  // Trying to clean DB, if any possible duplicate entries found.
  $query = db_delete('m6reach_company_invites');
  $query->condition(db_or()->condition('uid', $data)->condition('email', $data));
  $query->condition('company', $company->nid);
  $query->execute();

  foreach ($data as $key => $value) {
    $fields = array();
    if (is_numeric($value)) {
      // This is the case when we get a UID.
      $fields = array(
        'uid' => $value,
        'company' => $company->nid,
        'rated' => 0,
        'is_outside' => 0,
        'created' => REQUEST_TIME,
        'updated' => REQUEST_TIME,
      );
    }
    elseif (is_string($value)) {
      // This is the case, when we get an email. We do not validate email
      // address here, as we had already done this in submit handler.
      $fields = array(
        'email' => $value,
        'company' => $company->nid,
        'rated' => 0,
        'is_outside' => 1,
        'created' => REQUEST_TIME,
        'updated' => REQUEST_TIME,
      );
    }
    else {
      // If there is a possibility of third case, then we do not know what to do.
      // Hence we do nothing.
    }

    // Insert data into table.
    if (!empty($fields)) {
      db_insert('m6reach_company_invites')
        ->fields($fields)
        ->execute();
    }
  }
}

/**
 * Helper function to update m6reach company invites table data.
 * @param array $data
 *   The user list to be updated.
 * @param $company
 *   The company node.
 * @param $vendor
 *   The vendor node.
 */
function _update_m6reach_vendor_invites_data($data = array(), $company = NULL, $vendor = NULL) {
  if (empty($data) || !is_array($data)) {
    return;
  }

  if (empty($company) || empty($vendor)) {
    return;
  }

  // Trying to clean DB, if any possible duplicate entries found.
  $query = db_delete('m6reach_invites');
  $query->condition('uid', $data);
  $query->condition('company', $company->nid);
  $query->condition('vendor', $vendor->nid);
  $query->execute();

  foreach ($data as $key => $value) {
    $fields = array();
    if (is_numeric($value)) {
      // This is the case when we get a UID.
      $fields = array(
        'uid' => $value,
        'company' => $company->nid,
        'vendor' => $vendor->nid,
        'rated' => 0,
        'created' => REQUEST_TIME,
        'updated' => REQUEST_TIME,
      );
    }

    // Insert data into table.
    if (!empty($fields)) {
      db_insert('m6reach_invites')
        ->fields($fields)
        ->execute();
    }
  }
}

/**
 * Helper function to clear vendor notifications.
 * @param $company_node
 *   This is the company node, whose profile a user is browsing right now.
 *   It is required, but if not provided, we try to get it.
 * @param $vendor_node
 *   This is optional. A vendor node, if not provided, then also we try to get
 *   it, and not found we try to clean other notifications.
 */
function _clean_vendor_notifications($company_node = NULL, $vendor_node = NULL) {
  if (empty($company_node->nid)) {
    // If we do not have company node, then we try to get it, if not found then
    // abort.
    $node = menu_get_object();
    if (!empty($node->type) && $node->type == 'organization') {
      $company_node = $node;
    }
    else {
      return;
    }
  }

  if (empty($vendor_node)) {
    // If vendor node is empty, then we try to get it, if not found then
    // continuing without vendor node.
    $get_vendor = check_plain($_GET['vendor']);
    if (!empty($get_vendor) && is_numeric($get_vendor) && $vnode = node_load($get_vendor)) {
      $vendor_node = $vnode;
    }
  }

  global $user;
  if (db_table_exists('m6connect_notification')) {
    $query = db_delete('m6connect_notification');
    $query->condition('request_to', $user->uid);
    $query->condition('entity_id', $company_node->nid);

    if (empty($vendor_node->nid)) {
      // If vendor node is empty or not provided, then we are dealing with the
      // requests send by company admin to users for the feedback.
      $query->condition('type', 'company_admin_request');
      $query->condition('company_nid', 0);
    }
    else {
      // If vendor node is available then it means that the request was
      // generated by a vendor mananger.
      $query->condition('type', 'vendor_manager_request');
      $query->condition('company_nid', $vendor_node->nid);
    }
    $query->execute();
  }
}

/**
 * Helper function to get users who rated for a company.
 * @param $company
 *   The company node to get result for.
 * @param $vendor
 *   The vendor node to get result for.
 *   If NULL = Then it is requested from company profile page.
 *   If NOT NULL = Then it is requested from vendor manager page.
 * @param $rated
 *   0 = 'Invited'
 *   1 = 'Rated'
 */
function _get_rated_invited_users($company = NULL, $vendor = NULL, $rated = 0) {
  if (empty($company)) {
    return array();
  }

  if (!empty($vendor)) {
    $query = db_select('m6reach_invites', 'm')
      ->fields('m', array('uid'))
      ->condition('company', $company->nid)
      ->condition('vendor', $vendor->nid)
      ->condition('rated', $rated)
      ->execute()
      ->fetchAll();
  }
  else {
    $query = db_select('m6reach_company_invites', 'm')
      ->fields('m', array('uid'))
      ->condition('company', $company->nid)
      ->condition('rated', $rated)
      ->execute()
      ->fetchAll();
  }

  if (!empty($query)) {
    $return = array();
    foreach ($query as $key => $value) {
      $return[] = $value->uid;
    }

    return array_unique($return);
  }

  return array();
}

/**
 * Helper function to remind users again for rating.
 * @param $users
 *   An array containing user ids to remind to.
 * @param $company_node
 *   The company node to be updated.
 * @param $vendor
 *   If vendor is available, then it means request is generated from vendor
 *   Manager, Company profile page otherwise.
 */
function _remind_m6reach_invitation_again($users = array(), $company_node = NULL, $vendor = NULL) {
  if (empty($users)) {
    return;
  }

  if (empty($company_node)) {
    global $company;
  }
  else {
    $company = $company_node;
  }

  global $user;
  $user_name = _get_user_full_name($user->uid);

  $params = array(
    'subject' => 'Reminder: Request to rate company on ' . variable_get('site_name', 'M6Connet'),
    'body' => $message,
    'sender' => $user->mail,
    'language' => language_default(),
    'module' => 'm6connect_misc',
    'key' => 'commitment_mail___invite_2_m6_notify',
    'build' => TRUE,
  );

  if (empty($vendor)) {
    // If vendor is empty then request is generated from company page.
    // Preparing message content.
    $query_data = array(
      'vendor' => 'default',
    );

    $link = url('node/' . $company->nid, array('query' => $query_data, 'absolute' => TRUE,));
    $click_link = t('<a href="@link">Click here</a>', array('@link' => $link,));
    $mailto = t('<a href="@mail_url">@mail</a>', array('@mail_url' => 'mailto:' . variable_get('site_mail', 'support@m6connect.com'), '@mail' => variable_get('site_mail', 'info@m6connect.com')));

    // Body of the mail to be sent.
    $message = 'Hello,<br/>';
    $message .= $user_name . ' has requested you to provide feedback for his company (' . ucwords($company->title) . ').<br/>';
    $message .= 'To provide feedback, please click on the link below.<br/><br/>';
    $message .= $click_link . '<br/><br/>';
    $message .= '<p>If the link is not clickable then copy paste this URL in the browser.<br/>';
    $message .= '<p>' . $link . '<p><br/><br/>';
    $message .= 'Team,<br/><strong>' . variable_get('site_name', 'M6Connet') . '</strong><br/>(' . $mailto . ')';

    $params['body'] = $message;

    foreach ($users as $uid) {
      $account = user_load($uid);
      drupal_mail($params['module'], $params['key'], $account->mail, $params['language'], $params);

      // Sending notification to the user.
      $m6connect_notification = array (
        'type' => 'company_admin_request',
        'event' => 'feedback-reminder',
        'entity_id' => $company->nid,
        'company_nid' => 0,
        'message' => 'vendor',
        'request_from' => $user->uid,
        'request_to' => $account->uid,
        'status' => 1,
        'timestamp' => REQUEST_TIME,
      );
      entity_save('m6connect_notification', (object)$m6connect_notification);
    }
  }
  else {
    // If vendor is available then request is generated from vendor manager.
    $query_data = array(
      'vendor' => $vendor->nid,
    );

    $link = url('node/' . $company->nid, array('query' => $query_data, 'absolute' => TRUE,));
    $click_link = t('<a href="@link">Click here</a>', array('@link' => $link,));
    $mailto = t('<a href="@mail_url">@mail</a>', array('@mail_url' => 'mailto:' . variable_get('site_mail', 'support@m6connect.com'), '@mail' => variable_get('site_mail', 'support@m6connect.com')));

    // Body of the mail to be sent.
    $message = 'Hello,<br/>';
    $message .= $user_name . ' has requested you to provide feedback for his company (' . ucwords($company->title) . ').<br/>';
    $message .= 'To provide feedback, please click on the link below.<br/><br/>';
    $message .= $click_link . '<br/><br/>';
    $message .= '<p>If the link is not clickable then copy paste this URL in the browser.<br/>';
    $message .= '<p>' . $link . '<p><br/><br/>';
    $message .= 'Team,<br/><strong>' . variable_get('site_name', 'M6Connet') . '</strong><br/>(' . $mailto . ')';

    $params['body'] = $message;

    foreach ($users as $uid) {
      $account = user_load($uid);
      drupal_mail($params['module'], $params['key'], $account->mail, $params['language'], $params);

      // Sending notification to the user.
      $m6connect_notification = array (
        'type' => 'vendor_manager_request',
        'event' => 'feedback-reminder',
        'entity_id' => $company->nid,
        'company_nid' => $vendor->nid,
        'message' => 'vendor',
        'request_from' => $user->uid,
        'request_to' => $account->uid,
        'status' => 1,
        'timestamp' => REQUEST_TIME,
      );
      entity_save('m6connect_notification', (object)$m6connect_notification);
    }
  }
}

/**
 * Helper function to return unique array (multidimensional) based on a key.
 * Please note - If no key is provided then returns blank array(). So please
 * make sure to provide key for results.
 *
 * Does not maintain index.
 * Uniques only two dimensional array for now.
 */
function super_unique($array = NULL, $key = NULL) {
  $temp_array = array();
  // If either array or key not given, then return blank array.
  if (empty($array) || empty($key)) {
    return $temp_array;
  }

  foreach ($array as &$v) {
    if (!isset($temp_array[$v[$key]])) {
      $temp_array[$v[$key]] = &$v;
    }
  }

  $array = array_values($temp_array);

  return $array;
}

/**
 * Helper function to send unapproved ratings and notes notification and mail
 * to company admins.
 * @param $type (required)
 *   note|ratings
 * @param $cnid (required)
 *   company nid
 * @param $item_id
 *   note_id|rating_id
 */
function _send_unapproved_notification_mail($type = NULL, $cnid = NULL, $item_id = NULL) {
  if (empty($type) || empty($cnid) || empty($item_id)) {
    return;
  }

  global $user;
  $user_name = _get_user_full_name($user->uid);

  // Mail params.
  $params = array(
    'subject' => t('Review the ratings - M6Connect'),
    'body' => $message,
    'sender' => $user->mail,
    'language' => language_default(),
    'module' => 'm6connect_misc',
    'key' => 'commitment_mail___invite_2_m6_notify',
    'build' => TRUE,
  );

  // Trying to get company admins for the current company.
  $company_admins = _get_company_users_by_og_roles_with_status($cnid, 'company admin', 1);
  if (!empty($company_admins)) {
    // If there are some company admins to send the notification and email
    if ($type == 'note') {
      $link = url('node/' . $cnid, array('absolute' => TRUE,));
      $click_link = t('<a href="@link">Click here</a>', array('@link' => $link,));
      $mailto = t('<a href="@mail_url">@mail</a>', array('@mail_url' => 'mailto:' . variable_get('site_mail', 'support@m6connect.com'), '@mail' => variable_get('site_mail', 'info@m6connect.com')));

      // Body of the mail to be sent.
      $message = 'Hello,<br/>';
      $message .= $user_name . ' has provided notes on your company (' . ucwords($company->title) . ').<br/>';
      $message .= 'As ' . $user_name . ' was not invited to rate/provide notes, notes are initially not approved and are not visible publicly untill you approve. To approve notes, please click on the link below.<br/><br/>';
      $message .= $click_link . '<br/><br/>';
      $message .= '<p>If the link is not clickable then copy paste this URL in the browser.<br/>';
      $message .= '<p>' . $link . '<p><br/><br/>';
      $message .= 'Team,<br/><strong>' . variable_get('site_name', 'M6Connect') . '</strong><br/>(' . $mailto . ')';

      $m6connect_notification = array (
        'type' => 'company_rating_request',
        'event' => 'note',
        'entity_id' => $cnid,
        'company_nid' => 0,
        'message' => t('Request from user.'),
        'request_from' => $user->uid,
        'request_to' => 0,
        'status' => 1,
        'timestamp' => REQUEST_TIME,
      );

      $params['subject'] = t('Review Notes Submitted - M6Connect');

      foreach ($company_admins as $company_admin) {
        $account = user_load($company_admin);
        $m6connect_notification['request_to'] = $company_admin;
        // Sending notification to the admin.
        entity_save('m6connect_notification', (object)$m6connect_notification);

        // Trying to send a mail also.
        // drupal_mail($params['module'], $params['key'], $account->mail, $params['language'], $params);
      }
    }
    if ($type == 'ratings') {
      $link = url('node/' . $cnid, array('absolute' => TRUE,));
      $click_link = t('<a href="@link">Click here</a>', array('@link' => $link,));
      $mailto = t('<a href="@mail_url">@mail</a>', array('@mail_url' => 'mailto:' . variable_get('site_mail', 'support@m6connect.com'), '@mail' => variable_get('site_mail', 'info@m6connect.com')));

      // Body of the mail to be sent.
      $message = 'Hello,<br/>';
      $message .= $user_name . ' has provided ratings for your company (' . ucwords($company->title) . ').<br/>';
      $message .= 'As ' . $user_name . ' was not invited to rate/provide notes, ratings are initially not approved and are not visible publicly untill you approve. To approve ratings, please click on the link below.<br/><br/>';
      $message .= $click_link . '<br/><br/>';
      $message .= '<p>If the link is not clickable then copy paste this URL in the browser.<br/>';
      $message .= '<p>' . $link . '<p><br/><br/>';
      $message .= 'Team,<br/><strong>' . variable_get('site_name', 'M6Connect') . '</strong><br/>(' . $mailto . ')';

      $m6connect_notification = array (
        'type' => 'company_rating_request',
        'event' => 'ratings',
        'entity_id' => $cnid,
        'company_nid' => 0,
        'message' => t('Request from user.'),
        'request_from' => $user->uid,
        'request_to' => 0,
        'status' => 1,
        'timestamp' => REQUEST_TIME,
      );

      $params['subject'] = t('Review Ratings Submitted - M6Connect');

      foreach ($company_admins as $company_admin) {
        $account = user_load($company_admin);
        $m6connect_notification['request_to'] = $company_admin;
        // Sending notification to the admin.
        entity_save('m6connect_notification', (object)$m6connect_notification);

        // Trying to send a mail also.
        // drupal_mail($params['module'], $params['key'], $account->mail, $params['language'], $params);
      }
    }
  }
}

/**
 * Helper function to send notifications for approved ratings and notes to
 * company admin|vendor manager.
 * @param $type (required)
 *   note|ratings
 * @param $cnid (required)
 *   company nid
 * @param $item_id
 *   note_id|rating_id
 */
function _send_ratings_notes_notification($type = NULL, $cnid = NULL, $vnid = 0, $id = NULL) {
  if (empty($type) || empty($cnid) || empty($id)) {
    return;
  }

  global $user;

  // Getting company admins and vendor managers of current company.
  $company_admins = _get_company_users_by_og_roles_with_status($cnid, 'company admin', 1);
  $vendor_managers = _get_company_users_by_og_roles_with_status($cnid, 'Vendor Manager', 1);

  // If a user is both company admin and vendor manager, then sending same
  // notification twice does not make sense. So filtering out vendor managers.
  $vendor_managers = array_diff($vendor_managers, $company_admins);

  // Preparing notification array.
  $m6connect_notification = array (
    'type' => '',
    'event' => $type,
    'entity_id' => $cnid,
    'company_nid' => $vnid,
    'message' => t('Ratings by user.'),
    'request_from' => $user->uid,
    'request_to' => 0,
    'status' => 1,
    'timestamp' => REQUEST_TIME,
  );

  if (empty($vnid)) {
    // This means the ratings were made from company page, and either user was
    // invited or uninvited.
    // When ratings are made from company page, then we do not send notification
    // to vendor managers.
    $m6connect_notification['type'] = 'company_' . $type;

    foreach ($company_admins as $company_admin) {
      $m6connect_notification['request_to'] = $company_admin;
      // Sending notification to the admin.
      entity_save('m6connect_notification', (object)$m6connect_notification);
    }
  }
  if (is_numeric($vnid) && $vnid > 0) {
    // If vendor nid is available, then the rating was done either from vendor
    // manager page or on company page (but vnid was also available)
    // In this case we need to send the notification to both company admins and
    // vendor managers.
    $m6connect_notification['type'] = 'vendor_' . $type;

    foreach ($company_admins as $company_admin) {
      $m6connect_notification['request_to'] = $company_admin;
      // Sending notification to the company admin.
      entity_save('m6connect_notification', (object)$m6connect_notification);
    }
    foreach ($vendor_managers as $vendor_manager) {
      $m6connect_notification['request_to'] = $vendor_manager;
      // Sending notification to the vendor manager.
      entity_save('m6connect_notification', (object)$m6connect_notification);
    }
  }
}

/**
 * Helper function to get notes and ratings for the given company/node.
 */
function _get_pending_ratings_notes($node = NULL) {
  if (empty($node)) {
    return array('#markup' => t('No pending requests'));
  }

  $elements = array();
  foreach (array(t('Ratings'), t('Notes')) as $value) {
    $table_function = $value == 'Notes' ? '_get_pending_notes' : '_get_pending_ratings';
    $collapsible_class = $value == 'Notes' ? 'collapsed' : '';
    // Main fieldset.
    $elements[$value] = array(
      '#type' => 'fieldset',
      '#title' => $value,
      '#collapsible' => TRUE,
      '#collapsed' => $value == 'Notes' ? TRUE : FALSE,
      '#attributes' => array('class' => array('collapsible', $collapsible_class, 'bid-package-fieldset', 'outer-fieldset-custom')),
      '#attached' => array('js' => array('misc/form.js', 'misc/collapse.js')),
      '#prefix' => '<div class="clearfix margin-bottom-10">',
      '#suffix' => '</div>',
    );
    // Waiting Fieldset.
    $elements[$value][$value . '-waiting'] = array(
      '#type' => 'fieldset',
      '#title' => t('To be Reviewed'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#attributes' => array('class' => array('collapsible', 'bid-package-fieldset', 'inner-fieldset-custom',)),
      '#attached' => array('js' => array('misc/form.js', 'misc/collapse.js')),
      '#prefix' => '<div class="clearfix margin-bottom-10">',
      '#suffix' => '</div>',
    );
    // Waiting Listing.
    $elements[$value][$value . '-waiting'][$value . 'waiting-listing'] = array(
      '#type' => 'markup',
      '#markup' => $table_function($node, 0),
      '#prefix' => '<div id="waiting-listing-table-' . strtolower($value) . '">',
      '#suffix' => '</div>',
    );
    // Approved fieldset
    $elements[$value][$value . '-approved'] = array(
      '#type' => 'fieldset',
      '#title' => t('Approved'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#attributes' => array('class' => array('collapsible', 'collapsed', 'bid-package-fieldset', 'inner-fieldset-custom',)),
      '#attached' => array('js' => array('misc/form.js', 'misc/collapse.js')),
      '#prefix' => '<div class="clearfix margin-bottom-10">',
      '#suffix' => '</div>',
    );
    //Approved Listing
    $elements[$value][$value . '-approved'][$value . 'approved-listing'] = array(
      '#type' => 'markup',
      '#markup' => $table_function($node, 1),
      '#prefix' => '<div id="approved-listing-table-' . strtolower($value) . '">',
      '#suffix' => '</div>',
    );
    // Denied Fieldset.
    $elements[$value][$value . '-denied'] = array(
      '#type' => 'fieldset',
      '#title' => t('Denied'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#attributes' => array('class' => array('collapsible', 'collapsed', 'bid-package-fieldset', 'inner-fieldset-custom',)),
      '#attached' => array('js' => array('misc/form.js', 'misc/collapse.js')),
      '#prefix' => '<div class="clearfix margin-bottom-10">',
      '#suffix' => '</div>',
    );
    // Denied Listing.
    $elements[$value][$value . '-denied'][$value . 'denied-listing'] = array(
      '#type' => 'markup',
      '#markup' => $table_function($node, 2),
      '#prefix' => '<div id="denied-listing-table-' . strtolower($value) . '">',
      '#suffix' => '</div>',
    );
  }

  return $elements;
}

/**
 * Helper function to get notes pending for review.
 */
function _get_pending_notes($node, $approved = 0) {
  $header = array(
    array('data' => t('Note#'), 'class' =>array('text-center')),
    array('data' => t('Date'), 'class' => array('text-center')),
    array('data' => t('User'), 'class' => array('text-center')),
    array('data' => t('Note'), 'class' => array('text-center')),
    array('data' => t('Actions'), 'class' => array('text-center')),
  );

  $rows = array();

  if (!empty($node->nid)) {
    $query = db_select('m6reach_notes', 'n');
    $query->fields('n');
    $query->condition('cnid', $node->nid);
    $query->condition('approved', $approved);
    $query->orderBy('created', 'DESC');
    $results = $query->execute()->fetchAll();
    if (!empty($results)) {
      // If there is some data to be processed.
      foreach ($results as $result) {
        $account = user_load($result->uid);
        $user_name = _get_user_full_name($account->uid, $account);
        $note_number = $result->note_number;
        $date = date('m/d/Y', $result->created);
        $note = $result->note;
        $approve_link = '';
        $deny_link = '';
        if ($approved == 1 || $approved == 0) {
          $deny_link = l(t('Deny'), 'delete-m6reach/notes/' . $node->nid . '/' . $result->id . '/nojs/', array('attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style','ctools-use-modal',))));
        }
        if ($approved == 0 || $approved == 2) {
          $approve_link = l(t('Approve'), 'approve-m6reach/notes/' . $node->nid . '/' . $result->id . '/nojs', array('attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style','ctools-use-modal'))));
        }
        $actions = '
        <div class="project-action">
          <div class="btn-group"><div class="dropdown">
            <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
            <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
              <li>' . $approve_link . '</li>
              <li>' . $deny_link . '</li>
            </ul>
            </div>
          </div>
        </div>';
        $rows[] = array(
          array('data' => $note_number,'class' => array('text-left')),
          array('data' => $date,'class' => array('text-left')),
          array('data' => $user_name,'class' => array('text-left')),
          array('data' => $note,'class' => array('text-left')),
          array('data' => $actions,'class' => array('text-right')),
        );
      }
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No notes yet in this category.'),'attributes'=>array('class'=>array('table','m6connect-custom-program-table','m6connect-custom-myproject-slide-table','table-hover','table-bordered','text-center', 'm6init-datatable'))));
}

/**
 * Helper function to get ratings pending for review.
 */
function _get_pending_ratings($node, $approved = 0) {
  $header = array(
    array('data' => t('Date'), 'class' => array('text-center')),
    array('data' => t('User'), 'class' => array('text-center')),
    array('data' => t('Ratings'), 'class' => array('text-center')),
    array('data' => t('Actions'), 'class' => array('text-center')),
  );

  $rows = array();

  if (!empty($node->nid)) {
    $query = db_select('m6reach_ratings', 'r');
    $query->fields('r');
    $query->condition('cnid', $node->nid);
    $query->condition('approved', $approved);
    $query->orderBy('created', 'DESC');
    $results = $query->execute()->fetchAll();
    if (!empty($results)) {
      // If there is some data to be processed.
      foreach ($results as $result) {
        $account = user_load($result->uid);
        $user_name = _get_user_full_name($account->uid, $account);
        $date = date('m/d/Y', $result->created);
        $ratings = _get_vendor_ratings($node, 'm6reach', FALSE, TRUE, $result->uid);
        $approve_link = '';
        $deny_link = '';
        if ($approved == 1 || $approved == 0) {
          $deny_link = l(t('Deny'), 'delete-m6reach/ratings/' . $node->nid . '/' .$result->id . '/nojs/', array('attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style','ctools-use-modal'))));
        }
        if ($approved == 0 || $approved == 2) {
          $approve_link = l(t('Approve'), 'approve-m6reach/ratings/' . $node->nid . '/' .$result->id . '/nojs', array('attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style','ctools-use-modal',))));
        }
        $actions = '
        <div class="project-action">
          <div class="btn-group"><div class="dropdown">
            <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
            <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
              <li>' . $approve_link . '</li>
              <li>' . $deny_link . '</li>
            </ul>
            </div>
          </div>
        </div>';
        $rows[] = array(
          array('data' => $date,'class' => array('text-left')),
          array('data' => $user_name,'class' => array('text-left')),
          array('data' => $ratings,'class' => array('text-left')),
          array('data' => $actions,'class' => array('text-right')),
        );
      }
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No ratings yet in this category.'),'attributes'=>array('class'=>array('table','m6connect-custom-program-table','m6connect-custom-myproject-slide-table','table-hover','table-bordered','text-center', 'm6init-datatable'))));
}

/**
 * Implements hook_theme().
 */
function m6connect_vendor_theme() {
  $path = drupal_get_path('modules', 'm6connect_vendor');
  return array(
    'company_container_theme' => array(
      'render element' => 'form',
    ),
    'vendor_spending_invoices_theme' => array(
      'render element' => 'form',
    ),
    'vendor_spending_export_pdf' => array(
      'template' => $path . 'includes/vendor-spending-export-pdf',
      'variables' => array(
        'nodes' => NULL,
      ),
    ),
  );
}

/**
 * Helper function to clear notifications of ratings and notes.
 * @param $type
 *   The type of request. ratings/note
 * @param $data
 *   An associative array consisting these three parameters.
 *   uid - User ID (required)
 *   cnid - Company NID (required)
 *   vnid - Vendor NID (either 0 or NID)
 */
function _clear_ratings_notes_approve_notifications($type = NULL, $data = array()) {
  if (empty($type) || empty($data)) {
    return;
  }

  if ($type == 'notes') {
    $type = 'note';
  }

  if (db_table_exists('m6connect_notification')) {
    $query = db_delete('m6connect_notification');
    $query->condition('request_from', $data->uid);
    $query->condition('entity_id', $data->cnid);
    $query->condition('company_nid', $data->vnid);
    $query->condition('type', 'company_rating_request');
    $query->condition('event', $type);
    $query->execute();
  }
}

/**
 * Helper function to get M6Reach Ratings Types for settings page.
 * @param $type
 *   To know which type of ratings are requested, Ratings|Attributes.
 *
 * @return mixed array
 *   An array with keys as ratings and value as presentable names.
 */
function _get_m6reach_ratings_types($type = 'ratings') {
  global $company, $user;
  $return = array();

  // First we try to fetch the ratings from table. If ratings are not found in
  // table, then it means that Vendor Manager of the current company has opened
  // up the settings page for the very first time, so in this case, we make an
  // entry in the table.
  $query = db_select('m6reach_ratings_attributes_type', 'ra');
  $query->fields('ra', array($type));
  $query->condition('nid', $company->nid);
  $result = $query->execute()->fetchField();
  if (!empty($result)) {
    $return = unserialize($result);
  }
  else {
    // If there are no options saved for the current company, then saving the
    // global options for this particular company.
    if ($type == 'ratings') {
      $return = variable_get('vendor_rating_types', array('Safety', 'Responsiveness', 'Quality', 'Schedule'));

      // Inserting for the current company.
      db_insert('m6reach_ratings_attributes_type')
        ->fields(array(
          'uid' => $user->uid,
          'nid' => $company->nid,
          'ratings' => serialize($return),
          'updated' => REQUEST_TIME,
        ))
        ->execute();
    }
  }

  return $return;
}

/**
 * Helper fucntion to save new rating type for M6Reach.
 *
 * @param $type
 *   Type of ratings to be stored.
 *
 * @param $ratings
 *   New ratings to be stored.
 *
 * @return Array of ratings, including new rating saved.
 */
function _save_new_rating_attribute($type, $rating) {
  global $company, $user;

  // Getting old companies first.
  $ratings_old = _get_m6reach_ratings_types($type);

  if (!empty($rating)) {
    // Combining old and new values.
    $new_ratings = $ratings_old + $rating;
  }

  // Updating the new values in table again.
  db_update('m6reach_ratings_attributes_type')
    ->fields(array(
      'uid' => $user->uid,
      $type => serialize($new_ratings),
      'updated' => REQUEST_TIME,
    ))
    ->condition('nid', $company->nid)
    ->execute();

  return $new_ratings;
}

/**
 * Helper function to delete a rating for M6Reach.
 *
 * @param $type
 *   The type of rating to be deleted.
 *
 * @param $rating
 *   Name of rating to be deleted.
 *
 * @return TRUE on Success, FALSE otherwise.
 */
function _delete_rating_attribute($type = NULL, $rating = NULL) {
  if (!empty($type) && !empty($rating)) {
    global $company, $user;
    // If we have enough data to proceed.
    $ratings = _get_m6reach_ratings_types($type);
    if (!empty($ratings)) {
      // If we get ratings, then finding the requested rating and deleting it.
      if (!empty($ratings[$rating])) {
        unset($ratings[$rating]);
        db_update('m6reach_ratings_attributes_type')
          ->fields(array(
            'uid' => $user->uid,
            $type => serialize($ratings),
            'updated' => REQUEST_TIME,
          ))
          ->condition('nid', $company->nid)
          ->execute();
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Helper function to get vendor rating options.
 * @param $nid
 *   The company node to get ratings for.
 * @param $type
 *   Type of ratings.
 * @return array with keys as ratings machine names and values as display names.
 */
function _get_vendor_ratings_options($nid = NULL, $type = 'ratings') {
  if (empty($nid)) {
    return array();
  }

  global $user;
  $ratings = array();

  $query = db_select('m6reach_ratings_attributes_type', 'r')
    ->fields('r', array($type))
    ->condition('nid', $nid)
    ->execute()
    ->fetchField();

  if (!empty($query)) {
    $ratings = unserialize($query);
  }

  if (empty($query) && $type == 'ratings') {
    $ratings = variable_get('vendor_rating_types', array());

    // If ratings are not available in table, then saving these in table.
    db_insert('m6reach_ratings_attributes_type')
      ->fields(array(
        'uid' => $user->uid,
        'nid' => $nid,
        'ratings' => serialize($ratings),
        'updated' => REQUEST_TIME,
      ))
      ->execute();
  }

  return $ratings;
}

/**
 * Helper function to know if a user has to be shown attribute options.
 */
function _show_attributes_options() {
  global $company, $user;
  $node = menu_get_object();
  if (!$node) {
    return FALSE;
  }
  if ($node->type != 'organization') {
    return FALSE;
  }

  // Checking whether the company of current user has any attributes added.
  $query = db_select('m6reach_ratings_attributes_type', 'r')
    ->fields('r', array('attributes'))
    ->condition('nid', $company->nid)
    ->execute()
    ->fetchField();
  return empty($query) ? FALSE : ($node->nid != $company->nid ? TRUE : FALSE);
}

/**
 * Helper function to get attributes of a company for the given criteria.
 * @param $node
 *   The company node.
 * @param $uids
 *   Integer = Requested for a single user
 *   Array = Requested for a list of users.
 *   FALSE = For the entire company irrespective of users.
 * @return array with keys as attribute name and values as ratings.
 */
function _get_attribute_ratings($uids = FALSE) {
  if (empty($uids)) {
    return array();
  }

  $query = db_select('m6reach_ratings', 'r');
  $query->fields('r', array('attributes'));
  if (!empty($uid)) {
    $query->condition('uid', $uid);
  }
  $query = $query->execute()->fetchAll();

  if (!empty($query)) {
    $attributes_all = array();
    foreach ($query as $key => $value) {
      if (!empty($value->attributes)) {
        $attributes = unserialize($value->attributes);
        foreach ($attributes as $key => $value) {
          $attributes_all[$key][] = $value;
        }
      }
    }
    // If we have some data to process.
    if (!empty($attributes_all)) {
      $attributes_data = array();
      foreach ($attributes_all as $key => $value) {
        if (!empty($value)) {
          // Getting average for each rating.
          $attributes_data[$key] = number_format(array_sum($value) / count($value), 1, '.', '');
        }
      }

      if (!empty($attributes_data)) {
        return $attributes_data;
      }
    }
  }

  return array();
}

/**
 * Helper function to get Rating data for on the fly calculations in JS.
 * @param $node
 *   Company node.
 * @param $type
 *   Whether to get ratings or attributes.
 * @param $vnode
 *   Vendor node, may be empty.
 */
function _get_ratings_attributes_otf($node, $type = 'ratings', $vnode = FALSE) {
  if (empty($node)) {
    return array();
  }

  global $user;
  $f_type = $type == 'ratings' ? 'data' : $type;

  $query = db_select('m6reach_ratings', 'r');
  $query->fields('r', array($f_type));
  $query->condition('cnid', $node->nid);
  if (!empty($vnode) && is_object($vnode)) {
    // If vendor node is available, then request is generated from vendor page.
    $query->condition('vnid', $vnode->nid);
  }
  $query->condition('uid', $user->uid, '<>');
  $result = $query->execute()->fetchAll();

  if (!empty($result)) {
    $ratings_all = array();
    foreach ($result as $key => $value) {
      if (!empty($value->{$f_type})) {
        $ratings = unserialize($value->{$f_type});
        foreach ($ratings as $key => $value) {
          $ratings_all[$key][] = $value;
        }
      }
    }
    if (!empty($ratings_all)) {
      return $ratings_all;
    }
  }

  return array();
}

/**
 * Helper function to know whether a company is eligible to become vendor for
 * the given company.
 * @param $node
 *   Either NULL, or numeric NID, or Node Object.
 *   The company for which it is to be checked.
 * @return boolean.
 *   TRUE if company is eligible, FALSE otherwise.
 */
function _is_eligible_to_become_vendor($node = NULL) {
  if (empty($node)) {
    // If no node is received, then trying to get one.
    if ($node = menu_get_object()) {
      if ($node->type != 'organization') {
        return FALSE;
      }
    }
  }

  // If still no node is found, return FALSE.
  if (empty($node)) {
    return FALSE;
  }

  // If nid is received instead of node.
  if (is_numeric($node)) {
    $node = node_load($node);
    if (empty($node) || !is_object($node)) {
      // If node is not found in system, then return FALSE.
      return FALSE;
    }
  }

  if (is_object($node)) {
    // If we have a node object.
    if ($node->type != 'organization') {
      // If node type is not organization, return FALSE.
      return FALSE;
    }

    // If we have the right node, processing further.
    global $company;
    if ($node->nid == $company->nid) {
      return FALSE;
    }

    // Getting list of company admins and vendor managers, who could invite the
    // current company as vendor in past.
    $company_admins = _get_company_users_by_og_roles_with_status($node->nid, 'company admin', 1);
    $vendor_managers = _get_company_users_by_og_roles_with_status($node->nid, 'Vendor Manager', 1);
    $eligible_users = array_merge($company_admins, $vendor_managers);
    $eligible_users = array_unique($eligible_users);

    // We just need to check if the current company is not already a vendor for
    // the requested company.
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));

    $query->leftjoin('og_membership', 'og', 'og.etid=n.nid AND og.entity_type=:entity_type', array(':entity_type' => 'node'));
    $query->condition('og.gid', $company->nid);

    if (!empty($eligible_users)) {
      $query->condition('n.uid', $eligible_users);
    }

    $query->condition('n.type', 'vendor');
    $result = $query->execute()->rowCount();
    return $result == 0 ? TRUE : FALSE;
  }

  return FALSE;
}

/**
 * Helper function to get canned msg for a company.
 */
function _get_m6reach_canned_msg() {
  global $company;
  $query = db_select('m6reach_ratings_attributes_type', 'c')
    ->fields('c', array('canned_msg'))
    ->condition('nid', $company->nid)
    ->execute()
    ->fetchField();

  if (empty($query)) {
    return array();
  }

  return unserialize($query);
}

/**
 * Helper function to delete canned message.
 */
function _delete_canned_msg($msg = '') {
  global $company, $user;
  $old_messages = _get_m6reach_canned_msg();

  if (!empty($msg)) {
    $delete_msg = array($msg);
    $new_messages = array_diff($old_messages, $delete_msg);
    if (!empty($new_messages)) {
      $fields = array(
        'canned_msg' => serialize($new_messages),
        'updated' => REQUEST_TIME,
      );
    }
    else {
      $fields = array(
        'canned_msg' => NULL,
        'updated' => REQUEST_TIME,
      );
    }

    // Updating the values.
    db_update('m6reach_ratings_attributes_type')
      ->fields($fields)
      ->condition('nid', $company->nid)
      ->execute();

    return TRUE;
  }

  return FALSE;
}

/**
 * Helper function to get canned messges markup, shown in messaging system.
 */
function _get_canned_msg_markup() {
  global $company;

  $query = db_select('m6reach_ratings_attributes_type', 'c')
    ->fields('c', array('canned_msg'))
    ->condition('nid', $company->nid)
    ->execute()
    ->fetchField();

  if (!empty($query)) {
    $variables = array();
    $return = '<div class="canned-msg-outer" style="display:none;">';
    $data = unserialize($query);
    $return .= '<i class="fa fa-times-circle close-canned-msg-box"></i>';
    $items = array();

    foreach ($data as $msg) {
      $items[] = '<span class="canned-msg-item" title="Click on this message to send it.">' . $msg . '</span>';
    }
    $variables['items'] = $items;
    $variables['type'] = 'ol';
    $return .= theme_item_list($variables);
    $return .= '</div>';
    return $return;
  }

  return '<div class="canned-msg-outer"><span class="no-canned-msg">' . t('No canned messages yet!') . '</span></div>';
}

/**
 * Helper function to get mapping group of a chat according to users.
 * If recipients are more then 1, then group, user otherwise.
 */
function _get_mapping_group_vendor_messaging($receivers = array()) {
  if (empty($receivers)) {
    return t('user');
  }

  if (!is_array($receivers) && is_numeric($receivers)) {
    // In case we receive a single uid.
    return t('user');
  }

  if (count($receivers) == 1) {
    return t('user');
  }

  return t('group');
}



/**
 * Helper function to prepare username for socket.
 */
function _prepare_username_for_socket($uid = NULL) {
  if (empty($uid)) {
    return '';
  }
  $user_data = _get_user_mail_realname_by_uid($uid);
  if (empty($user_data['realname'])) {
    $user_data['realname'] = $user_data['name'];
  }
  $realName = str_replace(" ", "@", ucwords($user_data['realname']));
  $userName = $realName.'@'.$uid;

  return $userName;
}

/**
 * Helper function to get area of work options for a company.
 */
function _get_area_of_work_options($node = NULL) {
  if (empty($node)) {
    return array();
  }

  $return = array();
  if (!empty($node->field_regions[LANGUAGE_NONE])) {
    $terms = array();
    foreach ($node->field_regions[LANGUAGE_NONE] as $key => $value) {
      $terms[] = $value['tid'];
    }
    if (!empty($terms)) {
      $result = taxonomy_term_load_multiple($terms);
      if (!empty($result)) {
        foreach ($result as $key => $value) {
          $return[$key] = $value->name;
        }
      }
    }
  }
  return $return;
}

function _get_department_options($node) {
  return array();
}

/**
 * Helper function to generate dashboard table.
 */
function _get_vendor_dashboard_content() {
  global $user, $company;
  $header = array(
    array('data' => 'Image','class'=>array('text-center')),
    array('data' => 'Company Details','class'=>array('text-center')),
    array('data' => 'Vendor Type','class'=>array('text-center')),
    array('data' => 'Capital','class'=>array('text-center')),
    array('data' => 'Expense','class'=>array('text-center'), 'width' => '130px;'),
    array('data' => 'Total','class'=>array('text-center')),
  );
  $rows = array();

  // We only get diversity vendors.
  $company_admins = _get_company_users_by_og_roles_with_status($company->nid, 'company admin', 1);
  $vendor_managers = _get_company_users_by_og_roles_with_status($company->nid, 'Vendor Manager', 1);
  $eligible_users = array_unique(array_merge($company_admins, $vendor_managers));

  $query = db_select('node', 'n');
  $query->join('field_data_field_vendor_type', 'm6r', 'm6r.entity_id=n.nid');
  $query->fields('n', array('nid'));

  if (!empty($eligible_users)) {
    $db_or = db_or()->condition('n.uid', $user->uid)->condition('n.uid', $eligible_users);
    $query->condition($db_or);
  }
  else {
    $query->condition('n.uid', $user->uid);
  }
  $query->condition('n.status', 1);
  $query->condition('n.type', 'vendor');
  $query->condition('m6r.field_vendor_type_value', 'm6reach');
  $query->orderBy('created', 'DESC');

  $query2 = db_select('node', 'n');
  $query2->fields('n', array('nid'));
  $query2->join('og_membership', 'om', 'om.etid=n.nid');
  $query2->join($query, 'oq', 'oq.nid=n.nid');
  $query2->join('field_data_field_diversity_credentials', 'fd', 'fd.entity_id=om.gid');
  $query2->groupBy('fd.entity_id');
  $execute = $query2->execute();

  if ($execute->rowCount() > 0) {
    while ($result = $execute->fetchField()) {
      $vendor_node = node_load($result);
      $og_node = !empty($vendor_node->og_group_ref['und'][0]['target_id']) ? node_load($vendor_node->og_group_ref['und'][0]['target_id']) : NULL;
      if (empty($og_node)) {
        // If in case, a vendor node which does not have a og node reference is
        // in the loop, then skipping it.
        continue;
      }

      // Getting image, name and address.
      $image = _get_vendor_company_details($og_node, FALSE, TRUE);
      $name = ucwords($og_node->title);
      $address = _get_vendor_company_details($og_node, TRUE, FALSE);

      $second_row = $name . $address;

      // Getting regions.
      $region = '';
      $regions = _get_area_of_work_options($og_node);
      if (!empty($regions)) {
        $region = implode(',', $regions);
      }

      // Getting diversities.
      $diverArr = array('No diversity defined!');
      if (!empty($og_node->field_diversity_credentials['und'])) {
        $diverArr = array();
        foreach ($og_node->field_diversity_credentials['und'] as $diverKey => $diverVal) {
          $diverArr[] = node_load($diverVal['target_id'])->title;
        }
        $diverArr = implode(', ', $diverArr);
      }

      // Getting projects associated.
      // Getting capital.
      $capital = '$XXXXXX';

      // Getting expense.
      $expense = '$XXXXXX';

      // Getting total.
      $total = '$XXXXXX';


      // Preparing rows.
      $rows[] = array(
        array('data' => $image, 'class'=>array('text-center')),
        array('data' => $second_row, 'class'=>array('text-center')),
        array('data' => $region, 'class'=>array('text-center')),
        array('data' => $capital, 'class'=>array('text-center')),
        array('data' => $expense, 'class'=>array('text-center')),
        array('data' => $total, 'class'=>array('text-center')),
      );
    }
  }

  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No Vendor(s) Yet'), 'sticky' => FALSE, 'attributes' => array('class' => array('table', 'm6connect-custom-table', 'm6connect-custom-vendor-manager-dashboard-table', 'table-hover', 'table-bordered', 'text-center', 'm6init-datatable'))));
}



/**
 * Batch helper function to import vendors.
 */
function _import_vendors($line, &$context) {
  global $user;
  $context['results']['rows_imported']++;
  $line = array_map('trim', $line);
  if (!empty($line[5]) && valid_email_address(strtolower($line[5]))) {
    // If we have a email id, getting user.
    $account = user_load_by_mail(strtolower($line[5]));
    if (!$account) {
      // If no account is found by the mail, creating a new.
      $fields = array(
        'name' => strtolower($line[5]),
        'mail' => strtolower($line[5]),
        'pass' => 'default_pass',
        'status' => 1,
        'init' => strtolower($line[5]),
        'roles' => array(
          DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        ),
      );

      // Save user.
      $account_pre = user_save(NULL, $fields);

      $mail = $account_pre->mail;
      $mail_exploded = explode('@', $mail);
      $mail_part = $mail_exploded[0];
      $new_user_name = $mail_part . '_' . $account_pre->uid;
      $edit = array('name' => $new_user_name);
      $account = user_save($account_pre, $edit);
    }
  }
  else {
    global $user;
    $account = user_load($user->uid);
  }

  if (!empty($line[4])) {
    // Getting nid by title.
    $nid = _get_nid_by_title($line[4]);
    if (empty($nid)) {
      // If we do not have a node, creating new node here.
      $node = new stdClass();
      $node->type = 'organization';
      node_object_prepare($node);
      $node->title = ucwords($line[4]);
      $node->uid = $account->uid;
      $node->status = 1;

      // Adding fields
      // Email
      if (!empty(strtolower($line[5])) && valid_email_address(strtolower($line[5]))) {
        $node->field_company_email[LANGUAGE_NONE][0]['email'] = strtolower($line[5]);
      }

      $node->field_type_of_company[LANGUAGE_NONE][0]['value'] = 'individual';

      // Region
      $node->field_regions[LANGUAGE_NONE][0]['tid'] = 79347; // Nebraska for NOW.

      // Address.
      $node->field_org_address[LANGUAGE_NONE][0]['country'] = 'US';
      $node->field_org_address[LANGUAGE_NONE][0]['administrative_area'] = !empty($line[10]) ? $line[10] : NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['sub_administrative_area'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['locality'] = !empty($line[9]) ? $line[9] : NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['dependent_locality'] = '';
      $node->field_org_address[LANGUAGE_NONE][0]['postal_code'] = !empty($line[11]) ? $line[11] : NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['thoroughfare'] = !empty($line[8]) ? $line[8] : NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['premise'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['sub_premise'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['organisation_name'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['name_line'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['first_name'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['last_name'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['data'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['phone_number'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['phone_number_extension'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['mobile_number'] = NULL;
      $node->field_org_address[LANGUAGE_NONE][0]['fax_number'] = NULL;

      // Trying to save node.
      if (!empty($node->title)) {
        node_save($node);
        $nid = !empty($node->nid) ? $node->nid : NULL;
        if ($nid) {
          og_group('node', $node->nid, array(
            "entity type" => "user",
            "entity" => $account,
            "membership type" => OG_MEMBERSHIP_TYPE_DEFAULT,
          ));
        }
      }
    }

    // If we have a nid now.
    if (empty($nid)) {
      $context['results']['failed_rows'][] = $line;
    }
    else {
      // If we have a nid now. then proceeding further.
      // The vendor author would be the current user and not the user obtained
      // via the CSV data.
      $vendor_author = $user->uid;

      // The node for which we are trying to create vendor might already be
      // created. Checking for it.
      if (empty($node->nid)) {
        // Checking the company node here, and not Vendor Node.
        $node = node_load($nid);
      }
      $vendor_nid = _get_vendors_by_company($node, TRUE);
      if (empty($vendor_nid)) {
        // If we do not have any vendor node yet, then creating one.
        $vendor_counter = variable_get('vendor_counter', 1);
        $makeSr = sprintf('%08d', $vendor_counter);
        $vendor_number = $makeSr . '-' . date('Y');

        // Trying to create a new node of type vendor.
        $vendor_node = new stdClass();
        $vendor_node->type = 'vendor';
        node_object_prepare($vendor_node);
        $vendor_node->title = $vendor_number;
        $vendor_node->uid = $vendor_author;
        $vendor_node->field_m6number[LANGUAGE_NONE][0]['value'] = $vendor_number;
        $vendor_node->field_vendor_status[LANGUAGE_NONE][0]['value'] = 'pending_-_invited';
        $vendor_node->field_vendor_type[LANGUAGE_NONE][0]['value'] = t('m6reach');
        $node->field_requestor_company[LANGUAGE_NONE][0]['target_id'] = $nid;
        $vendor_node->field_pl_name[LANGUAGE_NONE][0]['value'] = !empty($line[2]) ? $line[2] : '';
        $vendor_node->field_po_number[LANGUAGE_NONE][0]['value'] = !empty($line[15]) ? $line[15] : '';
        $vendor_node->field_account_unit_desc[LANGUAGE_NONE][0]['value'] = !empty($line[18]) ? $line[18] : '';
        $vendor_node->field_account_desc[LANGUAGE_NONE][0]['value'] = !empty($line[21]) ? $line[21] : '';
        $vendor_node->field_check_numner[LANGUAGE_NONE][0]['value'] = !empty($line[23]) ? $line[23] : '';
        $vendor_node->field_payment_type[LANGUAGE_NONE][0]['value'] = !empty($line[24]) ? $line[24] : '';
        $vendor_node->field_cheque_date[LANGUAGE_NONE][0]['value'] = !empty($line[26]) ? date('Y-m-d H:i:s', strtotime($line[26])) : '';

        $vendor_node->status = 1;
        // If user is adding a company as vendor.
        $vendor_node->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $nid;

        if (!empty($node->field_regions['und'][0]['tid'])) {
          // Saving the region too.
          $vendor_node->field_regions['und'][0]['tid'] = $node->field_regions['und'][0]['tid'];
        }

        if (!empty($vendor_node->title)) {
          node_save($vendor_node);
          if ($vendor_node->nid) {
            // If vendor node is saved.
            $vendor_counter++;
            variable_set('vendor_counter', $vendor_counter);
          }
          else {
            $context['results']['failed_rows'][] = $line;
          }
        }
        // Not setting any error in else here, as this is just to prevent making
        // of blank node.
      }
      else {
        // If there is already a vendor node, then we just need to update the
        // invoice data in the vendor node, and not make a new node.
        // Logically there shouldn't be more than one vendor node for a company
        // + company admins or vendor managers.
        // Meaning if A is company admin of B, then A can only make one vendor
        // of any company (let's say C) for B.

        // Trying to load vendor node.
        $vendor_node = node_load($vendor_nid[0]);
      }

      if (!empty($vendor_node->nid)) {
        // If we have a vendor node, then moving on. And when we are here, then
        // we just need to update invoice values, as other values are already
        // in the node (if node is already created) or have been just create
        // above (in case, new node is created).

        $amount_type = !empty($context['results']['amount_type']) ? $context['results']['amount_type'] : 0;

        $vendor_node->field_invoice_date[LANGUAGE_NONE][] = array('value' => !empty($line[13]) ? date('Y-m-d H:i:s', strtotime($line[13])) : '');
        $vendor_node->field_invoice_number_cal[LANGUAGE_NONE][] = array('value' => !empty($line[12]) ? $line[12] : '');
        $vendor_node->field_invoice_description[LANGUAGE_NONE][] = array('value' => ''); // Blank for now in case of import.
        $vendor_node->field_invoice_amount[LANGUAGE_NONE][] = array('value' => !empty($line[16]) ? $line[16] : '');
        $vendor_node->field_invoice_amount_type[LANGUAGE_NONE][] = array('value' => $amount_type); // 0 = Expense, 1 = Capital.

        field_attach_presave('node', $vendor_node);
        field_attach_update('node', $vendor_node);
        entity_get_controller('node')->resetCache(array($vendor_node->nid));

      }
      else {
        $context['results']['failed_rows'][] = $line;
      }
    }
  }
  else {
    // If no company title is received, then this is an error.
    $context['results']['failed_rows'][] = $line;
  }

  //-------------------------------------------------------------------------------------------|
  //  Give feedback to the importer about which operation we're preforming
  //-------------------------------------------------------------------------------------------|
  //Show the row count by default
  $context['message'] = t('Importing row !c', array( '!c' => $context['results']['rows_imported'] ));
  
  //Or, Provide some feedback about the row currently being processed
  $context['message'] = t('Importing %title', array('%title' => $line[0]));
}

/**
 * Helper function for batch to remember filename.
 */
function _vendor_import_remember_filename($filename, &$context) {
  $context['results']['uploaded_filename'] = $filename;
}

/**
 * Helper function for batch to remember amount type.
 */
function _vendor_import_remember_amount_type($amount_type, &$context) {
  $context['results']['amount_type'] = $amount_type;
}

/**
 * Finish callback for batch.
 */
function vendor_import_finished($success, $results, $operations) {
  // Trying to deletd nodes, which do not have title while importing.
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('title', '', '=')
    ->condition('type', array('organization', 'vendor'), 'IN')
    ->execute();
  $nids = array();
  while ($result = $query->fetchField()) {
    $nids[] = $result;
  }
  if (!empty($nids)) {
    node_delete_multiple($nids);
  }

  if (!empty($results['failed_rows'])) {
    // If there are any failed rows.
    $dir  = file_directory_path() . '/csvImporter/' ;
    if (file_check_directory($dir, FILE_CREATE_DIRECTORY)) {
      // Trying to create a file, with failed rows, so that user can upload it
      // agian.
      $csv_filename = 'failed_rows-'. basename($results['uploaded_filename']);
      $csv_filepath = $dir .'/'. $csv_filename;
      $targs = array(
        '!csv_url' => l(check_plain($csv_filename), $csv_filepath),
        '%csv_filename' => $csv_filename,
        '%csv_filepath' => $csv_filepath,
      ) ;
      if ($handle = fopen($csv_filepath, 'w+')) {
        foreach ($results['failed_rows'] as $failed_row) {
          fputcsv($handle, $failed_row);
        }
        fclose($handle);
        drupal_set_message(t('Some rows failed to import. You may download a CSV of these rows: !csv_url', $targs), 'warning');
      }
      else {
        drupal_set_message(t('Some rows failed to import, but unable to write error CSV to %csv_filepath', $targs), 'error');
      }
    }
    else {
      // drupal_set_message(t('Some rows failed to import, but unable to create directory for error CSV at %csv_directory', $targs), 'error');
      drupal_set_message(t('Some rows failed to import, but unable to create file for failed rows. Please try again.'), 'error');
    }
  }
  drupal_set_message(t('The CSV import has completed.'));
}

/**
 * Helper function to get options or vendors for exporting based on regions.
 * @param $content.
 *   By this we judge that what content is to be sent. For ex- options, or node.
 * @param $option.
 *   This is handy, when we are fetching nodes, and we want to filter the nodes
 *   by the given option.
 * @param $start.
 *   Unix timestamp of the range starting.
 * @param $end.
 *   Unix timestamp of the range ending.
 */
function _get_region_options_vendor_spending_export($content = 'options', $option = '', $start = NULL, $end = NULL) {
  global $user, $company;

  $company_admins = _get_company_users_by_og_roles_with_status($company->nid, 'company admin', 1);
  $vendor_managers = _get_company_users_by_og_roles_with_status($company->nid, 'Vendor Manager', 1);
  $eligible_users = array_unique(array_merge($company_admins, $vendor_managers));
  
  $query = db_select('node', 'n');
  $query->join('field_data_field_vendor_type', 'm6r', 'm6r.entity_id=n.nid');
  $query->fields('n', array('nid'));

  if (!empty($eligible_users)) {
    $db_or = db_or()->condition('n.uid', $user->uid)->condition('n.uid', $eligible_users);
    $query->condition($db_or);
  }
  else {
    $query->condition('n.uid', $user->uid);
  }

  $query->condition('n.status', 1);
  $query->condition('n.type', 'vendor');
  $query->condition('m6r.field_vendor_type_value', 'm6reach');
  $query->orderBy('created', 'DESC');

  $query2 = db_select('node', 'n');
  $query2->fields('n', array('nid'));
  $query2->join('field_data_field_regions', 'fr', 'fr.entity_id=n.nid');

  if (!empty($option)) {
    // If we have an option to filter why fetching nodes, using the option here.
    $query2->condition('fr.field_regions_tid', $option);
  }

  if (!empty($start) && !empty($end)) {
    $query2->condition('n.created', $start, '>=');
    $query2->condition('n.created', $end, '<=');
  }

  $query2->fields('fr', array('field_regions_tid'));
  $query2->join($query, 'oq', 'oq.nid=n.nid');

  if ($content == 'options') {
    $query2->groupBy('fr.field_regions_tid');
  }
  $execute = $query2->execute();

  $return = array();
  if ($execute->rowCount() > 0) {
    // If we have some data to proceed.
    while ($result = $execute->fetchObject()) {
      if ($content == 'options' && !empty($result->field_regions_tid)) {
        $taxo = taxonomy_term_load($result->field_regions_tid);
        $return[$result->field_regions_tid] = $taxo->name;
      }
      elseif ($content == 'nodes') {
        $return[] = $result->nid;
      }
    }
  }

  return $return;
}

/**
 * Helper function to get capital and expense for a vendor spending.
 * @param $vendor_node
 *   The vendor node for which data is to be fetched.
 * @param $data
 *   The data type to be fetched. Capital|Expense.
 */
function _get_capital_expense_vendor_spending($vendor_node, $data = 'capital') {
  $return = 0;
  $data_fetch = $data == 'capital' ? 1 : 0;

  if (!empty($vendor_node->field_invoice_amount[LANGUAGE_NONE])) {
    $count = count($vendor_node->field_invoice_amount[LANGUAGE_NONE]);

    for ($i = 0; $i < $count; $i++) {
      if ($vendor_node->field_invoice_amount_type[LANGUAGE_NONE][$i]['value'] == $data_fetch) {
        $return += $vendor_node->field_invoice_amount[LANGUAGE_NONE][$i]['value'];
      }
    }
  }

  return $return;
}

/**
 * Helper function to format amount into currency.
 */
function _vendor_format_amount_currency($amount = '') {
  if (empty($amount)) {
    return '$0.00';
  }

  return '$' . number_format($amount, 2);
}

/**
 * Helper function to get vendor spending names.
 * @param $end_user
 *   Variable to judge kind of data to be returned.
 */
function _get_vendor_names_spending($end_user = '') {
  global $user, $company;
  $result = array();
  $company_admins = _get_company_users_by_og_roles_with_status($company->nid, 'company admin', 1);
  $vendor_managers = _get_company_users_by_og_roles_with_status($company->nid, 'Vendor Manager', 1);
  $eligible_users = array_unique(array_merge($company_admins, $vendor_managers));
  
  $query = db_select('node', 'n');
  $query->join('field_data_field_vendor_type', 'm6r', 'm6r.entity_id=n.nid');
  $query->fields('n', array('nid', 'title'));

  if (!empty($eligible_users)) {
    $db_or = db_or()->condition('n.uid', $user->uid)->condition('n.uid', $eligible_users);
    $query->condition($db_or);
  }
  else {
    $query->condition('n.uid', $user->uid);
  }

  $query->condition('n.status', 1);
  $query->condition('n.type', 'vendor');
  $query->condition('m6r.field_vendor_type_value', 'm6reach');
  $query->orderBy('created', 'DESC');
  $result = $query->execute()->fetchAllKeyed();

  if (!empty($result)) {
    if ($end_user == 'end_user') {
      // In this case, we need to send company names instead of vendor names.
      $end_result = array_keys($result);
      $result = _get_end_result_vendor_spending($end_result);
    }
  }

  return $result;
}

/**
 * Implements hook_form_alter
 */
function m6connect_vendor_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'vendor_spending_edit_form') {
    // $form['#after_build'][] = '_vendor_spending_edit_after_build';
  }
}

/**
 * After build function for vendor spending edit form.
 */
function _vendor_spending_edit_after_build($form, &$form_state) {
  unset($form['main-container']['region_of_work']['#description']);
  $form['main-container']['region_of_work']['#title_display'] = 'invisible';
  return $form;
}

/**
 * Get End results of vendors for vendor spending edit form.
 */
function _get_end_result_vendor_spending($result = array()) {
  $return = array();
  if (empty($result)) {
    return $return;
  }

  $query = db_select('og_membership', 'og');
  $query->fields('og', array('etid', 'gid'));
  $query->condition('etid', $result);
  $query->condition('entity_type', 'node');
  $query->condition('group_type', 'node');
  $query->condition('field_name', 'og_group_ref');
  $data = $query->execute()->fetchAllKeyed();

  if (!empty($data)) {
    $return = _get_node_title_by_nid($data);
  }

  return $return;
}



/**
 * Helper function to get width and height by image style name.
 */
function _get_image_dimensions_by_style_name($style_name = '') {
  $return = array();
  if (empty($style_name)) {
    return $return;
  }

  $is_data = image_style_load($style_name);
  if (!empty($is_data)) {
    // If we have IS data.
    // Getting it's effects.
    $is_effects = image_style_effects($is_data);
    if (!empty($is_effects)) {
      $is_data_effects = array_values($is_effects);
      $width = !empty($is_data_effects[0]['data']['width']) ? $is_data_effects[0]['data']['width'] : '';
      $height = !empty($is_data_effects[0]['data']['height']) ? $is_data_effects[0]['data']['height'] : '';
      if (!empty($width) && !empty($height)) {
        $return = array('width' => $width, 'height' => $height);
      }
    }
  }
  return $return;
}

/**
 * Helper functions to get date ranges in generating reports.
 * @param $start
 *   The start date in m/d/Y format.
 * @param $end
 *   The end date in m/d/Y format.
 */
function _get_date_ranges_start_end_options($start = '', $end = '') {
  $return = array('start' => NULL, 'end' => NULL);

  if (empty($start)) {
    // If we do not have start range, we do not want to continue.
    return $return;
  }
  if (!empty($start) && empty($end)) {
    // If user has given start date, but not end date, then we assume that it
    // is uptill now.
    $end = date('m/d/Y', REQUEST_TIME);
  }

  $return = array(
    'start' => strtotime($start),
    'end' => strtotime($end),
  );

  return $return;
}

/**
 * Helper function to get date ranges in generating reports.
 * @param $date_ranges
 *   This is fixed date ranges, which is either
 *   - all (Blank is also treated all) or
 *   - current_month or
 *   - current_year or
 *   - last_month or
 *   - last_year
 */
function _get_date_ranges_options($date_ranges = 'all') {
  $return = array('start' => '', 'end' => '');

  if ($date_ranges == 'all') {
    // If we want all data, then return nothing.
    return $return;
  }

  if ($date_ranges == 'current_month') {
    // This means start shall be first of this month, and end would be till now.
    $start = strtotime("first day of this month");
    $end = REQUEST_TIME;
  }

  if ($date_ranges == 'current_year') {
    $start = strtotime('first day of january this year');
    $end = REQUEST_TIME;
  }

  if ($date_ranges == 'last_month') {
    $start = strtotime('first day of previous month');
    $end = strtotime('last day of previous month');
  }

  if ($date_ranges == 'last_year') {
    $start = strtotime('first day of january previous year');
    $end = strtotime('last day of december previous year');
  }

  $return = array(
    'start' => $start,
    'end' => $end,
  );

  return $return;
}

/**
 * Helper function to get M6 Company Type by node|nid.
 */
function _get_m6_company_type($og_node = NULL) {
  $return = '';
  if (empty($og_node)) {
    return $return;
  }

  if (is_numeric($og_node) && $node = node_load($og_node)) {
    $og_node = $node;
  }

  if (!is_object($og_node)) {
    return $return;
  }

  if (!empty($og_node->field_facilities_construction[LANGUAGE_NONE][0]['tid'])) {
    $tid = $og_node->field_facilities_construction[LANGUAGE_NONE][0]['tid'];
    if ($tid) {
      $parents = taxonomy_get_parents($tid);
      if (!empty($parents)) {
        $parents = array_reverse($parents);
        if (!empty($parents[0]->tid) && $parents[0]->tid != $tid) {
          $taxo = taxonomy_term_load($parents[0]->tid);
          $return = $taxo->name;
        }
        else {
          $taxo = taxonomy_term_load($tid);
          $return = $taxo->name;
        }
      }
      else {
        $taxo = taxonomy_term_load($tid);
        $return = $taxo->name;
      }
    }
  }

  return $return;
}

/**
 * Helper function to get current user type for SCM.
 */
function _get_current_user_type_scm($uid = NULL) {
  $account = $company = NULL;
  if (!empty($uid)) {
    $account = user_load($uid);

    // Trying to get current company of the user.
    $company_nid = variable_get('company_set_' . $account->uid, NULL);
    if (!empty($company_nid)) {
      $company = node_load($company_nid);
    }
  }

  if (_is_user_material_manager($company, $account)) {
    // Checking if user is material manager.
    return t('Material Manager');
  }

  if (_is_user_supply_chain_lead($company, $account)) {
    // Checking if user is supply chain lead.
    return t('Supply Chain Lead');
  }

  if (_is_user_requestor($company, $account)) {
    return t('Requestor');
  }

  // If we are here, then return blank.
  return '';
}



/**
 * Helper function to know if a user is requestor(SCM).
 */
function _is_user_requestor($company, $user) {
  $user_og_roles = og_get_user_roles('node', $company->nid, $user->uid, FALSE);
  if (empty($user_og_roles)) {
    return !($account->status);
  }
  return FALSE;
}

/**
 * Helper function to know if a user is vendor manager.
 */
function _is_user_supply_chain_lead($company = FALSE, $user = FALSE) {
  if (empty($company->nid)) {
    global $company;
  }

  if (empty($user->uid)) {
    global $user;
  }

  $user_og_roles = og_get_user_roles('node', $company->nid, $user->uid, FALSE);
  return in_array('Supply Chain Lead', $user_og_roles);
}