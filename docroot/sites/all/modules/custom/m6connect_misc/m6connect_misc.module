<?php

/*
 * Hook implementation for m6connect_misc
 */


/*
 * Implemenatation of hook_menu
 */

function m6connect_misc_menu() {
    $items['m6connect/%ctools_js/add/company'] = array(
        'page callback' => 'm6connect_node_add_modal_callback',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
    );


//m6connect_misc_get_user_all_companies
    //********** End RFP Award Fuctionality **********//
    $items['admin/regions'] = array(
        'title' => t('Import regions'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('import_regions_form'),
        'access callback' => '_is_m6_user_logged_in',
        'file' => 'includes/m6connect_misc.inc',
    );


    $items['admin/UNSPSC'] = array(
        'title' => t('Import UNSPSC'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('import_unspsc_form'),
        'access callback' => '_is_m6_user_logged_in',
        'file' => 'includes/m6connect_misc.inc',
    );


    $items['admin/naics'] = array(
        'title' => t('Import naics'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('import_naics_form'),
        'access callback' => '_is_m6_user_logged_in',
        'file' => 'includes/m6connect_misc.inc',
    );

    $items['custom_invite/%ctools_js/user/%'] = array(
        'title' => t(''),
        'page callback' => 'custom_invite_user',
        'page arguments' => array(1, 3),
        //'access arguments' => array('see full bio of user'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['people/invite/%/%/%'] = array(
        'title' => t(''),
        'page callback' => 'm6connect_misc_invite',
        'page arguments' => array(2, 3, 4),
        //'access arguments' => array('see full bio of user'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
  $items['companyr/user/%/%/%/%'] = array(
        'title' => t(''),
        'page callback' => 'm6connect_misc_invite_user_remove',
        'page arguments' => array(2, 3, 4, 5),
        //'access arguments' => array('see full bio of user'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
  $items['get-company-admin/%'] = array(
        'title' => t(''),
        'page callback' => '_get_company_admin_list',
        'page arguments' => array(1),
        //'access arguments' => array('see full bio of user'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['people/invite/users/%'] = array(
        'title' => t(''),
        'page callback' => 'm6connect_misc_invite_users',
        //'access arguments' => array('see full bio of user'),
        //'access arguments' => array('access content'),
        'page arguments' => array(3),
        'access callback' => 'people_section_invite_access_callback',
        'type' => MENU_CALLBACK,
    );
    $items['people/invite/users/submit'] = array(
        'title' => t(''),
        'page callback' => 'm6connect_misc_invite_users_submit',
        //'access arguments' => array('see full bio of user'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['download/attachments/%'] = array(
        'title' => t(''),
        'page callback' => 'm6connect_misc_download_attachment',
        'page arguments' => array(2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['user-custom/%/autocomplete'] = array(
        'title' => t(''),
        'page callback' => 'm6connect_misc_realname_autocomplete',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    /*
      $items['create-select-company'] = array(
      'title' => 'Create or Select Company',
      'page callback' => 'create_select_companies_form',
      'access callback' => TRUE,
      );

      $items['select-co-company'] = array(
      'title' => 'Select Company',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('select_companies_form'),
      'access callback' => TRUE,
      ); */
    $items['strength-indicator-settings'] = array(
        'title' => t('Company Profile Strength Indicator Settings'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('strength_indicator_settings_form'),
        'access callback' => '_is_m6_user_logged_in',
    );

    $items['manage-user-license/%ctools_js/%user/%'] = array(
        'page callback' => 'manage_user_licenses_callback',
        'page arguments' => array(1, 2, 3),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );
    $items['people/people'] = array(
        'title' => t('People'),
        'page callback' => 'people_view',
        //'access arguments'  => array('access content'),
        'access arguments' => array('m6connect_authenticate_user'),
        //'type'             => MENU_LOCAL_TASK,
        'type' => MENU_CALLBACK,
        'weight' => '1',
    );
    $items['post-register-user'] = array(
        'title' => 'Create/Join Company',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('custom_registration_step_form'),
        'access arguments' => array('access content'),
        'type' => MENU_NORMAL_ITEM,
    );
//    $items['user/register/%'] = array(
//        'title' => 'Create new account',
//        'page callback' => 'm6connect_misc_ctools_wizard',
//        'page arguments' => array(2),
//        'access callback' => true,
//        'access arguments' => array(2),
//        'type' => MENU_CALLBACK,
//    );
    $items['m6connect/unsubscribe/%'] = array(
        'title' => 'Unsubscribe',
        'page callback' => 'unsubscribe_m6connect_user',
        'page arguments' => array(2),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['m6group/unsubscribe/%'] = array(
        'title' => 'Unsubscribe',
        'page callback' => 'unsubscribe_m6group_user',
        'page arguments' => array(2),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );


    $items['user/%'] = array(
        'title' => 'about',
        'page callback' => 'custom_profile_about_form_alter',
        'page arguments' => array(1),
        'access callback' => '_is_m6_user_logged_in',
        'access arguments' => array(1),
        'type' => MENU_CALLBACK,
    );

    $items['custcountnull'] = array(
        'title' => 'custcountnull',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('member_notification_status_count_zero'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['new/organization'] = array(
        'title' => 'Add Organization',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('add_new_organization_form'),
        'access callback' => 'new_organization_access_callback',
        'file' => 'add_organization.form.inc',
        'file path' => drupal_get_path('module', 'm6connect_misc') . '/includes',
        'type' => MENU_NORMAL_ITEM,
    );

    $items['join/organization'] = array(
        'title' => 'Add Organization',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('join_new_organization_form'),
        'access callback' => 'user_is_logged_in',
        'file' => 'add_organization.form.inc',
        'file path' => drupal_get_path('module', 'm6connect_misc') . '/includes',
        'type' => MENU_NORMAL_ITEM,
    );

    $items['notification/people/join/accept/%/%/%'] = array(
        'title' => t(''),
        'page callback' => 'notification_peple_join',
        'page arguments' => array(3, 4, 5,6),
        //'access arguments' => array('see full bio of user'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['assign-ins-manager/%/%ctools_js'] = array(
        'title' => t(''),
        'page callback' => 'assign_ins_manager',
        'page arguments' => array(1, 2),
        //'access arguments' => array('see full bio of user'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['assign-ins-managerform/%'] = array(
        'title' => t(''),
        'page callback' => 'assign_ins_manager_link',
        'page arguments' => array(1, 2),
        //'access arguments' => array('see full bio of user'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['m6id/verified'] = array(
        'title' => 'M6ID Verified',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('m6id_verified_form'),
        'access callback' => '_is_m6_user_logged_in',
        'file' => 'm6id_verified.form.inc',
        'file path' => drupal_get_path('module', 'm6connect_misc') . '/includes',
        'type' => MENU_NORMAL_ITEM,
    );

    $items['connection/category/%node/delete/%ctools_js'] = array(
        'page callback' => 'custom_connection_category_delete',
        'page arguments' => array(2, 3, 4),
        'access arguments' => array('access content'),
    );


    $items['connection/category/%node/rename/%ctools_js'] = array(
        'page callback' => 'custom_connection_category_rename',
        'page arguments' => array(2, 3, 4),
        'access arguments' => array('access content'),
    );

    $items['connect/%/category/disapprove/%/%/%/%ctools_js'] = array(
        'page callback' => 'custom_connect_category_disapprove',
        'page arguments' => array(1, 3, 4, 5, 6, 7),
        'access arguments' => array('access content'),
    );
    $items['connect/%/category/%/approve/%/%/%/%ctools_js'] = array(
        'page callback' => 'custom_connect_category_approve',
        'page arguments' => array(1, 3, 4, 5, 6, 7, 8),
        'access arguments' => array('access content'),
    );
    $items['connect/category/%/request/%/%/%ctools_js'] = array(
        'page callback' => 'custom_connect_category_request',
        'page arguments' => array(2, 3, 4, 5, 6),
        'access arguments' => array('access content'),
    );

  $items['connection/user/%user/%/%ctools_js'] = array(
    'page callback' => 'connection_user_action_callback', 
    'page arguments' => array(2,3,4), 
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK, 
  );
   $items['assign/companyadminrole/%/%'] = array(
        'title' => t(''),
        'page callback' => 'assign_company_admin_support_role',
        'page arguments' => array(2, 3),
        //'access arguments' => array('see full bio of user'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
  
  $items['check-user-availability/%/%/%/%/%'] = array(
    'page callback' => 'custom_check_user_availability_callback', 
    'page arguments' => array(1,2,3,4,5), 
    //'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK, 
    'access callback' => TRUE,
  );
  return $items;
}

function new_organization_access_callback() {
    global $user;
    if (user_is_logged_in()) {
        $curretUser = user_load($user->uid);
        $user_groups = _get_user_companies($user);
        $count = count($user_groups);
        if(isset($curretUser->field_user_company['und']) && isset($curretUser->field_user_company['und'][0]['target_id']) && !empty($curretUser->field_user_company['und'][0]['target_id']) && $count>0){
        return FALSE; 
      } else {
        return TRUE;  
      }
      /*if($count<2){
        return TRUE;  
      }*/
    }
    return FALSE;
}

function is_user_invited_in_node() {
    global $user;
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.entity_id=n.nid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->fields('n', array('nid'));
    $query->condition('rcne.field_rfp_company_nid_email_value', $user->mail, '=');
    $result = $query->execute()->rowCount();
    return $result;
}

function get_user_invited_in_node_titles() {
    global $user;
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.entity_id=n.nid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->fields('n', array('title'));
    $query->condition('rcne.field_rfp_company_nid_email_value', $user->mail, '=');
    $result = $query->execute()->fetchField();
    return $result;
}

function people_section_invite_access_callback() {
  
    global $user;
  $nid = arg(3);
    /*if (isset($_SESSION['company']) && is_numeric($_SESSION['company']) && !is_company_individual_flag($_SESSION['company'])) {
        if (isset($user->roles[4]) || isset($user->roles[5])) {
            return TRUE;
        }
    }
    return FALSE;*/
  if(isset($nid) && is_numeric($nid) && !is_company_individual_flag($nid)){
    $user_og_roles = og_get_user_roles('node', $nid, $user->uid);
    if(in_array('company admin', $user_og_roles)){
       return TRUE;  
    }
    if(in_array('administrator member', $user_og_roles)){
      return TRUE;  
    }
  
  }
  return FALSE;
}

function m6connect_misc_download_attachment($fid) {
    $file = file_load($fid);
    $headers = file_get_content_headers($file);
    $headers['Content-Disposition'] = 'attachment; filename="' . $file->filename . '"';
    $headers['width'] = '50px';
    $headers['height'] = '50px';
    file_transfer($file->uri, $headers);
}

function custom_profile_about_form_alter($userluid) {
    print $userluid->realname . '<br>';
    print $userluid->field_user_qualification['und'][0]['value'];
    //pre($node,1);
}

//function m6connect_misc_form_user_register_form_alter(&$form, &$form_state) {
//    $form['#submit'] = array(
//        'user_register_submit',
//        'ctools_wizard_submit',
//    );
//}

/*
 * Implement hook for updating license database after order completed.
 *
 *   */

function m6connect_misc_uc_checkout_complete($order, $account) {
    global $user, $company;
    //license Number
    $planLicenseNumber = array(
        'GoldPlan' => 1,
        'CorporatePlan' => 25,
        'SilverPlan' => 1
    );
    //license Period
    $planLicensePeriod = array(
        'CorporatePlan' => '+12 month',
        'CorporatePlan Licenses' => '+12 month',
        'GoldPlan' => '+1 month',
        'GoldPlan Licenses' => '+1 month',
        'SilverPlan' => '+1 month',
        'SilverPlan Licenses' => '+1 month'
    );

    foreach ($order->products as $product) {
        $catelogName = get_taxonomy_catlog_of_product($product->nid);
        if (!empty($catelogName) && isset($planLicensePeriod[$catelogName])) {
            $licenseNumber = isset($planLicenseNumber[$catelogName]) ? $planLicenseNumber[$catelogName] : $product->qty;
            $licensePeriod = $planLicensePeriod[$catelogName];
            for ($i = 0; $i < $licenseNumber; $i++) {
                $insertId = db_insert('license_master')
                                ->fields(array('license_key', 'valid_from', 'valid_till', 'created_date', 'product_id', 'order_id', 'cid'))
                                ->values(array(
                                    'license_key' => md5($order->uid . time() . $order->order_id . $i),
                                    'valid_from' => time(),
                                    'valid_till' => strtotime($licensePeriod, time()),
                                    'created_date' => time(),
                                    'product_id' => $product->nid,
                                    'order_id' => $order->order_id,
                                    'cid' => $company->nid,
                                ))->execute();

                db_insert('license_purchased')
                        ->fields(array('key_id', 'user_id', 'purchased_date', 'cid'))
                        ->values(array(
                            'key_id' => $insertId,
                            'user_id' => $user->uid,
                            'purchased_date' => time(),
                            'cid' => $company->nid,
                        ))->execute();
            }
        }
    }
}

function get_taxonomy_catlog_of_product($productNid) {
    $query = db_select('node', 'n');
    $query->leftjoin('field_data_taxonomy_catalog', 'tc', 'n.nid=tc.entity_id');
    $query->leftjoin('taxonomy_term_data', 'td', 'td.tid=tc.taxonomy_catalog_tid');
    $query->fields('td', array('name'));
    $query->condition('n.type', 'product', '=');
    $query->condition('n.nid', $productNid, '=');
    $query->condition('n.status', 1, '=');
    $catelogName = $query->execute()->fetchColumn(0);
    return $catelogName;
}

/*
  implement hook_node_types() to define which type of node are available to
  provide custom permission
 * 
 *  */

/**
 * Implements hook_field_storage_pre_update().
 * Added to delete taxpayer_ssn_ein value if empty when node update (correcting field_encrypt module bug)
 */
function m6connect_misc_field_storage_pre_update($entity_type, $entity, &$skip_fields) {
    if ($entity_type == 'node' && $entity->type == 'organization' && module_exists('field_encrypt') && db_table_exists('field_encrypt')) {
        if (isset($entity->field_taxpayer_ssn_ein['und']) && empty($entity->field_taxpayer_ssn_ein['und'])) {
            $field_info = field_info_field('field_taxpayer_ssn_ein');
            if (isset($field_info['settings']['field_encrypt']['encrypt']) && !empty($field_info['settings']['field_encrypt']['encrypt'])) {
                db_delete('field_encrypt')
                        ->condition('entity_type', 'node', '=')
                        ->condition('entity_id', $entity->nid, '=')
                        ->condition('field_name', 'field_taxpayer_ssn_ein', '=')
                        ->execute();
            }
        }
    }
}

/*
 * Implemenatation of hook_mail
 */

function m6connect_misc_mail($key, &$message, $params) {
    $message['body'][] = $params['body'];
    $message['subject'] = $params['subject'];
    $headers = array(
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
    //'X-Priority' => '1 (Highest)',
        //'X-MSMail-Priority' => 'High',
        //'Importance' => 'High',
            //'MIME-Version' => '1.0',
//'Content-Transfer-Encoding' => '8bit',
//'X-Mailer' => Drupal
//'Return-Path' => support@m6connect.com
//'Sender' => support@m6connect.com
//'From' => abc@gmail.com
//'X-Mailer' => 'Drupal',
//'Cc' => '', 
//'Bcc' => '',
    );
//Add MetaData to mandrill email request for tracking
    if (isset($params['metadata']) && !empty($params['metadata'])) {
        $message['metadata'] = $params['metadata'];
    }
    $message['headers'] = $headers;
    if (isset($params['sender']) && !empty($params['sender'])) {
        $message['headers']['Sender'] = $params['sender'];
        $message['headers']['From'] = $params['sender'];
        $message['headers']['Return-Path'] = $params['sender'];
    }
    if (isset($params['cc']) && !empty($params['cc'])) {
        $message['headers']['Cc'] = $params['cc'];
    }
    if (isset($params['bcc']) && !empty($params['bcc'])) {
        $message['headers']['Bcc'] = $params['bcc'];
    }
    if (isset($params['attachments']) && is_array($params['attachments']) && !empty($params['attachments'])) {
        $message['params']['attachments'] = $params['attachments'];
    }
  if(strpos($key,'rfp_mail___')!==FALSE || strpos($key,'clarification_mail___')!==FALSE){
    if(!empty($message['headers']['Bcc'])){
    $message['headers']['Bcc'] .= ',support@m6connect.com';   
    }else{
    $message['headers']['Bcc'] .= 'support@m6connect.com';  
    }
  }
//drupal_set_message('<pre>'.print_r($message['headers'],1).'</pre>');
}

/*
 * Implemenatation of hook_mail_alter
 */

function m6connect_misc_mail_alter(&$message) {
    //pre($message,1);
    global $user;
    $account = user_load($user->uid);
    if ($message['id'] == 'invite_company-invite' && isset($account->field_automatically_receive_mail['und']) && $account->field_automatically_receive_mail['und'][0]['value'] == 1) {
        $message['headers']['Bcc'] = $account->mail;
    }
    /* if($message['id'] == 'm6connect_misc_project_mail___user_invite_project'){

      //$message['body'][1] = 'unsubscribe';
      $message['body']['unsubscribe']= '<a href="http://www.googel.com">unsubscribe</a></table>';
      } */
}

/*
 * Implemenatation of hook_mandrill_valid_attachment_types_alter
 */

function m6connect_misc_mandrill_valid_attachment_types_alter(&$types) {
    $types[] = 'application/xml';
    $types[] = 'application/rtf';
    $types[] = 'application/msword';
    $types[] = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    $types[] = 'application/vnd.ms-excel';
    $types[] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    $types[] = 'application/vnd.ms-powerpoint';
    $types[] = 'application/vnd.openxmlformats-officedocument.presentationml.presentation';
    $types[] = 'application/vnd.ms-project';
    $types[] = 'application/x-msaccess';
    $types[] = 'application/reginfo+xml';
    $types[] = 'application/x-project';
    $types[] = 'application/octet-stream';
}

/**
 * Implements hook_mandrill_mail_alter()
 */
function m6connect_misc_mandrill_mail_alter(&$mandrill_params, &$message) {
//drupal_set_message('<pre>'.print_r($mandrill_params,1).'</pre>');
// Transfer Drupal's Cc and Bcc header fields to the Mandrill API call
    foreach (array('Cc', 'Bcc') as $key) {
        if (isset($mandrill_params['message']['headers'][$key])) {
// Split on multiple mail addresses
            $ccs = preg_split('/, ?/', $mandrill_params['message']['headers'][$key]);
            foreach ($ccs as $cc) {
                $mandrill_params['message']['to'][] = array(
                    'email' => $cc,
                    'type' => strtolower($key),
                );
            }
        }
    }
//Add MetaData to mandrill email request for tracking
    if (isset($message['params']['metadata'])) {
        $mandrill_params['message']['metadata'] = $message['params']['metadata'];
    }
}

/**
 * Implements hook_mandrill_mail_alter()
 */
function m6connect_misc_mandrill_mailsend_result($result) { //drupal_set_message(print_r($result,1));
    $_SESSION['mndrl'] = $result;
    if (db_table_exists('m6connect_mandrill_statistics')) {
        $db_insert = array(
            'mandrill_id' => $result['_id'],
            'email' => $result['email'],
            'mail_status' => $result['status'],
            'reject_reason' => $result['reject_reason'],
        );
        $returnedId = db_insert('m6connect_mandrill_statistics')->fields($db_insert)->execute();
    }

    //////////////
    if (db_table_exists('m6connect_mandrill_invitemail_status')) {//drupal_set_message(print_r('hi5',1));
        $db_insert2 = array(
            'mid' => $result['_id'],
            'invite_id' => 0,
            'entity_id' => 0,
            'request_from' => 0,
            'field_collection' => 0,
            'status' => 3,
        );
        $returnedmetadata = db_insert('m6connect_mandrill_invitemail_status')->fields($db_insert2)->execute();
    }
}

/**
 * Implements hook_library_alter().
 */
function m6connect_misc_library_alter(&$javascript, $module) {
    drupal_set_message();
    $nodeType = '';
    if (arg(0) == 'node' && is_numeric(arg(1)) && empty(arg(2))) {
        $node = menu_get_object();
        $nodeType = $node->type;
    }
    if (module_exists('jquery_update') && ((arg(0) == 'user' && is_numeric(arg(1)) /* && strpos(current_path(), '/edit') !== FALSE */) || current_path() == 'node/36' || current_path() == 'node/517' || in_array($nodeType, array('organization', 'groups'))) && $module === 'system') {
        $version = '1.10';
        $path = drupal_get_path('module', 'jquery_update');
        $min = variable_get('jquery_update_compression_type', 'min') == 'none' ? '' : '.min';
        $cdn = variable_get('jquery_update_jquery_cdn', 'none');
        $javascript['drupal.ajax']['js'][] = array(
            'data' => array('ajaxPageState' => array('jquery_version' => $version)),
            'type' => 'setting',
        );
        $javascript['drupal.ajax']['dependencies'][] = array('jquery_update', 'jquery_update.ajax.fix');
        jquery_update_jquery_replace($javascript, $cdn, $path, $min, $version);
        jquery_update_jqueryui_replace($javascript, $cdn, $path, $min);
        $javascript['jquery.bbq']['js']['misc/jquery.ba-bbq.js']['data'] = $path . '/replace/misc/1.9/jquery.ba-bbq' . $min . '.js';
    }
}

/**
 * Implements hook_token_info().
 */
function m6connect_misc_token_info() {
    $info['tokens']['node']['customCompanyTitle'] = array(
        'name' => t('Company Title'),
        'description' => t('Provides Company Title.'),
    );
    $info['tokens']['node']['customRfpProjectId'] = array(
        'name' => t('RFP Reference Number/Project Title'),
        'description' => t('RFP Reference Number/Project Title'),
    );
    $info['tokens']['node']['customClarificationId'] = array(
        'name' => t('Clarification Id (with RFP id)'),
        'description' => t('Clarification Id (with RFP id)'),
    );
    $info['tokens']['node']['customProposalId'] = array(
        'name' => t('Custom Proposal Id'),
        'description' => t('Custom Proposal Id'),
    );
    $info['tokens']['node']['customDocumentType'] = array(
        'name' => t('Current Document Types'),
        'description' => t('Current Document Types'),
    );
    $info['tokens']['node']['customParentDocumentType'] = array(
        'name' => t('Parent Document Types'),
        'description' => t('Parent Document Types'),
    );

    $info['tokens']['field_collection_item']['customCompanyTitle'] = array(
        'name' => t('Field Collection Company Title'),
        'description' => t('Field Collection Company Title'),
    );
    $info['tokens']['field_collection_item']['customRfpProjectId'] = array(
        'name' => t('Field Collection RFP Reference Number/Project Title'),
        'description' => t('Field Collection RFP Reference Number/Project Title'),
    );

    $info['tokens']['field_collection_item']['customDocumentType'] = array(
        'name' => t('Field Collection Current Document Types'),
        'description' => t('Field Collection Current Document Types'),
    );

    $info['tokens']['comment']['customCompanyTitle'] = array(
        'name' => t('Company Title'),
        'description' => t('Provides Company Title.'),
    );
    $info['tokens']['comment']['customParentDocumentType'] = array(
        'name' => t('Parent Document Types'),
        'description' => t('Parent Document Types'),
    );
    $info['tokens']['comment']['customDocumentType'] = array(
        'name' => t('Field Collection Current Document Types'),
        'description' => t('Field Collection Current Document Types'),
    );
    $info['tokens']['comment']['customProposalId'] = array(
        'name' => t('Custom Proposal Id'),
        'description' => t('Custom Proposal Id'),
    );
//[field_collection_item:archived]  [comment:author]
    return $info;
}

/**
 * Implements hook_jqmulti_files().
 */
function m6connect_misc_jqmulti_files() {
   $path = libraries_get_path('bootstrap_js');
   $cyclepath = libraries_get_path('cycle2');
   $tooltipster = libraries_get_path('tooltipster');
   $plupload = libraries_get_path('plupload');
   return array(
    $path.'/bootstrap.min.js'=>array('weight'=>1),
  $path.'/jquery.mobile.custom-swipe.min.js'=>array('weight'=>2),
  $cyclepath.'/jquery.cycle2.js'=>array('weight'=>3),
  $cyclepath.'/jquery.cycle2.scrollVert.js'=>array('weight'=>4),
    $tooltipster.'/tooltipster.bundle.min.js'=>array('weight'=>5),
  $plupload.'/js/plupload.full.min.js'=>array('weight'=>6),
   );
 }

/**
 * Implements hook_tokens().
 */
function m6connect_misc_tokens($type, $tokens, array $data = array(), array $options = array()) {

    global $company;
    $replacements = array();
    $documentsFolderNames = array(
        'organization' => 'Company Documents',
        'rfp' => 'RFP Documents',
        'project' => 'Project Documents',
        'clarification' => 'Clarification Documents',
        'my_proposal' => 'Proposal Documents',
        'comment_node_my_proposal' => 'Proposal Message Documents',
    );
    if (isset($data['node']) && !empty($data['node']) && $type == 'node') {
        if (in_array($data['node']->type, array('organization', 'rfp', 'project', 'clarification', 'my_proposal'))) {
            $replacements['[node:customDocumentType]'] = check_plain($documentsFolderNames[$data['node']->type]);

            //print "<pre>"; print_r($replacements['[node:customDocumentType]']); die;
        }
// Set Company Title
        /* $cmpNid ='';
          $cmpNode='';
          $cmpTitle='';
          if($data['node']->type =='organization'){
          $cmpNid = $data['node']->nid;
          $cmpNode = $data['node'];
          }else{
          $cmpNid = _get_user_company_nid($data['node']->uid);
          $cmpNode = node_load($cmpNid);
          }
          $cmpTitle =  get_company_file_system_folder_name($cmpNode); */

        //$cmpNid = _get_user_company_nid($data['node']->uid);
        $cmpNid = $company->nid; 
        $cmpTitle = _get_title_of_node($cmpNid);
        $replacements['[node:customCompanyTitle]'] = check_plain($cmpTitle);
//Set RFP ID
        if ($data['node']->type == 'rfp') {
            $rfpID = date('Y-md', $data['node']->created);
            $rfpID .= '-' . (str_pad($data['node']->field_rfp_serial['und'][0]['value'], 4, "0", STR_PAD_LEFT));
            $replacements['[node:customRfpProjectId]'] = check_plain($rfpID);
        } else if ($data['node']->type == 'project') {
            $replacements['[node:customRfpProjectId]'] = check_plain($data['node']->title);

            //print "<pre>"; print_r($replacements['[node:customRfpProjectId]']); die;

        } else if ($data['node']->type == 'clarification') {
            $rpfNid = $data['node']->field_rfp_reference['und'][0]['target_id'];
            $rfpNode = node_load($rpfNid);
            $rfpID = date('Y-md', $rfpNode->created);
            $rfpID .= '-' . (str_pad($rfpNode->field_rfp_serial['und'][0]['value'], 4, "0", STR_PAD_LEFT));
            $clarificationId = $rfpID;
            $clarificationId .= '-' . (str_pad($data['node']->field_clarification_id['und'][0]['value'], 4, "0", STR_PAD_LEFT));
            $replacements['[node:customRfpProjectId]'] = check_plain($rfpID);
            $replacements['[node:customParentDocumentType]'] = check_plain($documentsFolderNames['rfp']);
            $replacements['[node:customClarificationId]'] = check_plain($clarificationId);
        } else if ($data['node']->type == 'my_proposal') {
            $proposalId = (str_pad($data['node']->field_proposal_number['und'][0]['value'], 4, "0", STR_PAD_LEFT));
            //echo  $proposalId; die;
            $replacements['[node:customProposalId]'] = check_plain($proposalId);
        }
    }
    if (isset($data['field_collection_item']) && !empty($data['field_collection_item']) && $type == 'field_collection_item') {
        if ($data['field_collection_item']->field_name == 'field_rfp_documents') {
            $fc = entity_load('field_collection_item', array($data[$type]->item_id));
            $hostEntity = $fc[$data[$type]->item_id]->hostEntity();
            if (in_array($hostEntity->type, array('rfp', 'project'))) {
                //print "<pre>"; print_r($hostEntity); die;
                /********************start new code 09-11-2016***/
                $cmpNid = $hostEntity->og_group_ref['und'][0]['target_id'];

                //echo  $cmpNid; die;
                /************************end new code *********/
                //$cmpNid = _get_user_company_nid($hostEntity->uid);
                //$cmpNode = node_load($cmpNid);  
               //$cmpTitle =  get_company_file_system_folder_name($cmpNode);
                $cmpTitle = _get_title_of_node($cmpNid);
                $replacements['[field_collection_item:customCompanyTitle]'] = check_plain($cmpTitle);
                $replacements['[field_collection_item:customDocumentType]'] = check_plain($documentsFolderNames[$hostEntity->type]);
                if ($hostEntity->type == 'rfp') {
                    $rfpID = date('Y-md', $hostEntity->created);
                    $rfpID .= '-' . (str_pad($hostEntity->field_rfp_serial['und'][0]['value'], 4, "0", STR_PAD_LEFT));
                    $replacements['[field_collection_item:customRfpProjectId]'] = check_plain($rfpID);
                } else {
                    $replacements['[node:customRfpProjectId]'] = check_plain($data['node']->title);
                    $replacements['[field_collection_item:customRfpProjectId]'] = check_plain($hostEntity->title);
                }
            }
        }
    }
    if (isset($data['comment']) && !empty($data['comment']) && $type == 'comment') {
        if ($data['comment']->node_type == 'comment_node_my_proposal') {
            $ProposalNode = node_load($data['comment']->nid);
            $cmpNid = _get_user_company_nid($ProposalNode->uid);
            //$cmpNode = node_load($cmpNid);  
            //$cmpTitle =  get_company_file_system_folder_name($cmpNode);
            $cmpTitle = _get_title_of_node($cmpNid);
            $proposalId = (str_pad($ProposalNode->field_proposal_number['und'][0]['value'], 4, "0", STR_PAD_LEFT));
            $replacements['[comment:customCompanyTitle]'] = check_plain($cmpTitle);
            $replacements['[comment:customProposalId]'] = check_plain($proposalId);
            $replacements['[comment:customParentDocumentType]'] = check_plain($documentsFolderNames['my_proposal']);
            $replacements['[comment:customDocumentType]'] = check_plain($documentsFolderNames[$data['comment']->node_type]);
        }
    }
//drupal_set_message('<pre>'.print_r($data,1).'</pre>');
    return $replacements;
}

/*
 * function for invite people for become comapny members
 */

function m6connect_misc_invite_users_submit() {
    global $user;
    $mailkey = 'company_mail___invite_user_by_company';

    $companyNid = $_POST['companyNid'];

    //drup_msg($companyNid); die;
    foreach ($_POST['email'] as $key => $value) {
        if ($value !== '') {
            $params = _get_mail_variables($mailkey, $type = 'company', $user, $other = array('email' => $value,'company_nid' => $companyNid));
            $to = $value;
            $return = drupal_mail($params['module'], $params['key'], $to, $params['language'], $params);            
            $params['bcc'] = '';
            //drup_msg($return);
        }
    }
    if (is_numeric($companyNid) && $node = node_load($companyNid)) {
        if (isset($node->field_m6level[LANGUAGE_NONE][0]['value'])) {
            if ($node->field_m6level[LANGUAGE_NONE][0]['value'] < 5) {
                $node->field_m6level[LANGUAGE_NONE][0]['value'] = 5;
                node_save($node);
            }
        }
        else {
            $node->field_m6level[LANGUAGE_NONE][0]['value'] = 5;
            node_save($node);
        }
    }
    //echo 'Successfully Invited';
  drupal_set_message('Successfully Invited');
}

/*
 * function for invite people for become comapny members
 *  */

function m6connect_misc_invite_users() {
    $render_array['variable_to_print1'] = 'Foo';
    $render_array['variable_to_print2'] = 'Bar';
    return theme('m6connect_misc_contents', $render_array);
}

/**
 * Implements hook_theme().
 */
function m6connect_misc_theme() {
    $path = drupal_get_path('modules', 'm6connet_misc');
    return array(
        'm6connect_misc_contents' => array(
            'arguments' => array('var1' => null),
            'template' => 'm6connect-misc-contents-invite',
        ),
        'proposal_awareded_mail_content' => array(
            'variables' => array('data' => array()),
            'template' => $path . '/includes/proposal-awareded-mail-content',
        ),
        'rfp_bidder_feedback_report_content' => array(
            'variables' => array('data' => array()),
            'template' => $path . '/includes/rfp-bidder-feedback-report-content',
        ),
     'proposal_feedback_report_content' => array(
            'variables' => array('data' => array()),
            'template' => $path . '/includes/proposal-feedback-report-content',
        ),
        'm6_ctools_dropdown' => array(
            'variables' => array(
                'title' => NULL,
                'links' => NULL,
                'image' => FALSE,
                'class' => '',
                'title_class' => array(),
                'main_title' => NULL,
            ),
        ),
    'm6_ctools_dropdown_form' => array(
            'variables' => array(
          'data' => NULL,
                'title' => NULL,
                'links' => NULL,
                'image' => FALSE,
                'class' => '',
                'title_class' => array(),
        'main_title' => NULL,
            ),            
        ),
    
      'connection_request_email_notify' => array(
      'variables' => array('data' => array()),
      'path' => drupal_get_path('module', 'm6connect_misc').'/includes',
        'template' => 'connection_request_email_notify',
      ),
    );
}

function theme_m6_ctools_dropdown($vars) {
  // Provide a unique identifier for every dropdown on the page.
  static $id = 0;
  $id++;

  $class = 'ctools-dropdown-no-js ctools-dropdown' . ($vars['class'] ? (' ' . $vars['class']) : '');
  
  $title_class = (!empty($vars['title_class']))?' '.implode(' ',$vars['title_class']):'';
  $main_title = $vars['main_title'] ? (' ' . $vars['main_title']) : '';
  
  ctools_add_js('dropdown');
  ctools_add_css('dropdown');

  $output = '';

  $output .= '<div class="' . $class . '" id="ctools-dropdown-' . $id . '">';
  $output .= '<div class="ctools-dropdown-link-wrapper">';
  if ($vars['image']) {
    $output .= '<a href="#" title="'.$vars['title'].'" class="ctools-dropdown-link ctools-dropdown-image-link'.$title_class.'">' . $vars['main_title'] . '</a>';
  }
  else {
    $output .= '<a href="#" title="'.$vars['title'].'" class="ctools-dropdown-link ctools-dropdown-text-link'.$title_class.'">' . check_plain($vars['main_title']). '</a>';
  }

  $output .= '</div>'; // wrapper
  $output .= '<div class="ctools-dropdown-container-wrapper">';
  $output .= '<div class="ctools-dropdown-container">';
  $output .= theme_links(array('links' => $vars['links'], 'attributes' => array('title'=>$vars['title']), 'heading' => ''));
  $output .= '</div>'; // container
  $output .= '</div>'; // container wrapper
  $output .= '</div>'; // dropdown
  return $output;
}

function theme_m6_ctools_dropdown_form($vars) {
  // Provide a unique identifier for every dropdown on the page.
  static $id = 0;
  $id++;

  $class = 'ctools-dropdown-no-js ctools-dropdown' . ($vars['class'] ? (' ' . $vars['class']) : '');
  
  $title_class = (!empty($vars['title_class']))?' '.implode(' ',$vars['title_class']):'';
  $main_title = $vars['main_title'] ? (' ' . $vars['main_title']) : '';
  
  ctools_add_js('dropdown');
  ctools_add_css('dropdown');

  $output = '';

  $output .= '<div class="' . $class . '" id="ctools-dropdown-' . $id . '">';
  $output .= '<div class="ctools-dropdown-link-wrapper">';
  if ($vars['image']) {
    $output .= '<a href="#" title="'.$vars['title'].'" class="ctools-dropdown-link ctools-dropdown-image-link'.$title_class.'">' . $vars['main_title'] . '</a>';
  }
  else {
    $output .= '<a href="#" title="'.$vars['title'].'" class="ctools-dropdown-link ctools-dropdown-text-link'.$title_class.'">' . check_plain($vars['main_title']). '</a>';
  }

  $output .= '</div>'; // wrapper
  $output .= '<div class="ctools-dropdown-container-wrapper">';
  $output .= '<div class="ctools-dropdown-container">';
  $output .= theme_links(array('links' => $vars['links'], 'attributes' => array('title'=>$vars['title']), 'heading' => ''));
  $output .= '<div class="ctools-dropdown-form">'.$vars['data'].'</div>';
  $output .= '</div>'; // container
  $output .= '</div>'; // container wrapper
  $output .= '</div>'; // dropdown
  return $output;
}

function assign_ins_manager_link($user) {
    $ogrolesk = og_roles('node', 'organization');
    $ogroles = array_flip($ogrolesk);
    og_role_grant('node', $company->nid, $user, $ogroles['Insurance Certificate Manager']);
}

function assign_ins_manager($uid, $ajax = null) {
    global $user, $company;
    ctools_include('node.pages', 'node', '');
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state['ajax'] = true;
        $form_state['uid'] = $uid;

        $output = ctools_modal_form_wrapper('assign_ins_manager_form', $form_state);
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        print ajax_render($output);
        drupal_exit();
    }
    return drupal_get_form('assign_ins_manager_form', $uid);
}

function assign_ins_manager_form($form, &$form_state, $uid = '') {
    if ($form_state['ajax']) {
        $uid = $form_state['uid'];
    } else {
        $form_state['uid'] = $uid;
    }
    $users = user_load($form_state['uid']);
    $names = $users->field_first_name['und'][0]['value'] . ' ' . $users->field_last_name['und'][0]['value'];
    $options = array('attribute' => array('class' => 'btn btn-primary'));
    $path = '/people/member';
    $question = 'Do you want to assign manager role';
    $description = 'Assign ' . $names . ' Insurance Certificate Manager role? ';
    $form['#attributes']['class'][] = 'confirmation';
    $form['description'] = array('#markup' => $description);
    $form['confirm'] = array('#type' => 'hidden', '#value' => 1);

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Ok'),
    );
    $form['actions']['cancel'] = array(
        '#type' => 'link',
        '#title' => t('Cancel'),
        '#href' => $path,
        '#options' => $options,
    );
    // By default, render the form using theme_confirm_form().
    if (!isset($form['#theme'])) {
        $form['#theme'] = 'confirm_form';
    }
    return $form;
}

function assign_ins_manager_form_submit(&$form, &$form_state) {
    global $company;
    $form_state['rebuild'] = true;
    $ogrolesk = og_roles('node', 'organization');
    $ogroles = array_flip($ogrolesk);
    og_role_grant('node', $_SESSION['company'], $form_state['uid'], $ogroles['Insurance Certificate Manager']);
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    $form_state['ajax_commands'][] = ctools_ajax_command_reload();
}

/**
 * function for active member on our site or asign staff role to user
 */
function m6connect_misc_invite($action, $uid, $companyNid, $app = '') {      
  global $user, $company;
  $account = user_load($uid);
  $m6connect_notification_table_exist = db_table_exists('m6connect_notification');
  if ($action == 'accept') {
    $edit['roles'] = $account->roles; 
    $edit['og_group_ref'] = $account->og_group_ref;
    $LocationAdmin = 0;    
    unset($edit['roles'][11]);
    $company_node = node_load($account->field_user_company['und'][0]['target_id']);
    $comapny_users = m6connect_misc_get_company_users_by_cnid($company_node->nid);
    //$edit['og_group_ref']['und'][]['target_id'] = $account->field_user_company['und'][0]['target_id'];
    $companyTargetId = $account->field_user_company['und'][0]['target_id']; 
    $values = array(
      'entity_type' => 'user',
      'entity' => $account,
      'state' => OG_STATE_ACTIVE,
     );
     $og_membership = og_group('node', $companyTargetId, $values);
     $ogrolesk = og_roles('node', 'organization');
     $ogroles = array_flip($ogrolesk);
     if (count($comapny_users) == 1 && (isset($company_node->field_main_location_grp['und'][0]['target_id']) && is_numeric($company_node->field_main_location_grp['und'][0]['target_id']))) {        
       $user_role = $ogrolesk[$ogroles['company admin']];
       og_role_grant('node', $companyTargetId, $account->uid, $ogroles['company admin']);
       if (db_table_exists('m6connect_company_join_request')) {
          db_update('m6connect_company_join_request')
          ->fields(array('status' => 1))
          ->condition('entity_id', $companyTargetId, '=')
          ->condition('user_uid', $account->uid, '=')
          ->condition('status', 0, '=')
          ->execute();
        }
        if ($m6connect_notification_table_exist) {
          $m6connect_notification = array(
            'type' => 'company_status',
            'event' => 'approve',
            'entity_id' => 0,
            'company_nid' => $companyNid,
            'message' => NULL,
            'request_from' => $user->uid,
            'request_to' => $uid,
            'status' => 1,
            'timestamp' => time(),
          );
          entity_save('m6connect_notification', (object) $m6connect_notification);
        }
        $edit['field_user_company']['und'] = array();
        $edit['field_organization_mail']['und'] = array();
        user_save($account, $edit);
       echo 'invited';
        exit();
      } 
      else {        
        $user_role = $ogrolesk[$ogroles['staff']];
        og_role_grant('node', $companyTargetId, $account->uid, $ogroles['staff']);
        // $edit['field_user_company']['und'] = array();
        //$edit['field_organization_mail']['und'] = array();
        //user_save($account, $edit);
        if (db_table_exists('m6connect_company_join_request')) {
          db_update('m6connect_company_join_request')
          ->fields(array('status' => 1))
          ->condition('entity_id', $companyTargetId, '=')
          ->condition('user_uid', $account->uid, '=')
          ->condition('status', 0, '=')
          ->execute();
        }
        if ($m6connect_notification_table_exist) {
          $m6connect_notification = array(
            'type' => 'company_status',
            'event' => 'approve',
            'entity_id' => 0,
            'company_nid' => $companyNid,
            'message' => NULL,
            'request_from' => $user->uid,
            'request_to' => $uid,
            'status' => 1,
            'timestamp' => time(),
          );
          entity_save('m6connect_notification', (object) $m6connect_notification);
        }
        /*$edit['field_user_company']['und'] = array();
        $edit['field_organization_mail']['und'] = array();
        user_save($account, $edit); */    
      }
      if (db_table_exists('m6connect_company_join_request')) {
        db_update('m6connect_company_join_request')
        ->fields(array('status' => 1))
        ->condition('entity_id', $companyTargetId, '=')
        ->condition('user_uid', $account->uid, '=')
        ->condition('status', 0, '=')
        ->execute();
      }
      if ($m6connect_notification_table_exist) {
        $m6connect_notification = array(
          'type' => 'company_status',
          'event' => 'approve',
          'entity_id' => 0,
          'company_nid' => $companyNid,
          'message' => NULL,
          'request_from' => $user->uid,
          'request_to' => $uid,
          'status' => 1,
          'timestamp' => time(),
      );
      entity_save('m6connect_notification', (object) $m6connect_notification);
    }
    if(!empty($app)){
      return array('account' => $account, 'edit' => $edit);
    }
  }
  else if ($action == 'deny') {
    $edit['field_user_company'] = array();
    user_save($account, $edit);
    if ($m6connect_notification_table_exist) {
      $m6connect_notification = array(
        'type' => 'company_status',
        'event' => 'deny',
        'entity_id' => 0,
        'company_nid' => $companyNid,
        'message' => NULL,
        'request_from' => $user->uid,
        'request_to' => $uid,
        'status' => 1,
        'timestamp' => time(),
      );
      entity_save('m6connect_notification', (object) $m6connect_notification);
    }
    if(!empty($app)){
      return 1;
    }
    else{
      echo 'denied';
      exit();
    }        
  } 
  else if ($action == 'deny_remove') {
    $edit['field_user_company'] = array();
    user_save($account, $edit);
    echo 'denied';
    exit();
  }
  else if ($action == 'role') {
        $fullname = _get_user_full_name($uid);
        $ogrolesk = og_roles('node', 'organization');
        $ogroles = array_flip($ogrolesk);
        //$user_gid = $company->nid;
        $user_gid = $companyNid;
        //$companyNode = node_load($companyNid);
        //$companyUsers = _get_company_users_by_group_company($companyNode);
        $user_og_roles = og_get_user_roles('node', $user_gid, $uid);
        //$cmpReletedRoles = array(5, 12, 13);
        $cmpReletedRoles = array($ogroles['company admin'], $ogroles['staff'],$ogroles['Insurance Certificate Manager'],$ogroles['M6ID Manager'],$ogroles['Site Manager'],$ogroles['Alert Manager'],$ogroles['SCM Project Manager'],$ogroles['Program manager'],$ogroles['project manager'], $ogroles['Vendor Manager'], $ogroles['Supply Chain Lead'], $ogroles['Material Manager'], $ogroles['Department Approver']);
        if (isset($_POST['newrols']) && !empty($_POST['newrols'])) {
            $applyUserRoles = array_values($_POST['newrols']);
            foreach ($cmpReletedRoles as $delta => $roleId) {
                //$role_details = user_role_load($roleId);
                if (in_array($roleId, $applyUserRoles)) {
                    if (!isset($user_og_roles[$roleId])) {
                        //user_multiple_role_edit(array($account->uid), 'add_role', $roleId);//Add Role
                        og_role_grant('node', $companyNid, $uid, $roleId);
                    }
                } else {
                    if (isset($user_og_roles[$roleId])) {
                        //user_multiple_role_edit(array($account->uid), 'remove_role', $roleId);    //Remove Role
                        og_role_revoke('node', $companyNid, $uid, $roleId);
                    }
                }
            }      
        } else {
            foreach ($cmpReletedRoles as $delta => $roleId) {
                if (isset($user_og_roles[$roleId])) {
                    //user_multiple_role_edit(array($account->uid), 'remove_role', $roleId);    //Remove Role
                    og_role_revoke('node', $companyNid, $uid, $roleId);
                }
            }
        }
        echo $message = $fullname . ' roles has been updated.';
        exit();
        
    } 
  else if ($action == 'remove') {
    og_ungroup('node', $companyNid, 'user', $account->uid);
  }
  if($action == 'acceptapprove'){
    global $base_url;    
    $edit['field_user_company']['und'] = array();
    $edit['field_organization_mail']['und'] = array();
    user_save($account, $edit);       
  }
}



function m6connect_misc_invite_user_remove($action, $uid, $companyNid, $companyAdmin, $app = '') {
  global $user, $company;
  if(!empty($app)){
        $user = user_load($uid);
    }  
  if ($action == 'remove') {
    // Get all the node posted by this user 
  // And assing these nodes to company admin
  if(!empty($companyAdmin) && is_numeric($companyAdmin)) {
    $query= db_select('node','n');
    $query->join('users','u','u.uid=n.uid');
    $query->fields('n', array('nid'));
    $query->condition('u.uid', $uid, '=');
    $query->condition('n.status',0,'>');
    $query->condition('n.type','organization','!=');
    $getUserNode = $query->execute()->fetchCol();   
    if(!empty($getUserNode)) {
      foreach($getUserNode as $dataId) {
        $nodeDetails = node_load($dataId);
        $nodeDetails->uid = $companyAdmin;
        node_save($nodeDetails);
      }
    }
  }
    og_ungroup('node', $companyNid, 'user', $user->uid);
    if(!empty($app)){
        return 1;
    }
  }
}

/*
 * Function to get company admin by company nid
 */
 
function _get_company_admin_list($companyNid, $app = '') {
    if(!empty($companyNid) && is_numeric($companyNid)) {
        $companyAdminArr =  _get_company_users_by_og_roles($companyNid,'company admin');
        $adminData = array();
        foreach($companyAdminArr as $userIds) {
            $userName = _get_user_mail_realname_by_uid($userIds);
            $adminData[$userIds] = $userName['realname'];
        }
        if(!empty($app)){
            return $adminData;
        }
        drupal_json_output($adminData);
        drupal_exit(0);
    }
    else {
        drupal_json_output(0);
        drupal_exit(0);
    }
} 

/**
 * mymodule node add modal callback
 */
function m6connect_node_add_modal_callback($js = FALSE) {
    global $user;
// If people aren't using javascript, then I just boot em. sorry. its 2011.
    if (!$js)
        return "Javascript required";

// Include your ctools crap here
//ctools_include('node.pages', 'node', '');
// Include your ctools crap here
// ctools_include('invite.controller', 'invite');
    ctools_include('modal');
    ctools_include('ajax');

// Create a blank node object here. You can also set values for your custom fields here as well.

    $form_state = array(
        'title' => t('Companies'),
        'ajax' => TRUE,
    );

// change this to your type node form
    $output = ctools_modal_form_wrapper('invite_form', $form_state);

// This means the form has been exectued
    if (!empty($form_state['executed'])) {
        $output = array();
// Close the modal
        $output[] = ctools_modal_command_dismiss();
        $output[] = ctools_ajax_command_redirect('user/register');
// I use this method a lot on pages that have views, so what I do is get the latest view content
// with the latest node and replace the current view. magic!
    }


    print ajax_render($output);
    exit;
}

/*

 * 
 *  */

function custom_user_register_form_after_build($form, &$form_state) {
    /* drupal_add_js('jQuery(document).ready(function(){ jQuery("#edit_field_user_company_und_chosen").before(`<div><span>Please select your company. If you are registering your company for the first time, then enter your company name. However, if your company has already registered for M6Connect, please select that company name. Once you complete the registration process, your request will be sent to M6Connect and you will be provided access withing 24 hours.</span></div>`); });', 'inline'); */
    //drupal_add_js('jQuery(document).ready(function(){ jQuery("#edit_field_user_company_und_chosen").before(`<div><span>Select your company from the dropdown, or register your company by select None.</span></div>`); });', 'inline');

    drupal_add_js('jQuery(document).ready(function(){ if(!(jQuery(".field-name-field-user-company .user-company-text").length)){ jQuery("#edit_field_user_company_und_chosen").before(`<div class="user-company-text"><span>Select your company from the dropdown, or register your company by select None.</span></div>`);}});', 'inline');

    return $form;
}

function custom_m6id_validte_callback(&$form, &$form_state) {
    //pre($form_state,1);
    $cuid = arg(1);
    $fieldd = '';
    if (isset($form_state['input']['field_m6id']['und']) && isset($form_state['input']['field_m6id']['und'][0]['value']) && !empty($form_state['input']['field_m6id']['und'][0]['value'])) {
        $fieldd = $form_state['input']['field_m6id']['und'][0]['value'];
    }
    if (!empty($fieldd)) {
        $result = db_select('field_data_field_m6id', 'fdfm6id')
                ->fields('fdfm6id')
                ->condition('field_m6id_value', $fieldd, '=')
                ->execute()
                ->fetchAll();
        $hasvalueindb = 1;
        $userid = 0;
        if ($result && is_array($result) && !empty($result)) {
            foreach ($result as $i => $v) {
                $userid = $v->entity_id;
                $hasvalueindb = 2;
            }
        }
        $m6idvalue_data = $form_state['input']['field_m6id']['und'][0]['value'];

        $randomnumm = preg_replace("/[^0-9]/", "", $form_state['input']['field_m6id']['und'][0]['value']);

        $randoalphaba = preg_replace("/[^a-z]/", "", $form_state['input']['field_m6id']['und'][0]['value']);

        $randoalphabb = preg_replace("/[^A-Z]/", "", $form_state['input']['field_m6id']['und'][0]['value']);

        $randspi = preg_match('/[\'\/~`\!@#\$%\^&\*\(\)_\-\+=\{\}\[\]\|;:"\<\>,\.\?\\\]//', $m6idvalue_data);

        if ($randoalphaba != '') {
            form_set_error('', t('M6ID is invaild, Please use Capital Letter.'));
        }

        if ($randoalphabb == '') {
            form_set_error('', t('M6ID is invaild, Please use Capital Letter'));
        }

        if ($randomnumm == '') {
            form_set_error('', t('M6ID is invaild, Please use Numeric Number'));
        }

        if ($randspi != '') {
            form_set_error('', t('M6ID is invaild, Do not use special characters'));
        }

        if (preg_match("/\\s/", $m6idvalue_data)) {
            form_set_error('', t('M6ID is invaild, minimum length is 9 characters, Do not use space'));
        }

        if ($hasvalueindb == 2 && $cuid != $userid) {
            form_set_error('', t('M6ID is invaild'));
        }

        if (strlen(trim($form_state['input']['field_m6id']['und'][0]['value'])) < 9) {
            form_set_error('', t('M6ID is invaild, minimum length is 9 characters'));
        }
    } else {
        form_set_error('', t('Please Fill M6ID'));
    }
}

/*
 * Implemenatation of hook_form_alter
 */

//************************ user registration step start*****************************************

function m6connect_misc_form_user_register_form_alter(&$form, &$form_state) {    
    drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/tooltip.js');
    drupal_add_js('jQuery(document).ready(function () { jQuery(\'[data-toggle="tooltip"]\').tooltip() });', 'inline');
    $form['field_phone']['und'][0]['value']['#attributes']['placeholder'] = '(000) 000-0000';
    $form['field_confirm_your_email_address']['und'][0]['email']['#attributes']['placeholder'] = 'Personal email address';
    $form['account']['mail']['#attributes']['placeholder'] = 'Personal email address';

    $form['account']['mail']['#attributes']['title'] = 'It is recommended that you do not use a company email address. This email address remains your default M6Connect login for the life of your account.';

    $form['account']['mail']['#attributes']['title'] = 'It is recommended that you do not use a company email address. This email address remains your default M6Connect login for the life of your account.';

    $form['account']['mail']['#attributes']['data-toggle'] = 'tooltip';
    $form['account']['mail']['#attributes']['data-placement'] = 'right';



    $form['account']['mail']['#title_display'] = 'invisible';
    $form['account']['mail']['#prefix'] = '<div class="register-mail-section"><div class="register-label"><label>Create Your Login</label> <span class="form-required" title="This field is required.">*</span></div>';
    $form['account']['mail']['#suffix'] = '</div>';

    $form['actions']['submit']['#value'] = 'Create New Account';
    $form['#after_build'][] = 'custom_registration_form_after_build';
    $form['#validate'][] = 'mail_confirmation_validation_handler';    
    if(isset($_REQUEST['invited']) && is_numeric($_REQUEST['invited']))
    {
        $form['invited'] = array('#type' => 'value', '#value' => $_REQUEST['invited']);
    }  
    if(!empty(arg(3)) && is_numeric(arg(3))){
        $alertDetailId = arg(3);
        $groupDetailData = get_one_alert_group_detail($alertDetailId);
        if(!empty($groupDetailData)){
            $form['field_first_name']['und'][0]['value']['#default_value'] = $groupDetailData['fname'];
            $form['field_last_name']['und'][0]['value']['#default_value'] = $groupDetailData['lname'];
            $form['field_phone']['und'][0]['value']['#default_value'] = $groupDetailData['phone'];
            $form['account']['mail']['#default_value'] = $groupDetailData['email'];
            $form['field_confirm_your_email_address']['und'][0]['email']['#default_value'] = $groupDetailData['email'];
        }
    }  
}

function mail_confirmation_validation_handler(&$form, &$form_state) {
    $values = $form_state['values'];
    if (strtolower($values['mail']) != strtolower($values['field_confirm_your_email_address']['und'][0]['email'])) {
        form_set_error('field_confirm_your_email_address', 'The email addresses must match.');
    }
}

function custom_registration_form_after_build(&$form, &$form_state) {
    $form['field_date_of_birth']['und'][0]['value']['month']['#options'][''] = 'Month';
    $form['field_date_of_birth']['und'][0]['value']['day']['#options'][''] = 'Day';
    $form['field_date_of_birth']['und'][0]['value']['year']['#options'][''] = 'Year';
    return $form;
}

function add_new_organization_mail_callback($form, &$form_state) {
    $commands = array();
    //$commands = ajax_command_css('.register-company-prefix', array('display'=>'block'));
    return array('#type' => 'ajax', '#commands' => $commands);
}

function registration_form_user_register_after_build(&$form, &$form_state) {
    if ($form_state['step'] != 1) {
        $form['timezone']['#access'] = FALSE;
        //pre($form_state,1);
    }
    return $form;
}

//step 1
function mymodule_registration_register_alter_page_one(&$form, &$form_state) {
    $form_state['step'] = 1;
    $form['account']['name']['#default_value'] = !empty($form_state['values']['name']) ? $form_state['values']['name'] : '';

    $form['field_first_name']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_first_name']['und'][0]['value']) ? $form_state['values']['field_first_name']['und'][0]['value'] : '';

    $form['field_last_name']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_last_name']['und'][0]['value']) ? $form_state['values']['field_last_name']['und'][0]['value'] : '';

    $form['field_middle_name']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_middle_name']['und'][0]['value']) ? $form_state['values']['field_middle_name']['und'][0]['value'] : '';

    $form['field_user_profile_photo']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_user_profile_photo']['und'][0]['value']['#default_value']) ? $form_state['values']['field_user_profile_photo']['und'][0]['value']['#default_value'] : '';

    $form['field_user_profile_cover_img']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_user_profile_cover_img']['und'][0]['value']['#default_value']) ? $form_state['values']['field_user_profile_cover_img']['und'][0]['value']['#default_value'] : '';

    $form['field_phone']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_phone']['und'][0]['value']) ? $form_state['values']['field_phone']['und'][0]['value'] : '';

    $form['field_service_agreement']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_service_agreement']['und'][0]['value']);

    $form['account']['name']['#description'] = t('');
    $form['account']['mail']['#default_value'] = !empty($form_state['values']['mail']) ? $form_state['values']['mail'] : '';
    $form['account']['mail']['#description'] = t('A valid e-mail address. All notifications from this system will use this address.');

    $form['field_select_account_type']['#access'] = FALSE;
    $form['field_user_company']['#access'] = FALSE;
    $form['field_add_new_company']['#access'] = FALSE;
    // unset($form['field_user_company']);
    // unset($form['field_add_new_company']);

    drupal_add_js(' jQuery(document).ready(function(){  jQuery("#user-register-form .form-submit").click(function (event) {
    var checked = jQuery(".field-name-field-service-agreement input[type=\'checkbox\']").is(\':checked\');
    if(!checked) {
    jQuery(".form-item-field-service-agreement-und").before(\'<div class="cust-term-cond-error" style="color:red;">You must select that you agree with the Service Agreement before accessing the system</div>\');
    event.preventDefault(); 
  }
  });
  });
    ', 'inline');


    $form['actions']['next'] = array(
        '#type' => 'submit',
        '#value' => 'Next',
        '#submit' => array('mymodule_registration_register_next'),
    );
    unset($form['actions']['submit']);
    //$form['actions']['submit']['#access'] = FALSE;
}

// Step 2
function mymodule_registration_register_alter_page_two(&$form, &$form_state) {
    $form['account']['name']['#default_value'] = !empty($form_state['values']['name']) ? $form_state['values']['name'] : '';

    $form['field_first_name']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_first_name']['und'][0]['value']) ? $form_state['values']['field_first_name']['und'][0]['value'] : '';

    $form['field_last_name']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_last_name']['und'][0]['value']) ? $form_state['values']['field_last_name']['und'][0]['value'] : '';

    $form['field_middle_name']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_middle_name']['und'][0]['value']) ? $form_state['values']['field_middle_name']['und'][0]['value'] : '';

    $form['field_user_profile_photo']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_user_profile_photo']['und'][0]['value']['#default_value']) ? $form_state['values']['field_user_profile_photo']['und'][0]['value']['#default_value'] : '';

    $form['field_user_profile_cover_img']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_user_profile_cover_img']['und'][0]['value']['#default_value']) ? $form_state['values']['field_user_profile_cover_img']['und'][0]['value']['#default_value'] : '';

    $form['field_phone']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_phone']['und'][0]['value']) ? $form_state['values']['field_phone']['und'][0]['value'] : '';

    $form['field_service_agreement']['und'][0]['value']['#default_value'] = !empty($form_state['values']['field_service_agreement']['und'][0]['value']) ? $form_state['values']['field_service_agreement']['und'][0]['value'] : '';

    $form['account']['mail']['#default_value'] = !empty($form_state['values']['mail']) ? $form_state['values']['mail'] : '';
    $form['account']['mail']['#description'] = t('A valid e-mail address. All notifications from this system will use this address.');

    $form['account']['pass']['#default_value'] = !empty($form_state['values']['pass']) ? $form_state['values']['pass'] : '';
    $form['account']['pass']['#value'] = !empty($form_state['values']['pass']) ? $form_state['values']['pass'] : '';
    $form['account']['pass']['#type'] = 'hidden';
    $form['account']['pass']['#access'] = FALSE;

    $form['account']['name']['#access'] = FALSE;
    $form['account']['mail']['#access'] = FALSE;
    $form['field_first_name']['#access'] = FALSE;
    $form['field_middle_name']['#access'] = FALSE;
    $form['field_last_name']['#access'] = FALSE;
    $form['field_user_profile_photo']['#access'] = FALSE;
    $form['field_user_profile_cover_img']['#access'] = FALSE;
    $form['field_phone']['#access'] = FALSE;
    $form['field_service_agreement']['#access'] = FALSE;

    if (isset($form['field_select_account_type']['und']) && !empty($form['field_select_account_type']['und']['#options']['_none'])) {
        unset($form['field_select_account_type']['und']['#options']['_none']);
    }

    $form['actions']['back'] = array(
        '#type' => 'submit',
        '#value' => t('Back'),
        '#submit' => array('mymodule_registration_register_back'),
        '#limit_validation_errors' => array(),
    );

    //$form['actions']['submit']['#access'] = TRUE;
    $form['actions']['submit']['#weight'] = 100;
    $form['actions']['submit']['#value'] = t('Submit');
    //$form['#submit'][] = 'user_register_submit';
}

function mymodule_registration_register_next($form, &$form_state) {
    $form_state['page_values'][1] = $form_state['values'];
    $form_state['step'] = 2;
    $form_state['rebuild'] = TRUE;
}

function mymodule_registration_register_back($form, &$form_state) {

    $form_state['values'] = $form_state['page_values'][1];
    $form_state['step'] = 1;
    $form_state['rebuild'] = TRUE;
}

//************************ user registration step end*****************************************
//********************** Custom registratio second step form start ********************************* 
function custom_registration_step_form($form, &$form_state) {
    $nodes = array();
    //$select = db_query('SELECT n.nid, n.title, n.created, n.type FROM {node} n WHERE  n.status = 1 AND n.type = :type ORDER BY n.created DESC', array(':type' => 'organization'));
    $type = array('organization');
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    $query->condition('type', $type, 'IN');
    //************************** Start (Not Show Company When they are Inctive) **************************/
    $ic_or = db_or();
    $query->leftJoin('field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid');
    $ic_or->condition('ic.field_company_inactive_value', 1, '!=')->condition('ic.field_company_inactive_value', NULL);
    $query->condition($ic_or);
    //*************************** End (Not Show Company When they are Inctive) ***************************/
    //************************** Start (Show Company When show company active) **************************/
    $query->leftJoin('field_data_field_show_company_in_search', 'isa', 'isa.entity_id = n.nid');
    $query->condition('isa.field_show_company_in_search_value', 1, '=');
    //*************************** End (Show Company When show company active) ***************************/
    //************************** Start (Not Show Company When they are not company type) **************************/
    $query->leftJoin('field_data_field_type_of_company', 'tc', 'tc.entity_id = n.nid');
    $query->condition('tc.field_type_of_company_value', 'company', '=');
    $result = $query->execute();
    $companys_lists = array();
    while ($record = $result->fetchAssoc()) {
        $companys_lists[$record['nid']] = $record['title'];
    }


    $active = array('new' => t('Create an Organization'), 'company' => t('Join an Organization'));
    $form['post-select-account-type'] = array(
        '#type' => 'radios',
        '#title' => t('Select Account Type'),
        '#options' => $active,
        '#required' => TRUE,
    );

    $form['post-create-company'] = array(
        '#type' => 'textfield',
        '#title' => t('Company Name'),
        '#size' => 60,
        '#states' => array('visible' => array(':input[name="post-select-account-type"]' => array('value' => 'new'),),),
    );

    $form['post-your-company-name'] = array(
        '#type' => 'select',
        '#title' => t('Your Company Name'),
        '#empty_option' => 'Select Organization',
        '#options' => $companys_lists,
        '#states' => array('visible' => array(':input[name="post-select-account-type"]' => array('value' => 'company'),),),
            //'#description' => t('Select your company from the dropdown, or register your company by leaving it blank.'),
    );

    $form['post-registration-step-submit'] = array('#type' => 'submit', '#value' => t('Submit'));

    return $form;
}

function custom_registration_step_form_submit(&$form, &$form_state) {
    global $user;
    if ($form_state['values']['post-select-account-type'] == 'new') {
        drupal_goto('node/add/organization');
    } else {
        if ($form_state['values']['post-your-company-name']) {
            $account = user_load($user->uid);
            $edit['field_user_company']['und'][0]['target_id'] = $form_state['values']['post-your-company-name'];
            user_save($account, $edit);
            $_SESSION['non_company_popup'] = 1;
            drupal_goto('');
        }
    }
}

//********************** Custom registratio second step form end ********************************* 


/*
 * Implemenatation of hook_form_alter
 */
function m6connect_misc_close_form(&$form, &$form_state) {
    //pre($form_state,1);
    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
        $form_state['rebuild'] = TRUE;
    }
}

function m6connect_misc_statuses_delete($status) {
    return ctools_ajax_command_redirect($_GET['destination']);
}

function custom_organization_after_build($form, &$form_state) {
    global $remove_company_tab;
    if ((!empty($form['field_organization_type']['und']['#value'])) && ($form['field_organization_type']['und']['#value'][0] == 'governmental') || ($form['field_organization_type']['und']['#value'][0] == 'religious') || ($form['field_organization_type']['und']['#value'][0] == 'educational')) {

        $remove_company_tab = 1;
        if ($form_state['storage']['step'] == 'step_co_location') {
            $form['actions']['next']['#access'] = FALSE;
            $form['actions']['skip']['#access'] = FALSE;
        } else {

            $form['actions']['next']['#access'] = TRUE;
            $form['actions']['skip']['#access'] = TRUE;
        }
    }
    return $form;
}

function m6connect_misc_form_alter(&$form, &$form_state, $form_id) { //pre($form_id);
    global $user;
    //fbss_comments_delete
//kpr($form_id);
    if ($form_id == 'join_new_organization_form') {
        //drup_msg($form);  
    }
    ctools_include('ajax');
    ctools_include('modal');
    if (strpos($form_id, '947')) {
//        drupal_set_message('<pre>'.print_r($form_state,1).'</pre>');
        //$form['#submit'][] = 'm6connect_misc_cart_submit';
    }
    switch ($form_id) {
        case "statuses_box":
            $type = $form_state['values']['type'];
            if ($type == 'og') {
//                if ($form_state['submitted']) {            
//                    $commands[] = ajax_command_html('#cutom_statuses_stream_div', views_embed_view('cutom_statuses_stream', 'block_1', $company->nid));
//                    print ajax_render($commands);
//                }
            }
            break;
        case "_statuses_delete":
            $form['confirm']['#submit'][] = 'm6connect_misc_close_form';
            $form['back']['#submit'][] = 'm6connect_misc_close_form';
            if ($form_state['submitted']) {
                $commands = array();
                $commands[] = ctools_modal_command_dismiss();
                if ($form_state['values']['op'] == 'Confirm' && isset($form_state['values']['status-sid']) && is_numeric($form_state['values']['status-sid'])) {
                    $status_sid = $form_state['values']['status-sid'];
                    $commands[] = ajax_command_remove('#statuses-item-' . $status_sid);
                }
                //$commands[] = ctools_ajax_command_redirect('');
                print ajax_render($commands);
                exit;
            }
            break;
        case "fbss_comments_delete":
            $form['confirm']['#submit'][] = 'm6connect_misc_close_form';
            $form['back']['#submit'][] = 'm6connect_misc_close_form';
            if ($form_state['submitted']) {
                $msg = theme('status_messages');
                $commands = array();
                $commands[] = ctools_modal_command_dismiss();
                if ($form_state['values']['op'] == 'Confirm' && isset($form_state['build_info']['args'][0]->sid) && isset($form_state['build_info']['args'][0]->cid)) {
                    $comments = fbss_comments_get_comments($form_state['build_info']['args'][0]->sid, TRUE);
                    $commenthtml = theme('fbss_comments_items', array('comments' => $comments, 'delay_load' => TRUE, 'destination' => ''));
                    $commands[] = ajax_command_html('.fbss-comments-replace-' . $form_state['build_info']['args'][0]->sid . ' .fbss-comments', $commenthtml);
                    $commands[] = array("command" => 'add_from_elements_fb', 'selector' => '#block-statuses-statuses');
                    $commands[] = ajax_command_html('.comment-count-' . $form_state['build_info']['args'][0]->sid, count($comments));
                }
                print ajax_render($commands);
                exit;
            }
            break;
        case "groups_node_form":
            module_load_include('inc', 'node', 'node.pages');
            $form['group_access']['und']['#type'] = 'hidden';
            if (current_path() == 'add/group/public') {
                $form['field_banner_image']['#access'] = FALSE;
                $form['body']['#access'] = FALSE;
                $form['group_access']['und']['#default_value'] = '0';
            } else if (current_path() == 'add/group/private') {
                $form['field_banner_image']['#access'] = FALSE;
                $form['body']['#access'] = FALSE;
                $form['group_access']['und']['#default_value'] = '1';
            }
            if (strpos(current_path(), 'edit/groups') !== false) {
                $form['actions']['delete']['#access'] = false;
                switch (arg(3)) {
                    case 'name':
                        $form['field_banner_image']['#access'] = FALSE;
                        $form['body']['#access'] = FALSE;
                        $form['field_keywords']['#access'] = FALSE;
                        $form['group_access']['und']['#default_value'] = '0';
                        break;
                    case 'description':
                        $form['field_banner_image']['#access'] = FALSE;
                        $form['field_keywords']['#access'] = FALSE;
                        $form['title']['#access'] = FALSE;
                        $form['group_access']['und']['#default_value'] = '0';
                        break;
                    case 'keywords':
                        $form['field_banner_image']['#access'] = FALSE;
                        $form['body']['#access'] = FALSE;
                        $form['title']['#access'] = FALSE;
                        $form['group_access']['und']['#default_value'] = '0';
                        break;
                }
            }
            $form['actions']['submit']['#submit'][] = 'custom_group_group_node_form_submit';
            $commands = array();
            if ($form_state['submitted'] && (current_path() == 'add/group/public' || current_path() == 'add/group/private')) {
                $commands[] = ctools_modal_command_dismiss();
                //$commands[] = ctools_ajax_command_redirect('');
                if (current_path() == 'add/group/public') {
                    $commands[] = ajax_command_html('#public_groups', views_embed_view('copy_group_list', 'block_1'));
                } else if (current_path() == 'add/group/private') {
                    $commands[] = ajax_command_html('#private_groups', views_embed_view('copy_group_list', 'block_2'));
                }

                print ajax_render($commands);
                exit;
            }
            /*
              $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
              $form_state['ajax_commands'][] = ctools_ajax_command_reload();
             *              */
            break;
        case "user_register_form":        
            if (isset($_REQUEST['request-id']) && $_REQUEST['request-id'] && is_numeric($_REQUEST['request-id'])) {
                if (isset($form['field_user_company']['und']['#options'][$_REQUEST['request-id']])) {
                    $form['field_user_company']['und']['#default_value'] = $_REQUEST['request-id'];
                }       
            }
      if(isset($_REQUEST['request-id'],$_REQUEST['invitejoinrequesterfrom'],$_REQUEST['invitejoinrequesterto']) && !empty($_REQUEST['request-id'])&& !empty($_REQUEST['invitejoinrequesterto']) && !empty($_REQUEST['invitejoinrequesterfrom']) && is_numeric($_REQUEST['invitejoinrequesterfrom'])){
        $InviteJoinCom = array();
        $InviteJoinCom['request-id'] = $_REQUEST['request-id'];       
        $InviteJoinCom['invitejoinrequesterfrom'] = $_REQUEST['invitejoinrequesterfrom'];
        $InviteJoinCom['invitejoinrequesterto'] = $_REQUEST['invitejoinrequesterto'];
        variable_set('invitejoinsignup',$InviteJoinCom);                
      }
      else{
        $InviteJoinCom = array();
        variable_set('invitejoinsignup',$InviteJoinCom);
      }

            // Checking vendor manager URL queries.
            if (!empty($_REQUEST['vendor_nid']) && !empty($_REQUEST['vendor_uid'])) {
              if (isset($_SESSION['vendor_register'])) {
                unset($_SESSION['vendor_register']);
              }
              $_SESSION['vendor_register'] = array(
                'vendor_nid' => $_REQUEST['vendor_nid'],
                'vendor_uid' => $_REQUEST['vendor_uid'],
              );
            }

            if (!empty($_REQUEST['vendor']) && !empty($_REQUEST['cnid'])) {
              if (isset($_SESSION['vendor_register'])) {
                unset($_SESSION['vendor_register']);
              }
              $_SESSION['vendor_register'] = array(
                'cnid' => $_REQUEST['cnid'],
              );
            }
            
            $form['#submit'][] = 'user_custom_register_submit';
            $form['#submit'][] = 'user_custom_redirect_handler';
            $form['#submit'][] = 'vendor_custom_redirect_handler'; // User's invited using vendor manager.
            $form['#after_build'][] = 'custom_user_register_form_after_build';
            $form['field_user_company']['und']['#attributes']['class'][] = 'add-existing-company-field';
            if (isset($form['field_user_company']['und']['#options'])) {
                //$form['field_user_company']['und']['#options']['_none'] = 'Add Your Company';
                /* $options = $form['field_user_company']['und']['#options'];
                  unset($options['_none']);
                  $query = db_select('node', 'n');
                  $query->leftJoin('field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid');
                  $query->fields('n', array('nid'))->condition('ic.field_company_inactive_value', 1,'=')->condition('n.nid', array_keys($options),'IN');
                  $result = $query->execute()->fetchCol();
                  if($result && !empty($result)){
                  foreach($result as $delta => $inactiveCmpNid){
                  unset($form['field_user_company']['und']['#options'][$inactiveCmpNid]);
                  }
                  } */
            }

            $form['og_group_ref']['und'][0]['default']['#multiple'] = 0;
            $form['og_group_ref']['und'][0]['default']['#title'] = 'Company';

//            drupal_add_js('jQuery(document).ready(function(){ jQuery("#edit_field_user_company_und_chosen").before(`<div><span>Please select your company. If you are registering your company for the first time, then enter your company name. However, if your company has already registered for M6Connect, please select that company name. Once you complete the registration process, your request will be sent to M6Connect and you will be provided access withing 24 hours.</span></div>`); });', 'inline');
            break;

        case "user_profile_form":
            //pre($form,1);
            //drupal_set_title('My Account');
            $user_data_value = menu_get_object('user', 1);

            if (isset($user_data_value->roles[15]) && !isset($user_data_value->roles[16])) {
                $form['display_m6id'] = array(
                    '#markup' => '<div class="custom-field-display-m6id" id="edit-custom-display-m6id">
                <label>M6ID 
                </label> : '
                    . $user_data_value->field_m6id['und'][0]['value'] .
                    '</div>',
                );
            }

            if (isset($user_data_value->roles[16])) {

                $form['#validate'][] = 'custom_m6id_validte_callback';
            }
            /* if (isset($user_data_value->roles[16])) {
              $m6idkey = $user_data_value->field_m6id['und'][0]['value'];
              $m6id_values = db_select('field_data_field_m6id', 'fdfm6id')
              ->fields('fdfm6id')
              ->condition('field_m6id_value', $m6idke)
              ->execute()
              ->fetchAll();

              if($m6idkey != '444'){
              form_set_error('', t('M6ID is invaild'));
              echo '<pre>';
              print_r($m6id_values);
              die();
              }

              } */

            /* if ($current_menu_item['path'] == 'user/reset/%/%/%') {
              return;
              } */



            unset($form['account']['current_pass']['#description']);
            unset($form['account']['mail']['#description']);
            unset($form['account']['pass']['#description']);
            unset($form['account']['field_select_account_type']);
            $form['account']['mail']['#title'] = 'Personal E-mail address';
      $form['field_address']['und'][0]['street_block']['thoroughfare']['#required'] = FALSE;

            $wording_profile_cover_img_resq = $form['field_user_profile_cover_img']['und'][0]['#description'];
            $wording_profile_photo_resq = $form['field_user_profile_photo']['und'][0]['#description'];

            $wording_profile_cover_img_resq_new = str_replace('Images must be exactly', 'Image must be of dimensions', $wording_profile_cover_img_resq);
            $form['field_user_profile_cover_img']['und'][0]['#description'] = $wording_profile_cover_img_resq_new;
            $wording_profile_photo_resq_new = str_replace('Images must be exactly', 'Image must be of dimensions', $wording_profile_photo_resq);
            $form['field_user_profile_photo']['und'][0]['#description'] = $wording_profile_photo_resq_new;
            
            if(isset($form['field_user_profile_photo']['und'][0])){
              $minimum_dimensions= $form['field_user_profile_photo']['und'][0]['#upload_validators']['file_validate_image_resolution'][1];
              $maximum_dimensions= $form['field_user_profile_photo']['und'][0]['#upload_validators']['file_validate_image_resolution'][0];
                if(!empty($minimum_dimensions) && !empty($maximum_dimensions)){
                  unset($form['field_user_profile_photo']['und'][0]['#upload_validators']['file_validate_image_resolution']);
                  $form['field_user_profile_photo']['und'][0]['#upload_validators']['file_validate_image_resolution_new'] = array($minimum_dimensions, $maximum_dimensions);
                }
            }
            
            if(isset($form['field_user_profile_cover_img']['und'][0])){
              $minimum_dimensions= $form['field_user_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution'][1];
              $maximum_dimensions= $form['field_user_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution'][0];
                if(!empty($minimum_dimensions) && !empty($maximum_dimensions)){
                  unset($form['field_user_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution']);
                  $form['field_user_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution_new'] = array($minimum_dimensions, $maximum_dimensions);
                }
            }

            if(arg(0)=='user' && is_numeric(arg(1)) && arg(2)== 'edit'){
        //$form['field_phone']['und'][0]['value']['#title'] = 'Phone Number';
      }    
        break;


        case "my_proposal_node_form":
//            $form['#groups']['group_submit_rfp']->lable = 'Submit Proposal For?';
//            kpr($form['#groups']['group_submit_rfp']->lable);
//            kpr($form_state);
//            kpr($form);
            break;

        case "organization_node_form":
            global $company_active_tab, $user, $remove_company_tab;
            $remove_company_tab = 0;
            $form['field_org_address']['und'][0]['street_block']['thoroughfare']['#required'] = TRUE;

            $form['#after_build'][] = 'custom_organization_after_build';

            // Disabling access of source and service fields.
            $form['field_source_']['#access'] = FALSE;
            $form['field_service']['#access'] = FALSE;
            $form['field_phone_verified']['#access'] = FALSE;
            $form['field_in_person_verified']['#access'] = FALSE;
            if (in_array('administrator', $user->roles)) {
                // If admin, then showing source and service fields.
                $form['field_source_']['#access'] = TRUE;
                $form['field_phone_verified']['#access'] = TRUE;
                $form['field_in_person_verified']['#access'] = TRUE;
            }
            if (array_key_exists(5, $user->roles) || array_key_exists(3, $user->roles)) {
                $form['field_service']['#access'] = TRUE;
            }

            $company_active_tab = $form_state['storage']['step'];
            if (isset($form_state['input']) && is_array($form_state['input']) && (isset($form_state['input']['next']) || isset($form_state['input']['previous']))) {
                $company_active_tab = $form_state['storage']['step'];
            } else if (isset($_REQUEST['costep']) && !empty($_REQUEST['costep'])) {
                $form_state['storage']['step'] = $company_active_tab = $_REQUEST['costep'];
            }
            drupal_add_css('#edit-skip {display:none;}', $option['type'] = 'inline');
            if (arg(0) == 'node' && arg(1) == 'add') {
                $acc = user_load($user->uid);
                $cmpNid = _get_user_company_nid();
                $selected_existing_co = _get_users_existing_co($user);
                if (!($cmpNid && is_numeric($cmpNid)) && !$selected_existing_co) {
                    if (isset($acc->field_add_new_company['und']) && !empty($acc->field_add_new_company['und'][0]['value'])) {
                        $newco = $acc->field_add_new_company['und'][0]['value'];
                        $form['title']['#default_value'] = $newco;
                    }
                }
                /*                 * **************** new company requirement work start **************** */
                //kpr($form);
                //$form['field_legal_name']['#required'] = FALSE; 
                //$form['field_legal_structure']['#required'] = FALSE;
                //unset($form['field_legal_name']['#required']);
                //unset($form['field_legal_structure']['#required']);
                if ($form_state['storage']['step'] == 'step_co_public_profile') {
                    $form['field_logo']['#access'] = FALSE;
                    $form['field_company_profile_cover_img']['#access'] = FALSE;
                    $form['actions']['custsave'] = array(
                        '#type' => 'submit',
                        '#value' => 'Submit',
                        '#weight' => 7,
                        '#submit' => array('node_form_submit', 'custom_company_node_add_submit'),
                    );
                }
                /*                 * **************** new company requirement work end ****************** */
            }

            /*  if ((arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit')) {
              if ($form_state['storage']['step'] == 'step_co_public_profile' && !isset($user->roles[3])) {
              //$form['#after_build'][]= 'check_submit_after_build';
              $form['actions']['custsave'] = array(
              '#type' => 'submit',
              '#value' => 'Save',
              //'#weight' => 7,
              '#submit' => array('node_form_submit'),
              );
              }
              } */




            if (arg(0) == 'node' && arg(2) == 'edit') {
                if (is_numeric(arg(1))) {
                    $org_node = node_load(arg(1));
                    if (count($org_node->field_main_location_grp) > 0 && $org_node->field_main_location_grp['und'][0]['target_id'] != '_none') {
//                        dsm($org_node);
//                        dsm($form['field_comp_locations']['und']['add_more']);
                        $form['field_comp_locations']['#access'] = FALSE;
                    }
                }
            }
// for strength indicator
//            if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
//                $cNodeId = arg(1);
//                $CompProfStrngth = get_company_strength($cNodeId);
//                $form['custstrngthwrap'] = array(
//                    '#type' => 'fieldset',
//                    '#title' => 'Company Profile Strength',
//                    '#prefix' => '<div id="customstrngthwrap" class="custstrngthwrap">',
//                    '#suffix' => '</div>',
//                    '#weight' => 0,
//                );
//                $form['#step_children']['custstrngthwrap'] = 'step_co_public_profile';
//                $form['custstrngthwrap']['strngthmarkup'] = array('#markup' => '<div class="cust-profile-indicator">
//        <div class="progress"><div class="progress-bar progress-bar-primary" role="progressbar" aria-valuemin="0" aria-valuemax="100" style="width:' . $CompProfStrngth . '%"> <span data-toggle="tooltip" data-original-title="' . $CompProfStrngth . '%">' . $CompProfStrngth . '%</span></div></div>
//        </div>');
//            }
            /* $form['#attached']['js'] = array(
              drupal_get_path('module', 'm6connect_misc') . '/m6connect.js',
              ); */

            $form['field_incorporated_country']['und']['#default_value'] = array('United States');
            $issessionarr = '';
            if (isset($_SESSION['CoDiversity_' . $user->uid])) {
                $issessionarr = $_SESSION['CoDiversity_' . $user->uid];
            }
            $doptions = $form['field_diversity_credentials']['und']['#options'];            
            $field_diversity_credentials_weight = $form['field_diversity_credentials']['#weight'];

            $fieldMapping = array();
            $credentialsMapping = array();
            $credentialsNids = array();
            $credentialsMappingDetail = array();
            if (empty($form_state['credentialsMapping'])) {
                $field = field_info_field('field_form_fields');
                $allowed_values = list_allowed_values($field);
                if (!empty($allowed_values)) {
                    foreach ($allowed_values as $diversityFieldsName => $diversityFieldsLabel) {
                        $fieldMapping[$diversityFieldsName] = array(
                            'field-info' => field_info_field($diversityFieldsName),
                            'field-instance' => field_info_instance('node', $diversityFieldsName, 'credentials')
                        );
                    }
                }
                $form_state['fieldMappingInstance'] = $fieldMapping;
            } else {
                $fieldMapping = $form_state['fieldMappingInstance'];
            }
            if (isset($form['#node']->field_dcrednid_22) && isset($form['#node']->field_dcrednid_22['und']) && !empty($form['#node']->field_dcrednid_22['und'])) {
                foreach ($form['#node']->field_dcrednid_22['und'] as $delta77 => $value77) {
                    $credentialsNids[] = $value77['target_id'];
                }
            }
            if (empty($form_state['credentialsMapping'])) {
                if (!empty($credentialsNids)) {
                    $credentialsNids = array_values($credentialsNids);
                    $query20 = db_select('node', 'n');
                    $query20->leftjoin('field_data_field_cred_for_diversity', 'fd', 'fd.entity_id=n.nid');
                    $query20->leftjoin('field_data_field_cred_start_date', 'sd', 'sd.entity_id=n.nid');
                    $query20->leftjoin('field_data_field_credential_end_date', 'ed', 'ed.entity_id=n.nid');
                    $query20->leftjoin('field_data_field_credential_comments', 'cc', 'cc.entity_id=n.nid');
                    $query20->leftjoin('field_data_field_accredited_by', 'ab', 'ab.entity_id=n.nid');
                    $query20->leftjoin('field_data_field_credential_doc', 'cd', 'cd.entity_id=n.nid');
                    $query20->leftjoin('file_managed', 'fm', 'fm.fid=cd.field_credential_doc_fid');
                    $query20->fields('n', array('nid'));
                    $query20->fields('fd', array('field_cred_for_diversity_target_id'));
                    $query20->fields('sd', array('field_cred_start_date_value'));
                    $query20->fields('ed', array('field_credential_end_date_value'));
                    $query20->fields('cc', array('field_credential_comments_value'));
                    $query20->fields('ab', array('field_accredited_by_value'));
                    $query20->fields('cd', array('field_credential_doc_fid'));
                    $query20->fields('fm', array('filename'));
                    $query20->condition('n.nid', $credentialsNids, 'IN');
                    $tempResult20 = $query20->execute()->fetchAll();
                    if ($tempResult20 && !empty($tempResult20)) {
                        foreach ($tempResult20 as $delta20 => $value20) {
                            $credentialsMapping[$value20->field_cred_for_diversity_target_id] = $value20->nid;
                            $credentialsMappingDetail[$value20->nid] = $value20;
                        }
                    }
                    $form_state['credentialsMapping'] = $credentialsMapping;
                    $form_state['credentialsMappingDetail'] = $credentialsMappingDetail;
                }
            } else {
                $credentialsMapping = $form_state['credentialsMapping'];
                $credentialsMappingDetail = $form_state['credentialsMappingDetail'];
            }
              


            foreach ($doptions as $k => $v) {
                $relatedcredNid = '';
                if (isset($credentialsMapping[$k])) {
                    $relatedcredNid = $credentialsMapping[$k];
                }
                $node = node_load($k);
                $wtitle = $node->title;
                $form['custwrap' . $k] = array(
                    '#type' => 'fieldset',
                    '#title' => $wtitle,
                    '#tree' => TRUE,
                    '#prefix' => '<div id="customwrap' . $k . '" class="custwrapcrd org-diversity-wrapper customwrapcrd_' . $k . '">',
                    '#suffix' => '</div>',
                    '#weight' => $field_diversity_credentials_weight + 1,
                );
                $form['#step_children']['custwrap' . $k] = 'step_co_supplier_diversity';
                $fields = field_get_items('node', $node, 'field_form_fields');
                foreach ($fields as $var => $val) {
                    $fieldname = $val['value'];
                    $finfo1 = $fieldMapping[$fieldname]['field-info'];
                    $finfo2 = $fieldMapping[$fieldname]['field-instance'];
                    $label = $finfo2['label'];
                    if ($finfo1['type'] == 'list_text') {
                        $defValue = '';
                        $fn = $fieldname . $k;
                        if (!empty($issessionarr) && isset($issessionarr[$fn]) && $issessionarr[$fn] != 'None') {
                            $defValue = $issessionarr[$fn];
                        } else if ($relatedcredNid && is_numeric($relatedcredNid)) {
                            //$defValue = get_field_value('list_text', $fieldname, $relatedcredNid);
                            $defValue = $credentialsMappingDetail[$relatedcredNid]->field_accredited_by_value;
                        }
                        $options = $finfo1['settings']['allowed_values'];
                        $form['custwrap' . $k][$fieldname . $k] = array(
                            '#type' => 'select',
                            '#title' => $label,
                            '#options' => $options,
                            '#parents' => array('diversity_credendial', $k, $fieldname),
                            '#default_value' => $defValue,
                            '#prefix' => '<div class="form-wrapper2">',
                                //'#suffix' => '</div>', //for grouping 3 box
                        );
                    }
                    if ($finfo1['type'] == 'datetime' || $finfo1['type'] == 'date' || $finfo1['type'] == 'datestamp') {
                        $defValue = '';
                        $fn = $fieldname . $k;
                        if (!empty($issessionarr) && isset($issessionarr[$fn]) && !empty($issessionarr[$fn])) {
                            $defValue = $issessionarr[$fn];
                        } else if ($relatedcredNid && is_numeric($relatedcredNid)) {
                            // $defValue = get_field_value('date', $fieldname, $relatedcredNid);
                            if ($fieldname == 'field_cred_start_date') {
                                $defValue = $credentialsMappingDetail[$relatedcredNid]->field_cred_start_date_value;
                            } else if ($fieldname == 'field_credential_end_date') {
                                $defValue = $credentialsMappingDetail[$relatedcredNid]->field_credential_end_date_value;
                            } else {
                                $defValue = '';
                            }
                        }
                        $dtstmp = !empty($defValue) ? strtotime($defValue) : '';

                        if ($fieldname == 'field_cred_start_date') {

                            $form['custwrap' . $k][$fieldname . $k] = array(
                                '#type' => 'date_popup',
                                '#title' => $label,
                                '#date_format' => 'm/d/Y',
                                '#parents' => array('diversity_credendial', $k, $fieldname),
                                    //'#default_value' => date('m/d/Y'),
                                    //'#default_value' => date('Y-m-d H:i:s', $dtstmp),
                                    //'#prefix' => '<div class="form-wrapper2 form-wrapper3">', //for grouping 3 box
                                    //'#suffix' => '</div>', //for grouping 3 box
                            );
                            if (!empty($dtstmp)) {
                                $form['custwrap' . $k][$fieldname . $k]['#default_value'] = date('Y-m-d H:i:s', $dtstmp);
                            }
                        } else if ($fieldname == 'field_credential_end_date') {
                            $form['custwrap' . $k][$fieldname . $k] = array(
                                '#type' => 'date_popup',
                                '#title' => $label,
                                '#date_format' => 'm/d/Y',
                                '#parents' => array('diversity_credendial', $k, $fieldname),
                                //'#default_value' => date('m/d/Y'),
                                //'#default_value' => date('Y-m-d H:i:s', $dtstmp),
                                //'#prefix' => '<div class="form-wrapper2 form-wrapper3">', //for grouping 3 box
                                '#suffix' => '</div>',
                            );
                            if (!empty($dtstmp)) {
                                $form['custwrap' . $k][$fieldname . $k]['#default_value'] = date('Y-m-d H:i:s', $dtstmp);
                            }
                        }
                    }

                    if ($finfo1['type'] == 'text_long') {
                        $defValue = '';
                        $fn = $fieldname . $k;
                        if (!empty($issessionarr) && isset($issessionarr[$fn]) && !empty($issessionarr[$fn])) {
                            $defValue = $issessionarr[$fn];
                        } else if ($relatedcredNid && is_numeric($relatedcredNid)) {
                            //$defValue = get_field_value('text_long', $fieldname, $relatedcredNid);
                            $defValue = $credentialsMappingDetail[$relatedcredNid]->field_credential_comments_value;
                        } //pre($defValue); 
                        $form['custwrap' . $k][$fieldname . $k] = array(
                            '#type' => 'textarea',
                            '#title' => $label,
                            '#default_value' => $defValue,
                            '#parents' => array('diversity_credendial', $k, $fieldname),
                            '#prefix' => '<div class="form-wrapper2 form-wrapper-comment">',
                            '#suffix' => '</div>',
                        );
                    }
                    if ($finfo1['type'] == 'file') {
                        $defValue = $defval = '';
                        $fn = $fieldname . $k;
                        if (!empty($issessionarr) && isset($issessionarr[$fn]) && !empty($issessionarr[$fn]) && $issessionarr[$fn] != 0) {
                            $defValue = $issessionarr[$fn];
                        } else if ($relatedcredNid && is_numeric($relatedcredNid)) {
                            //$defValue = get_field_value('file', $fieldname, $relatedcredNid);
                            $defValue = $credentialsMappingDetail[$relatedcredNid]->field_credential_doc_fid;
                        }

                        $form['custwrap' . $k]['markup2' . $k] = array('#markup' => '<div class="form-wrapper2 cust-file-mfiled">');

                        if (!empty($defValue)) {
                            //$file = file_load($defValue); 
                            //$filename = $file->filename;
                            $filename = $credentialsMappingDetail[$relatedcredNid]->filename;
                            $defval = '<img src="/modules/file/icons/text-plain.png" title="text/plain" alt="" class="file-icon">' . $filename;
                            $form['custwrap' . $k]['markup' . $k] = array('#markup' => $defval);
                        }

                        $fileext = $finfo2['settings']['file_extensions'];
                        $form['custwrap' . $k][$fieldname . $k] = array(
                            '#type' => 'managed_file',
                            '#title' => $label,
                            '#parents' => array('diversity_credendial', $k, $fieldname),
                            '#upload_location' => 'private://',
                            //'#description' => t('Allowed extensions: txt, doc, pdf, docx, jpg, jpeg, gif, png, bmp, xls, xlsx'),
                            '#upload_validators' => array(
                                'file_validate_extensions' => array($fileext),
                            // Pass the maximum file size in bytes
                            //'file_validate_size' => array(MAX_FILE_SIZE*1024*1024),
                            ),
                                //'#prefix' => '<div class="form-wrapper2"><div class="cust-fdef">'.$defval.'</div>',
                                //'#prefix' => '<div class="form-wrapper2">',
                                //'#suffix' => '</div>',
                        );
                        $form['custwrap' . $k]['markup3' . $k] = array('#markup' => '</div>');
                    }
                }
            }
////////////////////////////////////// Diversity Needs related fields work start //////////////////////////////////////////////////
////////////////////////////////////// Diversity Needs related fields work end ////////////////////////////////////////////////////
//pre('checked',1);
            /* $gnode = node_load(87);
              $glist = og_get_group_members_properties($gnode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
              //$glist = og_get_group_members_properties(87, array(), 'members__1', 'node');
              //http://drupal.stackexchange.com/questions/20165/how-to-programmatically-list-member-entities-of-an-organic-group
              print_r($glist); */

            /* if($form_state['storage']['step'] == 'step_co_supplier_diversity') {
              $form['actions']['next']['#submit'][] = 'cust_divrsity_step_sub';
              $form['actions']['previous']['#submit'][] = 'cust_divrsity_step_sub';
              } */

            $form['actions']['submit']['#value'] = t('Save');
            //unset($form['actions']['draft']);

            $form['#submit'][] = 'custom_company_form_submit';
//$form['actions']['submit']['#submit'][] ='custom_company_form_submit';
            $form['#validate'][] = 'custom_company_form_validate';
            $form['#after_build'][] = 'custom_save_form_after_build';
            //pre($form,1);
            //kpr($form);
            /*             * ***organization type default select of field_legal_structure start*** */


            if (isset($form_state['values']['field_organization_type']['und'][0]['value']) && $form_state['values']['field_organization_type']['und'][0]['value'] == 'governmental') {
                $form['field_legal_structure']['und']['#default_value'] = 'Other';
                $form['field_legal_structure']['#access'] = FALSE;
                $form['field_incorporated_country']['#access'] = FALSE;
                $form['field_incorporated_state']['#access'] = FALSE;
                $form['field_taxpayer_ssn_ein']['#access'] = FALSE;
                $form['field_duns_number']['#access'] = FALSE;
                $form['field_annual_revenue']['#access'] = FALSE;
                $form['field_year_founded']['#access'] = FALSE;
                $form['field_bondable_']['#access'] = FALSE;
                $form['field_bond_amount_per_project']['#access'] = FALSE;
                $form['field_total_bond_amount']['#access'] = FALSE;
                $form['field_average_annual_revenue_for']['#access'] = FALSE;
            } else if (isset($form_state['values']['field_organization_type']['und'][0]['value']) && $form_state['values']['field_organization_type']['und'][0]['value'] == 'religious') {
                $form['field_legal_structure']['und']['#default_value'] = 'Other';
                $form['field_legal_structure']['#access'] = FALSE;
                $form['field_incorporated_country']['#access'] = FALSE;
                $form['field_incorporated_state']['#access'] = FALSE;
                $form['field_taxpayer_ssn_ein']['#access'] = FALSE;
                $form['field_duns_number']['#access'] = FALSE;
                $form['field_annual_revenue']['#access'] = FALSE;
                $form['field_year_founded']['#access'] = FALSE;
                $form['field_bondable_']['#access'] = FALSE;
                $form['field_bond_amount_per_project']['#access'] = FALSE;
                $form['field_total_bond_amount']['#access'] = FALSE;
                $form['field_average_annual_revenue_for']['#access'] = FALSE;

                //$form['#steps']['step_co_supplier_diversity']->disabled = TRUE; 
                //$form[$field]['#access'] = FALSE;
                //$form['#steps']['step_co_location']['format_settings']['instance_settings']['buttons']['next']['#access']= FALSE;
                //$form['#steps']['step_co_supplier_diversity']['#access']= FALSE;
                //$form['#steps']['step_co_business_types']['#access']= FALSE;
            } else if (isset($form_state['values']['field_organization_type']['und'][0]['value']) && $form_state['values']['field_organization_type']['und'][0]['value'] == 'non-profit') {
                $form['field_legal_structure']['und']['#default_value'] = 'Non-Profit';
                $form['field_legal_structure']['#access'] = FALSE;
                $form['field_incorporated_country']['#access'] = FALSE;
                $form['field_incorporated_state']['#access'] = FALSE;
                $form['field_taxpayer_ssn_ein']['#access'] = FALSE;
                $form['field_duns_number']['#access'] = FALSE;
                $form['field_average_annual_revenue_for']['#access'] = FALSE;
            } else if (isset($form_state['values']['field_organization_type']['und'][0]['value']) && $form_state['values']['field_organization_type']['und'][0]['value'] == 'educational') {
                $form['field_legal_structure']['und']['#default_value'] = 'Other';
                $form['field_legal_structure']['#access'] = FALSE;
                $form['field_annual_revenue']['#access'] = FALSE;
            }

            /*             * ***organization type default select of field_legal_structure end*** */
            
                        
            /*if(isset($form['field_logo']['und'][0])){
              $minimum_dimensions= $form['field_logo']['und'][0]['#upload_validators']['file_validate_image_resolution'][1];
              $maximum_dimensions= $form['field_logo']['und'][0]['#upload_validators']['file_validate_image_resolution'][0];
                if(!empty($minimum_dimensions) && !empty($maximum_dimensions)){
                  unset($form['field_logo']['und'][0]['#upload_validators']['file_validate_image_resolution']);
                  $form['field_logo']['und'][0]['#upload_validators']['file_validate_image_resolution_new'] = array($minimum_dimensions, $maximum_dimensions);
                }
            }
            
            if(isset($form['field_company_profile_cover_img']['und'][0])){
              $minimum_dimensions= $form['field_company_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution'][1];
              $maximum_dimensions= $form['field_company_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution'][0];
                if(!empty($minimum_dimensions) && !empty($maximum_dimensions)){
                  unset($form['field_company_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution']);
                  $form['field_company_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution_new'] = array($minimum_dimensions, $maximum_dimensions);
                }
            }*/
            if(isset($form['field_logo']['und'][0])){
              $minimum_dimensions= $form['field_logo']['und'][0]['#upload_validators']['file_validate_image_resolution'][1];
              $maximum_dimensions= $form['field_logo']['und'][0]['#upload_validators']['file_validate_image_resolution'][0];
              
                if(!empty($minimum_dimensions) && !empty($maximum_dimensions)){
                  unset($form['field_logo']['und'][0]['#upload_validators']['file_validate_image_resolution']);
                  $form['field_logo']['und'][0]['#upload_validators']['file_validate_image_resolution_new'] = array($minimum_dimensions, $maximum_dimensions);
                }
            }
            
            if(isset($form['field_company_profile_cover_img']['und'][0])){
              $minimum_dimensions= $form['field_company_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution'][1];
              $maximum_dimensions= $form['field_company_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution'][0];
                if(!empty($minimum_dimensions) && !empty($maximum_dimensions)){
                  unset($form['field_company_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution']);
                  $form['field_company_profile_cover_img']['und'][0]['#upload_validators']['file_validate_image_resolution_new'] = array($minimum_dimensions, $maximum_dimensions);
                }
            }
            
            
            $wording_field_logo_resq = $form['field_logo']['und'][0]['#description'];
            $wording_company_profile_cover_img_resq = $form['field_company_profile_cover_img']['und'][0]['#description'];

            $wording_field_logo_resq_new = str_replace('Images must be exactly', 'Image must be of dimensions', $wording_field_logo_resq);
            $form['field_logo']['und'][0]['#description'] = $wording_field_logo_resq_new;
             $wording_company_profile_cover_img_resq_new = str_replace('Images must be exactly', 'Image must be of dimensions', $wording_company_profile_cover_img_resq);
            $form['field_company_profile_cover_img']['und'][0]['#description'] = $wording_company_profile_cover_img_resq_new;
            



            //*************working on locatin and business tab start *******************
      
        //kpr($form);
      
      $com_fcl = $form['field_company_locations']['und'];
      $items_count_first = '';
      foreach($com_fcl as $key=>$value){
        
              if(is_numeric($key)){
        $form['field_company_locations'][LANGUAGE_NONE][$key]['remove_button']['#access'] = FALSE;
          $form['field_company_business_location'][LANGUAGE_NONE][$key]['remove_button']['#access'] = FALSE;
        $form['field_company_locations']['und'][$key]['field_regions_only']['und']['#ajax'] = array(
                'event' => 'change',
                'callback' => 'custom_region_country_callback',
            'wrapper' => 'com-location-region',
            'method' => 'replace',
              );
        $LocRegionsOnly = $form['field_company_locations']['und'][$key]['field_regions_only']['und']['#default_value'][0];
        $FilterCountry = '';
        if($LocRegionsOnly == 78406){
          $FilterCountry = LocRegionsOnlyCountry('Africa');     
        }
        else if($LocRegionsOnly == 78517){
          $FilterCountry = LocRegionsOnlyCountry('AsiaPacificMiddleEast');
        }
        else if($LocRegionsOnly == 78570){
          $FilterCountry = LocRegionsOnlyCountry('Canada');
        }
        else if($LocRegionsOnly == 78685){        
          $FilterCountry = LocRegionsOnlyCountry('Europe');
        }
        else if($LocRegionsOnly == 78779){
          $FilterCountry = LocRegionsOnlyCountry('LatinAmericaCaribbean');
        }
        else if($LocRegionsOnly == 79052){
          $FilterCountry = LocRegionsOnlyCountry('Oceania');
        }
        else if($LocRegionsOnly == 79131){
          $FilterCountry = LocRegionsOnlyCountry('UnitedStates');
        }
        else{
          $FilterCountry = LocRegionsOnlyCountry();     
        }
        if(isset($_SESSION['custom_country_opt']) && !empty($_SESSION['custom_country_opt'])){
          $form['field_company_locations']['und'][$key]['field_location_address']['und'][0]['country']['#options'] = $FilterCountry;
        }else{
        $form['field_company_locations']['und'][$key]['field_location_address']['und'][0]['country']['#options'] = $FilterCountry;
        }
        
                $items_count_first++;
        }
      }     
      $items_count = $items_count_first;
      $form_theme = $form['field_company_business_location']['und']['#theme'];
      $form['field_company_business_location'][LANGUAGE_NONE][0]['remove_button']['#access'] = FALSE;
            $form['field_company_business_location'][LANGUAGE_NONE]['add_more']['#access'] = FALSE;
      $items = &$form_state['field']['field_company_business_location'][LANGUAGE_NONE];
      //drup_msg($items);
      if ($items_count > 1 and $items['items_count'] != $items_count) {
              $items['items_count'] = $items_count;
              $items['field']['cardinality'] = $items_count;
        $form['field_company_business_location'][LANGUAGE_NONE]['#theme'] = $form_theme;
              $form['field_company_business_location'][LANGUAGE_NONE] = field_multiple_value_form($items['field'], $items['instance'], LANGUAGE_NONE, array(), $form, $form_state);
            }
            for ($delta = 0; $delta < $items_count; $delta++) {
        $com_fcl_flti = $form['field_company_locations']['und'][$delta]['field_location_type_list']['und']['#default_value'][0];
        $com_fcl_fro = $form['field_company_locations']['und'][$delta]['field_regions_only']['und']['#default_value'][0];
        $com_fcl_fcln = $form['field_company_locations']['und'][$delta]['field_com_location_name']['und'][0]['value']['#default_value'];
        $form['field_company_business_location']['und'][$delta]['field_location_type_list']['und']['#default_value'] = $com_fcl_flti;
        $form['field_company_business_location']['und'][$delta]['field_regions_only']['und']['#default_value'] = $com_fcl_fro;
        $form['field_company_business_location']['und'][$delta]['field_com_location_name']['und'][0]['value']['#default_value'] = $com_fcl_fcln;
            }
      //*************working on locatin and business tab end *******************  

            break;
        case "project_node_form":
//$form['og_group_ref']['#prefix'] = '<div class="cust-invite-link">'.custom_user_invite_link(1).'</div>'; 
//$form['og_group_ref']['#prefix'] = '<div class="cust-invite-link"><a href="http://dev-m6connect.pantheon.io/sendinvite" rel="lightframe"><i class="glyphicon glyphicon-plus"></i> Invite Companies</a>';
//$form['og_group_ref']['#suffix'] = '<div class="cust-invite-link">Invite after</div>';
//$form_state['storage']['step'] = 'step_pro_supplier_diversity';
//global $project_active_tab;
//$project_active_tab = $form_state['storage']['step'];
            $js = "
jQuery('document').ready(function(){
jQuery('#field-public-description-add-more-wrapper .form-item-field-public-description-und-0-value label').after('<div class=\"descriptions\">'+jQuery('#field-public-description-add-more-wrapper .description').html()+'<div>');
jQuery('#field-public-description-add-more-wrapper .description').hide();
jQuery('#field-complete-description-add-more-wrapper .form-item-field-complete-description-und-0-value label').after('<div class=\"descriptions\">'+jQuery('#field-complete-description-add-more-wrapper .description').html()+'<div>');
jQuery('#field-complete-description-add-more-wrapper .description').hide();
});

";
            drupal_add_js($js, 'inline');


            $wording_field_images_resq = $form['field_images']['und'][0]['#description'];
            $wording_project_cover_image_resq = $form['field_project_cover_image']['und'][0]['#description'];           

            $wording_field_images_resq_new = str_replace('Images must be exactly', 'Image must be of dimension', $wording_field_images_resq);
            $form['field_images']['und'][0]['#description'] = $wording_field_images_resq_new;
            $wording_project_cover_image_resq_new = str_replace('Images must be exactly', 'Image must be of dimensions', $wording_project_cover_image_resq);
            $form['field_project_cover_image']['und'][0]['#description'] = $wording_project_cover_image_resq_new;
            
            if(isset($form['field_images']['und'][0])){
              $minimum_dimensions= $form['field_images']['und'][0]['#upload_validators']['file_validate_image_resolution'][1];
              $maximum_dimensions= $form['field_images']['und'][0]['#upload_validators']['file_validate_image_resolution'][0];
                if(!empty($minimum_dimensions) && !empty($maximum_dimensions)){
                  unset($form['field_images']['und'][0]['#upload_validators']['file_validate_image_resolution']);
                  $form['field_images']['und'][0]['#upload_validators']['file_validate_image_resolution_new'] = array($minimum_dimensions, $maximum_dimensions);
                }
            }
            
            if(isset($form['field_project_cover_image']['und'][0])){
              $minimum_dimensions= $form['field_project_cover_image']['und'][0]['#upload_validators']['file_validate_image_resolution'][1];
              $maximum_dimensions= $form['field_project_cover_image']['und'][0]['#upload_validators']['file_validate_image_resolution'][0];
                if(!empty($minimum_dimensions) && !empty($maximum_dimensions)){
                  unset($form['field_project_cover_image']['und'][0]['#upload_validators']['file_validate_image_resolution']);
                  $form['field_project_cover_image']['und'][0]['#upload_validators']['file_validate_image_resolution_new'] = array($minimum_dimensions, $maximum_dimensions);
                }
            }
            
            
            

            break;
        case "rfp_node_form":
//global $rfp_active_tab;
//$rfp_active_tab = $form_state['storage']['step'];
            $form['#attached']['js'] = array(
                drupal_get_path('module', 'm6connect_misc') . '/m6connect.js',
            );
            
            $wording_field_rfp_logo = $form['field_rfp_logo']['und'][0]['#description'];
            $wording_field_rfp_logo_new = str_replace('Images must be exactly', 'Image must be of dimensions', $wording_field_rfp_logo);
            $form['field_rfp_logo']['und'][0]['#description'] = $wording_field_rfp_logo_new;
            if(isset($form['field_rfp_logo']['und'][0])){
              $minimum_dimensions= $form['field_rfp_logo']['und'][0]['#upload_validators']['file_validate_image_resolution'][1];
              $maximum_dimensions= $form['field_rfp_logo']['und'][0]['#upload_validators']['file_validate_image_resolution'][0];
                if(!empty($minimum_dimensions) && !empty($maximum_dimensions)){
                  unset($form['field_rfp_logo']['und'][0]['#upload_validators']['file_validate_image_resolution']);
                  $form['field_rfp_logo']['und'][0]['#upload_validators']['file_validate_image_resolution_new'] = array($minimum_dimensions, $maximum_dimensions);
                }
            }
            
            break;
        case "privatemsg_new":
            $form['#prefix'] = '<div id ="private-message-wraper"><div class="row"><div class="connect-pvt-msg-left col-md-12 col-sm-12 col-xs-12">';
            $form['#suffix'] = '</div></div></div>';
            break;
        case "invite_add_multiple":
            $form['field_invitation_multiple_email_address']['#description'] = 'Type e-mail addresses of the persons whom you wish invite. Enter email addresses as comma or semicolon separated values.'; //<b>Maximum number of invite at a time is 25<b>
            break;
        case "uc_cart_view_form":
//pre($form,1);
            break;
        case "uc_coupon_form":
//pre($form,1);
            break;
        case "user_pass_reset":
            //pre($form);
            $form['#submit'][] = 'm6connect_user_pass_reset_sub';
            break;
    } //pre($form_id);
}

function check_submit_after_build($form, &$form_state) {
    global $user;
    if ($form_state['storage']['step'] == 'step_co_public_profile' && !isset($user->roles[3])) {
        $form['actions']['custsave'] = array(
            '#type' => 'submit',
            '#value' => 'Save',
            //'#weight' => 7,
            '#submit' => array('node_form_submit'),
        );
    }
    return $form;
}

function custom_group_group_node_form_submit($form, &$form_state) {
//    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
//    $form_state['ajax_commands'][] = ctools_ajax_command_reload();
    $form_state['rebuild'] = true;
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
}

function m6connect_misc_cart_submit($form, &$form_state) {
    $form_state['values']['qty'] = $form_state['input']['qty'];
//    pre($form_state,1); 
}

function user_custom_redirect_handler($form, &$form_state) {
    if (!isset($form_state['values']['field_user_company']['und'][0]['target_id']) && empty($form_state['values']['field_user_company']['und'][0]['target_id'])) {
        if (isset($form_state['values']['field_select_account_type']['und'][0]['value']) && $form_state['values']['field_select_account_type']['und'][0]['value'] != 'indisual') {
            $form_state['redirect'] = 'post-register-user';
        }
    }
    if (isset($form_state['values']['field_select_account_type']['und'][0]['value']) && ($form_state['values']['field_select_account_type']['und'][0]['value'] == 'indisual' || $form_state['values']['field_select_account_type']['und'][0]['value'] == 'company')) {
        $form_state['redirect'] = '/';
    }
}

function user_custom_register_submit($form, &$form_state) { //pre($form_state,1); 
    if (isset($form_state['values']['field_user_company']['und'][0]['target_id']) && !empty($form_state['values']['field_user_company']['und'][0]['target_id'])) {
        $cmpNode = node_load($form_state['values']['field_user_company']['und'][0]['target_id']);
        if (isset($cmpNode->field_company_inactive['und']) && !empty($cmpNode->field_company_inactive['und'][0]['value'])) {
            $form_state['redirect'] = 'node/' . $cmpNode->nid . '/edit';
            $cmpNode->field_company_inactive['und'][0]['value'] = 0;
            field_attach_update('node', $cmpNode);
        } else {
            $companyOwnerName = _get_user_full_name($cmpNode->uid);
            drupal_set_message("Thank you for joining M6Connect! During the registration process, you indicated that you would like to join '" . $cmpNode->title . "'. To gain access to this Organization's information, your request to join must be approved by the Company administrator. In order to complete this process, please contact " . $companyOwnerName);
        }
    }
//(423) 4253454
}

/*
  function m6connect_misc_preprocess_link(&$vars) {
  //print_r($vars);

  // if ($vars['path'] == 'user') {
  if ((arg(0) == 'user' && !arg(1)) || (arg(0) == 'user' && is_numeric(arg(1)))){
  //$num_comments = MYMODULE_num_comments();
  $vars['text'] = m6connect_misc_user_menu_title();
  }
  }

  function m6connect_misc_menu_alter(&$items) {
  //drupal_Set_message(print_r(arg(), 1)) ;

  // die();
  global $user;
  //drupal_Set_message(print_r($user, 1));
  if (user_is_logged_in()) {
  //$items['user']['title callback'] = $items['user/%user']['title callback'] = 'm6connect_misc_user_menu_title';
  }
  } */

function m6connect_misc_user_menu_title() {

    $account = user_load(arg(1));
    $output = '';
    if ($account) {


        if ($account->field_first_name) {
            $output .= $account->field_first_name[LANGUAGE_NONE][0]['value'];
        }
        if ($account->field_middle_name) {
            $output .= ' ' . $account->field_middle_name[LANGUAGE_NONE][0]['value'];
        }
        if ($account->field_last_name) {
            $output .= ' ' . $account->field_last_name[LANGUAGE_NONE][0]['value'];
        }
    }
    if ($output == '') {
//$output = user_menu_title($account);    
    }

    return $output;
}

function m6connect_misc_user_insert(&$edit, $account, $category) {
//    if (isset($edit['field_user_company']['und']) && !empty($edit['field_user_company']['und'][0]['target_id'])) {
//        $company = node_load($edit['field_user_company']['und'][0]['target_id']);
//        if (isset($company->field_company_inactive['und'][0]['value']) && ($company->field_company_inactive['und'][0]['value'] == 1 || empty($company->field_company_inactive['und'][0]['value']))) {
//            $edit['og_group_ref']['und'][0]['target_id'] = $edit['field_user_company']['und'][0]['target_id'];
//            $account->og_group_ref['und'][0]['target_id'] = $edit['field_user_company']['und'][0]['target_id'];
//            $values = array(
//                'entity_type' => 'user',
//                'entity' => $account,
//                'state' => OG_STATE_ACTIVE,
//            );
//            og_group('node', $account->field_user_company['und'][0]['target_id'], $values);
//            user_save($account, $edit);
//        }  
//    }
    //individual user registration work
    //if (isset($account->field_select_account_type['und']) && ($account->field_select_account_type['und'][0]['value'] == 'indisual' || $account->field_select_account_type['und'][0]['value'] == 'company')) {
    if(isset($edit['invited']) && is_numeric($edit['invited']))
    {
        $_SESSION['signup_invited_node'] = $edit['invited'];
    }
    $newnode_name_o1 = $account->field_first_name['und'][0]['value'];
    $newnode_name_o2 = $account->field_last_name['und'][0]['value'];
    $node = new stdClass();
    $node->type = 'organization';
    node_object_prepare($node);
    $node->language = LANGUAGE_NONE;
    $node->title = $newnode_name_o1 . ' ' . $newnode_name_o2;
    $node->field_company_email['und'][0]['email'] = $account->mail;
    $node->field_type_of_company['und'][0]['value'] = 'individual';
    $node->field_show_company_in_search['und'][0]['value'] = 0;
    $node->field_owner_name['und'][0]['value'] = $newnode_name_o1 . ' ' . $newnode_name_o2;
    $node->uid = $account->uid;
    $node = node_submit($node);
    node_save($node);

    og_group('node', $node->nid, array(
        "entity type" => "user",
        "entity" => $account,
        "membership type" => OG_MEMBERSHIP_TYPE_DEFAULT,
    ));
  
  // Assign M6ID Company
  $userEmail = trim($account->mail);
  $userEmail = strtolower($userEmail);
  $m6idQuerry = db_select('m6connect_onboarding_invited_employee','moie');
  $m6idQuerry->join('node','cnode','cnode.nid=moie.company_nid');
  $m6idQuerry->fields('moie');
  $m6idQuerry->addField('cnode','title','company_title');
  $m6idQuerry->condition('moie.user_uid',0);
  $m6idQuerry->where('LOWER(TRIM(moie.email))=:userEmail', array(':userEmail'=>$userEmail));
  $m6idInvited = $m6idQuerry->execute()->fetchAll();
  if(!empty($m6idInvited)){
    $_SESSION['m6id_new_company_join_flag'] = 1;
    drupal_register_shutdown_function('update_user_m6id_merbership', $account->uid,$m6idInvited);
  }

    /*     * ***************Connection Category create ***start************ */
    $new_categorys = array('Family','Friends', 'Business Accociates', 'Acquaintances', 'Clients', 'Prospects', 'Sales Associates');

    foreach ($new_categorys as $nc_value) {
        $node = new stdClass();
        $node->type = 'connection_categories';
        node_object_prepare($node);
        $node->language = LANGUAGE_NONE;
        $node->title = $nc_value;
        $node->field_default_category['und'][0]['value'] = 1;
        $node = node_submit($node);
        $node->uid = $account->uid;
        $node->status = 1;
        node_save($node);
    }
    /** ***************connection category create ***end************ */
  
}

function update_user_m6id_merbership($userUid,$m6idInvited){
  $account = user_load($userUid);
  $ogrolesk = og_roles('node', 'organization');
  $updatedRecord = array();
  foreach($m6idInvited as $index => $invitedArr){
  $membership = og_group('node', $invitedArr->company_nid, array(
    'entity type' => 'user',
    'entity' => $account,
    'state' => OG_STATE_ACTIVE,
  )); 
  if(isset($membership->id) && is_numeric($membership->id) && (($staffRollId = array_search('staff',$ogrolesk))!==FALSE)){
    og_role_grant('node', $invitedArr->company_nid, $account->uid, $staffRollId);
    $updatedRecord[] = $invitedArr->id;
  }
  }
  if(!empty($updatedRecord)){
  db_update('m6connect_onboarding_invited_employee')->fields(array('user_uid'=>$account->uid))->condition('id',$updatedRecord,'IN')->execute(); 
  }
}

function m6connect_misc_user_presave(&$edit, $account, $category) {
//drupal_set_message('<pre>'.print_r($edit,1).'</pre>');
    if (isset($account->is_new) && $account->is_new == 1) {
        $m6id_length = 9;
        $random_m6id = random_m6_id($m6id_length);
        $edit['field_m6id']['und'][0]['value'] = $random_m6id;
    }
    if (isset($account->is_new) && !empty($account->is_new) && isset($edit['field_user_company']['und']) && !empty($edit['field_user_company']['und'][0]['target_id'])) {

        $company = node_load($edit['field_user_company']['und'][0]['target_id']);
//        drupal_set_message($company->field_company_inactive['und'][0]['value'].'cvs');
        if (isset($company->field_company_inactive['und'][0]['value']) && $company->field_company_inactive['und'][0]['value'] == '932') {
//            $account->roles[11] = 'Non Company User';
//            $edit['roles'][11] = 'Non Company User';
        } else {
            if (isset($company->field_company_inactive['und'][0]['value']) && ($company->field_company_inactive['und'][0]['value'] == 1 || (empty($company->field_company_inactive['und'][0]['value']) && $company->field_company_inactive['und'][0]['value'] != 0))) {
//$company->field_company_inactive['und'][0]['value'] = 0;
//node_save($company);
                $edit['og_group_ref']['und'][0]['target_id'] = $edit['field_user_company']['und'][0]['target_id'];
                $account->og_group_ref['und'][0]['target_id'] = $edit['field_user_company']['und'][0]['target_id'];
                $account->roles[5] = 'Company Admin';
                $edit['roles'][5] = 'Company Admin';
                $edit['user_first_screen_as_administrator'] = 1;
            } else {
                $account->roles[11] = 'Non Company User';
                $edit['roles'][11] = 'Non Company User';
            }
        }
    }
  if(isset($_REQUEST['hcfm-invite-mail']) && !empty($_REQUEST['hcfm-invite-mail'])){      
    $edit['field_hcfm_status']['und'][0]['value'] = 'active';
    $email_encoded= $_REQUEST['hcfm-invite-mail'];  
    $email_decoded = base64_decode(strtr($email_encoded, '-_', '+/'));
    db_delete('m6connect_hcfm_user_invite')
    ->condition('mail_uid',$email_decoded)
    ->execute();    
  }
  /*pre($_REQUEST['hcfm-invite-mail']);
  pre($edit);
  pre($account);
  pre($category);
  die();*/
}

function user_register_custom_submit($form, &$form_state) {

    if ($form_state['values']['add_company'] && $form_state['values']['add_company'] != '') {
        $node = new stdClass();
        $node->type = 'organization';
        $node->title = $form_state['values']['add_company'];
        $node->uid = $form_state['values']['uid'];
        $node->name = $form_state['complete form']['#user']->name;
        $node->comment = 0;
        $node->promote = 0;

//Organic groups fields
        $node->og_description = 'A group managed by ' . $form_state['complete form']['#user']->name;
        $node->og_register = 1;
        $node->og_directory = 0;
        $node->og_private = 0;
        $node->og_selective = 3;
        $node->language = LANGUAGE_NONE;

//create the node
        $node = node_submit($node);
        node_save($node);

        $account = user_load($form_state['values']['uid']);
// Add the user to the group
        og_group('node', $node->nid, array(
            "entity type" => "user",
            "entity" => $account,
            "membership type" => OG_MEMBERSHIP_TYPE_DEFAULT,
        ));
// Changes the users role in the group (1 = non-member, 2 = member, 3 = administrator member)
        og_role_grant('node', $node->nid, $account->uid, 3);
    }
}

/**
 * Implements hook_block_info().
 */
function m6connect_misc_block_info() {
    $blocks = array();

    $blocks['user_info_link_block'] = array(
        'info' => t('User Info Block'),
    );
    $blocks['register_step1'] = array(
        'info' => t('M6Connect Registration: Step 1'),
        'cache' => DRUPAL_NO_CACHE,
    );
  
  $blocks['left_sidebar_pannel'] = array(
        'info' => t('Left Sidebar Pannel'),
        'cache' => DRUPAL_NO_CACHE,
    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function m6connect_misc_block_view($delta = '') {
    $block = array();

    switch ($delta) {
        case 'user_info_link_block':
            $block['subject'] = '';
            $block['content'] = _user_info_link_block_content();
            break;
        case 'register_step1':
            $block['subject'] = 'Create an Account';
            $block['content'] = m6connect_misc_block_contents($delta);
            break;
    case 'left_sidebar_pannel':
        $block['subject'] = '';
            $block['content'] = m6connect_left_sidebar_content();
            break;
    
    }

    return $block;
}

function m6connect_misc_block_contents($which_block) {
    global $user;
    $content = '';
    switch ($which_block) {
        case 'register_step1':
            if (!$user->uid) {
                module_load_include('inc', 'm6connect_misc', 'm6connect_misc_ctools_wizard');
                return m6connect_misc_ctools_wizard('register');
            }
            break;
    }
}

function _user_info_link_block_content() {

    drupal_add_library('system', 'ui.dialog');
    $output = '';
    global $user, $base_url, $company;
    $user_gid = 0;
    $user_info = user_load($user->uid);
//print_r($user_info);
    if ($user_info->og_group_ref && isset($user_info->og_group_ref['und'])) {
//        $user_gid = $user_info->og_group_ref['und'][0]['target_id'];
        $user_gid = $company->nid;
        $user_roles = og_get_user_roles('node', $user_gid, $user->uid);
    } else {
        $user_roles = array();
    }

    $pimagepath = '';
//    $is_company = is_company_individual($user_gid); // check that is company or individual
    $is_company = $company->field_type_of_company['und'][0]['value']; // check that is company or individual
//pre($user_roles,1);
    if (array_key_exists(5, $user_roles)) {
        if ($user_gid != 0) {
            $gnode = node_load($user_gid);
            $pimgpath = (isset($gnode->field_logo['und']) && !empty($gnode->field_logo['und'][0]['uri'])) ? $gnode->field_logo['und'][0]['uri'] : 0;
            if ($pimgpath) {
//$pimagepath = image_style_url('thumbnail', $pimgpath);
                $pimagepath = image_style_url('user_pic_32x32', $pimgpath);
            }
        }
        $group_edit_url = $base_url . '/node/' . $user_gid;
//$alias = drupal_get_path_alias('node/'.$user_gid);

        if ($is_company == 'company') {
            $alias = $base_url . '/node/' . $user_gid . '/edit';
        } else {
            $alias = '';
        }
    } else {
        $group_edit_url = '';
        $alias = '';
    }
    if (isset($user->roles[12])) {
        if ($is_company == 'company') {
            $alias = 'node/' . $user_gid;
        } else {
            $alias = '';
        }
    }
    $upgradelink = $base_url . '/upgrade-your-membership-subscription';
    $taskslinks = $base_url . '/node/37';

    $msglink = $base_url . '/messages';
//$output .= l('<i class="fa fa-fw fa-flag"></i>', '', array('html' => TRUE,'attributes' => array('class' => 'app-dashboard')));
//$output .= l('<i class="fa fa-fw fa-tag"></i>', '', array('html' => TRUE,'attributes' => array('class' => 'app-contracts')));
    $output .= l('<i class="fa fa-fw fa-trophy"></i>', $upgradelink, array('html' => TRUE, 'attributes' => array('class' => array('app-upgrade', 'custom-m6connect-misc-link'), 'title' => 'Upgrade Your M6Connect Membership Today!')));
//$output .= l('<i class="fa fa-envelope-o"></i>', $msglink, array('html' => TRUE, 'attributes' => array('class' => array('app-messages', 'custom-m6connect-misc-link'), 'title' => 'Access your Private Messages')));
    $output .= l('<i class="fa fa-fw fa-tachometer"></i>', 'dashboard', array('html' => TRUE, 'attributes' => array('class' => array('app-tasks', 'custom-m6connect-misc-link'), 'title' => 'View your Task Dashboard')));
    if ($alias != '') {
        if ($pimgpath) {
            $output .= l('<img src="' . $pimagepath . '" />', $alias, array('html' => TRUE, 'attributes' => array('class' => array('app-companies', 'custom-m6connect-misc-link'), 'title' => 'View or Edit your Company Profile')));
        } else {
            $output .= l('<i class="fa fa-fw fa-building"></i>', $alias, array('html' => TRUE, 'attributes' => array('class' => array('app-companies', 'custom-m6connect-misc-link'), 'title' => 'View or Edit your Company Profile')));
        }
    }

    $account = user_load($user->uid);
//print_r($account); die;
    if ($account->field_user_profile_photo) {
        $config = array(
            "style_name" => "user_pic_32x32",
            "path" => $account->field_user_profile_photo[LANGUAGE_NONE][0]['uri'],
            "height" => NULL,
            "width" => NULL,
        );
        $user_picture = theme_image_style($config);
    } else {

        $variables = array(
            'path' => $base_url . '/sites/default/files/default_profile.jpg',
            'alt' => '',
            'width' => '32',
            'height' => '32',
        );
        $user_picture = theme('image', $variables);
    }
    if (!module_exists('m6connect_delegate')) {

        /*if (i)
            $output .= l($user_picture, $base_url . '/user/' . $user->uid . '/edit', array('html' => TRUE, 'attributes' => array('class' => array('app-user-edit', 'custom-m6connect-misc-link'), 'title' => 'View or Edit your Personal Profile')));*/
    } else {
// Start user Edit DroupDown
//<li role="separator" class="divider"></li>
        $output .= l('<i class="fa fa-comments-o" aria-hidden="true"></i>','/user-messaging', array('html' => TRUE, 'attributes' => array('class' => array('app-user-message', 'custom-m6connect-misc-link'), 'title' => 'M6 Messages')));
        $output .= '<div class="dropdown user-edit-profile-section">';
        $output .= l($user_picture, $base_url . '/user/' . $user->uid . '/edit', array('html' => TRUE, 'attributes' => array('class' => array('app-user-edit', 'custom-m6connect-misc-link'), 'title' => 'View or Edit your Personal Profile', 'id' => 'user-acc-drop', 'data-target' => '#', 'data-toggle' => 'dropdown', 'role' => 'button', 'aria-haspopup' => 'true', 'aria-expanded' => 'false')));
        $output .= '<ul class="dropdown-menu" aria-labelledby="user-acc-drop">
            <li class="text-center">' . l('My Account', '/user/' . $user->uid . '/edit') . '</li>
            <li role="separator" class="divider"></li>
            ';
        if (delegation_user_switch_back_access_callback()) {
            $output .= '<li>' . l('Switch to Your Account', 'delegation-user/switch') . '</li>';
        } else {
            $query = db_select('m6connect_user_delegate', 'ds');
            $query->fields('ds', array('id', 'uid_from'))
                    ->condition('uid_to', $user->uid, '=')
                    ->condition('status', 1, '=');
            $delegatedusers = $query->execute()->fetchAll();
            if ($delegatedusers && is_array($delegatedusers) && !empty($delegatedusers)) {
                $output .= '<li class="drop-link-change-bg">' . l('Switch User', 'javascript:void(0);', array('external' => true)) . '</li>';
                foreach ($delegatedusers as $delta => $delegateobj) {
                    $output .= '<li>' . l('Login as ' . _get_user_full_name($delegateobj->uid_from), 'delegation-user/login/' . $delegateobj->id) . '</li>';
                }
            }
        }
        $output .= '</ul></div>';
// End user Edit DroupDown
    }
 
    $output .= l('<i class="fa fa-fw fa-sign-out"></i>', 'user/logout', array('html' => TRUE, 'attributes' => array('class' => array('app-user-logout', 'custom-m6connect-misc-link'), 'title' => 'Securely Log Out of M6Connect')));

    return $output;
}

function m6connect_misc_get_user_all_companies($uid, $type = 'organization', $access = 0) {
    global $user;
    if ($uid) {
        $currUser = user_load($uid);
    } else {
        $currUser = user_load($user->uid);
    }
    $user_groups = og_get_groups_by_user($currUser, 'node');
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->fields('n', array('nid'));
    $query->fields('tc', array('field_type_of_company_value'));
    $query->fields('ml', array('field_main_location_grp_target_id'));
    $query->fields('ga', array('group_access_value'));
    $query->leftJoin('field_data_field_type_of_company', 'tc', 'tc.entity_id = n.nid');
    $query->leftJoin('field_data_field_main_location_grp', 'ml', 'ml.entity_id = n.nid');
    $query->leftJoin('field_data_group_access', 'ga', "ga.entity_id = n.nid and ga.bundle='groups'");
    if (count($user_groups) > 0) {
        $query->condition('n.nid', $user_groups, 'in');
    }
    $query->condition('n.type', $type, '=');
    //$query->condition('tc.field_type_of_company_value', 'company', '=');
    //$query->condition('ml.field_main_location_grp_target_id', NULL);
    $result = $query->execute()->fetchAll();
    return $result;
}

function m6connect_misc_get_groups_by_ownerid($uid, $type = 'organization', $access = 0) {
    global $user;
    if ($uid) {
        $currUser = user_load($uid);
    } else {
        $currUser = user_load($user->uid);
    }

    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->fields('n', array('nid'));
    $query->fields('tc', array('field_type_of_company_value'));
    $query->fields('ml', array('field_main_location_grp_target_id'));
    $query->fields('ga', array('group_access_value'));
    $query->leftJoin('field_data_field_type_of_company', 'tc', 'tc.entity_id = n.nid');
    $query->leftJoin('field_data_field_main_location_grp', 'ml', 'ml.entity_id = n.nid');
    $query->leftJoin('field_data_group_access', 'ga', "ga.entity_id = n.nid and ga.bundle='groups'");
    $query->condition('n.uid', $currUser->uid, '=');
    $query->condition('n.type', $type, '=');
    //$query->condition('tc.field_type_of_company_value', 'company', '=');
    //    $query->condition('ml.field_main_location_grp_target_id', NULL);
    $result = $query->execute()->fetchAll();
    return $result;
}

function m6connect_misc_menu_local_tasks_alter(&$data, $router_item, $root_path) {
    global $user;
    if (!array_key_exists(3, $user->roles) && $user->uid != 0 && (arg(0) == 'node' && is_numeric(arg(1)))) {
        $node = menu_get_object();
        if ($node->type == 'organization') {
//$data['tabs'][0]['output'][0]['#link']['title'] = t('Overview');
            $data['tabs'][0]['output'][1]['#link']['title'] = t('Company Details');
        }
    }
}

function m6connect_misc_init() { 
    global $user, $base_url;
  if($_COOKIE['Drupal_visitor_defaulttoggle_logoff'] == 1){     
        drupal_add_js(
            'jQuery(document).ready(function () {                 
                localStorage.clear();                                
                localStorage.setItem("account-tab", "in");
                localStorage.setItem("services-tab", "in"); 
                localStorage.setItem("left-panel-toggle", "in");                
            }
        );', 'inline');        
    }
    $current_path = current_path();
  if($current_path == 'new/organization'){
    $companiesQuery = db_select('m6connect_og_membership_email','ogm');
      $companiesQuery->fields('ogm', array('id'));
      $companiesQuery->condition('ogm.user_uid',$user->uid);
      $companiesQuery->condition('ogm.company_type','company');
      $attachedCompanies = $companiesQuery->execute()->rowCount();
      if($attachedCompanies>0){
      drupal_goto('');  
      } 
  }
  
  if(drupal_is_front_page()){
    if(isset($_SESSION['m6id_new_company_join_flag']) && !empty($_SESSION['m6id_new_company_join_flag'])){
    $companiesQuery = db_select('m6connect_og_membership_email','ogm');
    $companiesQuery->join('node','cnode','cnode.nid = ogm.entity_id');
        $companiesQuery->fields('cnode', array('title'));
        $companiesQuery->condition('ogm.user_uid',$user->uid);
        $companiesQuery->condition('ogm.company_type','company');
        $attachedCompanies = $companiesQuery->execute()->fetchCol();
    $companyTitles = implode(', ',$attachedCompanies);
      drupal_add_js(array('m6connect_misc' => array('m6id_company_popup' => 1,'m6id_company_uid'=>$user->uid,'m6id_company_title'=>$companyTitles)), 'setting'); 
    unset($_SESSION['m6id_new_company_join_flag']);   
    }
  }
  
    $pathNotIn = array('new/organization', 'system/ajax', 'user/logout', 'hierarchical_select_ajax/organigation_main_container/organigation_detail_container/left/m6organization_type');
    if (new_organization_access_callback() && (!isset($user->roles[3])) && is_user_invited_in_node()) {
        if (!in_array($current_path, $pathNotIn) && strpos($current_path, 'file/ajax/organigation_main_container') === FALSE) {
            //drupal_goto('new/organization');
        }
    }
    drupal_add_js(drupal_get_path('module', 'm6connect_misc') . '/m6connect.js');
    $user_authorized = user_is_logged_in();
    $user_authorized = in_array(current_path(), array('new/organization')) ? FALSE : $user_authorized;
    drupal_add_js(array('m6connect_misc' => array('base_url' => $base_url, 'user_authorized' => $user_authorized)), 'setting');
     if(isset($_SESSION['non_company_popup']) && $_SESSION['non_company_popup'] == 1) {
        $curruser = user_load($user->uid);


        /*if (isset($curruser->field_user_company['und']) && !empty($curruser->field_user_company['und'][0]['target_id'])) {
            $cmpNode = node_load($curruser->field_user_company['und'][0]['target_id']);
            $companyOwnerName = _get_user_full_name($cmpNode->uid);
            drupal_add_js(array('m6connect_misc' => array('non_company_popup' => 1, 'company_admin' => $companyOwnerName, 'company_name' => $cmpNode->title)), 'setting');
        }*/
    if(isset($curruser->field_user_company['und']) && !empty($curruser->field_user_company['und'][0]['target_id'])){
  
  $cmpNode = node_load($curruser->field_user_company['und'][0]['target_id']);
  $companyNid = $cmpNode->nid;
  $query= db_select('og_membership','og');
  $query->join('og_users_roles','ogur','ogur.uid=og.etid AND ogur.gid=og.gid AND ogur.group_type=:GroupType',array(':GroupType'=>'node'));
  $query->fields('og', array('etid'));
  $query->condition('og.gid',$companyNid,'=');
  $query->condition('og.entity_type','user','=');
  $query->condition('ogur.rid',36,'=');
  //$query->condition('og.etid',$uid,'!=');
  $companyAdminSupportUsers  = $query->execute()->fetchobject();
   $AdminSupportuid = $companyAdminSupportUsers->etid;
   $companyOwner = user_load($cmpNode->uid);
   if(isset($AdminSupportuid) && !empty($AdminSupportuid)){
   $companyOwner = user_load($AdminSupportuid);   
   }
   $comapnypath = drupal_lookup_path('alias','node/'.$cmpNode->nid);
   $company_name = l($cmpNode->title,'/'.$comapnypath);
   $companyOwnerName = ucwords($companyOwner->realname);
   $companyOwnermail = '<a href="mailto:'.$companyOwner->mail.'">'.$companyOwner->mail.'</a>';
   $companyOwnerpath = drupal_lookup_path('alias','user/'.$companyOwner->uid);
   $company_admin = l($companyOwnerName,'/'.$companyOwnerpath);
            drupal_add_js(array('m6connect_misc' => array('non_company_popup' => 1, 'company_admin' => $company_admin, 'company_name' => $company_name,'company_mail' => $companyOwnermail)), 'setting');
        }
        unset($_SESSION['non_company_popup']);
    }

    if($_COOKIE['Drupal_visitor_defaulttoggle_logoff'] == 1){
        user_cookie_save(array('defaulttoggle.logoff' => 0));
    }  
}

function m6connect_misc_user_login(&$edit, $account) { 
    user_cookie_save(array('defaulttoggle.logoff' => 1));     
    $_SESSION['left_block_action'] = 'open';
    $cmpNid = _get_user_company_nid();
    $selected_existing_co = _get_users_existing_co($account);
    if (!($cmpNid && is_numeric($cmpNid)) && $selected_existing_co) {
        $_SESSION['non_company_popup'] = 1;
    }
    m6connect_company_set_current_company();
    first_company_set_current_company($account->uid);    
}

function pre($output, $stop = false) {
    print '<pre>';
    print_r($output);
    if ($stop)
        die();
    print '</pre>';
}

function m6connect_misc_node_insert($node) {
    global $user;
    if ($node->type == 'organization') {
        if (isset($user->roles[11])) {
            user_multiple_role_edit(array($node->uid), 'remove_role', $rid = 11);    //Remove Non Company user Role 
        }
        user_multiple_role_edit(array($node->uid), 'add_role', $rid = 4);    //Assign Non Company user Role 
    }
}

function m6connect_misc_node_update($node) {
    if ($node->type == 'organization') {
        if (!empty($node->field_m6level[LANGUAGE_NONE][0]['value'])) {
            if ($node->field_m6level[LANGUAGE_NONE][0]['value'] < 4) {
                $node->field_m6level[LANGUAGE_NONE][0]['value'] = 4;
            }
        }
        if (!empty($node->field_phone_verified[LANGUAGE_NONE][0]['value'])) {
            if ($node->field_phone_verified[LANGUAGE_NONE][0]['value'] == 1) {
                if ($node->field_m6level[LANGUAGE_NONE][0]['value'] < 8) {
                    $node->field_m6level[LANGUAGE_NONE][0]['value'] = 8;
                    field_attach_update('node', $node);
                }
            }
        }
        if (!empty($node->field_in_person_verified[LANGUAGE_NONE][0]['value'])) {
            if ($node->field_in_person_verified[LANGUAGE_NONE][0]['value'] == 1) {
                if ($node->field_m6level[LANGUAGE_NONE][0]['value'] < 9) {
                    $node->field_m6level[LANGUAGE_NONE][0]['value'] = 9;
                    field_attach_update('node', $node);
                }
            }
        }
    }
}

/**
 * Implements hook_node_load().
 */
function m6connect_misc_node_load($nodes, $types) {
    global $user;
    // Getting node id from url.
    if (arg(0) == 'node' && is_numeric(arg(1)) && is_null(arg(2))) {
        $nid = arg(1);
        if (array_key_exists($nid, $nodes)) {
            $node = $nodes[$nid];
            if (is_object($node) && $node->type == 'organization') {
                // Checking if we have our node, and the node is of type organization.
                if (!empty($node->field_m6level[LANGUAGE_NONE][0]['value'])) {
                    $value = $node->field_m6level[LANGUAGE_NONE][0]['value'];
                    $time_diff = REQUEST_TIME - $node->created;
                    if ($value < 3 && $node->uid == $user->uid && $time_diff < 7776000) {
                        // Checking if the user is accessing the node first time after
                        // creating it. And the user who is accessing it is the user
                        // who created it. Because there may be a case, when a user
                        // creates a node, and admin might view the node, before the
                        // actual user views it. So we do not want to update the data
                        // in this case.

                        // Updating in the current request.
                        $nodes[$nid]->field_m6level[LANGUAGE_NONE][0]['value'] = 3;
                    }
                }
            }
        }
    }
}

function custom_divercity_afterbuild($form, $form_state) {
    $form['field_diversity_credentials']['#ajax'] = array(
        'callback' => 'subform_example_simple_form_select_callback',
        //'event' => 'check',
        'wrapper' => 'customwrap',
    );
    return $form;
}

/*
  function subform_example_simple_form_select_callback($form, $form_state){
  $commands[] = ajax_command_html('#customwrap' , 'hello test');
  return array('#type' => 'ajax', '#commands' => $commands);
  }
 */
/* function subform_example_simple_form_select_callback($form, &$form_state){
  $commands = array();
  $val = $form_state['values'];
  //$commands[] = ajax_command_html('#customwrap22' , 'hello');
  //$commands[] = ajax_command_replace('#customwrap22',render($form['field_diversity_credentials']));
  $commands[] = ajax_command_replace('#customwrap22',$form_state['values']['custom_diversity']);
  //$new_form_array = drupal_rebuild_form('my_ajax_form_id', $new_state);
  //$new_form = drupal_render($new_form_array);

  return array('#type' => 'ajax', '#commands' => $commands);
  } */

function subform_example_simple_form_select_callback(&$form, $form_state) {
    $values = $form_state['values'];
//$cust_uname = $values['custom_diversity'];
    $fieldname = $form_state['triggering_element']['#name']; //pre($fieldname);
    $did = $form_state['triggering_element']['#value'];
//pre($did);
    $node = node_load($did);
    $fields = field_get_items('node', $node, 'field_form_fields'); //pre($fields);
//$info2 = field_info_instance('node', 'field_accredited_by', 'credentials'); pre($info2);
    $farr = array();
    foreach ($fields as $fvar => $fval) {
        $farr[] = $fval['value'];
    }
    $output = '';
//$output .= 'Name: <input type="textbox" name="textbx'.$did.'">';
    $output .='<div class="org-diversity-wrapper">';

    foreach ($fields as $var => $vl) {
        $val = $vl['value'];
        if ($val != 'field_cred_start_date' && $val != 'field_credential_end_date') {
            $output .='<div class="form-wrapper">';
            $output .= '<div class="form-item">';
        }
        $finfo = field_info_field($val);
        $finfo2 = field_info_instance('node', $val, 'credentials');
        $label = $finfo2['label'];

        if ($finfo['type'] == 'list_text') {
            $output .= '<label>' . $label . ':</label>';
            $output .= '<select name="' . $val . $did . '">';
            foreach ($finfo['settings']['allowed_values'] as $k => $v) {
                $output .= '<option value="' . $k . '">' . $v . '</option>';
            }
            $output .='</select>';
        }
        if ($finfo['type'] == 'datetime' || $finfo['type'] == 'date' || $finfo['type'] == 'datestamp') {
            if ($val == 'field_cred_start_date') {
                $output .='<div class="form-wrapper">';
                $output .= '<div class="form-item">';
                $output .= '<label>' . $label . ':</label>';
                $output .='<script src="http://code.jquery.com/ui/1.10.1/jquery-ui.js"></script>
                   <script>   
                    jQuery(function() {
                      jQuery( "#calendar" ).datepicker();   
                    }); 
                 </script>';
                $output .= '<input type="date" id="calendar" name="' . $val . $did . '">';
                if (in_array('field_credential_end_date', $farr)) {
                    $output .= '<div><label>To:</label></div>';
                    $output .= '<input type="date" id="calendar" name="field_credential_end_date' . $did . '">';
                }
                $output .= '</div>'; //form-item
                $output .= '</div>'; //form-wrapper
            }
        }
        if ($finfo['type'] == 'text_long') {
            $output .= '<label>' . $label . ':</label>';
            $output .= '<textarea name="' . $val . $did . '"></textarea>';
        }
        if ($finfo['type'] == 'file') {
            $output .= '<label>' . $label . ':</label>';
            $output .= '<input type="file" name="' . $val . $did . '" accept=".txt,.doc,.pdf,.docx">';
        }
        if ($finfo['type'] == 'text') {
            $output .= '<label>' . $label . ':</label>';
            $output .= '<input type="text" name="' . $val . $did . '">';
        }
        if ($val != 'field_cred_start_date' && $val != 'field_credential_end_date') {
            $output .= '</div>'; //form-item
            $output .= '</div>'; //form-wrapper
        }
    }

    $output .= '</div>'; //org-diversity-wrapper 

    $commands = array();
    $commands[] = ajax_command_html('#customwrap' . $did, $output);
    /* $tmpform = array();
      $tmpform['testt'.$did] = array(
      '#type' => 'textfield',
      '#title' => 'TestT'
      );

      $tmpform['ndocs'.$did] = array(
      '#type' => 'file',
      '#name' => 'files[]',
      '#title' => t('Add files'),
      '#description' => t('Use CTRL + Click to choose multiple images! '),
      //'#attributes' => array('multiple' => 'multiple'),
      );
      $tmpform['npdf'.$did] = array(
      '#type' => 'managed_file',
      '#title' => t('Add File'),
      '#descripion' => t("Only pdf format Files are allowed."),
      //'#upload_location'    => "public://pdf/",
      "#upload_validators"  => array("file_validate_extensions" => array("pdf, txt, doc, docx")),
      ); */

//$commands[] = ajax_command_replace('#customwrap'.$did,render($tmpform));
//$commands[] = ajax_command_html('#customwrap'.$did,render($tmpform));

    return array(
        '#type' => 'ajax',
        '#commands' => $commands,
    );

    return $tmpform;
}

function m6connect_misc_node_presave($node) { //pre($node,1);
    module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
    global $user, $company;
    if ($node->type == 'organization') { 
        if (isset($_SESSION['cnode_update'])) {
            $diverarray = $_SESSION['cnode_update'];
            foreach ($diverarray as $k => $v) {
                $fname = 'field_dcrednid_' . $k;

                if (empty($node->$fname['und'])) {
                    
                }
            }

            unset($_SESSION['cnode_update']);
        }

        $field_organization_type_value = $node->field_organization_type['und'][0]['value'];
        $is_organization_type = array('governmental', 'religious', 'educational');
        if (isset($field_organization_type_value) && in_array($field_organization_type_value, $is_organization_type)) {
            $node->field_legal_structure['und'][0]['value'] = 'Other';
        }
        if (isset($field_organization_type_value) && $field_organization_type_value == 'non-profit') {
            $node->field_legal_structure['und'][0]['value'] = 'Non-Profit';
        }
    
    
    //node data transfer to drupal8 start
    if(isset($node->nid) && !empty($node->nid) && $node->nid == 645){
      if(isset($node->field_company_locations['und'])){
      $RegionNode = array();
      $RegionNode['type'] = 'fm_location_region';   
        $RegionNode['og_audience'] = $company->nid;   
        $RegionNode['uid'] = $node->uid; 
      
      $ComLocationList = array(
      'main-location'=>'Main Location',
      'headquarters'=>'Headquarters',
      'branch'=>'Branch',
      'division'=>'Division',
      'remote-location'=>'Remote Location',
      'subsidiary'=>'Subsidiary',
      'region'=>'Region',
      'administrative'=>'Administrative',
      'trailer'=>'Trailer',
      'department'=>'Department',
      'field-office'=>'Field Office'
      );

      $ComRegionOnly = array(
      78406=>'Africa',
      78517=>'Asia, Pacific, Middle East',
      78570=>'Canada',
      78685=>'Europe',
      78779=>'Latin America/Caribbean',
      79052=>'Oceania',
      79131=>'United States'
      );
      $query = db_select('field_data_field_company_locations','fdfcl');
      $query->leftJoin('field_data_field_location_type_list', 'fdfltl', 'fdfltl.entity_id = fdfcl.field_company_locations_value');
      $query->leftJoin('field_data_field_regions_only', 'fdfro', 'fdfro.entity_id = fdfcl.field_company_locations_value');
      $query->leftJoin('field_data_field_com_location_name', 'fdfcln', 'fdfcln.entity_id = fdfcl.field_company_locations_value');
          $query->leftJoin('field_data_field_location_address', 'fdfla', 'fdfla.entity_id = fdfcl.field_company_locations_value');
      $query->fields('fdfcl',array('field_company_locations_value'));
      $query->fields('fdfltl',array('field_location_type_list_value'));
      $query->fields('fdfro',array('field_regions_only_value'));
      $query->fields('fdfcln',array('field_com_location_name_value'));
          $query->fields('fdfla',array('field_location_address_country','field_location_address_thoroughfare','field_location_address_premise','field_location_address_locality','field_location_address_administrative_area','field_location_address_postal_code'));
      $query->condition('fdfcl.entity_id',$company->nid,'=');
      $query->condition('fdfcl.bundle','organization');
      $LocationTypeRegion = $query->execute()->fetchAll();

      
      if(isset($LocationTypeRegion ) && !empty($LocationTypeRegion )){
        foreach($LocationTypeRegion as $key=>$value){
          $ComLocationListValue = isset($LocationTypeRegion[$key])?$ComLocationList[$LocationTypeRegion[$key]->field_location_type_list_value]:'';
        $ComRegionOnlyValue = isset($LocationTypeRegion[$key])?$ComRegionOnly[$LocationTypeRegion[$key]->field_regions_only_value]:'';
        $ComLocationName = isset($LocationTypeRegion[$key]->field_com_location_name_value) && !empty($LocationTypeRegion[$key]->field_com_location_name_value) ?$LocationTypeRegion[$key]->field_com_location_name_value  :'';
          if(!empty($ComLocationListValue) && !empty($ComRegionOnlyValue)){
        if(isset($ComLocationName) && !empty($ComLocationName)){
              $regionTitle = $ComLocationListValue.' '.$ComRegionOnlyValue.' -'.$ComLocationName;
        }
        else{
          $regionTitle = $ComLocationListValue.' '.$ComRegionOnlyValue;
        }
            
        $RegionNode['title'] = $regionTitle;
        $RegionNode['field_location_ref'] = $value->field_company_locations_value;
        if(isset($value->field_location_address_country) && !empty($value->field_location_address_country)){
          $countryNamesList = json_decode(file_get_contents("http://country.io/names.json"), true);
          $RegionNode['field_loccaton_region_country'] = $countryNamesList[$value->field_location_address_country];
        }
        if(isset($value->field_location_address_administrative_area) && isset($value->field_location_address_country) && !empty($value->field_location_address_administrative_area) && !empty($value->field_location_address_country)){
          $administrativeNamesList = addressfield_get_administrative_areas($value->field_location_address_country);         
          $RegionNode['field_loccaton_region_state'] = $administrativeNamesList[$value->field_location_address_administrative_area];
        }
        if(isset($value->field_location_address_thoroughfare) && isset($value->field_location_address_thoroughfare)){
          $RegionNode['field_loccaton_region_address1'] = $value->field_location_address_thoroughfare;  
        }
        if(isset($value->field_location_address_premise) && isset($value->field_location_address_premise)){
          $RegionNode['field_loccaton_region_address2'] = $value->field_location_address_premise; 
        }
        if(isset($value->field_location_address_locality) && isset($value->field_location_address_locality)){
          $RegionNode['field_loccaton_region_city'] = $value->field_location_address_locality;
        }
        if(isset($value->field_location_address_postal_code) && isset($value->field_location_address_postal_code)){
          $RegionNode['field_loccaton_region_zipcode'] = $value->field_location_address_postal_code;
        }
        if(isset($value->field_company_locations_value) && isset($value->field_company_locations_value)){
          /*$NodeObj111 = array('NodeType'=>'NoType','TableJoin'=>'TableJoin','TableName'=>'node__field_location_ref','Fetch'=>'fetchColumn','CFields'=>'CFields','CFieldsNames'=>array('entity_id'),'OtherId'=>array('equal'=>array('field_location_ref_value'=>$value->field_company_locations_value))); 
                $TableData111 =  _get_hcfm_db_request($NodeObj111);
                  $RegionNode['nid'] = $TableData111;*/
        }
        //hcfm_get_node_create_or_update($RegionNode);      
          }     
      }
      }
    }   
    }   
    //node data transfer to drupal8 end
    }
    if ($node->type == 'rfp') {
        if (empty($node->og_group_ref['und'][0]['target_id'])) {
            if (is_object($company) && isset($company->nid)) {
                $node->og_group_ref['und'][0]['target_id'] = $company->nid;
            }
        }
    }
}

function custom_company_form_submit($form, &$form_state) {
    $field_diversity_credentials = array();
    $inserted_diversity_credentials = array();
    $values = $form_state['values'];
    $credentialsMapping = $form_state['credentialsMapping'];
    $diversity_credentials_values = $values['diversity_credendial'];
     
  //print "<pre>"; print_r($diversity_credentials_values); die;
   
    foreach ($values['field_diversity_credentials']['und'] as $delta11 => $data11) {
        if (!empty($data11['target_id'])) {
            $field_diversity_credentials[] = $data11['target_id'];
            if (isset($credentialsMapping[$data11['target_id']])) {
                $credentialNode = node_load($credentialsMapping[$data11['target_id']]);
                if (!empty($diversity_credentials_values[$data11['target_id']]['field_cred_start_date'])) {
                    $temp = $diversity_credentials_values[$data11['target_id']]['field_cred_start_date'];
                    $credentialNode->field_credential_end_date['und'][0]['value'] = date('Y-m-d H:i:s', strtotime($temp));
                } else if (isset($credentialNode->field_cred_start_date['und'])) {
                    unset($credentialNode->field_cred_start_date['und']);
                }
                if (!empty($diversity_credentials_values[$data11['target_id']]['field_credential_end_date'])) {
                    $temp = $diversity_credentials_values[$data11['target_id']]['field_credential_end_date'];
                    $credentialNode->field_credential_end_date['und'][0]['value'] = date('Y-m-d H:i:s', strtotime($temp));
                } else if (isset($credentialNode->field_credential_end_date['und'])) {
                    unset($credentialNode->field_credential_end_date['und']);
                }
                if (!empty($diversity_credentials_values[$data11['target_id']]['field_credential_comments'])) {
                    $temp = $diversity_credentials_values[$data11['target_id']]['field_credential_comments'];
                    $credentialNode->field_credential_comments['und'][0]['value'] = $temp;
                } else if (isset($credentialNode->field_credential_comments['und'])) {
                    unset($credentialNode->field_credential_comments['und']);
                }
                if (!empty($diversity_credentials_values[$data11['target_id']]['field_accredited_by'])) {
                    $temp = $diversity_credentials_values[$data11['target_id']]['field_accredited_by'];
                    $credentialNode->field_accredited_by['und'][0]['value'] = $temp;
                } else if (isset($credentialNode->field_accredited_by['und'])) {
                    unset($credentialNode->field_accredited_by['und']);
                }
                if (!empty($diversity_credentials_values[$data11['target_id']]['field_credential_doc'])) {
                    $temp = file_load($diversity_credentials_values[$data11['target_id']]['field_credential_doc']);
                    if ($temp) {
                        $temp->status = FILE_STATUS_PERMANENT;
                        $temp->display = 1;
                        file_save($temp);
                        $credentialNode->field_credential_doc['und'][0] = (array) $temp;
                    }
                }
                node_save($credentialNode);
                $inserted_diversity_credentials[] = $credentialNode->nid;
            } else {
                $credentialNode = new stdClass();
                $credentialNode->type = 'credentials';
                node_object_prepare($credentialNode);
                $credentialNode->language = LANGUAGE_NONE;
                $credentialNode->uid = $values['uid'];
                $credentialNode->title = 'Credential' . uniqid();
                $credentialNode->field_cred_for_diversity['und'][0]['target_id'] = $data11['target_id'];
                $credentialNode->field_cred_for_company['und'][0]['target_id'] = $values['nid'];
                if (!empty($diversity_credentials_values[$data11['target_id']]['field_cred_start_date'])) {
                    $temp = $diversity_credentials_values[$data11['target_id']]['field_cred_start_date'];
                    $credentialNode->field_cred_start_date['und'][0] = array(
                        'value' => date('Y-m-d H:i:s', strtotime($temp)),
                        'timezone' => 'UTC',
                        'timezone_db' => 'UTC',
                    );
                }
                if (!empty($diversity_credentials_values[$data11['target_id']]['field_credential_end_date'])) {
                    $temp = $diversity_credentials_values[$data11['target_id']]['field_credential_end_date'];
                    $credentialNode->field_credential_end_date['und'][0] = array(
                        'value' => date('Y-m-d H:i:s', strtotime($temp)),
                        'timezone' => 'UTC',
                        'timezone_db' => 'UTC',
                    );
                }
                if (!empty($diversity_credentials_values[$data11['target_id']]['field_credential_comments'])) {
                    $temp = $diversity_credentials_values[$data11['target_id']]['field_credential_comments'];
                    $credentialNode->field_credential_comments['und'][0]['value'] = $temp;
                }
                if (!empty($diversity_credentials_values[$data11['target_id']]['field_accredited_by'])) {
                    $temp = $diversity_credentials_values[$data11['target_id']]['field_accredited_by'];
                    $credentialNode->field_accredited_by['und'][0]['value'] = $temp;
                }
                if (!empty($diversity_credentials_values[$data11['target_id']]['field_credential_doc'])) {
                    $temp = file_load($diversity_credentials_values[$data11['target_id']]['field_credential_doc']);
                    if ($temp) {
                        $temp->status = FILE_STATUS_PERMANENT;
                        $temp->display = 1;
                        file_save($temp);
                        $credentialNode->field_credential_doc['und'][0] = (array) $temp;
                    }
                }
                node_save($credentialNode);
                $inserted_diversity_credentials[] = $credentialNode->nid;
            }
        }
    }
    $remove_diversity_credentials = array_diff(array_values($credentialsMapping), $inserted_diversity_credentials);
    if (!empty($inserted_diversity_credentials)) {
        $temp = array();
        foreach ($inserted_diversity_credentials as $delta33 => $item33) {
            $temp[$delta33] = array('target_id' => $item33);
        }
        $form_state['values']['field_dcrednid_22']['und'] = $temp;
    }
    if (!empty($remove_diversity_credentials)) {
        foreach ($remove_diversity_credentials as $delta44 => $item44) {
            node_delete($item44);
        }
    }
}

function custom_company_form_validate($form, &$form_state) {//pre($form,1);
    if ($form_state['storage']['step'] == 'step_co_supplier_diversity') {
        if (isset($form_state['triggering_element']['#name']) && (in_array($form_state['triggering_element']['#name'], array('previous', 'next')))) {
            $values = $form_state['values'];
            $fcf = (array) $form_state['complete form']['#node']; //pre($fcf);
            global $user;
            $dtids = array();
//if(isset($fcf['field_diversity_credentials']['und']) && !empty($fcf['field_diversity_credentials']['und'])) {
            if (isset($values['field_diversity_credentials']['und'][0]['target_id']) && !empty($values['field_diversity_credentials']['und'][0]['target_id'])) {
//$credentarr = $fcf['field_diversity_credentials']['und'];
                $credentarr = $values['field_diversity_credentials']['und'];
                $cosessionarr = array();
                foreach ($credentarr as $k => $v) {
                    $dcredids[] = $dcredid = $v['target_id'];
                    $node = node_load($dcredid);
                    $fields = field_get_items('node', $node, 'field_form_fields');
                    foreach ($fields as $var => $val) {
                        $fieldname = $val['value'];
                        if ($fieldname == 'field_accredited_by') {
                            $fn = $fieldname . $dcredid;
                            $cosessionarr[$fieldname . $dcredid] = $values[$fn];
                        }
                        if ($fieldname == 'field_cred_start_date') {
                            $fn = $fieldname . $dcredid;
                            $cosessionarr[$fieldname . $dcredid] = $values[$fn];
                        }
                        if ($fieldname == 'field_credential_end_date') {
                            $fn = $fieldname . $dcredid;
                            $cosessionarr[$fieldname . $dcredid] = $values[$fn];
                        }
                        if ($fieldname == 'field_credential_comments') {
                            $fn = $fieldname . $dcredid;
                            $cosessionarr[$fieldname . $dcredid] = $values[$fn];
                        }
                        if ($fieldname == 'field_credential_doc') {
                            $fn = $fieldname . $dcredid;
                            $searr = '';
                            if (isset($_SESSION['CoDiversity_' . $user->uid])) {
                                $searr = $_SESSION['CoDiversity_' . $user->uid];
                            }
                            if (!empty($searr) && isset($searr[$fn]) && !empty($searr[$fn]) && empty($values[$fn])) {
                                $cosessionarr[$fieldname . $dcredid] = $searr[$fn];
                            } else {
                                $cosessionarr[$fieldname . $dcredid] = $values[$fn];
                            }
                        }
                    }
                }
                $_SESSION['CoDiversity_' . $user->uid] = $cosessionarr;
            }
        }
    }
    if ($form_state['storage']['step'] == 'step_co_diversity_needs') {
        if (isset($form_state['triggering_element']['#name']) && (in_array($form_state['triggering_element']['#name'], array('previous', 'next')))) {
            $values1 = $form_state['values'];
            $fcf = (array) $form_state['complete form']['#node']; //pre($fcf);
            global $user;
            $dtids = array();
//if(isset($fcf['field_diversity_credentials']['und']) && !empty($fcf['field_diversity_credentials']['und'])) {
            if (isset($values1['field_diversity_needs']['und'][0]['target_id']) && !empty($values1['field_diversity_needs']['und'][0]['target_id'])) {
//$credentarr = $fcf['field_diversity_credentials']['und'];
                $dnnedscredentarr = $values1['field_diversity_needs']['und'];
                $dneedscosessionarr = array();
                foreach ($dnnedscredentarr as $k1 => $v1) {
                    $dneedsdcredids[] = $dneedsdcredid = $v1['target_id'];
                    $node1 = node_load($dneedsdcredid);
                    $dneedsfields = field_get_items('node', $node1, 'field_form_fields');
                    foreach ($dneedsfields as $var1 => $val1) {
                        $dneedsfieldname = $val1['value'];
                        if ($dneedsfieldname == 'field_accredited_by') {
                            $dneedsfn = $dneedsfieldname . '_dn' . $dneedsdcredid;
                            $dneedscosessionarr[$dneedsfieldname . '_dn' . $dneedsdcredid] = $values1[$dneedsfn];
                        }
                        if ($dneedsfieldname == 'field_cred_start_date') {
                            $dneedsfn = $dneedsfieldname . '_dn' . $dneedsdcredid;
                            $dneedscosessionarr[$dneedsfieldname . '_dn' . $dneedsdcredid] = $values1[$dneedsfn];
                        }
                        if ($dneedsfieldname == 'field_credential_end_date') {
                            $dneedsfn = $dneedsfieldname . '_dn' . $dneedsdcredid;
                            $dneedscosessionarr[$dneedsfieldname . '_dn' . $dneedsdcredid] = $values1[$dneedsfn];
                        }
                        if ($dneedsfieldname == 'field_credential_comments') {
                            $dneedsfn = $dneedsfieldname . '_dn' . $dneedsdcredid;
                            $dneedscosessionarr[$dneedsfieldname . '_dn' . $dneedsdcredid] = $values1[$dneedsfn];
                        }
                        if ($dneedsfieldname == 'field_credential_doc') {
                            $dneedsfn = $dneedsfieldname . '_dn' . $dneedsdcredid;
                            $dneedssearr = '';
                            if (isset($_SESSION['dneedsCoDiversity_' . $user->uid])) {
                                $dneedssearr = $_SESSION['dneedsCoDiversity_' . $user->uid];
                            }
                            if (!empty($dneedssearr) && isset($dneedssearr[$dneedsfn]) && !empty($dneedssearr[$dneedsfn]) && empty($values1[$dneedsfn])) {
                                $dneedscosessionarr[$dneedsfieldname . '_dn' . $dneedsdcredid] = $dneedssearr[$dneedsfn];
                            } else {
                                $dneedscosessionarr[$dneedsfieldname . '_dn' . $dneedsdcredid] = $values1[$dneedsfn];
                            }
                        }
                    }
                }
                $_SESSION['dneedsCoDiversity_' . $user->uid] = $dneedscosessionarr;
            }
        }
    }
}

function custom_user_invite_link($uid) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();
    $sample_style = array(
        'ctools-sample-style' => array(
            'modalSize' => array(
                'type' => 'fixed',
                'width' => 400,
                'height' => 400,
                'addWidth' => 20,
                'addHeight' => 15,
            ),
            'modalOptions' => array(
                'opacity' => .5,
                'background-color' => '#000',
            ),
            'animation' => 'fadeIn',
            'modalTheme' => 'CToolsSampleModal',
            'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
        ),
    );
    drupal_add_js($sample_style, 'setting');
    ctools_add_js('ctools-ajax-sample', 'ctools_ajax_sample');
    ctools_add_css('ctools-ajax-sample', 'ctools_ajax_sample');
//if(user_access('see full bio of user')){ 
    return ctools_modal_text_button('Invite by Email', 'custom_invite/nojs/user/' . $uid, t(''), 'ctools-modal-ctools-sample-style');
//}
}

function custom_invite_user($js = NULL, $uid) {
    ctools_include('modal');
    ctools_include('ajax');
//$uid = node_load($nid)->uid;
//$name = get_full_user_name($uid);
    $form_state = array(
        'title' => t('Invite'),
        'ajax' => TRUE,
        'build_info' => array(
            'args' => array(
                '0' => $uid,
            ))
    );
    $output = ctools_modal_form_wrapper('invite_form', $form_state, $uid);

    if (!empty($form_state['executed'])) {
        ctools_add_js('ajax-responder');
//$output[] = ajax_command_before('#content', '<div class="messages status">Invitation was sent to '.$name.'</div>');
        $output[] = ctools_modal_command_dismiss();
    }
    print ajax_render($output);
    exit;
}

function custom_invite_user_form($form, $form_state, $uid) {

    $form['mailto'] = array(
        '#type' => 'textfield',
        '#title' => 'To',
    );

    $form['descp'] = array(
        '#type' => 'textarea',
        '#title' => 'Description',
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
    );

    return $form;
}

function get_field_value($fieltype, $fieldname, $nid) {
    $fdata = '';
    $fieldnames = 'field_data_' . $fieldname; //pre($fieldnames,1);
    $query2 = db_select($fieldnames, 'f');
    if ($fieltype == 'list_text' || $fieltype == 'date' || $fieltype == 'text_long') {
        $field = $fieldname . '_value'; //pre($field);
        $query2->fields('f', array($field));
    } else if ($fieltype == 'file') {
        $field = $fieldname . '_fid';
        $query2->fields('f', array($field));
    } else {
        $query2->fields('f');
    }

    $query2->condition('f.entity_id', $nid, '=');
    $result = $query2->execute()->fetchAll();
    if ($result) {
        foreach ($result as $qry2) { //pre($qry2);
            if ($fieltype == 'list_text' || $fieltype == 'date' || $fieltype == 'text_long') {
                $fn = $fieldname . '_value';
                $fdata = $qry2->$fn;
            } else if ($fieltype == 'file') {
                $fn = $fieldname . '_fid';
                $fdata = $qry2->$fn;
            }
        }
    }

    return $fdata;
//$dCredValueField  
}

function m6connect_misc_get_company_users_by_cnid($nid) {
    $companyNode = node_load($nid);
    $companyUsers = og_get_group_members_properties($companyNode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
    return $companyUsers;
}

/*function m6connect_misc_views_pre_execute(&$view) {
  if($view->name == 'og_all_user_group_content'){
  $query = $view->build_info['query'];
  } 
}*/

function m6connect_misc_views_query_alter(&$view, &$query) { //pre($query,1);    
    global $user;
  if($view->name == 'og_all_user_group_content' && $view->current_display == 'entityreference_2') {
    //drup_msg($query);
    $getCollaboratingCom = get_company_collaborate_project();
    if(!empty($getCollaboratingCom)) {      
     $query->where[0]['conditions'][1]['field'] = 'node.nid IN(:node_nid)';
     $query->where[0]['conditions'][1]['value'][':node_nid'] = $getCollaboratingCom;
      //$query->where[2]['conditions'][0]['operator'] = 'IN';
      //$query->where[2]['conditions'][0]['value'] = array(implode(',',$getCollaboratingCom));
    }
  }   
//        $user = user_load(129);
//        $nids = array(90);
//        $query->where[1]['conditions'][] = array(
//        'field' => 'node.nid',
//        'value' => $nids,
//        'operator' => 'IN',
//        );

    if ($view->name == 'fbss_ur_stream' && $view->current_display == 'block_2') {
        $company_users = m6connect_misc_get_company_users_by_cnid(arg(1));
        $ic_or = db_or();
        $ic_or->condition('requestee_id', array(2), 'in')->condition('requester_id', array(2), 'in');
        $ic_and = db_and();
        $ic_and->condition($ic_or)->condition('approved', 1, '=');
        $ic_or2 = db_or();
        $ic_or2->condition($ic_and)->condition('users.uid', array($company_users), 'in');

        $query->where[0]['conditions'][2]['field'] = $ic_or2;
    }
    if ($view->name == 'people_join_requests') {/*
        $user_groups = og_get_groups_by_user($user, 'node');
        $i = 0;
        foreach ($user_groups as $k => $v) {
            $company_node = node_load($v);
            $company_users = m6connect_misc_get_company_users_by_cnid($v);
            if (count($company_users) > 1 && (isset($company_node->field_main_location_grp['und'][0]['target_id']) && is_numeric($company_node->field_main_location_grp['und'][0]['target_id']))) {
                if ($i != 0) {
                    unset($user_groups[$k]);
                }
            }
            $i++;
        }
        $user_groups = array($_SESSION['company']);
        $query->where[0]['conditions'][0]['operator'] = 'in';
        $query->where[0]['conditions'][0]['field'] = 'field_data_field_user_company.field_user_company_target_id';
        $query->where[0]['conditions'][0]['value'] = $user_groups;
    */}
}

function get_company_collaborate_project() {
  global $user, $company; 
  $query= db_select('node','n');
  $query->leftJoin('field_data_field_project_invite_comapnies', 'pic', 'pic.entity_id=n.nid');
  $query->leftJoin('field_data_field_company_nid_mail', 'pcne', 'pcne.entity_id = pic.field_project_invite_comapnies_value');
  $query->leftJoin('field_data_field_comapny_manager', 'pcimu', 'pcimu.entity_id = pic.field_project_invite_comapnies_value');
  $query->fields('n',array('nid'));
  $query->condition('n.type','project');
  $query->condition('n.status',1);
  $query->where('((pcimu.field_comapny_manager_value IS NOT NULL) AND (pcne.field_company_nid_mail_value=:companyNid) AND 
     (FIND_IN_SET(:UserUid,pcimu.field_comapny_manager_value)>0))', array(':UserUid' => $user->uid, ':companyNid' => $company->nid));
  $collabaratedRfp = $query->execute()->fetchCol();
  return $collabaratedRfp;
}

function m6connect_misc_date_popup_process_alter(&$element, &$form_state, $context) { //pre($element);pre($context);
    $subject = trim($element['#name']); //pre($subject);
    if (preg_match("/field_credential_end_date/i", $subject)) {
//unset($element['date']['#description']);
//unset($element['time']['#description']);
        $element['date']['#description'] = 'If applicable';
    }
}

function message_right_view() {
    global $base_url, $user;
    $output = '<div class="select-reci-user-section">
              <label>Select Message Recipent(s)</label>
              <div class="col-md-9 col-sm-12 col-xs-12 reci-user-container">
                <div id="reci-user-uid" class="reci-user-list">';
    $query = db_select('users', 'u');
    $query
            ->condition('uid', 1, '!=')
            ->condition('uid', 0, '!=')
            ->fields('u', array('name', 'uid'));
//->range(0,10);
    $result = $query->execute();
    foreach ($result as $row) {
        $cuid = $row->uid;
        $username = _get_user_full_name($cuid);
        $output .= '<div class="row">
                    <div class="col-md-2 col-sm-2 col-xs-12 reci-user-pic"><img src="' . $base_url . '/sites/default/files/rockstar_games_logo.png" height="70px" width="190px"></div>
                    <div class="col-md-7 col-sm-7 col-xs-12 reci-user-summary">
                      <div class="reci-user-name">' . $username . '</div>
                      <div class="reci-user-company">' . $cuid . 'Users company name</div>
                    </div>
                    <div class="col-md-3 col-sm-3 col-xs-12 reci-user-action">
                      <input type="checkbox" name="" value="" class="reci-user-checkbox" style="display:block;"/>
                    </div>
                  </div>';
        $output .= '<div class="clearfix"><hr /></div>';
    }
    $output .= '</div>   
              </div>
            </div>';
    return $output;
}

function _get_users_existing_co($cuser) {
    $account = user_load($cuser->uid);  //pre($account);
    if (isset($account->field_user_company) && isset($account->field_user_company['und']) && !empty($account->field_user_company['und'][0]['target_id'])) {
        $existingnid = $account->field_user_company['und'][0]['target_id'];
        return $existingnid;
    } else {
        return 0;
    }
}

function create_select_companies_form() {
    $output = '';
    $output .= '<div class="cust-create-select-co">';
    $output .= '<div class="cust-create-co">' . l(t('Create Organization'), 'node/add/organization') . '</div>';
    $output .= '<div class="cust-select-co">' . l(t('Select Organization'), 'node/add/organization') . '</div>';
    $output .= '</div>';
    return $output;
}

function select_companies_form($form, &$form_state) {
    $colists = array();
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
//************************** Start (Not Show Company When they are Inctive) **************************/
    $ic_or = db_or();
    $query->leftJoin('field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid');
    $ic_or->condition('ic.field_company_inactive_value', 1, '!=')->condition('ic.field_company_inactive_value', NULL);
    $query->condition($ic_or);
//*************************** End (Not Show Company When they are Inctive) ***************************/
//************************** Start (Show Company When show company active) **************************/
    $query->leftJoin('field_data_field_show_company_in_search', 'isa', 'isa.entity_id = n.nid');
    $query->condition('isa.field_show_company_in_search_value', 1, '=');
//*************************** End (Show Company When show company active) ***************************/


    $query->condition('type', 'organization', '=');

    $query->condition('status', '1');
    $result = $query->execute()->fetchAll();
    $colists['_none'] = 'Select';
    foreach ($result as $row) {
        $nid = $row->nid;
        $colists[$nid] = $row->title;
    }

    $form['user_company'] = array(
        '#type' => 'select',
        '#title' => 'Select Company',
        '#options' => $colists,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'send-invitations-submit')),
    );
    return $form;
}

function select_companies_form_validate(&$form, &$form_state) { //pre($form_state,1);
    $cnid = $form_state['values']['user_company'];
    if (empty($cnid) || $cnid == '_none') {
        form_set_error('', t('No Companies are selected.'));
    }
}

function select_companies_form_submit(&$form, &$form_state) { //pre($form_state,1);
    global $user;
    $cnid = $form_state['values']['user_company'];
    $account = user_load($user->uid);  //pre($account);
    if (isset($account->field_user_company)) {
        $account->field_user_company['und'][0]['target_id'] = $cnid;
        user_save($account);
    }
}

function m6connect_misc_file_download($uri) {
//$info = image_get_info($uri);pre($info,1);
//return array('Content-Type' => $info ['mime_type']);
    global $user;
    $result = db_query('SELECT id FROM `file_managed` m, file_usage u WHERE m.fid = u.fid AND u.`type` = :type AND uri = :uri', array(':type' => "node", ':uri' => $uri))->fetchField();
    if ($result) {
        $node = node_load($result);
// doing some logic ....
        if ($node->status == 0 && $node->uid == $user->uid) {
            return array('Content-Type' => file_get_mimetype($uri));
        }
    }
}

function get_system_emails_nid_by_email_event($emailEventKey) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_email_event', 'ee', 'n.nid = ee.entity_id');
    $result = $query->fields('n', array('nid'))
                    ->condition('n.type', 'system_emails', '=')
                    ->condition('ee.field_email_event_value', $emailEventKey, '=')
                    ->execute()->fetchCol();
    if (is_array($result) && !empty($result)) {
        return $result[0];
    }
    return '';
}

function _get_mail_variables($mailKey, $type, $objectMail, $other = array()) {
    global $base_url, $base_path, $user, $company;
    if(!empty($other) && !empty($other['company_nid']) && !empty($other['user_id'])){
        $user = user_load($other['user_id']);
        $company = node_load($other['company_nid']);
    }
    $entityAuther = '';
    $replace = array();
    $content = array(
        'subject' => '',
        'body' => '',
        'sender' => '',
        'attachments' => array(),
        'language' => language_default(),
        'module' => 'm6connect_misc',
        'key' => $mailKey,
        'build' => FALSE,
        'cc' => '',
        'bcc' => '',
    );
    $signUpLink = l('Sign Up', $base_url . $base_path . 'user/register', array('external' => true));
    $siteLink = l('www.m6connect.com', $base_url . $base_path, array('external' => true));
    $mailNid = get_system_emails_nid_by_email_event($mailKey);
    if ($mailNid && is_numeric($mailNid)) {
        $mailNode = node_load($mailNid);

        switch ($type) {
            case 'rfp':
                $forwordbutton = '<input type="button" value="Forward RFP" style="color: #FFF; font-size:14px; background: #337ab7; padding: 6px 15px; cursor: pointer; text-shadow: none; box-shadow:none; border: 1px solid transparent; line-height: normal; display:inline-block; vertical-align: top;" />';
                $forwordLink = $base_url . $base_path . 'rfp-forward-by-mail/' . $objectMail->nid;
                $path = drupal_lookup_path('alias', 'node/' . $objectMail->nid);
                $path = ($path) ? $path : 'node/' . $objectMail->nid;
                $entityAuther = $owner = user_load($objectMail->uid);
                $ownerCompanyNid = _get_company_nid_by_group_content($objectMail);
                $ownerCompanyNode = '';
                $companyPath = '';
                if ($ownerCompanyNid && is_numeric($ownerCompanyNid)) {
                    $ownerCompanyNode = node_load($ownerCompanyNid);
                    $companyPath = drupal_lookup_path('alias', 'node/' . $ownerCompanyNode->nid);
                    $companyPath = ($path) ? $path : 'node/' . $ownerCompanyNode->nid;
                    $companyPath = l($ownerCompanyNode->title, $base_url . $base_path . $companyPath, array('external' => true));
                }
                $replace = array(
                    '[RFP:Name]' => $objectMail->title,
                    '[RFP:Link]' => l('View ' . $objectMail->title, $base_url . $base_path . $path, array('external' => true)),
                    '[COMPANY:Logo]' => ($ownerCompanyNode && is_object($ownerCompanyNode) && isset($ownerCompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $ownerCompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '',
                    '[RFP:Description]' => (isset($objectMail->field_rfp_description['und']) && !empty($objectMail->field_rfp_description['und'][0]['value'])) ? $objectMail->field_rfp_description['und'][0]['value'] : '',
                    '[RFP:OwnerName]' => $owner->realname,
                    '[RFP:OwnerEmail]' => $owner->mail,
                    '[COMPANY:Name]' => ($ownerCompanyNode && is_object($ownerCompanyNode)) ? $ownerCompanyNode->title : '',
                    '[COMPANY:Link]' => $companyPath,
                    '[RFP:UpdateMessage]' => isset($other['update_message']) ? $other['update_message'] : '',
                    '[SITE:SignupLINK]' => $signUpLink,
                    '[SITE:Link]' => $siteLink,
                    '[RFP:ForwordLink]' => l($forwordbutton, $forwordLink, array('external' => TRUE, 'html' => TRUE)),
                );
                break;

            case 'clarification':
                $rfpNode = $other['rfpNode'];
                $messageId = (isset($objectMail->field_clarification_id['und']) && !empty($objectMail->field_clarification_id['und'][0]['value'])) ? $objectMail->field_clarification_id['und'][0]['value'] : '';
                $messageRfpId = (isset($rfpNode->field_reference_number['und']) && !empty($rfpNode->field_reference_number['und'][0]['value'])) ? $rfpNode->field_reference_number['und'][0]['value'] : '';
                $messageYear = date('Y', $objectMail->created);
                $rfppath = drupal_lookup_path('alias', 'node/' . $rfpNode->nid);
                $rfppath = ($rfppath) ? $rfppath : 'node/' . $rfpNode->nid;
                $entityAuther = $rfpowner = user_load($rfpNode->uid);
                $senderUser = user_load($objectMail->uid);
                $senderUserCompanyNid = _get_company_nid_by_group_content($objectMail);
                $senderUserCompanyName = '';
                $senderUserCompanyLogo = '';
        $chkinvialCompany = '';
        $SenderCompanyNameOnly = '';
                if ($senderUserCompanyNid && is_numeric($senderUserCompanyNid)) {
                    $senderUserCompanyNode = node_load($senderUserCompanyNid);
                    $senderUserCompanyName = $senderUserCompanyNode->title;
          $chkinvialCompany = is_company_individual_flag($senderUserCompanyNid);
          if(empty($chkinvialCompany)){
          $SenderCompanyNameOnly = $senderUserCompanyNode->title; 
          }
          
                    $senderUserCompanyLogo = ($senderUserCompanyNode && is_object($senderUserCompanyNode) && isset($senderUserCompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $senderUserCompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                    ;
                }
                $replace = array(
//'[CLARIFICATION:MessageId]' => $messageYear . '-' . $messageRfpId . '-' . $messageId,
                    '[CLARIFICATION:MessageId]' => $messageRfpId . '-' . $messageId,
                    '[CLARIFICATION:PostDate]' => date('m/d/Y H:i:s A', $objectMail->created),
                    '[CLARIFICATION:Subject]' => $objectMail->title,
                    '[CLARIFICATION:SenderName]' => _get_user_full_name($senderUser->uid, $senderUser),
                    '[CLARIFICATION:SenderCompanyName]' => $senderUserCompanyName,
          '[CLARIFICATION:SenderCompanyNameOnly]' => $SenderCompanyNameOnly,
                    '[CLARIFICATION:SenderCompanyLogo]' => $senderUserCompanyLogo,
                    '[RFP:Name]' => $rfpNode->title,
                    '[RFP:Link]' => l('View RFP -' . $rfpNode->title, $base_url . $base_path . $rfppath, array('external' => true)),
                    '[RFP:OwnerName]' => _get_user_full_name($rfpowner->uid, $rfpowner),
                    '[RFP:OwnerEmail]' => $rfpowner->mail,
                    '[SITE:SignupLINK]' => $signUpLink,
                    '[SITE:Link]' => $siteLink,
                );
                break;
            case 'project':
                $path = drupal_lookup_path('alias', 'node/' . $objectMail->nid);
                $path = ($path) ? $path : 'node/' . $objectMail->nid;
                $entityAuther = $owner = user_load($objectMail->uid);
                $ownerCompanyNid = _get_company_nid_by_group_content($objectMail);
                $ownerCompanyNode = '';
                $companyPath = '';
                $companyLogo = '';
                $comapanyName = '';
                $currentUserComapanyLogo = '';
                $currentUserComapanyLink = '';
                $currentUserComapanyName = '';


                if ($ownerCompanyNid && is_numeric($ownerCompanyNid)) {
                    $ownerCompanyNode = node_load($ownerCompanyNid);
                    $companyPath = drupal_lookup_path('alias', 'node/' . $ownerCompanyNode->nid);
                    $companyPath = ($path) ? $path : 'node/' . $ownerCompanyNode->nid;
                    $companyPath = l($ownerCompanyNode->title, $base_url . $base_path . $companyPath, array('external' => true));
                    $companyLogo = ($ownerCompanyNode && is_object($ownerCompanyNode) && isset($ownerCompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $ownerCompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                    $comapanyName = $ownerCompanyNode->title;
                }

                if ($owner->uid == $user->uid) {
                    $currentUserComapanyLogo = '';
                    $currentUserComapanyLink = $companyPath;
                    $currentUserComapanyLogo = $companyLogo;
                    $currentUserComapanyName = $comapanyName;
                } else {
                    $userCompanyNid = _get_company_nid_by_group_content($objectMail);
                    if ($userCompanyNid && is_numeric($userCompanyNid)) {
                        $userCompanyNode = node_load($userCompanyNid);
                        $currentUserComapanyLink = drupal_lookup_path('alias', 'node/' . $userCompanyNode->nid);
                        $currentUserComapanyLink = ($path) ? $path : 'node/' . $userCompanyNode->nid;
                        $currentUserComapanyLink = l($userCompanyNode->title, $base_url . $base_path . $currentUserComapanyLink, array('external' => true));
                        $currentUserComapanyLogo = ($userCompanyNode && is_object($userCompanyNode) && isset($userCompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $userCompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                        $currentUserComapanyName = $userCompanyNode->title;
                    }
                }
                $ownerCompanyNidNew = _get_company_nid_by_group_content($objectMail->nid);

                $replace = array(
                    '[PROJECT:Name]' => $objectMail->title,
                    '[PROJECT:Link]' => l('View ' . $objectMail->title, $base_url . $base_path . $path, array('external' => true)),
                    '[COMPANY:Logo]' => $companyLogo,
                    '[PROJECT:PublicDescription]' => (isset($objectMail->field_public_description['und']) && !empty($objectMail->field_public_description['und'][0]['value'])) ? $objectMail->field_public_description['und'][0]['value'] : '',
                    '[PROJECT:CompleteDescription]' => (isset($objectMail->field_complete_description['und']) && !empty($objectMail->field_complete_description['und'][0]['value'])) ? $objectMail->field_complete_description['und'][0]['value'] : '',
                    '[PROJECT:OwnerName]' => $owner->realname,
                    '[PROJECT:OwnerEmail]' => $owner->mail,
                    '[COMPANY:Name]' => ($ownerCompanyNidNew && is_numeric($ownerCompanyNidNew)) ? _get_title_of_node($ownerCompanyNidNew) : '',
                    '[COMPANY:Link]' => $companyPath,
                    '[PROJECT:UpdateMessage]' => isset($other['update_message']) ? $other['update_message'] : '',
                    '[SITE:SignupLINK]' => $signUpLink,
                    '[CURRENT_USER:CompanyLogo]' => $currentUserComapanyLogo,
                    '[CURRENT_USER:CompanyLink]' => $currentUserComapanyLink,
                    '[SITE:Link]' => $siteLink,
                    '[CURRENT_USER:CompanyName]' => $currentUserComapanyName,
                );
                //print_r($objectMail->nid); die();
                break;
            case 'company':
                $entityAuther = $owner = $objectMail;
                $ownerCompanyNid = $company->nid;
                $ownerCompanyNode = '';
                $companyPath = '';
                $companyAdminName = '';
                $companyLogo = '';
                $companyName = '';
        if($mailKey == 'company_mail___invite_user_by_company'){
        $ownerCompanyNid = $other['company_nid']; 
        }
        

                if ($ownerCompanyNid && is_numeric($ownerCompanyNid)) {
                    //$ownerCompanyNode = $company;
                    //if($mailkey == 'company_mail___invite_user_by_company'){
                    $ownerCompanyNode = node_load($ownerCompanyNid);
                    //}
                    $signUpLink = l('Sign Up', $base_url . $base_path . 'user/register', array('external' => true, 'query' => array('request-id' => $ownerCompanyNid,'invitejoinrequesterfrom'=>$user->uid,'invitejoinrequesterto'=>'signup')));
                    //$signUpLink .='?request-id='.$ownerCompanyNid;
                    $companyName = $ownerCompanyNode->title;
                    $companyPath = drupal_lookup_path('alias', 'node/' . $ownerCompanyNode->nid);
                    $companyPath = ($path) ? $path : 'node/' . $ownerCompanyNode->nid;
                    $companyPath = l($ownerCompanyNode->title, $base_url . $base_path . $companyPath, array('external' => true));
                    $companyAdminName = _get_user_full_name($ownerCompanyNode->uid);
                    $companyLogo = (isset($ownerCompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $ownerCompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                }
                $uuname = '';
                if (isset($other['email']) && $other['email'] != '') {
                    $uuser = user_load_by_mail($other['email']);
                    if (is_object($uuser) && isset($uuser->name)) {
                        $uuname = $uuser->realname;
                        //join/organization?company=4412
                        $signUpLink = l('Join Company', $base_url . $base_path . 'join/organization', array('external' => true, 'query' => array('company' => $ownerCompanyNid,'invitejoinrequesterfrom'=>$user->uid,'invitejoinrequesterto'=>$uuser->uid)));
                    } else {
                        $uuser = explode('@', $other['email']);
                        $uuname = $uuser[0];
                    }
                }
                $replace = array(
                    '[COMPANY:AdminName]' => $companyAdminName,
                    '[COMPANY:Logo]' => $companyLogo,
                    '[COMPANY:Name]' => $companyName,
                    '[COMPANY:Link]' => $companyPath,
                    '[SITE:SignupLINK]' => $signUpLink,
                    '[SITE:Link]' => $siteLink,
                    '[USER:Invitee]' => $uuname,
                );
                break;
            case 'admin':
                $userAccount = $objectMail;
                $UserName = _get_user_full_name($userAccount->uid, $userAccount);
                $ownerCompanyNid = isset($other['company_nid']) ? $other['company_nid'] : '';
                $ownerCompanyNode = '';
                $companyPath = '';
                $companyAdminName = '';
                $companyLogo = '';
                $companyName = '';
                if ($ownerCompanyNid && is_numeric($ownerCompanyNid)) {
                    $ownerCompanyNode = node_load($ownerCompanyNid);
                    $companyName = $ownerCompanyNode->title;
                    $companyPath = drupal_lookup_path('alias', 'node/' . $ownerCompanyNode->nid);
                    $companyPath = ($path) ? $path : 'node/' . $ownerCompanyNode->nid;
                    $companyPath = l($ownerCompanyNode->title, $base_url . $base_path . $companyPath, array('external' => true));
                    $companyAdminName = _get_user_full_name($ownerCompanyNode->uid);
                    $companyLogo = (isset($ownerCompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $ownerCompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                }
                $replace = array(
                    '[COMPANY:AdminName]' => $companyAdminName,
                    '[COMPANY:Logo]' => $companyLogo,
                    '[COMPANY:Name]' => $companyName,
                    '[COMPANY:Link]' => $companyPath,
                    '[SITE:SignupLINK]' => $signUpLink,
                    '[USER:Name]' => $UserName,
                    '[USER:Email]' => $userAccount->mail,
                    '[SITE:Link]' => $siteLink,
                );
                break;
        }
        if (!empty($replace)) {
            $message = (isset($mailNode->body['und']) && !empty($mailNode->body['und'][0]['value'])) ? $mailNode->body['und'][0]['value'] : '';
            $content['subject'] = str_replace(array_keys($replace), array_values($replace), $mailNode->title);
            $content['body'] = str_replace(array_keys($replace), array_values($replace), $message);
            $content['build'] = TRUE;
            if (isset($mailNode->field_attachments['und']) && !empty($mailNode->field_attachments['und'])) {
                $content['attachments'] = $mailNode->field_attachments['und'];
            }
            if ($entityAuther && is_object($entityAuther)) {
                $content['sender'] = $entityAuther->mail;
                if (!in_array($type, array('admin')) && isset($entityAuther->field_automatically_receive_mail['und']) && $entityAuther->field_automatically_receive_mail['und'][0]['value'] == 1) {
                    $content['bcc'] = $entityAuther->mail;
                }
            }
        }
    }
//drupal_set_message('<pre>'.print_r($content,1).'</pre>');
    return $content;
}

//{"status":0,"cmpNid":"702","projectNid":"383"}
//$check = check_rfp_user_ajax(node_load(324));


function strength_indicator_settings_form($form, &$form_state) {
    $form['si_field_available_for_free'] = array(
        '#type' => 'textfield',
        '#title' => t('Available for Free'),
        '#default_value' => variable_get('si_field_available_for_free', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_company_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Company Name'),
        '#default_value' => variable_get('si_company_name', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_logo'] = array(
        '#type' => 'textfield',
        '#title' => t('Company Profile Photo'),
        '#default_value' => variable_get('si_field_logo', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_company_profile_cover_img'] = array(
        '#type' => 'textfield',
        '#title' => t('Company Profile Cover Image'),
        '#default_value' => variable_get('si_field_company_profile_cover_img', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_owner_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Owner name'),
        '#default_value' => variable_get('si_field_owner_name', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_description'] = array(
        '#type' => 'textfield',
        '#title' => t('Company Description'),
        '#default_value' => variable_get('si_field_description', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    /* $form['si_field_service_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Service Description'),
      '#default_value' => variable_get('si_field_service_description', 0),
      '#size' => 2,
      '#maxlength' => 2,
      '#description' => t('Profile Strength value.'),
      '#required' => TRUE,
      ); */
    $form['si_field_website'] = array(
        '#type' => 'textfield',
        '#title' => t('Company Website URL'),
        '#default_value' => variable_get('si_field_website', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_legal_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Legal Name'),
        '#default_value' => variable_get('si_field_legal_name', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_legal_structure'] = array(
        '#type' => 'textfield',
        '#title' => t('Legal Structure'),
        '#default_value' => variable_get('si_field_legal_structure', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_incorporated_state'] = array(
        '#type' => 'textfield',
        '#title' => t('Incorporated State'),
        '#default_value' => variable_get('si_field_incorporated_state', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_incorporated_country'] = array(
        '#type' => 'textfield',
        '#title' => t('Incorporated Country'),
        '#default_value' => variable_get('si_field_incorporated_country', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_taxpayer_ssn_ein'] = array(
        '#type' => 'textfield',
        '#title' => t('Taxpayer SSN/EIN'),
        '#default_value' => variable_get('si_field_taxpayer_ssn_ein', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_duns_number'] = array(
        '#type' => 'textfield',
        '#title' => t('DUNS Number'),
        '#default_value' => variable_get('si_field_duns_number', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    /* $form['si_field_cage_code'] = array(
      '#type' => 'textfield',
      '#title' => t('CAGE Code'),
      '#default_value' => variable_get('si_field_cage_code', 0),
      '#size' => 2,
      '#maxlength' => 2,
      '#description' => t('Profile Strength value.'),
      '#required' => TRUE,
      ); */
    $form['si_field_keywords'] = array(
        '#type' => 'textfield',
        '#title' => t('Keywords'),
        '#default_value' => variable_get('si_field_keywords', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_number_of_employees'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of Employees'),
        '#default_value' => variable_get('si_field_number_of_employees', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_annual_revenue'] = array(
        '#type' => 'textfield',
        '#title' => t('Annual revenue'),
        '#default_value' => variable_get('si_field_annual_revenue', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_timezone'] = array(
        '#type' => 'textfield',
        '#title' => t('Timezone'),
        '#default_value' => variable_get('si_field_timezone', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
// It will depend on multiple location field
    $form['si_locations'] = array(
        '#type' => 'textfield',
        '#title' => t('Locations'),
        '#default_value' => variable_get('si_locations', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_diversity_credentials'] = array(
        '#type' => 'textfield',
        '#title' => t('Diversity Credentials'),
        '#default_value' => variable_get('si_field_diversity_credentials', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
    $form['si_field_diversity_program'] = array(
        '#type' => 'textfield',
        '#title' => t('Diversity Program'),
        '#default_value' => variable_get('si_field_diversity_program', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );
//It will depend on multiple fields
    $form['si_business_types'] = array(
        '#type' => 'textfield',
        '#title' => t('Business Types'),
        '#default_value' => variable_get('si_business_types', 0),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('Profile Strength value.'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function get_company_strength($nid) {
    $node = node_load($nid);
    $strength = $StrngthVal = 0;
// for company name(title)
    $StrngthVal = variable_get('si_company_name');
    $strength = $strength + $StrngthVal;
// for all usable cck field for strength indicator
    $fieldsname = array('field_available_for_free', 'field_logo', 'field_company_profile_cover_img', 'field_owner_name', 'field_description', 'field_website', 'field_legal_name', 'field_legal_structure', 'field_incorporated_state', 'field_incorporated_country', 'field_taxpayer_ssn_ein', 'field_duns_number', 'field_keywords', 'field_number_of_employees', 'field_annual_revenue', 'field_timezone', 'field_diversity_credentials', 'field_diversity_program');
    foreach ($fieldsname as $k => $v) {
        if (get_field_is_empty_or_not($node, $v)) {
            $si_var = 'si_' . $v;
            $StrngthVal = variable_get($si_var);
            $strength = $strength + $StrngthVal;
        }
    }
// for all business type fields used for strength indicator
    $BussTypesFieldname = array('field_facilities_construction', 'field_industry_naicss', 'field_products_service_unspsc', 'field_needed_products_services');
    foreach ($BussTypesFieldname as $k1 => $v1) {
        if (get_field_is_empty_or_not($node, $v1)) {
            $StrngthVal = variable_get('si_business_types');
            $strength = $strength + $StrngthVal;
            break;
        }
    }
    if ($strength > 100) {
        $strength = 100;
    }
    return $strength;
    /* return '<div class="cust-profile-indicator">
      <div class="pro-indicator-label"><label>Company Profile Strength</label></div>
      <div class="progress"><div class="progress-bar progress-bar-primary" role="progressbar" aria-valuemin="0" aria-valuemax="100" style="width:'.$strength.'%"> <span data-toggle="tooltip" data-original-title="'.$strength.'%">'.$strength.'%</span></div></div>
      </div>'; */
}

function get_field_is_empty_or_not($node, $field_name) {
    $field = field_get_items('node', $node, $field_name);
    if ($field) {
        return 1;
    } else {
        return 0;
    }
}

/* function set_existing_content_file_path($nid=87){
  $node = node_load($nid);
  if(isset($node->field_logo['und']) && !empty($node->field_logo['und'][0]['fid'])){
  $file = file_load($node->field_logo['und'][0]['fid']);
  $file_location = 'private://'.$node->title.'/Company Documents';
  $created = file_prepare_directory($file_location, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
  if($created){
  $newFile = file_move($file, $destination = $file_location, $replace = FILE_EXISTS_RENAME);
  }
  }
  return '';
  } */

/* function mymodule_move_file($file) {
  $file->filename = basename($file->filepath);
  unset($file->filepath);
  $file_path = 'source/' . $file->filename;
  $dest = 'images/' . $file->filename;
  $file->uid =1;
  $file->status = FILE_STATUS_PERMANENT;
  $file->uri = file_build_uri($file_path);
  if (!file_exists($file->uri)) {
  error_log('filemove:' . $file_path);
  return NULL;
  }
  return file_move($file, file_build_uri($dest) );
  }
 */

function set_existing_content_file_path($node) {
    $documentsFolderNames = array(
        'organization' => 'Company Documents',
        'rfp' => 'RFP Documents',
        'project' => 'Project Documents',
        'clarification' => 'Clarification Documents',
        'my_proposal' => 'Proposal Documents',
        'comment_node_my_proposal' => 'Proposal Message Documents',
    );
    if (in_array($node->type, array('organization', 'rfp', 'project', 'clarification', 'my_proposal'))) {
        $customDocumentType = check_plain($documentsFolderNames[$node->type]);
        $cmpNid = _get_user_company_nid($node->uid);
        if ($node->type == 'organization') {
            $file_location = 'private://' . check_plain($node->title) . '/' . $customDocumentType;
            $dirCreatedorExist = file_prepare_directory($file_location, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
            if ($dirCreatedorExist) {
//field_logo
                if (isset($node->field_logo['und']) && !empty($node->field_logo['und'][0]['fid'])) {
                    $file = file_load($node->field_logo['und'][0]['fid']);
                    file_move($file, $destination = $file_location, $replace = FILE_EXISTS_RENAME);
                }
            }
        } else if ($node->type == 'rfp' && $cmpNid && is_numeric($cmpNid)) {
            $customCompanyTitle = check_plain(_get_title_of_node($cmpNid));
            $rfpID = date('Y-md', $node->created);
            $rfpID .= '-' . (str_pad($node->field_rfp_serial['und'][0]['value'], 4, "0", STR_PAD_LEFT));
            $customRfpProjectId = check_plain($rfpID);
            $file_location = 'private://' . $customCompanyTitle . '/' . $customDocumentType . '/' . $customRfpProjectId;
            $dirCreatedorExist = file_prepare_directory($file_location, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
            if ($dirCreatedorExist) {
//field_rfp_logo
                if (isset($node->field_rfp_logo['und']) && !empty($node->field_rfp_logo['und'][0]['fid'])) {
                    $file = file_load($node->field_rfp_logo['und'][0]['fid']);
                    file_move($file, $destination = $file_location, $replace = FILE_EXISTS_RENAME);
                }
////field_rfp_documents => field_rfp_document
                if (isset($node->field_rfp_documents['und']) && !empty($node->field_rfp_documents['und'])) {
                    foreach ($node->field_rfp_documents['und'] as $delta => $item) {
                        $fieldCollection = field_collection_item_load($item['value']);
                        if (isset($fieldCollection->field_rfp_document['und']) && !empty($fieldCollection->field_rfp_document['und'])) {
                            foreach ($fieldCollection->field_rfp_document['und'] as $index => $fileArr) {
                                $file = file_load($fileArr['fid']);
                                file_move($file, $destination = $file_location, $replace = FILE_EXISTS_RENAME);
                            }
                        }
                    }
                }
            }
        } else if ($node->type == 'project' && $cmpNid && is_numeric($cmpNid)) {
            $customCompanyTitle = check_plain(_get_title_of_node($cmpNid));
            $customRfpProjectId = check_plain($node->title);
            $file_location = 'private://' . $customCompanyTitle . '/' . $customDocumentType . '/' . $customRfpProjectId;
            $dirCreatedorExist = file_prepare_directory($file_location, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
            if ($dirCreatedorExist) {
//field_images 
                if (isset($node->field_images['und']) && !empty($node->field_images['und'][0]['fid'])) {
                    $file = file_load($node->field_images['und'][0]['fid']);
                    file_move($file, $destination = $file_location, $replace = FILE_EXISTS_RENAME);
                }
////field_rfp_documents => field_rfp_document
                if (isset($node->field_rfp_documents['und']) && !empty($node->field_rfp_documents['und'])) {
                    foreach ($node->field_rfp_documents['und'] as $delta => $item) {
                        $fieldCollection = field_collection_item_load($item['value']);
                        if (isset($fieldCollection->field_rfp_document['und']) && !empty($fieldCollection->field_rfp_document['und'])) {
                            foreach ($fieldCollection->field_rfp_document['und'] as $index => $fileArr) {
                                $file = file_load($fileArr['fid']);
                                file_move($file, $destination = $file_location, $replace = FILE_EXISTS_RENAME);
                            }
                        }
                    }
                }
            }
        } else if ($node->type == 'clarification' && $cmpNid && is_numeric($cmpNid)) {
            $customCompanyTitle = check_plain(_get_title_of_node($cmpNid));
            $rpfNid = $node->field_rfp_reference['und'][0]['target_id'];
            $rfpNode = node_load($rpfNid);
            $rfpID = date('Y-md', $rfpNode->created);
            $rfpID .= '-' . (str_pad($rfpNode->field_rfp_serial['und'][0]['value'], 4, "0", STR_PAD_LEFT));
            $clarificationId = $rfpID;
            $clarificationId .= '-' . (str_pad($node->field_clarification_id['und'][0]['value'], 4, "0", STR_PAD_LEFT));
            $customRfpProjectId = check_plain($rfpID);
            $customParentDocumentType = check_plain($documentsFolderNames['rfp']);
            $customClarificationId = check_plain($clarificationId);
            $file_location = 'private://' . $customCompanyTitle . '/' . $customParentDocumentType . '/' . $customRfpProjectId . '/' . $customDocumentType . '/' . $customClarificationId;
            $dirCreatedorExist = file_prepare_directory($file_location, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
            if ($dirCreatedorExist) {
//field_clarification_attachment
                if (isset($node->field_clarification_attachment['und']) && !empty($node->field_clarification_attachment['und'])) {
                    foreach ($node->field_clarification_attachment['und'] as $delta => $fileArr) {
                        $file = file_load($fileArr['fid']);
                        file_move($file, $destination = $file_location, $replace = FILE_EXISTS_RENAME);
                    }
                }
            }
        } else if ($node->type == 'my_proposal' && $cmpNid && is_numeric($cmpNid)) {
            $customCompanyTitle = check_plain(_get_title_of_node($cmpNid));
            $proposalId = (str_pad($node->field_proposal_number['und'][0]['value'], 4, "0", STR_PAD_LEFT));
            $customProposalId = check_plain($proposalId);
            $file_location = 'private://' . $customCompanyTitle . '/' . $customDocumentType . '/' . $customProposalId;
            $dirCreatedorExist = file_prepare_directory($file_location, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
            if ($dirCreatedorExist) {
//field_proposal_document_picture
                if (isset($node->field_proposal_document_picture['und']) && !empty($node->field_proposal_document_picture['und'])) {
                    foreach ($node->field_proposal_document_picture['und'] as $delta => $fileArr) {
                        $file = file_load($fileArr['fid']);
                        file_move($file, $destination = $file_location, $replace = FILE_EXISTS_RENAME);
                    }
                }
//Comment => field_image_upload
                $comentNids = comment_get_thread($node, '', 100);
                if ($comentNids && !empty($comentNids)) {
                    $comments = comment_load_multiple($comentNids);
                    foreach ($comments as $commentId => $commentObj) {  //comment_node_my_proposal
                        if (isset($commentObj->field_image_upload['und']) && !empty($commentObj->field_image_upload['und'])) {
                            $customproposalCommentDocumentType = check_plain($documentsFolderNames[$commentObj->node_type]);
                            $file_location = 'private://' . $customCompanyTitle . '/' . $customDocumentType . '/' . $customProposalId . '/' . $customproposalCommentDocumentType . '/' . $commentObj->cid;
                            $dirCreatedorExist = file_prepare_directory($file_location, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
                            foreach ($commentObj->field_image_upload['und'] as $delta => $fileArr) {
                                $file = file_load($fileArr['fid']);
                                file_move($file, $destination = $file_location, $replace = FILE_EXISTS_RENAME);
                            }
                        }
                    }
                }
            }
        }
    }
}

//**************  Start User Licenses Work  **************//

/**
 * Popup’s setings function.
 */
function user_licenses_ctools_popup_style() {
    static $delegationAdded = FALSE;
    if ($delegationAdded == FALSE) {
        $delegationAdded = TRUE;
        ctools_include('modal');
        ctools_include('ajax');
        ctools_modal_add_js();
        $user_licenses_ctools_popup_style = array(
            'user-licenses-popup-style' => array(
                'modalSize' => array(
                    'type' => 'fixed',
                    'width' => 530,
                    'height' => 'auto',
                ),
                'modalOptions' => array(
                    'opacity' => (float) 0.85,
                    'background-color' => '#000000',
                ),
                'closeText' => '',
                'loadingText' => '',
                'animation' => 'fadeIn',
                'modalTheme' => 'UserLicensesPopup',
                'animationSpeed' => 'fast',
            ),
        );
        drupal_add_js($user_licenses_ctools_popup_style, 'setting');
        ctools_add_js('m6connect_user_licenses_modal', 'm6connect_misc');
    }
}

function manage_user_licenses_callback($ajax = NULL, $account, $companyNid) {
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'user_id' => $account->uid,
      'company_nid' => $companyNid,
        );
        $output = ctools_modal_form_wrapper('manage_user_licenses_form', $form_state);
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        print ajax_render($output);
        drupal_exit();
    }
    return drupal_get_form('manage_user_licenses_form', $account->uid, $companyNid);
}

function manage_user_licenses_form($form, &$form_state, $user_id = '',$company_nid='') {
    global $user, $company;
    $form = array();
    $user_id = (isset($form_state['user_id']) && is_numeric($form_state['user_id'])) ? $form_state['user_id'] : $user_id;
   $company_nid = (isset($form_state['company_nid']) && is_numeric($form_state['company_nid'])) ? $form_state['company_nid'] : $company_nid;
   
    $form_state['user_id']= $user_id; 
    $form_state['company_nid']= $company_nid; 
  
    $query = db_query('SELECT lp.user_id AS owner_id,lp.key_id AS key_id,

   lp.purchased_date AS purchased_date,la.is_active as is_active, lm.license_key AS l_key,
lm.valid_from AS valid_from, lm.valid_till AS valid_till, la.assign_by AS assign_by, la.assign_to AS assign_to, lm.product_id as product_id
FROM license_purchased AS lp JOIN license_master AS lm ON(lp.key_id=lm.id) 
LEFT JOIN license_assign AS la ON(lp.key_id=la.key_id and la.is_active=1) where lp.user_id = ' . $user->uid . ' and lp.cid = ' . $company_nid . ';
');
    $i = array();
    $default_key = 0;
    $disabled = array();
    $total_license;
    foreach ($query as $row) {
        $total_license[$row->key_id] = $row;
        if (is_numeric($row->assign_to) && $row->is_active == 1) {
            $i[$row->key_id] = $row->assign_to;
        } else {
            
        }
    }
//    $og_nodes = og_get_groups_by_user();
//    $og_nodes = implode('+', $og_nodes['node']);
    //$og_nodes = $company->nid;
  $og_nodes = $company_nid;
    $select_member_query = "SELECT users.uid AS uid, users.mail AS users_mail,la.is_active as is_active,
    last_name.field_last_name_value AS last_name_value,
 first_name.field_first_name_value AS first_name_value,
   users.login AS users_login, users.name AS users_name, users.created AS users_created, 'user' AS field_data_field_licensed_user_entity_type, 'user' AS field_data_field_last_name_user_entity_type, 'user' AS field_data_field_first_name_user_entity_type,
la.assign_to as assign_to
FROM 
users users
LEFT JOIN og_membership og_membership ON (users.uid = og_membership.etid AND og_membership.entity_type = 'user')

LEFT JOIN field_data_field_last_name AS last_name ON (users.uid=last_name.entity_id)
LEFT JOIN field_data_field_first_name AS first_name ON (users.uid=first_name.entity_id)
LEFT JOIN license_assign AS la ON (la.assign_to=users.uid)
WHERE (( (og_membership.gid = '" . $og_nodes . "' ) )AND(( (users.status <> '0') )))
ORDER BY users_created DESC, is_active asc;
";
    $select_memeber_result = db_query($select_member_query);
    $existing_user_data = array();
    foreach ($select_memeber_result as $select_memeber_row) {
        $existing_user = '<span> No </span>';
        if (is_numeric($select_memeber_row->assign_to) && $select_memeber_row->is_active == 1) {
            $existing_user = '<span>Yes</span>';
            $existing_user_data[] = $select_memeber_row->assign_to;
        }
        $data[$select_memeber_row->uid] = $existing_user . '<span>' . $select_memeber_row->first_name_value . ' ' . $select_memeber_row->last_name_value . '</span>';
    }
    $form['#attributes'] = array('class' => array('manage_user_licenses_form'), 'id' => 'manage_user_licenses_form');
    $form['heading-text'] = array(
        '#markup' => '<div class="user_licenses-header-title"><h4>Assign/Transfer Licenses</h4></div>',
        '#prefix' => '<div class="assign-bid-header">',
        '#suffix' => '</div>',
    );
    $form['heading-text'] = array(
        '#markup' => '<div class="user-licenses-header-title"><h4>Assign/Transfer Licenses</h4>
        </div><div class="user-licenses-header-desc">You can reassign licenses to other users below:</div>
        <label class="total-label">Total License:</label><span class="total-value">' . count($total_license) . '</span>
        <label class="total-label">Available License:</label><span class="total-value">' . (count($total_license) - (count($i))) . '</span>'
        ,
        '#prefix' => '<div class="user_licenses-header">',
        '#suffix' => ' </div>',
    );

    $form['key'] = array(
        '#type' => 'checkboxes',
        '#prefix' => '<div id="key_" class="action_container"> <div class="header-data clearfix"><span>Select</span> <span>License</span> <span>Name</span> </div>',
        '#suffix' => '</div>',
        '#title' => '',
        '#element_validate' => array('_field_max_value_selected_options'),
        '#options' => $data,
        '#default_value' => $existing_user_data,
    );
    if ($default_key != 0) {
        $form['custom_action'] = array(
            '#type' => 'hidden',
            '#value' => 'edit',
        );
    }
    $form['cid'] = array(
        '#type' => 'hidden',
        '#value' => $company_nid,
    );
    $form['action_container'] = array(
        '#type' => 'container',
        '#prefix' => '<div id="action_container" class="action_container clearfix"> <div class="pull-left"><a href="/upgrade-your-membership-subscription" class="btn btn-primary form-submit pull-left" >Add licenses</a></div> <div class="pull-right">',
        '#suffix' => '</div></div>',
    );

    $form['user_id'] = array('#type' => 'hidden', '#value' => $select_member_query);
    $form['action_container']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Save'
    );

    $form['action_container']['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="CANCEL" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('manage-user-licenses-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    );


    return $form;
}

/*
  function for validate total number of
 *  */

function _field_max_value_selected_options($element, &$form_state) {
    global $user, $company;
  
  $user_id = $form_state['user_id']; 
    $company_nid = $form_state['company_nid'];
  
    $query = db_query('SELECT lp.user_id AS owner_id, lp.key_id AS key_id, lp.purchased_date AS purchased_date,la.is_active as is_active, lm.license_key AS l_key,
lm.valid_from AS valid_from, lm.valid_till AS valid_till, la.assign_by AS assign_by, la.assign_to AS assign_to, lm.product_id as product_id
FROM license_purchased AS lp JOIN license_master AS lm ON(lp.key_id=lm.id) LEFT JOIN license_assign AS la ON(lp.key_id=la.key_id) where lp.user_id = ' . $user->uid . ' and lp.cid = '.$company_nid.' ;
');
    $i = 0;
    $default_key = 0;
    $disabled = array();
    $total_license;
    foreach ($query as $row) {
        $total_license[$row->key_id] = $row;
        if (is_numeric($row->assign_to) && $row->is_active == 1) {
            $i++;
        } else {
            
        }
    }
    drup_msg($form_state['values']);
    if (count($total_license) < count($element['#value'])) {
        form_error($element, 'You must have available licenses to assign. Uncheck current license holder first or upgrade and add additional licenses.');
    }
}

function manage_user_licenses_form_submit(&$form, &$form_state) {
    global $user, $company;
  $user_id = $form_state['user_id'];
    $company_nid = $form_state['company_nid'];
  
    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {

        $query = db_query('SELECT lp.user_id AS owner_id,lp.key_id AS key_id, lp.purchased_date AS purchased_date,la.is_active as is_active,  lm.license_key AS l_key,
                        lm.valid_from AS valid_from, lm.valid_till AS valid_till, la.assign_by AS assign_by, la.assign_to AS assign_to, lm.product_id as product_id
                        FROM license_purchased AS lp JOIN license_master AS lm ON(lp.key_id=lm.id) LEFT JOIN license_assign AS la ON(lp.key_id=la.key_id) where lp.user_id = ' . $user->uid . ' and lp.cid=' .$company_nid. ';
                        ');
        $i = 0;
        $default_key = 0;
        $disabled = array();
        $total_license;
        $existing_user_license = array();
        $key_id_data = array();
        foreach ($query as $row) {
            $total_license[] = $row;
            if (is_numeric($row->assign_to) && $row->is_active == 1) {
                $existing_user_license[$row->assign_to] = $row->assign_to;
                $key_id_data[$row->assign_to] = $row->key_id;
                $i++;
            } else {
                $key_id_data[] = $row->key_id;
            }
        }
        $new_use_list = $form_state['values']['key'];

        $old_user = array();
        $need_delete = array();
        $new_user = array();
        foreach ($new_use_list as $userkey => $uservalue) {
            if ($uservalue != 0) {
                if (in_array($uservalue, $existing_user_license)) {
                    $old_user[$userkey] = $uservalue;
                    unset($existing_user_license[$userkey]);
                } else {
                    $new_user[$userkey] = $uservalue;
                }
            }
        }
        foreach ($old_user as $k => $v) {
            unset($key_id_data[$v]);
        }
        $new_key_id_data = array_values($key_id_data);
        $need_delete = $existing_user_license;
//        form_set_error($form['key'], '<pre>' . print_r($form_state, 1) . '</pre>');
        $i = 0;
//        drupal_set_message('<pre>old' . print_r($old_user, 1) . 'new' . print_r($new_user, 1) . 'delete' . print_r($need_delete, 1) . '</pre>');
//        exit();
        if (count($need_delete) > 0) {
            foreach ($need_delete as $old_key => $old_value) {
                $num_updated = db_update('license_assign') // Table name no longer needs {}
                        ->fields(array(
                            'deactivate_date' => time(),
                            'is_active' => 0,
                            'assign_by' => $user->uid,
                        ))
                        ->condition('assign_to', $old_value, '=')
                        ->execute();
                $account = user_load($old_value); // Loading account
                $edit = array(
                    'field_licensed' => array(
                        'und' => array(
                            0 => array(
                                'value' => 0,
                            ),
                        ),
                    ),
                );
                user_save($account, $edit);
            }
        }
        if (count($new_user) > 0) {
            foreach ($new_user as $key => $value) {
                $store_datas = db_insert('license_assign')
                        ->fields(array('assign_by', 'assign_to', 'key_id', 'assign_date', 'cid'))
                        ->values(array(
                            'assign_by' => $user->uid,
                            'assign_to' => $value,
                            'key_id' => $new_key_id_data[$i],
                            'assign_date' => time(),
                            'cid' => $company_nid
                        ))
                        ->execute();
                $i++;
                $account = user_load($value); // Loading account
                $edit = array(
                    'field_licensed' => array(
                        'und' => array(
                            0 => array(
                                'value' => 1,
                            ),
                        ),
                    ),
                );
                user_save($account, $edit);
            }
        }
    }
//    exit();
    /* if (isset($form_state['values']['custom_action']) && $form_state['values']['custom_action'] == 'edit') {
      $num_updated = db_update('license_assign') // Table name no longer needs {}
      ->fields(array(
      'key_id' => $form_state['values']['key'],
      'assign_by' => $user->uid,
      ))
      ->condition('assign_to', $form_state['values']['user_id'], '=')
      ->execute();
      } else {
      $store_datas = db_insert('license_assign')
      ->fields(array('assign_by', 'assign_to', 'key_id', 'assign_date'))
      ->values(array(
      'assign_by' => $user->uid,
      'assign_to' => $form_state['values']['user_id'],
      'key_id' => $form_state['values']['key'],
      'assign_date' => time()
      ))
      ->execute();
      }
     */
    /*
      $account = user_load($form_state['values']['user_id']); // Loading account
      $edit = array(
      'field_licensed' => array(
      'und' => array(
      0 => array(
      'value' => 1,
      ),
      ),
      ),
      );
      user_save($account, $edit);
     */
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    $form_state['ajax_commands'][] = ctools_ajax_command_reload();
}

//***************  End User Licenses Work  ***************//
//*************** Start Proposal Access Work  ***************//
function m6connect_misc_node_access($node, $op, $account) {
    global $remove_company_tab, $user;
  
  if(isset($node->nid) && $node->nid==36 && !user_is_logged_in()){
    //return NODE_ACCESS_DENY;
  }
  if(isset($node->nid) && $node->type=='page' && !user_is_logged_in() && $node->nid != 384){
    //return NODE_ACCESS_DENY;
  }
 if(isset($node->nid) && $node->type=='page' && !user_is_logged_in() && ($node->nid == 354 || $node->nid == 18 || $node->nid == 19 || $node->nid == 20 || $node->nid == 292426)){
  return NODE_ACCESS_ALLOW;
 }
    //pre($account,1);
    //view
    $CurrCompNid = isset($_SESSION['company']) ? $_SESSION['company'] : '';
    $type = (is_object($node) && isset($node->type)) ? $node->type : '';

    if ($type && $type == 'my_proposal') {
      if($CurrCompNid){
        $node_by_com = _get_company_nid_by_group_content($node);
        $company_admin_rols = _get_company_users_by_og_roles($CurrCompNid,'company admin');
          if(($CurrCompNid == $node_by_com) && in_array($user->uid , $company_admin_rols) &&  (in_array($op, array('view','update','delete')))){      
            return NODE_ACCESS_ALLOW;
          }
          if(($CurrCompNid == $node_by_com) && $node->uid == $account->uid &&  (in_array($op, array('view','update','delete')))){
            return NODE_ACCESS_ALLOW;
          }else if(in_array($op, array('delete'))){
            return NODE_ACCESS_DENY;
          }
      }
    }
    
    
    
    if (is_numeric($node)) {
        $node = node_load($node);
    }

    $type = @is_string($node) ? $node : '';
    if ($type == '') {
        if (is_object($node)) {
            $type = $node->type;
        } else {
            $type = $node;
        }
    }
    if ($type == 'my_proposal' && (is_object($node) && $node->status == 1) && $op == 'update') {
        return NODE_ACCESS_DENY;
    }




    return NODE_ACCESS_IGNORE;
}

//*************** End Proposal Access Work  ***************//
//*************** Start Proposal Comment Insert Work  ***************//
function m6connect_misc_comment_insert($comment) {
    global $user, $base_url, $base_path;
    if ($comment->node_type == 'comment_node_my_proposal') {
        $params = array(
            'subject' => 'New Proposal Communication Message',
            'body' => '',
            'sender' => $user->mail,
            'attachments' => array(),
            'language' => language_default(),
            'module' => 'm6connect_misc',
            'key' => 'proposal_mail___insert_communuication_message',
            'build' => TRUE,
            'cc' => '',
            'bcc' => '',
        );
        $message = 'Hello,<br/><br/>[ProposalCommunication:SenderName], has posted a new Proposal Communication message for the following Proposal: [Proposal:Name] with the subject of: [ProposalCommunication:Subject]<br/><br/>To view this message, please click the link below to access the M6Connect website and read the Proposal Communication message located at the bottom of the Proposal, and respond accordingly.<br/>[Proposal:Link]<br/><br/>[ProposalCommunication:SenderName],<br/>[ProposalCommunication:SenderCompanyName]<br/>[ProposalCommunication:SenderCompanyLogo]';

        $to = '';
        $senderCompanyName = '';
        $senderCompanyLogo = '';
        $commentNode = node_load($comment->nid);
        $nodePath = drupal_lookup_path('alias', 'node/' . $comment->nid);
        $nodePath = ($nodePath) ? $nodePath : 'node/' . $comment->nid;
        $nodePath = l($commentNode->title, $base_url . $base_path . $nodePath, array('external' => true));
        $senderCompanyNid = _get_user_company_nid($user->uid);
        if ($senderCompanyNid && is_numeric($senderCompanyNid)) {
            $senderCompanyNode = node_load($senderCompanyNid);
            $senderCompanyName = $senderCompanyNode->title;
            if (isset($senderCompanyNode->field_logo['und']) && !empty($senderCompanyNode->field_logo['und'][0][fid])) {
                $fileArr = $senderCompanyNode->field_logo['und'][0];
                $objFile = file_copy((object) $fileArr, 'temporary://', FILE_EXISTS_RENAME);
                $objFile->status = 0;
                file_save($objFile);
                $senderCompanyLogo = theme('image_style', array('style_name' => 'thumbnail', 'path' => $objFile->uri, 'getsize' => TRUE));
            }
        }
        $replace = array(
            '[ProposalCommunication:SenderName]' => _get_user_full_name($user->uid),
            '[Proposal:Name]' => $commentNode->title,
            '[ProposalCommunication:Subject]' => $comment->subject,
            '[Proposal:Link]' => $nodePath,
            '[ProposalCommunication:SenderCompanyName]' => $senderCompanyName,
            '[ProposalCommunication:SenderCompanyLogo]' => $senderCompanyLogo,
        );
        $params['body'] = str_replace(array_keys($replace), array_values($replace), $message);
        if ($user->uid == $commentNode->uid) {
            $trgetNid = '';

            if (isset($commentNode->field_submit_proposal_in_respons['und']) && !empty($commentNode->field_submit_proposal_in_respons['und'][0]['target_id'])) {
                $trgetNid = $commentNode->field_submit_proposal_in_respons['und'][0]['target_id'];
            } else if (isset($commentNode->field_field_sub_proposal_pjt['und']) && !empty($commentNode->field_field_sub_proposal_pjt['und'][0]['target_id'])) {
                $trgetNid = $commentNode->field_field_sub_proposal_pjt['und'][0]['target_id'];
            } else if (isset($commentNode->field_submit_proposal_member['und']) && !empty($commentNode->field_submit_proposal_member['und'][0]['target_id'])) {
                $trgetNid = $commentNode->field_submit_proposal_member['und'][0]['target_id'];
            }
            if ($trgetNid && is_numeric($trgetNid) && $targetNode = node_load($trgetNid)) {
                $targetuser = user_load($targetNode->uid);
                $to = $targetuser->mail;
            }
        } else {
            $targetuser = user_load($commentNode->uid);
            $to = $targetuser->mail;
        }
        if ($to) {
            $return = drupal_mail($params['module'], $params['key'], $to, $params['language'], $params);
        }
    }
}

//*************** End Proposal Comment Insert Work  ***************//
//*************** Start Random Value Genrate *********//
//Random Value Ganrate 
function random_m6_id($length) {
    $random = "";
//srand((double)microtime()*1000000);


    $data = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //$data .= "abcdefghijklmnopqrstuvwxyz";
    $data .= "1234567890";

    for ($i = 0; $i < $length; $i++) {
        $random .= substr($data, (rand() % (strlen($data))), 1);
    }

    $randomnum = preg_replace("/[^0-9]/", "", $random);
    //$randoalphas = preg_replace("/[^a-z]/", "", $random);
    $randoalphab = preg_replace("/[^A-Z]/", "", $random);
    // if (($randomnum == '') || (($randoalphas == '') && ($randoalphab == ''))) {
    if (($randomnum == '') && ($randoalphab == '')) {
        return random_m6_id($length);
    }

    $invaluem6id = 1;
    $m6id_values = db_select('field_data_field_m6id', 'fdfm6id')
            ->fields('fdfm6id')
            ->condition('field_m6id_value', $random, '=')
            ->execute()
            ->fetchAll();

    if ($m6id_values && !empty($m6id_values)) {
        $invaluem6id = 2;
    }


    if ($invaluem6id == 2) {
        return random_m6_id($length);
    }

    return $random;
}

//*************** End Random Value Genrate *********//

/*
 * new people page
 */

function people_view() {
    global $base_url, $user;
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    $output = '';

    $output .= '<div class="custom-companies-lists">';
    $output .= '<div class="row">';
    $output .= '<div class="cust-company-search-form col-md-3 col-sm-12 col-xs-12">';
    $output .= drupal_render(drupal_get_form('cust_users_search_form'));
    $output .= '</div>';

    $user_name = isset($_REQUEST ['user_name']) ? $_REQUEST ['user_name'] : '';
    $user_mail = isset($_REQUEST ['user_mail']) ? $_REQUEST ['user_mail'] : '';
    $user_company = isset($_REQUEST ['user_company']) ? $_REQUEST ['user_company'] : '';
    $user_jobtitle = isset($_REQUEST ['user_jobtitle']) ? $_REQUEST ['user_jobtitle'] : '';

    $counter = 0;
    $or = db_or();
    $query = db_select('users', 'u')->extend('PagerDefault');
    $query->fields('u', array('uid', 'name'));
    if (!empty($user_name)) {
        $query->Join('field_data_field_first_name', 'fn', 'fn.entity_id = u.uid');
        $query->Join('field_data_field_last_name', 'ln', 'ln.entity_id = u.uid');
        $query->fields('fn');
        $query->fields('ln');

        $or->condition('fn.field_first_name_value', '%' . db_like($user_name) . '%', 'LIKE');
        $or->condition('ln.field_last_name_value', '%' . db_like($user_name) . '%', 'LIKE');
//$or->condition('u.mail', '%' . db_like($user_name) . '%', 'LIKE'); 
        $query->condition($or);
    }
    if (!empty($user_mail)) {
//$query->condition('u.mail', '%' . db_like($user_mail) . '%', 'LIKE');
        $query->condition('u.mail', $user_mail, '=');
    }

    if (!empty($user_company)) {
        $cuids = m6connect_misc_get_company_users_by_cnid($user_company);
        $query->condition('u.uid', $cuids, 'IN');
    }

    if (!empty($user_jobtitle)) {
        $query->Join('field_data_field_job_titles', 'j', 'j.entity_id = u.uid');
        $query->condition('j.field_job_titles_target_id', $user_jobtitle, '=');
    }

    $query->condition('u.status', '1', '=');
    $query->orderBy('u.created', 'DESC');
    $query->groupBy('u.uid');
    $query->limit(15);
    $result = $query->execute();

    $output .= '<div id="cust-company-listings" class="col-md-9 col-sm-12 col-xs-12">';
    while ($record = $result->fetchAssoc()) {
        $usr = user_load($uid = $record['uid']); //pre($usr,1);
        if ($usr->field_user_profile_photo) {
            $config = array(
//"style_name" => "user_pic_32x32",
                "style_name" => "thumbnail",
                "path" => $usr->field_user_profile_photo[LANGUAGE_NONE][0]['uri'],
                "height" => NULL,
                "width" => NULL,
            );
            $user_picture = theme_image_style($config);
        } else {

            $variables = array(
                'path' => $base_url . '/sites/default/files/default_profile.jpg',
                'alt' => '',
                'width' => '100',
                'height' => '100',
            );
            $user_picture = theme('image', $variables);
        }
        $username = _get_user_full_name($uid);
        $jobtitle = '';
        if (isset($usr->field_job_titles['und']) && isset($usr->field_job_titles['und'][0]['target_id'])) {
            $jobtitletid = $usr->field_job_titles['und'][0]['target_id'];
            $jobtitle = taxonomy_term_load($jobtitletid)->name;
        }
        $output .='<div class="project-box odd project-dragable">';
        $output .='<div class="clearfix">';
        $output .='<div class="col-md-2 col-sm-2 col-xs-12 company-image">' . l($user_picture, $base_url . '/user/' . $user->uid, array('html' => TRUE, 'attributes' => array('class' => array('people-user-img')))) . '</div>';

        $output .= '<div class="col-md-6 col-sm-5 col-xs-12 company-summary">';
        $output .='<h2>' . l($username, 'user/' . $usr->uid, array('attributes' => array('class' => array('cust-proj-title')))) . '</h2>';
        $output .='<div class="cust-job-title">' . $jobtitle . '</div>';
        $output .='</div>';

        $output .= '</div>';
        $output .= '</div>';
        $counter++;
    }
    $output .='<div class="clear"></div>';
    $output .= theme('pager', array('tags' => NULL));
    if ($counter < 1)
        $output .='<div Class="messages status">' . t('No Results available. Please try later.') . '</div>';

    $output .='</div>';

    $output .='</div>';
    $output .= '</div>';

    return $output;
}

function cust_users_search_form($form, $form_state) {
    global $user;
//drupal_add_js(drupal_get_path('module','bookmarkorganizer').'/js/bookmarkorganizer.js');
    drupal_add_library('system', 'ui.draggable');
    drupal_add_library('system', 'ui.droppable');
    drupal_add_library('system', 'ui.sortable');
    drupal_add_library('system', 'ui.dialog');
    drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/m6connect_bookmark.js');
    drupal_add_js(array('m6connect_company' => array('company' => 1, 'current_path' => current_path())), 'setting');
    drupal_add_css('.bookmarkorganizer-rename-item-form input.form-submit{ display:none; }', 'inline');
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');

    $user_name = isset($_REQUEST ['user_name']) ? $_REQUEST ['user_name'] : '';
    $user_mail = isset($_REQUEST ['user_mail']) ? $_REQUEST ['user_mail'] : '';
    $user_company = isset($_REQUEST ['user_company']) ? $_REQUEST ['user_company'] : '';
    $user_jobtitle = isset($_REQUEST ['user_jobtitle']) ? $_REQUEST ['user_jobtitle'] : '';

    $favSpanText = '?favorite=1';
    $favChecked = '';
    $defaultFavorite = '';
    $foldername = '';
//if(isset($_REQUEST['favorite']) && $_REQUEST['favorite']==1){
    if (isset($_REQUEST['favorite']) && $_REQUEST['favorite'] != '') {
        $favSpanText = '';
//$foldername = $_REQUEST['foldername'];
        $defaultFavorite = $_REQUEST['favorite'];
        $favChecked = 'checked="checked"';
    }
// Shared Functionality
    $shareCheckbox = '';
    $companyAdminUid = '';
    $shareContent = '';
    $companyNid = '';
    $showCompanySahre = FALSE;
    $companyStates = get_company_og_user_status();
    $companyUid = $companyStates['company-uid'];
    $companyNid = $companyStates['company-nid'];
//drupal_set_message('<pre>'.print_r($companyStates,1).'</pre>');
    if ($companyStates['company-admin']) {
        $shareChecked = ($companyStates['shared-checked']) ? 'checked="checked"' : '';
        $shareCheckbox = '<label class="checkbox-inline">
                    <input type="checkbox" value="' . $companyNid . '" name="share-favorite" class="share-favorite-checkbox" ' . $shareChecked . '/>Share
                    </label>';
    } else {
        $companyAdminUid = $companyStates['company-uid'];
        $showCompanySahre = $companyStates['company-share'];
// Share Start
        if ($companyAdminUid && $showCompanySahre) {
            $shareContent = _generate_share_fav_block_content($companyAdminUid, $companyNid);
        }
//Share End
    }
// End Share Functionality
//style="display:none;"
    $form['bookmark2-fav'] = array(
        '#markup' => '<div class="main-container-favorite companies-page-favorite">
            <label>Favorites</label>
            <span class="sahre-company-nid" style="display:none;">' . $companyNid . '</span>
            <span class="sahre-company-uid" style="display:none;">' . $companyUid . '</span>
            <div class="custom-favorite-container">
              <div class="text-right clearfix"><div class="pull-left">' . $shareCheckbox . '
                <label class="checkbox-inline">
                <input type="checkbox" value="1" name="show-favorite" class="show-favorite-checkbox" id="show-favorite-checkbox" ' . $favChecked . '/>Show Favorites</label></div><div class="pull-right">
                <span class="show-favorite-checkbox-link-query" style="display:none;">' . $favSpanText . '</span>
                <a href="/bookmarkorganizer/add/folder/' . $user->uid . '" title="" class="action action-addfolder"><i class="fa fa-plus fa-2"></i> Add Folder</a></div>
              </div>' . _generate_bookmark_fav_block_content() . $shareContent . '
            </div>
          </div>',
    );

    $form['user_name'] = array(
        '#type' => 'textfield',
        '#title' => 'Name',
        '#default_value' => $user_name,
        '#attributes' => array('placeholder' => t('Name'))
    );

    $form['user_mail'] = array(
        '#type' => 'textfield',
        '#title' => 'E-mail',
        '#default_value' => $user_mail,
        '#attributes' => array('placeholder' => t('Email'))
    );

//$companies = array();
    $companies = array('_None' => 'Select Company');
    $type = array('organization');
    $or = db_or();
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    $query->condition('type', $type, 'IN');
//************************** Start (Not Show Company When they are Inctive) **************************/
    $ic_or = db_or();
    $query->leftJoin('field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid');
    $ic_or->condition('ic.field_company_inactive_value', 1, '!=')->condition('ic.field_company_inactive_value', NULL);
    $query->condition($ic_or);
//*************************** End (Not Show Company When they are Inctive) ***************************/
//************************** Start (Show Company When show company active) **************************/
    $query->leftJoin('field_data_field_show_company_in_search', 'isa', 'isa.entity_id = n.nid');
    $is_or = db_or();
    $is_or->condition('isa.field_show_company_in_search_value', 1, '=')->condition();
//*************************** End (Show Company When show company active) ***************************/
    $query->orderBy('created', 'DESC');
    $query->groupBy('n.nid');
//$query->limit(15);
    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
        $companies[$record['nid']] = $record['title'];
    }

    $form['user_company'] = array(
        '#type' => 'select',
        '#title' => 'Company',
        '#options' => $companies,
        '#default_value' => $user_company,
    );

    $vid = 16;
    $jobterms = taxonomy_get_tree($vid); //pre($jobterms);
//$jobtitles = array();
    $jobtitles = array('_None' => 'Select Job Title');
    foreach ($jobterms as $k => $term) {
        $jobtitles[$term->tid] = $term->name;
    }

    $form['user_jobtitle'] = array(
        '#type' => 'select',
        '#title' => 'Job title',
        '#options' => $jobtitles,
        '#default_value' => $user_jobtitle,
    );

    $form['co_reset'] = array(
        '#type' => 'submit',
        '#value' => 'Reset',
        '#prefix' => '<div class="text-right">',
        '#attributes' => array('class' => array('btn', 'btn-primary'))
    );

    $form['co_submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'co-submit'))
    );

    return $form;
}

function cust_users_search_form_submit($form, $form_state) {
    global $base_url;
    if ($form_state['values']['op'] == 'Reset') {
        drupal_goto($base_url . '/people/people');
    } else {
        $values = $form_state['values']; //pre($values,1);
        $user_name = $values['user_name'];
        $user_mail = $values['user_mail'];
        $user_company = $values['user_company'] != '_None' ? $values['user_company'] : '';
        $user_jobtitle = $values['user_jobtitle'] != '_None' ? $values['user_jobtitle'] : '';
        $favoriteFilter = '';
        $co_favorite = trim($values['favorite']);
        if ($co_favorite != '' && is_numeric($co_favorite)) {
            $favoriteFilter = 'favorite=' . $co_favorite . '&';
        }
        $path = $base_url . "/" . current_path() . "?" . $favoriteFilter . "user_name=" . $user_name . '&user_mail=' . $user_mail . '&user_company=' . $user_company . '&user_jobtitle=' . $user_jobtitle;
    }
    drupal_goto($path);
}

/*
 * check organization type(company/individual)
 * Argument: Group nid
 */

function is_company_individual($user_gid) {
    $GroupType = '';
//  field_get_items($entity_type, $entity, $field_name);
    $query = db_select('field_data_field_type_of_company', 'tc');
    $query->fields('tc', array('field_type_of_company_value'));
    $query->condition('tc.entity_id', $user_gid, '=');
    $result = $query->execute()->fetchAll();
    if ($result) {
        foreach ($result as $q => $qval) {
            $GroupType = $qval->field_type_of_company_value;
        }
    }
    return $GroupType;
}

/*
 * On create new company after fill basic information page redirected to company profile page
 */

function custom_company_node_add_submit($form, &$form_state) {//pre($form,1);
    $form_state['redirect'] = array('node/' . $form_state['nid']);
    drupal_set_message(t('Please complete company profile.'));
}

/*
 *  custom save button on first step of company at the time of create new company
 */

function custom_save_form_after_build($form, &$form_state) { //pre($form_state);
//pre('fftt'); 
    if (arg(0) == 'node' && arg(1) == 'add') {
        //$form['field_legal_name']['#required'] = FALSE; 
        //$form['field_legal_structure']['#required'] = FALSE;  
        //unset($form['field_legal_name']['#required']);
        //unset($form['field_legal_structure']['#required']);
        if ($form_state['storage']['step'] == 'step_co_public_profile') {
            //$form['field_logo']['#access'] = FALSE;
            //$form['field_company_profile_cover_img']['#access'] = FALSE;  
            $form['actions']['custsave'] = array(
                '#type' => 'submit',
                '#value' => 'Submit',
                '#weight' => 7,
                '#submit' => array('node_form_submit', 'custom_company_node_add_submit'),
                    //'#submit' => array('custom_company_node_add_submit'),
            );
        }
    }








    return $form;
}

function m6connect_user_pass_reset_sub($form, $form_state) {
    global $base_url, $user; //pre($user);pre($form,1);
    $usr = $form['#user'];
    $uid = $usr->uid; //pre($u);pre($uid);pre($usr);pre('tt',1); 
    //$uid = $form['#user']->uid; 
    $_SESSION['m6_pass_reset_user_' . $uid] = 1;
}
  
function member_notification_status_count($userid) {
  $m6_noti_query = db_select('m6connect_notification', 'm6noti');
  $m6_noti_query->fields('m6noti');
  $m6_noti_query->condition('m6noti.request_to', $userid);
  $m6_noti_query->condition('m6noti.status', 1);
  $m6_noti = $m6_noti_query->execute()->rowCount();
  return $m6_noti;
}

function m6_notification_section() {
  global $user, $company;
  $output = '';
  $notification_count0 = 0;
  $cpath = current_path();
  drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery-ias.min.js');
  $usrco = _get_user_companies($user);
  $m6_noti_query = db_select('m6connect_notification', 'm6noti');
  $m6_noti_query->leftjoin('node', 'entity_node','entity_node.nid = m6noti.entity_id');
  $m6_noti_query->leftjoin('node', 'company_node','company_node.nid = m6noti.company_nid');
  $m6_noti_query->leftjoin('field_data_field_user_profile_photo', 'req_user_photo','req_user_photo.entity_id = m6noti.request_from');
  $m6_noti_query->leftjoin('file_managed', 'req_user_photo_file','req_user_photo_file.fid = req_user_photo.field_user_profile_photo_fid');
  $m6_noti_query->leftjoin('realname', 'reqfrom_user_realname','reqfrom_user_realname.uid = m6noti.request_from');
  $m6_noti_query->leftjoin('realname', 'reqto_user_realname','reqto_user_realname.uid = m6noti.request_to');
  $m6_noti_query->leftjoin('field_data_field_cm_type', 'fdfct', 'fdfct.entity_id = m6noti.entity_id');
  
  $m6_noti_query->fields('m6noti');
  $m6_noti_query->addField('entity_node','nid','entity_node_nid');
  $m6_noti_query->addField('entity_node','type','entity_node_type');
  $m6_noti_query->addField('entity_node','title','entity_node_title');
  $m6_noti_query->addField('company_node','title','company_node_title');
  $m6_noti_query->addField('req_user_photo_file','uri','user_profile_photo_uri');
  $m6_noti_query->addField('reqfrom_user_realname','realname','reqfrom_realname');
  $m6_noti_query->addField('reqto_user_realname','realname','reqto_realname');
  $m6_noti_query->addField('fdfct','field_cm_type_value','fdfct_cm_type');

  $m6_noti_query->condition('m6noti.request_to', $user->uid);
  $m6_noti_query->condition('m6noti.status', 1);
  $m6_noti_query->orderBy('m6noti.status', "DESC");
  $m6_noti_query->orderBy('m6noti.timestamp', "DESC");
  $m6_noti = $m6_noti_query->extend('PagerDefault')->limit(10)->execute();

  foreach ($m6_noti as $m6_noti_data) {
    if (isset($m6_noti_data->entity_id) && $m6_noti_data->entity_id != '') {
      $is_node = $is_people = 0;
      $unread = 'unread';
      $notification_count0 ++;
      $output .='<div class="notification-inner notification-' . $m6_noti_data->id . ' ' . $unread . '">';
      $request_from_user = user_load($m6_noti_data->request_from);
      $has_user_image = (!empty($m6_noti_data->user_profile_photo_uri)) ? theme('image_style', array('style_name' => 'dashboard-user-feed-pic-img_52_52', 'path' => $m6_noti_data->user_profile_photo_uri, 'getsize' => TRUE)) : '<img typeof="foaf:Image" src="/sites/default/files/styles/dashboard-user-feed-pic-img_52_52/public/images_13.png" alt="">';
      $noti_target_url = '';
      if (($m6_noti_data->type == 'people' || $m6_noti_data->type == 'company_status') && $m6_noti_data->event == 'join') {
        $noti_target_url = url('/people/pending/'.$m6_noti_data->company_nid);
        $is_people = 1;
      }
      elseif ($m6_noti_data->event == 'feedback' && $m6_noti_data->type == 'vendor_manager_request') {
        // Formatting notification for vendor request feedback.
        // This is the case when the request was made by vendor manager.
        $noti_target_url = url('node/' . $m6_noti_data->entity_node_nid, array('query' => array('vendor' => $m6_noti_data->company_nid, 'd' => 'ratings')));
      }
      elseif ($m6_noti_data->event == 'feedback-reminder' && $m6_noti_data->type == 'vendor_manager_request') {
        // Formatting notification for vendor request feedback(reminder).
        // This is the case when the request was made by vendor manager.
        $noti_target_url = url('node/' . $m6_noti_data->entity_node_nid, array('query' => array('vendor' => $m6_noti_data->company_nid, 'd' => 'ratings')));
      }
      elseif ($m6_noti_data->event == 'feedback' && $m6_noti_data->type == 'company_admin_request') {
        // Formatting notification for company manager feedback.
        // This is the case when the request was made by company admin.
        $noti_target_url = url('node/' . $m6_noti_data->entity_node_nid, array('query' => array('vendor' => 'default', 'd' => 'ratings')));
      }
      elseif ($m6_noti_data->event == 'feedback-reminder' && $m6_noti_data->type == 'company_admin_request') {
        // Formatting notification for company admin feedback (reminder).
        // This is the case when the request was made by company admin.
        $noti_target_url = url('node/' . $m6_noti_data->entity_node_nid, array('query' => array('vendor' => 'default', 'd' => 'ratings')));
      }
      elseif (($m6_noti_data->event == 'note' || $m6_noti_data->event == 'ratings') && $m6_noti_data->type == 'company_rating_request') {
        // Formatting notification for vendor request feedback.
        // This is the case when the request was made by company admin.
        $noti_target_url = url('node/' . $m6_noti_data->entity_node_nid, array('query' => array('d' => 'reviewratings')));
      }
      elseif (($m6_noti_data->event == 'notes' || $m6_noti_data->event == 'ratings') && ($m6_noti_data->type == 'company_notes' || $m6_noti_data->type == 'vendor_notes')) {
        // Formatting notifications for general notification of ratings or notes
        // sent to admin, when a user make request.
        $noti_target_url = url('node/' . $m6_noti_data->entity_node_nid, array('query' => array('d' => 'reviewratings')));
      }
      elseif ($m6_noti_data->type == 'share_status' && $m6_noti_data->event == 'og' && $m6_noti_data->entity_id == 0) {
        $noti_target_url = url('dashboard');
      }
      elseif (($m6_noti_data->type == 'share_comment' || $m6_noti_data->type == 'share_status') && $m6_noti_data->event == 'og' || $m6_noti_data->event == 'user') {
        $noti_target_url = url('statuses/' . $m6_noti_data->entity_id);
      }
      elseif ($m6_noti_data->type == 'share_status' && $m6_noti_data->event == 'user' && $m6_noti_data->company_nid == 0) {
        $noti_target_url = url('user/' . $m6_noti_data->request_to);
      }
      elseif ($m6_noti_data->type == 'bumpit_status' && ($m6_noti_data->event == 'og' || $m6_noti_data->event == 'user')) {
        $noti_target_url = url('statuses/' . $m6_noti_data->entity_id);
      }
      elseif ($m6_noti_data->type == 'relationship' && $m6_noti_data->event == 'request') {
        // $noti_target_url = url('statuses/' . $m6_noti_data->entity_id);
          $noti_target_url = url('/user/'.$m6_noti_data->request_from);
      }
      elseif ($m6_noti_data->type == 'user' && ($m6_noti_data->event == 'bookmark' || $m6_noti_data->event == 'unbookmark')) {
        $noti_target_url = url('/user/' . $m6_noti_data->entity_id);
      }
      elseif ($m6_noti_data->type == 'private_message' && $m6_noti_data->event == 'message_sent') {
        $noti_target_url = url('/messages/view/' . $m6_noti_data->entity_id);
      }
      elseif ($m6_noti_data->type == 'prochat' && $m6_noti_data->event == 'invite') {
        $noti_target_url = url('/prochat');
      }
      elseif ($m6_noti_data->type == 'm6id' && $m6_noti_data->event == 'project_invitations') {
        $noti_target_url = url('/onboarding/projectlist');
        if (!empty($m6_noti_data->fdfct_cm_type)) {
          $noti_target_url = url('/onboarding/projectlist/'.$m6_noti_data->fdfct_cm_type);   
        }
      }
      elseif ($m6_noti_data->type == 'm6id' && $m6_noti_data->event == 'project_submit_employee') {
        $noti_target_url = url('/onboarding/in-process');
        if (!empty($m6_noti_data->fdfct_cm_type)) {
          $noti_target_url = url('/onboarding/in-process/'.$m6_noti_data->fdfct_cm_type);   
        }
      }
      elseif ($m6_noti_data->type == 'relationship' && $m6_noti_data->event == 'request') {
        $noti_target_url = url('/user/'.$m6_noti_data->request_from);
      }
      elseif ($m6_noti_data->type == 'relationship' && $m6_noti_data->event == 'approve') {
        $noti_target_url = url('/user/'.$m6_noti_data->request_from);
      }
	  elseif ($m6_noti_data->type == 'scm' && $m6_noti_data->event == 'scorecard_share' || $m6_noti_data->event == 'scorecard_share_update'|| $m6_noti_data->event == 'ratings_submitted') {
        $noti_target_url = url('/scorecard/evaluate/'.$m6_noti_data->entity_node_nid);
      }
      elseif ($m6_noti_data->type == 'scm' && $m6_noti_data->event == 'scorecard_product_add') {
        $gopath = '/node/' . $m6_noti_data->entity_node_nid . '/review-products';
        $noti_target_url = url($gopath);
      }
      elseif ($m6_noti_data->type == 'scm' && $m6_noti_data->event == 'screqust') {
        $gopath = '/switch/' . $m6_noti_data->company_nid . '?destination=scm/my-request';
        $noti_target_url = url($gopath);
      }
      elseif ($m6_noti_data->type == 'scm' && $m6_noti_data->event == 'share_recommendation') {
        $gopath = '/scorecard/my-scorecards';
        $is_node = 1;
        $noti_target_url = url($gopath);
      }
      elseif (isset($m6_noti_data->entity_node_nid) && is_numeric($m6_noti_data->entity_node_nid)) {
        $noti_target_url = url('node/' . $m6_noti_data->entity_node_nid);
        $is_node = 1;
      }
	  

      $output2 = '';
      $output2 .='<div class="col-md-2 col-sm-2 col-xs-2 padding-5">';
      $output2 .= $has_user_image;
      $output2 .= '</div>';

      $output2 .= '<div class="col-md-10 col-sm-10 col-xs-10 padding-5">';
      $output2 .= notification_message($m6_noti_data, $m6_noti_data->type, $m6_noti_data->event, $m6_noti_data->request_to, $m6_noti_data->request_from, $m6_noti_data->entity_id, $m6_noti_data->company_nid, $m6_noti_data->message);

      if ($m6_noti_data->timestamp) {
        $output2 .='<div class="notification-time">';
        $output2 .= format_interval((time() - $m6_noti_data->timestamp), 1);
        $output2 .='</div>';
      }

      $output2 .='</div>';
      $company_nid = $m6_noti_data->company_nid;

      if ($is_node) {
        $gopath = '';
        if (!in_array($m6_noti_data->entity_node_type, array('organization'))) {
          if (isset($company_nid) && $company_nid != '') {
            if (in_array($company_nid, $usrco)) {
             $output .= l($output2, 'switch/' . $company_nid, array('attributes' => array('class' => array('row', 'margin-5', 'notification-inner2' ,'test1')), 'html' => TRUE, 'query' => array('destination' => $noti_target_url)));
             $gopath = '/switch/' . $company_nid . '?destination=' . $noti_target_url;
            }
          }
          else {
            $output .= l($output2, $noti_target_url, array('attributes' => array('class' => array('row', 'margin-5', 'notification-inner2','test2')), 'html' => TRUE));
            $gopath = $noti_target_url;
          }
        } else {
          $output .= l($output2, $noti_target_url, array('attributes' => array('class' => array('row', 'margin-5', 'notification-inner2')), 'html' => TRUE));
          $gopath = $noti_target_url;
        }
      }
      elseif ($is_people) {
        if (isset($company_nid) && $company_nid != '') {
          if (($m6_noti_data->type == 'company_status') && $m6_noti_data->event == 'join') {
          $output .= l($output2,  $noti_target_url, array('attributes' => array('class' => array('row', 'margin-5', 'notification-inner2')), 'html' => TRUE));
          //$gopath = '/switch/' . $company_nid . '?destination=' . $noti_target_url;
        
          }
          else {
            if (in_array($company_nid, $usrco)) {
              $output .= l($output2, 'switch/' . $company_nid, array('attributes' => array('class' => array('row', 'margin-5', 'notification-inner2')), 'html' => TRUE, 'query' => array('destination' => $noti_target_url)));
              $gopath = '/switch/' . $company_nid . '?destination=' . $noti_target_url;
            }
          }
        }
        else {
          $output .= l($output2, $noti_target_url, array('attributes' => array('class' => array('row', 'margin-5', 'notification-inner2')), 'html' => TRUE));
          $gopath = $noti_target_url;
        }
      }
      elseif ($m6_noti_data->type == 'vendor_manager_request' || $m6_noti_data->type == 'company_admin_request' || $m6_noti_data->type == 'company_rating_request' || $m6_noti_data->type == 'company_notes' || $m6_noti_data->type == 'company_ratings' || $m6_noti_data->type == 'vendor_notes' || $m6_noti_data->type == 'vendor_ratings') {
        $output .= t('<a href="!link" class="row margin-5 notification-inner2">!output</a>', array('!link' => $noti_target_url, '!output' => $output2));
       }
      else {
        $output .= l($output2, $noti_target_url, array('attributes' => array('class' => array('row', 'margin-5', 'notification-inner2')), 'html' => TRUE));
        $gopath = $noti_target_url;
      }

      if (($m6_noti_data->type == 'relationship') && ($m6_noti_data->event == 'request')) {
        $output.=connect_category_action_box($m6_noti_data->entity_id, $m6_noti_data->request_to, $m6_noti_data->request_from, $m6_noti_data->id);
      }
      elseif (($m6_noti_data->type == 'company_status') && $m6_noti_data->event == 'join') {
        $output .= '<div class="notification-actions-btn clearfix"><a class="use-ajax notification-actions-btn-no" href="/notification/remove/' . $m6_noti_data->id . '/nojs" class="notification-actions-btn-yes"><i class="fa fa-times"></i></a><a href="javascript:void(0);" onclick="company_join_accept_pending_request(' . $m6_noti_data->request_from . ',' . $m6_noti_data->id . ',' . $m6_noti_data->company_nid . ')" class="notification-actions-btn-yes"><i class="fa fa-check"></i></a></div>';
      }
      else {
        $output .= '<div class="notification-actions-btn clearfix notification-actions-no">';
        $output .='<a class="use-ajax notification-actions-btn-no" href="/notification/remove/' . $m6_noti_data->id . '/nojs" class="notification-actions-btn-yes"><i class="fa fa-times"></i></a>';
        $output .='</div>';
      }
      $output .= '</div>';
    }
  }

  $notification_count = $notification_count0;
  return array('output' => $output, 'notification_count' => $notification_count);
}

function notification_message($m6_noti_data, $type, $event, $requet_to, $requet_form, $entity_id = '', $company_nid = '', $message = '') {
  if (($type == 'people') && ($event == 'join')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> intersted to Join <strong>' . $m6_noti_data->entity_node_title . '</strong>.';
  }

  if (($type == 'rfp') && ($event == 'bidding')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : Rfp bidding received from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'rfp') && ($event == 'invite')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : Rfp invited from: <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'rfp') && ($event == 'bidder_feedback')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : Rfp bidder feedback: <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }
  if (($type == 'proposal') && ($event == 'invite')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : proposal invited from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'proposal') && ($event == 'receive')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : proposal received from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }
  if (($type == 'proposal') && ($event == 'awarded')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : proposal awarded from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }
  if (($type == 'proposal') && ($event == 'rejected')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : proposal rejected from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }


  if (($type == 'project') && ($event == 'invite')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : project invite from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'project') && ($event == 'interest')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : project intersted from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'project') && ($event == 'uninterest')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : project unintersted from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'project') && ($event == 'project_bidding')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : project bidding from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'project') && ($event == 'unproject_bidding')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : project unbidding from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'project') && ($event == 'collabarate')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : project collabarate from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'routing_slip') && ($event == 'invite')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : routing slip invite from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'routing_slip') && ($event == 'approved' || $event == 'rejected' || $event == 'not_sure_yet')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : routing slip ' . $message . ' from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }


  if (($type == 'share_status') && ($event == 'og')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> shared post with you.';
  }

  if (isset($type) && ($type == 'share_status') && ($event == 'user')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> shared post with you.';
  }
  if (($type == 'share_comment') && ($event == 'og')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> commented on your Post.';
  }

  if (($type == 'share_comment') && ($event == 'user')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> commented on your Post.';
  }

  if (($type == 'bumpit_status') && ($event == 'og' || $event == 'user')) {
    if (isset($message) && $message == 'like') {
      $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Bumped your post.';
    } else if (isset($message) && $message == 'unlike') {
      $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Unbumped your post.';
    }

    if (isset($message) && $message == 'spam') {
      $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Spam your post';
    } else if (isset($message) && $message == 'unspam') {
      $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Unspam your post';
    }
  }
  
  if (($type == 'project') && ($event == 'bookmark')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> bookmarked project: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }
  if (($type == 'project') && ($event == 'unbookmark')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unbookmarked project: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }
  if (($type == 'project') && ($event == 'spam')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> spam project: ' . $m6_noti_data->entity_node_title;
  }
  if (($type == 'project') && ($event == 'unspam')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unspam project: ' . $m6_noti_data->entity_node_title;
  }
  if (($type == 'rfp') && ($event == 'spam')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> spam rfp: ' . $m6_noti_data->entity_node_title;
  }
  if (($type == 'rfp') && ($event == 'unspam')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unspam rfp: ' . $m6_noti_data->entity_node_title;
  }
  if (($type == 'my_proposal') && ($event == 'spam')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> spam proposal: ' . $m6_noti_data->entity_node_title;
  }
  if (($type == 'my_proposal') && ($event == 'unspam')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unspam proposal: ' . $m6_noti_data->entity_node_title;
  }



  if (($type == 'rfp') && ($event == 'bookmark')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> bookmarked rfp: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }
  if (($type == 'rfp') && ($event == 'unbookmark')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unbookmarked rfp: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }

  if (($type == 'my_proposal') && ($event == 'bookmark')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> bookmarked proposal: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }
  if (($type == 'my_proposal') && ($event == 'unbookmark')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unbookmarked proposal: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }

  if (($type == 'organization') && ($event == 'bookmark')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> bookmarked your company: ' . $m6_noti_data->company_node_title;
  }
  if (($type == 'organization') && ($event == 'unbookmark')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unbookmarked your company: ' . $m6_noti_data->company_node_title;
  }

  if (($type == 'user') && ($event == 'bookmark')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> bookmarked you.';
  }

  if (($type == 'user') && ($event == 'unbookmark')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unbookmarked you.';
  }

  if (($type == 'organization') && ($event == 'follow')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> follow your company: <strong>' . $m6_noti_data->entity_node_title . '</strong>';
  }

  if (($type == 'organization') && ($event == 'unfollow')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unfollow your company: <strong>' . $m6_noti_data->entity_node_title . '</strong>';
  }


  if (($type == 'project') && ($event == 'favourite')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> favorite project: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }
  if (($type == 'project') && ($event == 'unfavourite')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unfavorite project: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }

  if (($type == 'rfp') && ($event == 'favourite')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> favorite rfp: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }
  if (($type == 'rfp') && ($event == 'unfavourite')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unfavorite rfp: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }

  if (($type == 'my_proposal') && ($event == 'favourite')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> favorite proposal: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }
  if (($type == 'my_proposal') && ($event == 'unfavourite')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unfavorite proposal: ' . $m6_noti_data->entity_node_title . ' of ' . $m6_noti_data->company_node_title;
  }


  if (($type == 'organization') && ($event == 'favourite')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> favorite your company: ' . $m6_noti_data->company_node_title;
  }
  if (($type == 'organization') && ($event == 'unfavourite')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> unfavorite your company: ' . $m6_noti_data->company_node_title;
  }


  if (($type == 'clarification') && ($event == 'private')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> clarification for  ' . $m6_noti_data->company_node_title;
  }

  if (($type == 'clarification') && ($event == 'public')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> clarification for  ' . $m6_noti_data->company_node_title;
  }

  if (($type == 'routing_slip') && ($event == 'update')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> routing slip : <strong>' . $m6_noti_data->entity_node_title . '</strong> updated';
  }
  if (($type == 'project') && ($event == 'update')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> project : <strong>' . $m6_noti_data->entity_node_title . '</strong> updated';
  }

  if (($type == 'rfp') && ($event == 'update')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> rfp : <strong>' . $m6_noti_data->entity_node_title . '</strong> updated';
  }

  if (($type == 'relationship') && ($event == 'approve')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Approved Connection Request.';
  }
  if (($type == 'relationship') && ($event == 'disapprove')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Disapprove Connection Request.';
  }

  if (($type == 'relationship') && ($event == 'remove')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Remove Connection Request.';
  }

  if (($type == 'company_status') && ($event == 'join')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Sent Join Company Request.';
  }
  if (($type == 'company_status') && ($event == 'approve')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Accept Your Join Company Request.';
  }
  if (($type == 'company_status') && ($event == 'deny')) {
    $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Reject Your Join Company Request.';
  }

  if (isset($requet_to) && isset($entity_id) && ($type == 'relationship') && ($event == 'request')) {
    //$path = current_path();
    
    $output .= 'Pending Connection Request from ' . $m6_noti_data->reqfrom_realname;
    /* $output .= 'Connect Request Pending from ' . $m6_noti_data->reqfrom_realname . '
    <div class="notification-inner-buttons"><a href="/user/'.$requet_to.'/relationships/requested/'.$entity_id.'/disapprove?destination='.$path.'" class="user_relationships_popup_link"><i class="fa fa-times"></i></a><a href="/user/'.$requet_to.'/relationships/requested/'.$entity_id.'/approve?destination='.$path.'" class="user_relationships_popup_link"><i class="fa fa-check"></i></a></div>'; */
  }

  if (($type == 'private_message') && ($event == 'message_sent')) {
    $output .= 'You have received a message from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>';
  }

  if (($type == 'insurance_certificates') && ($event == 'invite')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : Insurance Certificate invite from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }
  if (($type == 'insurance_certificates') && ($event == 'approved' || $event == 'rejected' || $event == 'pending')) {
    $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : Insurance Certificate ' . $event . ' from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }
  
  if(($type  == 'prochat')  && ($event == 'invite')){
     $output .= '<strong>' . $m6_noti_data->reqfrom_realname . '</strong> Join in Prochat Group';  
  }
  //m6id
  if(($type  == 'm6id')  && ($event == 'invite')){
    $output .= 'M6ID - Employee Invite from <strong>' .$m6_noti_data->reqfrom_realname.'</strong>.';  
  }
  if(($type  == 'm6id')  && ($event == 'project_invitations')){
    $output .= '<strong>' .$m6_noti_data->entity_node_title.'</strong> : M6ID - Project Invitations from <strong>' .$m6_noti_data->reqfrom_realname.'</strong>.';  
  }
  if(($type  == 'm6id')  && ($event == 'worker_project_invite')){
    $output .= '<strong>' .$m6_noti_data->entity_node_title.'</strong> : M6ID Worker Project invite from <strong>' .$m6_noti_data->reqfrom_realname.'</strong>.';  
  }
  if(($type  == 'm6id')  && ($event == 'm6connect_onboarding_request')){
    if($m6_noti_data->message == 'approve-access'){
    $output .= $m6_noti_data->reqto_realname.' company M6ID status has changed to Approved by '.$m6_noti_data->reqfrom_realname.' for the '.$m6_noti_data->entity_node_title.'.'; 
  }
  else if($m6_noti_data->message == 'pending-access'){
    $output .= $m6_noti_data->reqto_realname.' company M6ID status has changed to Pending by '.$m6_noti_data->reqfrom_realname.' for the '.$m6_noti_data->entity_node_title.'.'; 
  }
  else if($m6_noti_data->message == 'reject-access'){
    $output .= $m6_noti_data->reqto_realname.' company M6ID status has changed to Rejected by '.$m6_noti_data->reqfrom_realname.' for the '.$m6_noti_data->entity_node_title.'.';  
  }
  else if($m6_noti_data->message == 'submit-access'){
    $output .= $m6_noti_data->reqto_realname.' company M6ID status has changed to submit by '.$m6_noti_data->reqfrom_realname.' for the '.$m6_noti_data->entity_node_title.'.'; 
  }
  else if($m6_noti_data->message == 'revoke-access'){
    $output .= $m6_noti_data->reqto_realname.' company M6ID status has changed to revoke by '.$m6_noti_data->reqfrom_realname.' for the '.$m6_noti_data->entity_node_title.'.'; 
  } 
  }
  if(($type  == 'm6id')  && ($event == 'project_submit_employee')){
     $output .= '<strong>' . $m6_noti_data->entity_node_title . '</strong> : m6id project submit employees from <strong>' . $m6_noti_data->reqfrom_realname . '</strong>.';
  }

  if (($type == 'vendor_manager_request' || $type == 'company_admin_request') && $event == 'feedback') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> has requested you to provide feedback for ' . ucwords($m6_noti_data->entity_node_title);
  }
  if (($type == 'vendor_manager_request' || $type == 'company_admin_request') && $event == 'feedback-reminder') {
    $output .= '<strong>Reminder: ' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> has requested you to provide feedback for ' . ucwords($m6_noti_data->entity_node_title);
  }
  if ($type == 'company_rating_request' && $event == 'note') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> has submitted a note for ' . ucwords($m6_noti_data->entity_node_title) . '. Please review it.';
  }
  if ($type == 'company_rating_request' && $event == 'ratings') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> has rated ' . ucwords($m6_noti_data->entity_node_title) . '. Please review the ratings.';
  }
  if ($type == 'company_notes' && $event == 'ratings') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> has rated ' . ucwords($m6_noti_data->entity_node_title) . '. Please review the ratings.';
  }
  if ($type == 'company_notes' && $event == 'notes') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> has submitted a note for ' . ucwords($m6_noti_data->entity_node_title) . '. Please review it.';
  }
  
  if ($type == 'scm' && $event == 'scorecard_share') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> has shared scorecard questions to you, please review.';
  }
  if ($type == 'scm' && $event == 'scorecard_share_update') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> has shared an update to Scorecard <strong>' . ucwords($m6_noti_data->entity_node_title) . '</strong>.';
  }
  if ($type == 'scm' && $event == 'scorecard_product_add') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> added new products for your company.<strong>';
  }
  if ($type == 'scm' && $event == 'ratings_submitted') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> has shared an update to Scorecard <strong>' . ucwords($m6_noti_data->entity_node_title) . '</strong>.';
  }
  if ($type == 'scm' && $event == 'invitevendor') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> has invite to join vendor to you';
  }
  if ($type == 'scm' && $event == 'screqust') {
    $screqfrom_realname = _get_user_mail_realname_by_uid($requet_form);
    $output .= '<strong>' . ucwords($screqfrom_realname['name']) . '</strong> has created Sc request ' . ucwords($m6_noti_data->entity_node_title) . '. Please review it.';
  }
  if ($type == 'scm' && $event == 'share_recommendation') {
    $output .= '<strong>' . ucwords($m6_noti_data->reqfrom_realname) . '</strong> shared the decision for Scorecard <strong>' . ucwords($m6_noti_data->entity_node_title). '</strong>.';
  }

  return $output;
}

function unsubscribe_m6connect_user($gid) {
    global $user;
    $return = 0;
    $company = node_load($gid);
    $companyUsers = og_get_group_members_properties($company, array(), 'members__' . OG_STATE_ACTIVE, 'node');
    if (is_array($companyUsers) && count($companyUsers) > 0) {
        $grpMembers = count($companyUsers);
        $grpMemberRoles = array();
        foreach ($companyUsers as $k => $v) {
            $grpMemberRoles[$v] = og_get_user_roles('node', $gid, $v);
        } //pre($grpMemberRoles);
        if ($company->uid == $user->uid) {
            if ($grpMembers == '1') {
                $return = 1;
            } else {
                $return = 2;
            }
        } else {
            $MemberRole = $grpMemberRoles[$user->uid];
            if (!in_array('administrator member', $MemberRole) && $grpMembers > 1) {
                $return = 3;
            } else {
                $return = 4;
            }
        }
    }
    echo $return;
}

function unsubscribe_m6group_user($gid) {
    global $user;
    $uid = $user->uid;
    og_ungroup('node', $gid, 'user', $uid);
}

function custom_profile_about_edit_form($form, &$form_state) {
    //pre($form);
    global $user;
    $cuser = user_load($user->uid);
    $job_title_tid = $cuser->field_job_titles['und'][0]['target_id'];
    $job_title_term = taxonomy_term_load($job_title_tid);
    $job_title_name = $job_title_term->name;
    //field_address
    //field_job_titles
    //field_user_company_name
    //field_user_qualification
    //field_date_of_birth
    //entityreference/autocomplete/single/field_job_titles/user/user/897


    $field = field_info_field('field_address');
    $instance = field_info_instance('user', 'field_address', 'user');

    $address = addressfield_default_values($field, $instance);
    //$address['country'] = US
    $address['thoroughfare'] = $cuser->field_address['und'][0]['thoroughfare'];
    $address['premise'] = $cuser->field_address['und'][0]['premise'];
    $address['locality'] = $cuser->field_address['und'][0]['locality'];
    $address['administrative_area'] = $cuser->field_address['und'][0]['administrative_area'];
    $address['postal_code'] = $cuser->field_address['und'][0]['postal_code'];

    $handlers = array(
        'address' => 'address',
    );
    $context = array(
        'mode' => 'form'
    );
    $form['address'] = addressfield_generate($address, $handlers, $context);
    $form['address']['country']['#access'] = FALSE;



    $form['field_job_titles_edit'] = array(
        '#type' => 'textfield',
        '#title' => t('Current Job Titles'),
        '#size' => 30,
        '#maxlength' => 128,
        '#autocomplete_path' => 'entityreference/autocomplete/single/field_job_titles/user/user/' . $user->uid,
    '#description' => 'Let others know your current Job Title.',
        '#default_value' => $job_title_term->name,
            //'#weight' => -1,
    );
  $form['field_user_company_name_edit'] = array(
        '#type' => 'textfield',
        '#title' => t('Current Company Name'),
        '#default_value' => $cuser->field_user_company_name['und'][0]['value'],
        '#size' => 60,
        '#maxlength' => 128,
    '#description' => 'Let others know where you are currently working.',  
    '#attributes'=> array('placeholder'=>'Let others know where you are currently working.'),
    );
    $form['field_user_qualification_edit'] = array(
        '#type' => 'textfield',
        '#title' => t('Education'),
        '#default_value' => $cuser->field_user_qualification['und'][0]['value'],
        '#size' => 60,
        '#maxlength' => 128,
    '#description' => 'Enter your highest or most relevant education level (ie: A.A., Metro Community College)',  
    '#attributes'=> array('placeholder'=>'Enter your highest or most relevant education level (ie: A.A., Metro Community College)'),    
  );


    $form['field_date_of_birth_edit'] = array(
        '#type' => 'date_popup',
        '#title' => t("Your Birth Date"),
        //'#description' => t('Please select your birth date'),
        //'#required' => TRUE,
        '#date_format' => 'Y-m-d',
        '#date_year_range' => '0:-50',
        // '#attributes' => array('autocomplete' =>'off','readonly' => 'readonly'),
        '#default_value' => $cuser->field_date_of_birth['und'][0]['value'],
    );



    $form['submit'] = array('#type' => 'submit', '#value' => 'Submit');

    return $form;
}

function custom_profile_about_edit_form_submit($form, &$form_state) {
//pre($form_state,1);
//pre($form_state,1);
    global $user;
    $uid = $user->uid;
    $account = user_load($uid);
    $field_job_titles_edit1 = explode('(', $form_state['values']['field_job_titles_edit']);

    $field_job_titles_edit12 = str_replace(')', '', $field_job_titles_edit1[1]);


    //$field_address_edit = $form_state['values']['field_address_edit'];
    //$field_job_titles_edit = $form_state['values']['field_job_titles_edit'];
    $field_user_company_name_edit = $form_state['values']['field_user_company_name_edit'];
    $field_user_qualification_edit = $form_state['values']['field_user_qualification_edit'];
    $field_date_of_birth_edit = $form_state['values']['field_date_of_birth_edit'];

    //$form_state['field_address']['und'][0]['value'] = $field_address_edit;
    if ($field_job_titles_edit12) {
        $form_state['field_job_titles']['und'][0]['target_id'] = $field_job_titles_edit12;
    }
    $form_state['field_user_company_name']['und'][0]['value'] = $field_user_company_name_edit;
    $form_state['field_user_qualification']['und'][0]['value'] = $field_user_qualification_edit;
    $form_state['field_date_of_birth']['und'][0]['value'] = $field_date_of_birth_edit;

    $entity = entity_metadata_wrapper('user', $account);
//pre($entity,1);
//field_profile_address is the name of the address field
//save fields from the "addressfield" module
    $entity->field_address->thoroughfare = $form_state['values']['thoroughfare'];
    $entity->field_address->premise = $form_state['values']['premise'];
    $entity->field_address->locality = $form_state['values']['locality'];
    $entity->field_address->administrative_area = $form_state['values']['administrative_area'];
//$entity->field_address->country = 'US';//country
    $entity->field_address->postal_code = $form_state['values']['postal_code']; //'1111111111111111111111111111111';//zip
    $entity->save();
    user_save($account, $form_state);
}

function custom_profile_contact_information_edit_form($form, &$form_state) {
    //pre($form);
    global $user;
    $cuser = user_load($user->uid);
    //mail
    //field_phone
//field_facebook_url
//field_linkedin_url
//field_twitter_url
//field_behance_url


    $form['field_user_email_edit'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#default_value' => $cuser->mail,
        '#size' => 60,
        '#maxlength' => 128,
        '#attributes' => array('disabled' => 'disabled'),
        '#required' => TRUE,
    );


    $form['field_phone_edit'] = array(
        '#type' => 'textfield',
        '#title' => t('Phone'),
        '#default_value' => $cuser->field_phone['und'][0]['value'],
        '#size' => 60,
        '#maxlength' => 14,
        //'#element_validate' => array('element_validate_integer_positive'),  
        '#required' => TRUE,
    );




    $form['field_facebook_url_edit'] = array(
        '#type' => 'textfield',
        '#title' => t('Facebook Url'),
        '#default_value' => $cuser->field_facebook_url['und'][0]['value'],
        '#size' => 60,
        '#maxlength' => 128,
            // '#required' => TRUE,
    );
    $form['field_linkedin_url_edit'] = array(
        '#type' => 'textfield',
        '#title' => t('linkedin Url'),
        '#default_value' => $cuser->field_linkedin_url['und'][0]['value'],
        '#size' => 60,
        '#maxlength' => 128,
            // '#required' => TRUE,
    );
    $form['field_twitter_url_edit'] = array(
        '#type' => 'textfield',
        '#title' => t('Twitter Url'),
        '#default_value' => $cuser->field_twitter_url['und'][0]['value'],
        '#size' => 60,
        '#maxlength' => 128,
            // '#required' => TRUE,
    );
    $form['field_behance_url_edit'] = array(
        '#type' => 'textfield',
        '#title' => t('Behance Url'),
        '#default_value' => $cuser->field_behance_url['und'][0]['value'],
        '#size' => 60,
        '#maxlength' => 128,
            // '#required' => TRUE,
    );


    $form['submit'] = array('#type' => 'submit', '#value' => 'Submit');

    return $form;
}

function custom_profile_contact_information_edit_form_validate($node, $form, &$form_state) {
    // if ($node->type == 'article') {
    /* if (!is_numeric($form['values']['field_phone_edit']) ) {
      form_set_error('title', t('Phone must be numeric'));
      } */
    if ($form['values']['field_phone_edit'] == '') {
        form_set_error('title', t('Please Fill Phone Number'));
    }

    // }
}

function custom_profile_contact_information_edit_form_submit($form, &$form_state) {


    global $user;
    $uid = $user->uid;
    $account = user_load($uid);


    $field_phone_edit = $form_state['values']['field_phone_edit'];
    //$field_phone_edit1 = "(".substr($field_phone_edit, 0, 3).") ".substr($field_phone_edit, 3, 3)."-".substr($field_phone_edit,6);
    $field_facebook_url_edit = $form_state['values']['field_facebook_url_edit'];
    $field_linkedin_url_edit = $form_state['values']['field_linkedin_url_edit'];
    $field_twitter_url_edit = $form_state['values']['field_twitter_url_edit'];
    $field_behance_url_edit = $form_state['values']['field_behance_url_edit'];

    $form_state['field_phone']['und'][0]['value'] = $field_phone_edit;
    $form_state['field_facebook_url']['und'][0]['value'] = $field_facebook_url_edit;
    $form_state['field_linkedin_url']['und'][0]['value'] = $field_linkedin_url_edit;
    $form_state['field_twitter_url']['und'][0]['value'] = $field_twitter_url_edit;
    $form_state['field_behance_url']['und'][0]['value'] = $field_behance_url_edit;
    user_save($account, $form_state);
}

function custom_connections_search_form($form, &$form_state, $uid = null) {
    global $user;
    if ($uid == null) {
        $uid = $user->uid;
    }
    $form['submit'] = array('#type' => 'submit', '#value' => 'Search');
    $form['admin']['author'] = array(
        '#type' => 'textfield',
        //'#title' => t('Authored by'),
        '#size' => 10,
        '#maxlength' => 60,
        '#autocomplete_path' => 'user-custom/' . $uid . '/autocomplete',
        //'#default_value' => $author,
        '#weight' => -1,
    );



    return $form;
}

function m6connect_misc_get_all_related_members($uid = null) {
    global $user;
    if ($uid) {
        $user = user_load($uid);
    }

    $nodes = og_get_groups_by_user($user, 'node');

    $groups = node_load_multiple($nodes);
    $allmembers = array();
    foreach ($groups as $group) {
        $members = og_get_group_members_properties($group, array(), 'members__' . OG_STATE_ACTIVE, 'node');
        $allmembers = array_merge($allmembers, $members);
    }
    $allmembers = array_unique($allmembers);
    return $allmembers;
}

function m6connect_misc_realname_autocomplete($uid = null, $string = '') {
    global $user;
    if ($uid) {
        $user = user_load($uid);
    }
    $all_members = m6connect_misc_get_all_related_members($user->uid);
    if (!empty($string)) {
        $query = db_select('users', 'u');
        $query->leftJoin('realname', 'rn', 'u.uid = rn.uid');
        $query->fields('u', array('uid', 'name'));
        $query->condition(db_or()
                        ->condition('rn.realname', '%' . db_like($string) . '%', 'LIKE')
                        ->condition('u.name', '%' . db_like($string) . '%', 'LIKE')
        )->condition('u.uid', $all_members, 'in');
        $query->range(0, 10);
        $uids = $query->execute()->fetchCol();
        $accounts = user_load_multiple($uids);

        foreach ($accounts as $account) {
            $matches[$account->name] = t('!realname (@username)', array('!realname' => format_username($account), '@username' => $account->name));
        }
    }

    drupal_json_output($matches);
}

function custom_connections_search_form_submit($form, &$form_state) {
    $field_admin_author_value1 = explode('_', $form_state['values']['author']);

    // $field_user_company_name_edit2 = str_replace(')', '' , $field_user_company_name_edit1[1]);
//pre($form_state,1);
    drupal_goto('user/' . $field_admin_author_value1[1]);
}

function connection_member_status($cuserid) {
    global $user;
    $luserid = $user->uid;
    if (is_numeric(arg(1))) {
        $ic_or = db_or();
        $ic_or->condition('requestee_id', arg(1), '=')->condition(arg(1), $user->uid, '=');
        $relationships_results11 = db_select('user_relationships', 'uc')
                ->fields('uc')
                ->condition($ic_or)
                ->condition('approved', '1', '=')
                ->execute()
                ->fetchAll();

        $ap_requestee_ids = array();
        $requester_ids = array();
        $approved_ids = array();
        $con = array();
        foreach ($relationships_results11 as $relationships_results1122) {
            $ap_requestee_ids[] = $relationships_results1122->requestee_id;
        }
    }
    $output = '';

    if (!empty($ap_requestee_ids)) {

        if (in_array($cuserid, $ap_requestee_ids)) {
            if ($cuserid != $luserid) {
                $output .=1;
            } else {
                $output .=2;
            }
        }
    } else {
        $output .=3;
    }



    return $output;
}

function member_notification_status_count_zero() {
    global $user;
    $userid = $user->uid;
    $m6_noti_update = db_update('m6connect_notification')
            ->fields(array('status' => 0,))
            ->condition('request_to', $userid, '=')
            ->execute();
}

function connection_member_status_button($userid = false, $cuserid = false) {
    $ic_or = db_or();
    $ic_or->condition('requester_id', $userid, '=')->condition('requestee_id', $userid, '=');
    $results = db_select('user_relationships', 'uc')
            ->fields('uc')
            ->condition($ic_or)
            //  ->condition('approved', '1', '=')
            ->execute()
            ->fetchAll();

    $approve_requestee_ids = array();
    $unapprove_requestee_ids = array();
    $approve_requester_ids = array();
    $unapprove_requester_ids = array();

    foreach ($results as $relationship_result) {
        if ($relationship_result->requestee_id == $cuserid && $relationship_result->approved == 1) {
            $approve_requestee_ids[] = $relationship_result->requestee_id;
        } else if ($relationship_result->requestee_id == $cuserid && $relationship_result->approved == 0) {
            $unapprove_requestee_ids[] = $relationship_result->requestee_id;
        }

        if ($relationship_result->requester_id == $cuserid && $relationship_result->approved == 1) {
            $approve_requester_ids[] = $relationship_result->requester_id;
        } else if ($relationship_result->requester_id == $cuserid && $relationship_result->approved == 0) {
            $unapprove_requester_ids[] = $relationship_result->requester_id;
        }
    }

    $output = '';

    if (in_array($cuserid, $unapprove_requestee_ids)) {
        $output = 'Request Sent';
    } else if (in_array($cuserid, $approve_requestee_ids)) {
        $output = 'Connected';
    } else if (in_array($cuserid, $unapprove_requester_ids)) {
        $output = 'Approval';
    } else if (in_array($cuserid, $approve_requester_ids)) {
        $output = 'Connected';
    } else {
        $output = 'Connect';
    }

    return array('button' => $output);
}
/*function connection_find_people_status_button($userid = false, $cuserid = false) {
  
  $ic_or = db_or();
    $ic_or->condition('requester_id', $userid, '=')->condition('requestee_id', $userid, '=');
    $results = db_select('user_relationships', 'uc')
            ->fields('uc')
            ->condition($ic_or)
            //  ->condition('approved', '1', '=')
            ->execute()
            ->fetchAll();

    $approve_requestee_ids = array();
    $unapprove_requestee_ids = array();
    $approve_requester_ids = array();
    $unapprove_requester_ids = array();

    foreach ($results as $relationship_result) {
        if ($relationship_result->requestee_id == $cuserid && $relationship_result->approved == 1) {
            $approve_requestee_ids[] = $relationship_result->requestee_id;
        } else if ($relationship_result->requestee_id == $cuserid && $relationship_result->approved == 0) {

            $unapprove_requestee_ids[] = $relationship_result->requestee_id;
        }

        if ($relationship_result->requester_id == $cuserid && $relationship_result->approved == 1) {
            $approve_requester_ids[] = $relationship_result->requester_id;
        } else if ($relationship_result->requester_id == $cuserid && $relationship_result->approved == 0) {
            $unapprove_requester_ids[] = $relationship_result->requester_id;
        }
    }

    $output = '';

    if (in_array($cuserid, $unapprove_requestee_ids)) {
        $output = 'Request Sent';
    } else if (in_array($cuserid, $approve_requestee_ids)) {
        $output = 'Connected';
    } else if (in_array($cuserid, $unapprove_requester_ids)) {
        $output = 'Approvel Request';
    } else if (in_array($cuserid, $approve_requester_ids)) {
        $output = 'Connected';
    } else {
        $output = 'Connect';
    }
    return array('button' => $output);
}*/
function notification_peple_join($action, $uid, $id,$company_nid) {
    global $user, $company;
  
    $account = user_load($uid);
    $m6connect_notification_table_exist = db_table_exists('m6connect_notification');
    if ($action == 'accept') {

        /*$edit['roles'] = $account->roles;
        $LocationAdmin = 0;

        unset($edit['roles'][11]);
        $company_node = node_load($account->field_user_company['und'][0]['target_id']);
        $comapny_users = m6connect_misc_get_company_users_by_cnid($company_node->nid);
        if (count($comapny_users) == 1 && (isset($company_node->field_main_location_grp['und'][0]['target_id']) && is_numeric($company_node->field_main_location_grp['und'][0]['target_id']))) {
            $edit['roles'][5] = 'Company Admin';
            $user_role = $edit['roles'][5];
            $LocationAdmin = 1;
        } else {
            $edit['roles'][12] = 'Staff';
            $user_role = $edit['roles'][12];
        }

        $companyTargetId = $account->field_user_company['und'][0]['target_id'];
        $values = array(
            'entity_type' => 'user',
            'entity' => $account,
            'state' => OG_STATE_ACTIVE,
        );
        og_group('node', $account->field_user_company['und'][0]['target_id'], $values);

        $edit['field_user_company']['und'] = array();
        $edit['field_organization_mail']['und'] = array();
        user_save($account, $edit);*/
    
    $edit['roles'] = $account->roles; 
        $edit['og_group_ref'] = $account->og_group_ref;
        $LocationAdmin = 0;
        unset($edit['roles'][11]);
        $company_node = node_load($account->field_user_company['und'][0]['target_id']);
        $comapny_users = m6connect_misc_get_company_users_by_cnid($company_node->nid);

       
        //print "<pre>"; print_r($company_node); die;
    
        $edit['og_group_ref']['und'][]['target_id'] = $account->field_user_company['und'][0]['target_id'];
        $companyTargetId = $account->field_user_company['und'][0]['target_id'];
        $values = array(
            'entity_type' => 'user',
            'entity' => $account,
            'state' => OG_STATE_ACTIVE,
        );
        $og_membership = og_group('node', $account->field_user_company['und'][0]['target_id'], $values);
        $ogrolesk = og_roles('node', 'organization');
        $ogroles = array_flip($ogrolesk);
        if (count($comapny_users) == 1 && (isset($company_node->field_main_location_grp['und'][0]['target_id']) && is_numeric($company_node->field_main_location_grp['und'][0]['target_id']))) {
            $user_role = $ogrolesk[$ogroles['company admin']];
            og_role_grant('node', $account->field_user_company['und'][0]['target_id'], $account->uid, $ogroles['company admin']);
         $LocationAdmin = 1;
        } else {
            $user_role = $ogrolesk[$ogroles['staff']];
            og_role_grant('node', $account->field_user_company['und'][0]['target_id'], $account->uid, $ogroles['staff']);
        }

        $edit['field_user_company']['und'] = array();
        $edit['field_organization_mail']['und'] = array();
        user_save($account, $edit);
    
    
        if (db_table_exists('m6connect_company_join_request')) {
            db_update('m6connect_company_join_request')
                    ->fields(array('status' => 1))
                    ->condition('entity_id', $companyTargetId, '=')
                    ->condition('user_uid', $account->uid, '=')
                    ->condition('status', 0, '=')
                    ->execute();
        }

        if ($m6connect_notification_table_exist) {
            $m6_noti_update = db_update('m6connect_notification')
                    ->fields(array('status' => 0,))
                    ->condition('id', $id, '=')
                    ->execute();

            $m6connect_notification = array(
                'type' => 'company_status',
                'event' => 'approve',
                'entity_id' => 0,
                //'company_nid' => $company->nid,
        'company_nid' => $company_nid,
                'message' => NULL,
                'request_from' => $user->uid,
                'request_to' => $uid,
                'status' => 1,
                'timestamp' => time(),
            );
            entity_save('m6connect_notification', (object) $m6connect_notification);
        }

        // if first user join location then assign them as group administartor
        if ($LocationAdmin) {
            $gid = $company_node->nid;
            $rid = 6;
            og_role_grant('node', $gid, $uid, $rid);
        }
        echo 'done';
        // Checking for company's m6level here.
        if (isset($company_node->field_m6level[LANGUAGE_NONE][0]['value'])) {
            if ($company_node->field_m6level[LANGUAGE_NONE][0]['value'] < 6 && count($comapny_users) > 1) {
                $company_node->field_m6level[LANGUAGE_NONE][0]['value'] = 6;
                node_save($company_node);
            }
        }
    }
    drupal_exit(0);
}

function dashboard_share_com_list_form($form, &$form_state) {
    $form = array();
    $result = company_query('list');
    if (isset($result)) {
        $comname_option = array();
        foreach ($result as $copmanyRows) {
            $share_com_action = '/dashboard/company/set/' . $copmanyRows->nid;
            $comname_option[$share_com_action] = $copmanyRows->title;
        }

        $form['share_com_list'] = array(
            '#type' => 'select',
            '#chosen' => TRUE,
            '#options' => $comname_option,
            //'#empty_option' => 'Select Company',
            '#attributes' => array('onchange' => 'jQuery(".company-list").dropdown("toggle"); window.location = this.options[this.selectedIndex].value;'),
        );
    }
    return $form;
}

function dashboard_share_com_list() {
    $output = drupal_render(drupal_get_form('dashboard_share_com_list_form'));
    return $output;
}

function custom_connection_category_delete($node, $action, $ajax = NULL) {
    ctools_include('ajax');
    $commands = array();
    if (isset($node->nid) && $action == 'delete') {
        $catetory_delete = node_delete($node->nid);
        $commands[] = ajax_command_remove('.views-row-category-' . $node->nid);
    }
    print ajax_render($commands);
    exit;
}

function custom_connection_category_rename($node, $action, $ajax = NULL) {
    //pre($node,1);
    ctools_include('ajax');
    $commands = array();
    $html = drupal_render(drupal_get_form('custom_connection_category_rename_box_form', $node));
    $commands[] = ajax_command_invoke('.views-row-category-' . $node->nid . ' .views-field-nothing span.field-content', 'hide');
    $commands[] = ajax_command_append('.views-row-category-' . $node->nid . ' .views-field-nothing', $html);
    print ajax_render($commands);
    exit;
}

function custom_connection_category_rename_box_form($form, &$form_state, $node) {
    $form['#attributes'] = array('class' => array('custom_connection_category_rename_box', 'custom_connection_category_rename_box_' . $node->nid));

    $form['category_nid'] = array(
        '#type' => 'value',
        '#value' => $node->nid,
    );

    $form['category_rename'] = array(
        '#type' => 'textfield',
        '#default_value' => $node->title,
        '#maxlength' => 128,
        '#ajax' => array(
            'callback' => 'rename_connection_category_callback',
            'effect' => 'fade',
            'progress' => array('type' => 'none'),
        ),
    );

    $form['category_rename_submit'] = array(
        '#type' => 'submit',
        '#value' => 'save',
        '#attributes' => array('class' => array('rename_connection_category'), 'style' => 'display:none;'),
        '#executes_submit_callback' => FALSE,
        '#limit_validation_errors' => array(),
        '#href' => '',
        '#ajax' => array(
            'callback' => 'rename_connection_category_callback',
            'effect' => 'fade',
            'event' => 'click',
            'progress' => array('type' => 'none'),
        ),
    );

    return $form;
}

function rename_connection_category_callback(&$form, &$form_state) {
    $commands = array();
    $output = '';
    $values = $form_state['values'];
    $catid = $values['category_nid'];
    $catname = trim($values['category_rename']);

    if (!empty($catid) && is_numeric($catid) && !empty($catname)) {
        $cat_nload = node_load($catid);
        $cat_nload->title = $catname;
        node_save($cat_nload);
        $commands[] = ajax_command_remove('.custom_connection_category_rename_box_' . $catid);
        $commands[] = ajax_command_invoke('.views-row-category-' . $catid . ' .views-field-nothing span.field-content .category-title a', 'text', array($cat_nload->title));
    }

    $commands[] = ajax_command_invoke('.views-row-category-' . $catid . ' .views-field-nothing span.field-content', 'show');

    return array('#type' => 'ajax', '#commands' => $commands);
}

/* * ****new connecton request ***start**** */

function connect_category_action_box($entity_id = false, $request_to = false, $request_from = false, $noti_id = false) {
    /*$output = '';

    $output .= '<div class="notification-actions-btn clearfix notification-inner-buttons">';
    $connect_category_disapprove = '<i title="Decline Request" class="fa fa-times"></i>';
    $output .= l($connect_category_disapprove, 'connect/' . $noti_id . '/category/disapprove/' . $entity_id . '/' . $request_to . '/' . $request_from . '/nojs', array('attributes' => array('class' => array('notification-actions-btn-no use-ajax')), 'html' => TRUE));

    $links = array();
    $connections = m6connect_misc_get_groups_by_ownerid($user->uid, 'connection_categories');
    $cat_array = array('Clients','Prospects','Sales Associates','Acquaintances','Business Associates','Friends');
    foreach ($connections as $connection) {
        $cat_title ='';
          if(in_array($connection->title,$cat_array)){
            
            if($connection->title=='Clients'){
              $cat_title = 'People that you consider a client or are current clients';
            }
            if($connection->title=='Prospects'){
              $cat_title = 'People you are pursing for business';
            }
            if($connection->title=='Sales Associates'){
              $cat_title = 'People who are pursuing you for business';
            }
            if($connection->title=='Acquaintances'){
              $cat_title = 'General people you meet';
            }
            if($connection->title=='Business Associates'){
              $cat_title = 'People you commonly work with';
            }
            if($connection->title=='Friends'){
              $cat_title = 'Friends & Family';
            }
          }else{
            $cat_title = $connection->title;
          }
      
        $links[] = array('title' => ucfirst($connection->title), 'href' => 'connect/' . $noti_id . '/category/' . $connection->nid . '/approve/' . $entity_id . '/' . $request_to . '/' . $request_from . '/nojs', 'attributes' => array('title'=>$cat_title,'class' => array('use-ajax')));
    }
    $connect_category_approve = '<i title="Accept Request" class="fa fa-check"></i>';

    $output .= theme('m6_ctools_dropdown', array('main_title' => $connect_category_approve, 'links' => $links, 'title_class' => array('notification-actions-btn-yes'), 'image' => 1));

    $output .= '</div>';


    return $output;*/
  
//new checkbox format
  $output = '';
  $output .= '<div class="user-page-connect-category notification-actions-btn clearfix notification-inner-buttons">';
  $connect_category_disapprove = '<i title="Decline Request" class="fa fa-times"></i>';
  $output .= l($connect_category_disapprove, 'connect/' . $noti_id . '/category/disapprove/' . $entity_id . '/' . $request_to . '/' . $request_from . '/nojs', array('attributes' => array('class' => array('notification-actions-btn-no use-ajax')), 'html' => TRUE));  
  $category_action = 'approve';  
  $data = render(drupal_get_form('connection_category_action_box_form',$category_action,$request_from,$request_to,$entity_id,$noti_id));
  $connect_category_approve = '<i title="Accept Request" class="fa fa-check"></i>';
  $output .= theme('m6_ctools_dropdown_form', array('main_title' => $connect_category_approve, 'title_class' => array('notification-actions-btn-yes'), 'image' => 1, 'data'=>$data));    
  $output .= '</div>';
  return $output;
}

function connection_category_action_box_form($form,&$form_state,$action,$request_form,$request_to,$entity_id=false,$notification_id=false){   
  $form['#attributes']['class'] = 'padding-5 margin-bottom-10 connection-category-action-box-form';
  global $user;
  $connections = m6connect_misc_get_groups_by_ownerid($user->uid, 'connection_categories');
  $cat_array = array('Clients','Prospects','Sales Associates','Acquaintances','Business Associates','Friends');  
  $Cat_OgId = _get_relationship_group($request_form,$request_to);
  $form['action_box_error']= array(
    '#markup' => '<div class="action-box-error form-item"></div>',  
  ); 
  foreach ($connections as $connection) {
    $cat_title ='';
    if(in_array($connection->title,$cat_array)){      
    if($connection->title=='Clients'){
      $cat_title = 'People that you consider a client or are current clients';
    }
    if($connection->title=='Prospects'){
      $cat_title = 'People you are pursing for business';
    }
    if($connection->title=='Sales Associates'){
      $cat_title = 'People who are pursuing you for business';
    }
    if($connection->title=='Acquaintances'){
      $cat_title = 'General people you meet';
    }
    if($connection->title=='Business Associates'){
      $cat_title = 'People you commonly work with';
    }
    if($connection->title=='Friends'){
      $cat_title = 'Friends & Family';
    }
    }else{
      $cat_title = $connection->title;
    }
  $DefaultCheck = '';
  if (array_key_exists($connection->nid, $Cat_OgId)) {
      $DefaultCheck = 1;    
    }
    $form['connection_category_'.$connection->nid] = array(
      '#type' => 'checkbox',
      '#title' => $connection->title,
    '#default_value' => $DefaultCheck,
    '#attributes' => array('title'=> $cat_title),
    '#parents' => array('connection_category',$connection->nid),
    );      
  }
  $entity_id = (isset($entity_id)?$entity_id:'');
  $notification_id = (isset($notification_id)?$notification_id:'');
  $form['connection_category_action'] = array('#type' => 'value', '#value' => $action);
  $form['connection_request_form'] = array('#type' => 'value', '#value' => $request_form);
  $form['connection_request_to'] = array('#type' => 'value', '#value' => $request_to);
  $form['connection_entity_id'] = array('#type' => 'value', '#value' => $entity_id);
  $form['connection_entity_id'] = array('#type' => 'value', '#value' => $entity_id);
  $form['connection_notification_id'] = array('#type' => 'value', '#value' => $notification_id);
  $form['submit'] = array(
    '#type' => 'submit',
  '#value' => t('Add'),
  '#submit' =>array('connection_category_action_box_submit_handler'),
  '#prefix' => '<div class="connected-user-action">',
  '#suffix' => '</div>',
  '#ajax' => array(
            'callback' => 'connection_category_action_box_callback',
            //'event' => 'click',
        )
  );
  
  //user block
  $UserStatus = '';
  $flag = flag_get_flag('connection_action'); 
  if ($flag && $flag->is_flagged($request_to)) {
    $UserStatus = 'unblock'; 
  }
  else{
    $UserStatus = 'block'; 
  }
  
  
  $relationships = user_relationships_load(array('approved' => TRUE, 'requester_id'=>$request_form,'requestee_id' =>$request_to));
  if(isset($relationships) && !empty($relationships)){  
  $form['connected_user_action']= array(
    '#markup' => '<div class="connected-user-action">'.l(ucwords($UserStatus).' This User', 'connection/user/'.$request_to.'/'.$UserStatus.'/nojs', array('html' => TRUE, 'attributes' => array('title' => $UserStatus.' This user', 'class' => array('btn btn-warning use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal connected-user-action-btn')))).'</div>', 
  //'#suffix' => '</div>',
    );    
  }
  else if($UserStatus == 'unblock'){
    $form['connected_user_action']= array(
    '#markup' => '<div class="connected-user-action">'.l(ucwords($UserStatus).' This User', 'connection/user/'.$request_to.'/'.$UserStatus.'/nojs', array('html' => TRUE, 'attributes' => array('title' => $UserStatus.' This user', 'class' => array('btn btn-warning use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal connected-user-action-btn')))).'</div>', 
  //'#suffix' => '</div>',
    );   
  }
  $connection_block_action = '';
  $flag = flag_get_flag('connection_action'); 
  if ($flag && ($flag->is_flagged($request_to,$request_form)  || $flag->is_flagged($request_form ,$request_to))) {
    $connection_block_action = 'unblock'; 
  }
  else{
    $connection_block_action = 'block'; 
  }
  
  $form['connection_block_action'] = array('#type' => 'value', '#value' => $connection_block_action);
  
  return $form; 
}

function connection_category_action_box_form_validate($form,&$form_state){
 /* $values = $form_state['values'];
  if (isset($values) && $values['connection_category_action'] == 'change-category') {
    //form_set_error('year_of_birth', t('Enter a year between 1900 and 2000.'));
    $FindCat = array();
  foreach($values['connection_category'] as $CatId=>$value){
    if(!empty($values['connection_category'][$CatId])){
    $FindCat[] = $CatId;
    
    }
  }
  if(empty($FindCat)){
    form_set_error('connection_category', t('Please select at lest one'));
  }
  } */
}

function connection_category_action_box_callback($form,&$form_state){ //pre($form_state['values']);
  $commands = array();
  global $user;
  $values = $form_state['values'];
  //pre($values,1);
 /* $UserStatus = '';
  $flag = flag_get_flag('connection_action'); 
  if ($flag && $flag->is_flagged($values['connection_request_to'])) {
    $UserStatus = 'unblock'; 
  }
  else{
    $UserStatus = 'block'; 
  }  */
  
  $relationship_rid = db_next_id(db_query('SELECT MAX(rid) FROM {user_relationships}')->fetchField());
    
  if( $values['connection_block_action'] != 'unblock'){
    //connection request section
    if($values['connection_category_action'] == 'connect'){
    $ConnectCat = array();
    $ConnRequestTo = user_load($values['connection_request_to']);
    $OgReqestToValue = array(
      'entity_type' => 'user',
      'entity' => $ConnRequestTo,
      'state' => OG_STATE_PENDING,
    );
    foreach($values['connection_category'] as $CatId=>$value){
      if(!empty($values['connection_category'][$CatId])){
      $ConnectCat[] = $CatId;
      $OgMembershipReqestTo = og_group('node', $CatId, $OgReqestToValue);
      $OgMembershipReqestId = $OgMembershipReqestTo->id;
      if (db_table_exists('m6connect_connection_category_request')) {
        $db_insert_category = array(
        'og_memid' => $OgMembershipReqestId,
        'rid' => $relationship_rid,
        'category_id' => $CatId,
        'requester' => $values['connection_request_form'],
        'requestee' => $values['connection_request_to'],
        'status' => 0,
        );      
        db_insert('m6connect_connection_category_request')->fields($db_insert_category)->execute();
      }         
      }       
    }
    if(!empty($ConnectCat)){
      if (db_table_exists('m6connect_notification')) {
      $m6connect_notification = array(
        'type' => 'relationship',
        'event' => 'request',
        'entity_id' => $relationship_rid,
        'company_nid' => 0,
        'message' => NULL,
        'request_from' => $values['connection_request_form'],
        'request_to' => $values['connection_request_to'],
        'status' => 1,
        'timestamp' => time(),
      );
      entity_save('m6connect_notification', (object) $m6connect_notification);
      }       
      if (db_table_exists('user_relationships')) {
      db_insert('user_relationships')->fields(array(
        'rid' => $relationship_rid,
        'requester_id' => $values['connection_request_form'],
        'requestee_id' => $values['connection_request_to'],
        'rtid' => 5,
        'approved' => 0,
        'created' => time(),
        'changed' => time(),
        'flags' => 0,
      ))->execute();
      }
      $buttonhtml = '<a class="connect btn btn-primary pull-right" href="javascript:void(0);" title="Connect">Request Sent</a>';
      $commands[] = ajax_command_html('.user-'.$values['connection_request_to'].'-connect-category',$buttonhtml);         
    }
    
    /*$RequestSender = _get_user_mail_realname_by_uid($user->uid);
    $RequestReciver = _get_user_mail_realname_by_uid($values['connection_request_to']);
    $to = $RequestReciver['mail'];
    $subject = $RequestSender['realname'] .' has requested you to connect';
    $body = $RequestReciver['realname'].'</br>
     '.$RequestSender['realname'].' has send you connection request. 
  Please check the request on your left panel connection section.</br></br>
  
    Sincerely</br>'.
    $RequestSender['realname'];*/
    
    /*$to = $connectiouserUidDetails[$values['connection_request_to']]->mail.', mkagl02@gmail.com';
    $subject = $connctionUserDetail['SenderName'] .' has requested you to connect';
    $body = theme('connection_request_email_notify', array('connctionUserDetail' => $connctionUserDetail,'peopleYouMayKnowDetail'=>$peopleYouMayKnowDetail));
    $params = array (
      'subject' => $subject,
      'sender' => $connectiouserUidDetails[$user->uid]->mail,
      'body' => $body,
      'language' => language_default(),
      'key' => 'connection_request_connect',
      'module' => 'm6connect_misc',
    );
    
    $mail = drupal_mail ($params['module'], $params['key'], $to,$params['language'], $params );
    drup_msg($mail);*/
    
    $return = _user_connection_request_custom_email($user->uid,$values['connection_request_to'],'request');
    
    
    }
    
    //connection approve section
    if($values['connection_category_action'] == 'approve'){  //drup_msg($values);
    $ApproveCat = array();
    $ConnRequestFrom = user_load($values['connection_request_form']);
    $OgRequestFromValue = array(
      'entity_type' => 'user',
      'entity' => $ConnRequestFrom,
      'state' => OG_STATE_ACTIVE,
    );
    foreach($values['connection_category'] as $CatId=>$value){
      if(!empty($values['connection_category'][$CatId])){
      $ApproveCat[] = $CatId;
      $OgMembershipRequestFrom = og_group('node', $CatId, $OgRequestFromValue);
      $OgMembershipApproveId = $OgMembershipRequestFrom->id;
      
      if (db_table_exists('m6connect_connection_category_request')) {
        $db_insert_category = array(
        'og_memid' => $OgMembershipApproveId,
        'rid' => $values['connection_entity_id'],
        'category_id' => $CatId,
        'requester' => $values['connection_request_to'],
        'requestee' => $values['connection_request_form'],
        'status' => 1,
        );      
        db_insert('m6connect_connection_category_request')->fields($db_insert_category)->execute();
      }         
      }
    }
    if(!empty($ApproveCat)){      
      if (db_table_exists('m6connect_notification')) {
      $m6connect_notification = array(
        'type' => 'relationship',
        'event' => 'approve',
        'entity_id' => 0,
        'company_nid' => 0,
        'message' => NULL,
        'request_from' => $values['connection_request_to'],
        'request_to' => $values['connection_request_form'],
        'status' => 1,
        'timestamp' => time(),
      );
      entity_save('m6connect_notification', (object) $m6connect_notification);
      }           
      if (db_table_exists('user_relationships')) {
      db_insert('user_relationships')->fields(array(
        'rid' => $values['connection_entity_id'],
        'requester_id' => $values['connection_request_to'],
        'requestee_id' => $values['connection_request_form'],
        'rtid' => 5,
        'approved' => 1,
        'created' => time(),
        'changed' => time(),
        'flags' => 0,
      ))->execute();
  
      db_update('user_relationships')
      ->fields(array('approved' => '1','created' => time(),'changed' => time()))
      ->condition ('rid', $values['connection_entity_id'], '=')
      ->condition ('requester_id', $values['connection_request_form'], '=')
      ->condition ('requestee_id', $values['connection_request_to'], '=')
      ->execute();                    
      }
      db_delete('m6connect_notification')
      ->condition('entity_id', $values['connection_entity_id'], '=')
      ->condition('id', $values['connection_notification_id'], '=')
      ->condition('type', 'relationship', '=')
      ->condition('event', 'request', '=')
      ->execute();
  
      db_update('m6connect_connection_category_request')
      ->fields(array('status' => '1'))
      ->condition ('rid', $values['connection_entity_id'], '=')
      ->execute(); 
      
      $query = db_select('m6connect_connection_category_request','ccr');     
      $query->condition('rid',$values['connection_entity_id'],'=');     
      $query->fields('ccr',array('og_memid'));
      $request_to_category_id = $query->execute()->fetchCol();    
      foreach($request_to_category_id as $og_memid){  
        $req_og_membership = og_membership_load($og_memid);
        $req_og_membership->state = OG_STATE_ACTIVE;
        og_membership_save($req_og_membership);  
      }
      $buttonhtml = '<a class=" connect btn btn-primary pull-right" href="javascript:void(0);" title="Connected"><i class="fa fa-arrow-circle-o-right"></i> Connected</a>';
      $commands[] = ajax_command_html('.approval-request-'.$values['connection_request_form'],$buttonhtml);
      $commands[] = ajax_command_remove('.user-notification-outer .notification-' . $values['connection_notification_id']);
      $m6_noti_count = member_notification_status_count($user->uid);
      if ($m6_noti_count) {
      $commands[] = ajax_command_html('a#user-Notification span.notification-count', $m6_noti_count);
      } else {
      $commands[] = ajax_command_remove('a#user-Notification span.notification-count');
      }
      $commands[] = ajax_command_remove('.panel-body .panel-notification-' . $values['connection_notification_id']);
      $relationships = user_relationships_load(array('approved' => FALSE, 'requestee_id' => $user->uid));
      if (count($relationships)) {
      $commands[] = ajax_command_html('a.panel-relationship-count span.relationships-count', '<span>'.count($relationships).'</span>');
      } else {
      $commands[] = ajax_command_remove('div.panel-group.relation_rows');
      }
    }
    /*$RequestSender = _get_user_mail_realname_by_uid($user->uid);
    $RequestReciver = _get_user_mail_realname_by_uid($values['connection_request_form']);
    $to = $RequestReciver['mail'];
    $subject = $RequestSender['realname'] .'has requested you to connect';
    $body = $RequestReciver['realname'].'</br>
     '.$RequestSender['realname'].' has accepted your connection request.</br></br>
  
    Sincerely</br>'.
    $RequestSender['realname'];
    $params = array (
      'subject' => $subject,
      'sender' => $RequestSender['mail'],
      'body' => $body,
      'language' => language_default(),
      'key' => 'connection_request_connect',
      'module' => 'm6connect_misc',
    );
    
    $mail = drupal_mail ($params['module'], $params['key'], $to,$params['language'], $params );*/
    _user_connection_request_custom_email($user->uid,$values['connection_request_form'],'approve');
    }
    //connection category change
    if($values['connection_category_action'] == 'change-category'){ 
    $FindCat = array(); 
    $Cat_OgId = _get_relationship_group($values['connection_request_form'],$values['connection_request_to']);
    foreach($values['connection_category'] as $CatId=>$value){
      if(!empty($values['connection_category'][$CatId])){
      $FindCat[] = $CatId;      
      }
    }
    if(!empty($FindCat)){   
      $OgId_Cat = array_flip($Cat_OgId);
      $removecat_diff = array_diff($OgId_Cat,$FindCat);
          
      //remove change category
      if(isset($removecat_diff) && !empty($removecat_diff)){
      foreach($removecat_diff as $og_memid=>$CatRemoveValue ){        
        og_membership_delete_multiple(array($og_memid));      
        db_delete('m6connect_connection_category_request')
        ->condition('og_memid', $og_memid, '=')   
        ->condition('rid', $values['connection_entity_id'], '=')
        ->execute();      
      }   
      //pre('remove catid');
      //pre($removecat_diff);   
      }
      
      //add change category 
      $addcat_diff = array_diff($FindCat,$OgId_Cat);
      if(isset($addcat_diff) && !empty($addcat_diff)){
      $ConnRequestFrom_add = user_load($values['connection_request_to']);
      $OgRequestFromValue_add = array(
        'entity_type' => 'user',
        'entity' => $ConnRequestFrom_add,
        'state' => OG_STATE_ACTIVE,
      );
      foreach($addcat_diff as $key=>$CatAddValue){
        $OgMembershipRequestFrom_add = og_group('node', $CatAddValue, $OgRequestFromValue_add);
        $OgMembershipApproveId_add = $OgMembershipRequestFrom_add->id;
        if (db_table_exists('m6connect_connection_category_request')) {
        $db_insert_category = array(
          'og_memid' => $OgMembershipApproveId_add,
          'rid' => $values['connection_entity_id'],
          'category_id' => $CatAddValue,
          'requester' => $values['connection_request_form'],
          'requestee' => $values['connection_request_to'],
          'status' => 1,
        );      
        db_insert('m6connect_connection_category_request')->fields($db_insert_category)->execute();
        }
      }     
      //pre('add catid');   
      //pre($addcat_diff);  
      }   
      //pre($FindCat);
      //pre($OgId_Cat);
      //pre($form_state['values']);
      $commands[] = ajax_command_remove('.connection-category-action-box-form div.action-box-error .form-item');
      
    }
    else {
      $commands[] = ajax_command_html('.action-box-error','<span class="change-action-box-error form-item">* Select at least one category.</span>');
    
    }
    }
  }
  
  return array('#type' => 'ajax', '#commands' => $commands);
}
function connection_category_action_box_submit_handler(&$form,&$form_state){
    
}

function custom_connect_category_disapprove($noti_id=false,$action=false,$entity_id=false,$request_to=false,$request_from=false, $ajax=NULL) {  
  global $user;
  ctools_include('ajax');
  $commands = array();
  if (isset($entity_id) && $action == 'disapprove') {   
  $query = db_select('m6connect_connection_category_request','ccr');     
  $query->condition('rid',$entity_id,'=');      
  $query->fields('ccr',array('og_memid'));
  $request_to_category_id = $query->execute()->fetchCol();    
    foreach($request_to_category_id as $og_memid){     
    og_membership_delete_multiple(array($og_memid));      
    db_delete('m6connect_connection_category_request')
    ->condition('og_memid', $og_memid, '=')   
    ->condition('rid', $entity_id, '=')
    ->execute();
    }   
  db_delete('user_relationships')
  ->condition('rid', $entity_id, '=')
  ->execute();

  db_delete('m6connect_notification')
  ->condition('entity_id', $entity_id, '=')
  ->condition('id', $noti_id, '=')
  ->execute();    
  /*$m6connect_notification_table_exist = db_table_exists('m6connect_notification');
  if ($m6connect_notification_table_exist) {
    $m6connect_notification = array(
      'type' => 'relationship',
      'event' => 'disapprove',
      'entity_id' => 0,
      'company_nid' => 0,
      'message' => NULL,
      'request_from' => $request_to,
      'request_to' => $request_from,
      'status' => 1,
      'timestamp' => time(),
    );
    entity_save('m6connect_notification', (object) $m6connect_notification);
  }*/
  //$commands[]=ajax_command_remove('.notification-'.$noti_id);
  $commands[] = ajax_command_remove('.user-notification-outer .notification-' . $noti_id);  
  $m6_noti_count = member_notification_status_count($user->uid);
  if ($m6_noti_count) {
    $commands[] = ajax_command_html('a#user-Notification span.notification-count', $m6_noti_count);
  } else {
    $commands[] = ajax_command_remove('a#user-Notification span.notification-count');
  }
  $commands[] = ajax_command_remove('.panel-body .panel-notification-' . $noti_id);
  $relationships = user_relationships_load(array('approved' => FALSE, 'requestee_id' => $user->uid));
  if (count($relationships)) {
    $commands[] = ajax_command_html('a.panel-relationship-count span.relationships-count', '<span>'.count($relationships).'</span>');
  } else {
    $commands[] = ajax_command_remove('div.panel-group.relation_rows');
  }
  }
  print ajax_render($commands);
  exit;
}

function custom_connect_category_approve($noti_id, $category_id, $action = false, $entity_id = false, $request_to = false, $request_from = false, $ajax = NULL) {
    
    ctools_include('ajax');
    $commands = array();
    if (isset($entity_id) && $action == 'approve') {
        $og_membership_table_exist = db_table_exists('og_membership');
        if (isset($request_from)) {
            $account = user_load($request_from);
            $values = array(
                'entity_type' => 'user',
                'entity' => $account,
                'state' => OG_STATE_ACTIVE,
            );
            $og_membership = og_group('node', $category_id, $values);
        }
    

    if(isset($request_to)){
      $query = db_select('m6connect_connection_category_request','ccr');
      $query->condition('requester',$request_from,'=');
      $query->condition('rid',$entity_id,'=');
      $query->condition('requestee',$request_to,'=');
      $query->fields('ccr',array('og_memid'));
      if($request_to_category_id = $query->execute()->fetchColumn(0)){
      $req_og_membership = og_membership_load($request_to_category_id);
      $req_og_membership->state = OG_STATE_ACTIVE;
      og_membership_save($req_og_membership); 
      }
      
          
      /*$request_to_account = user_load($request_to);
          $request_to_values = array(
            'entity_type' => 'user',
            'entity' => $request_to_account,
            'state' => OG_STATE_ACTIVE,
          );
          $request_to_og_membership = og_group('node', $request_to_category_id, $request_to_values);  */
    }

        $m6connect_notification_table_exist = db_table_exists('m6connect_notification');
        if ($m6connect_notification_table_exist) {
            $m6connect_notification = array(
                'type' => 'relationship',
                'event' => 'approve',
                'entity_id' => 0,
                'company_nid' => 0,
                'message' => NULL,
                'request_from' => $request_to,
                'request_to' => $request_from,
                'status' => 1,
                'timestamp' => time(),
            );
            entity_save('m6connect_notification', (object) $m6connect_notification);
        }
    
        $user_relationships_table_exist = db_table_exists('user_relationships');
        if ($user_relationships_table_exist) {
            db_insert('user_relationships')->fields(array(
                'rid' => $entity_id,
                'requester_id' => $request_to,
                'requestee_id' => $request_from,
                'rtid' => 5,
                'approved' => 1,
                'created' => time(),
                'changed' => time(),
                'flags' => 0,
            ))->execute();

      db_update('user_relationships')
        ->fields(array('approved' => '1','created' => time(),'changed' => time()))
        ->condition ('rid', $entity_id, '=')
        ->condition ('requester_id', $request_from, '=')
        ->condition ('requestee_id', $request_to, '=')
        ->execute();
                    
        }

        db_delete('m6connect_notification')
                ->condition('entity_id', $entity_id, '=')
                ->condition('id', $noti_id, '=')
                ->condition('type', 'relationship', '=')
                ->condition('event', 'request', '=')
                ->execute();

        db_update('m6connect_connection_category_request')
              ->fields(array('status' => '1'))
              ->condition ('rid', $entity_id, '=')
              //->condition ('requester_id', $request_from, '=')
              //->condition ('requestee_id', $request_to, '=')
              ->execute();
        //$commands[]=ajax_command_remove('.notification-'.$noti_id);
        $commands[] = ajax_command_remove('.user-notification-outer .notification-' . $noti_id);
        $m6_noti_count = member_notification_status_count($user->uid);
        if ($m6_noti_count) {
            $commands[] = ajax_command_html('a#user-Notification span.notification-count', $m6_noti_count);
        } else {
            $commands[] = ajax_command_remove('a#user-Notification span.notification-count');
        }
    }
    print ajax_render($commands);
    exit;
}

function custom_connect_category_request($category_id = false, $action = false, $request_from = false, $request_to = false, $ajax = NULL) {
    /* pre('category_id '.$category_id);
      pre('action '.$action);
      pre('request_from '.$request_from);
      pre('request_to '.$request_to);
      pre('ajax '.$ajax,1); */


    global $user;
    ctools_include('ajax');
    $commands = array();
    if (isset($category_id) && $action == 'request') {
        $account = user_load($request_to);
        $values = array(
            'entity_type' => 'user',
            'entity' => $account,
            'state' => OG_STATE_PENDING,
        );
        $og_membership = og_group('node', $category_id, $values);
    $membership_id = $og_membership->id;

        $relationship_rid = db_next_id(db_query('SELECT MAX(rid) FROM {user_relationships}')->fetchField());    

        $m6connect_notification_table_exist = db_table_exists('m6connect_notification');
        if ($m6connect_notification_table_exist) {
            $m6connect_notification = array(
                'type' => 'relationship',
                'event' => 'request',
                'entity_id' => $relationship_rid,
                'company_nid' => 0,
                'message' => NULL,
                'request_from' => $request_from,
                'request_to' => $request_to,
                'status' => 1,
                'timestamp' => time(),
            );
            entity_save('m6connect_notification', (object) $m6connect_notification);
        }
        $user_relationships_table_exist = db_table_exists('user_relationships');

        if ($user_relationships_table_exist) {
            db_insert('user_relationships')->fields(array(
                'rid' => $relationship_rid,
                'requester_id' => $request_from,
                'requestee_id' => $request_to,
                'rtid' => 5,
                'approved' => 0,
                'created' => time(),
                'changed' => time(),
                'flags' => 0,
            ))->execute();
        }
    
    if (db_table_exists('m6connect_connection_category_request')) {
      $db_insert_category = array(
          'og_memid' => $membership_id,
          'rid' => $relationship_rid,
        'category_id' => $category_id,
        'requester' => $request_from,
        'requestee' => $request_to,
        'status' => 0,
      );      
      db_insert('m6connect_connection_category_request')->fields($db_insert_category)->execute();
        }
    
    $buttonhtml = '<a class="connect btn btn-primary pull-right" href="javascript:void(0);" title="Connect">Request Sent</a>';
    $commands[] = ajax_command_html('.user-'.$request_to.'-connect-category',$buttonhtml);
    }
    print ajax_render($commands);
    exit;
}

function m6_notification_get_table_row($entity_id=false,$request_from=false,$request_to=false){
  $m6_noti_query = db_select('m6connect_notification', 'm6noti');
  $m6_noti_query->fields('m6noti');
  $m6_noti_query->condition('m6noti.type', 'relationship');
  $m6_noti_query->condition('m6noti.event', 'request');
  $m6_noti_query->condition('m6noti.entity_id', $entity_id);
  $m6_noti_query->condition('m6noti.request_from', $request_from);
  $m6_noti_query->condition('m6noti.request_to', $request_to);
  $m6_noti_query->condition('m6noti.status', 1);
  $m6_noti = $m6_noti_query->execute()->fetchColumn(0);
  
  return $m6_noti;  
}

/*****new connecton request***end*****/

function m6connect_misc_cron() {
  /*** notification request removed after 24 hours *start*/
  $query = db_select('user_relationships','ur');    
  $query->fields('ur',array('rid'));
  $query->addExpression('TIMESTAMPDIFF(second,NOW(),DATE_ADD(FROM_UNIXTIME(ur.created), INTERVAL 1 DAY))','diff');
  $query->condition('ur.approved', 0, '=');
  $query->havingCondition('diff', 0, '<=');
  $result = $query->execute()->fetchAllKeyed(0,1);
 
  if(!empty($result)){
    $rids = array_keys($result);     
    $query = db_select('m6connect_connection_category_request','ccr');     
      $query->condition('rid',$rids ,'IN');     
      $query->fields('ccr',array('og_memid'));
      $request_to_category_id = $query->execute()->fetchCol();    
        foreach($request_to_category_id as $og_memid){     
        og_membership_delete_multiple(array($og_memid));      
        db_delete('m6connect_connection_category_request')
        ->condition('og_memid', $og_memid, '=')         
        ->execute();
        }
     
    db_delete('user_relationships')
        ->condition('rid', $rids , 'IN')
        ->execute();

    db_delete('m6connect_notification')
    ->condition('entity_id', $rids, 'IN')
    ->condition('type','relationship', '=')
    ->condition('event','request', '=')
    ->execute();
    
  } 
  /*** notification request removed after 24 hours *end*/ 
}


/**
* 
* Implements hook_date_select_process_alter
*
**/
function m6connect_misc_date_select_process_alter(&$element, &$form_state, $context) {
  if($element['#field']['field_name'] == 'field_date_of_birth' /*&& arg(0) == 'user' && arg(1) == 'register'*/) {
    $part_required = (bool) $element['#required'] && is_object($date);
    $range = date_range_years($element['#date_year_range'], $date);
    $min_year = $range[0];
    $max_year = $range[1];
    $element['year']['#options'] = drupal_map_assoc(date_years($max_year, $min_year, $part_required));    
  }
}

function get_distance_two_point($address1=false, $address2=false, $unit) {
  
  if(!empty($address1) && !empty($address2) ){  
    $geo1 = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?address='.urlencode($address1).'&sensor=false');
    $geo1 = json_decode($geo1, true);
      if ($geo1['status'] = 'OK') {   
        $lat1 = $latitude1 = $geo1['results'][0]['geometry']['location']['lat'];
        $lon1 = $longitude1 = $geo1['results'][0]['geometry']['location']['lng'];
      }
    $geo2 = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?address='.urlencode($address2).'&sensor=false');    
    $geo2 = json_decode($geo2, true);
      if ($geo2['status'] = 'OK') {
       $lat2 = $latitude2 = $geo2['results'][0]['geometry']['location']['lat'];
       $lon2 = $longitude2 = $geo2['results'][0]['geometry']['location']['lng'];
      } 
    $theta = $lon1 - $lon2;
    $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
    $dist = acos($dist);
    $dist = rad2deg($dist);
    $miles = $dist * 60 * 1.1515;
    $unit = strtoupper($unit);  
      if ($unit == "K") {
        return ($miles * 1.609344);
      } 
      else if ($unit == "N") {
        return ($miles * 0.8684);
      } 
      else {
        return $miles;
      }
  }else{
    return '0';
  } 
}

/*function file_validate_image_resolution_new($file, $form_id, $minimum_dimensions, $maximum_dimensions) {

  $errors = array();
  $is_field_validate = array('field_company_profile_cover_img_und_0','field_logo_und_0','field_user_profile_photo_und_0','field_user_profile_cover_img_und_0');
  if(in_array($file->source,$is_field_validate)){
    if ($info = image_get_info($file->uri)) {
      if (isset($minimum_dimensions) && isset($maximum_dimensions)) {
        list($min_width, $min_height) = explode('x', $minimum_dimensions);
        list($max_width, $max_height) = explode('x', $maximum_dimensions);
          if ($info['width'] != $max_width || $info['height'] != $max_height) {
            $errors[] = t('Images must be of dimensions '.$max_width.'x'.$max_height.' pixels.');
          }
      }   
    }
  }
  return $errors;
}
*/

// call function when logout
function m6connect_misc_user_logout($account){
    user_cookie_save(array('defaulttoggle.logoff' => 1));
}

function m6connect_left_sidebar_content(){ 
  global $user;
  $userData = user_load($user->uid);
  $userPath = url('user/'.$user->uid);
  $content = '';
  $content .= '<ul id="sidebar_menu" class="sidebar-nav">
        <li class="sidebar-brand"><a id="menu-toggle" class="menu-toggle-inner" aria-expanded="true" data-toggle="tooltip" data-placement="right" title="Expand Menu" href="#">Menu<span id="main_icon" class="glyphicon glyphicon-align-justify"></span></a></li>
        <li class="show-icons"><a href="/user/logout" title="Logout" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover"><i class="fa fa-power-off"></i></a></li>
        <li class="show-icons"><a href="/dashboard" title="Dashboard Home" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover"><i class="fa fa-compass"></i></a></li>
        <li class="show-icons"><a href="'.$userPath.'" title="Profiles" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover"><img src="/sites/all/themes/m6connect/images/icon-profile.png" alt="profile" width="30" /></a></li>
        <li class="show-icons"><a href="/companies" title="Companies" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover"><i class="fa fa-building"></i></a></li>
        <li class="show-icons"><a href="/projects?myproject=myproject" title="Project Postings" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover "><img src="/sites/all/themes/m6connect/images/icon-notes.png" alt="project" width="30" /></a></li>
        <li class="show-icons"><a href="/rfps/all" title="RFPs" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover"><img src="/sites/all/themes/m6connect/images/icon-rfp2.png" alt="rfp" width="30" /></a></li>
        <li class="show-icons"><a href="/proposals/all" title="Proposals" data-toggle="tooltip" data-placement="right" class=" dashboard-link-hover"><img src="/sites/all/themes/m6connect/images/icon-dossier.png" alt="dossier" width="30" /></a></li>
        <li class="show-icons"><a href="/routing-slip/in-route" title="Routing Slip" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover "><img src="/sites/all/themes/m6connect/images/icon-plane.png" alt="plane" width="30" /></a></li>
        <li class="show-icons"><a href="/insurance-certificates" title="Insurance Certificates" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover "><img src="/sites/all/themes/m6connect/images/icon-newspaper.png" alt="newspaper" width="30" /></a></li>
        <li class="show-icons"><a href="/onboarding/colleagues" title="M6ID" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover"><img src="/sites/all/themes/m6connect/images/icon-id-card.png" alt="card" width="30" /></a></li>
        <li class="show-icons"><a href="/alert/groups" title="Alerts" data-toggle="tooltip" data-placement="right" class="view-more-alert-service dashboard-link-hover active"><img src="/sites/all/themes/m6connect/images/icon-megaphone.png" alt="megaphone" width="30" /></a></li>';
        if($userData->field_gender['und'][0]['value'] == 'male') {
    $content .= '<li class="show-icons"><a href="/program/my-project" title="Cost Manager" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover "><img src="/sites/all/themes/m6connect/images/icon-detective.png" alt="manager" width="30" /></a></li>';     
  }
  else {
    $content .= '<li class="show-icons"><a href="/program/my-project" title="Cost Manager" data-toggle="tooltip" data-placement="right" class="dashboard-link-hover "><img src="/sites/all/themes/m6connect/images/icon-manager.png" alt="manager" width="30" /></a></li>';
  }
  $content .= '</ul>';
  return $content;
}

/*function _get_connection_category_id($RequestForm,$RequestTo){
  global $user;
  $query = db_select('m6connect_connection_category_request','ccr');
  $query->condition('requester',$RequestForm,'=');
  $query->condition($RequestTo,$user->uid,'=');
  $query->condition('requestee',$RequestTo,'=');
  $query->fields('ccr',array('category_id'));
  $result = $query->execute()->fetchColumn(0);
  return $result;  
}*/


function _get_relationship_group($request_form,$request_to){
  $query = db_select('node','n');
  $query->join('og_membership', 'ogm', "ogm.gid = n.nid");
  $query->condition('n.type','connection_categories','=');
  $query->condition('n.uid', $request_form, '=');
  $query->condition('ogm.etid', $request_to , '=');
  $query->condition('ogm.entity_type', 'user' , '=');
  $query->condition('ogm.state', 1 , '=');
  $query->fields('n',array('nid'));
  $query->fields('ogm',array('id'));
  $result = $query->execute()->fetchAllKeyed();
  return $result; 
}

function connection_user_action_callback($request_to,$action,$ajax) {
  if ($ajax) {
    ctools_include('ajax');
  ctools_include('modal');
  $form_state = array(
            'ajax' => TRUE,
          'request_to' => $request_to,
            'user_action' => $action,
          'title' => 'Confirm '.ucwords($action),
          );
    $output = ctools_modal_form_wrapper('connection_user_action_box_form', $form_state);
  if (!empty($form_state['ajax_commands'])) {
    $output = $form_state['ajax_commands'];
    }
  print ajax_render($output);
  drupal_exit();
  }
  return drupal_get_form('connection_user_action_box_form',$request_to,$action);
}

function connection_user_action_box_form($form, &$form_state,$request_to,$action) {
  if(!$request_to) {
    $RequestTo = $form_state['request_to'];
  }
  if(!$action) {
    $UserAction = $form_state['user_action'];
  }
  $form['connection_user_request_load'] = array(
    '#type' => 'hidden',
  '#value' => $RequestTo, 
  );
    $form['connection_user_request_uid'] = array(
    '#type' => 'hidden',
  '#value' => $RequestTo->uid, 
  );
   $form['connection_user_action'] = array(
    '#type' => 'hidden',
  '#value' => $UserAction, 
  );
  
  if($UserAction == 'block'){  
  $form['connection_user_action_section'] = array(
    '#type' => 'markup',
    '#title' => t('Confirm Block'),
    '#markup' => '<div class="connection-action-status"><p>Are you sure you want to '.$UserAction.' '.ucwords($RequestTo->realname).'?</p>
            <div><p>'.ucwords($RequestTo->realname).' will no longer be able to:</p></div>
            <ul>
              <li>
              <div>See things you post on your timeline</div>
              </li>
              <li>
              <div>Tag you</div>
              </li>
              <li>
              <div>Invite you to events or groups</div>
              </li>
              <li>
              <div>Start a conversation with you</div>
              </li>
              <li>
              <div>Add you as a friend</div>
              </li>
            </ul>           
            </div>          
          </div>',  
  );
  }
  else if($UserAction == 'unblock'){
    $form['connection_user_action_section'] = array(
    '#type' => 'markup',
    '#title' => t('Confirm Block'),
    '#markup' => '<div class="connection-action-status"><p>By unblocking user you can send connection request to this user.</p></div>', 
  );
  }
  $form['connection_user_action_submit'] = array(
    '#type' => 'submit',
  '#value' => t('Confirm')
  );
  
  $form['connection_user_action_cancel']['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('group-delete-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    '#weight' => 10,
  );
  return $form;
}

function connection_user_action_box_form_submit($form, &$form_state) {
  global $user;
  $values = $form_state['values'];
  $connection_user_request_uid = $values['connection_user_request_uid'];
  $connection_user_action = $values['connection_user_action'];
  $connection_relationship = user_relationships_load(array('approved' => TRUE, 'requestee_id' => $user->uid, 'requester_id'=>$connection_user_request_uid));
  
  if(isset($connection_relationship) && !empty($connection_relationship) && $connection_user_action == 'block'){
  $Cat_Ogid1 = _get_relationship_group($user->uid , $connection_user_request_uid); 
    $Cat_Ogid2 = _get_relationship_group($connection_user_request_uid , $user->uid); 
    $Ogid = array_merge($Cat_Ogid1, $Cat_Ogid2);  
  foreach($Ogid as $ogm_id){
    og_membership_delete_multiple(array($ogm_id));
    db_delete('m6connect_connection_category_request')
    ->condition('og_memid', $ogm_id, '=')         
      ->execute();
  }
    
  $rid = key($connection_relationship);
    db_delete('user_relationships')
    ->condition('rid', $rid , '=')
    ->execute(); 
  }
    
  $flag = flag_get_flag('connection_action');
  $UserStatus = ''; 
  if ($flag && $flag->is_flagged($connection_user_request_uid)) {
    $flag->flag('unflag', $connection_user_request_uid); 
  //$UserStatus = 'unblock dd';
  }
  else{
    $flag->flag('flag', $connection_user_request_uid); 
  //$UserStatus = 'block dd';
  }
  if(isset($connection_user_action) && $connection_user_action == 'block'){
    $UserStatus = 'unblock';
  }
  else if(isset($connection_user_action) && $connection_user_action == 'unblock'){
    $UserStatus = 'block'; 
  }
  
  $UserStatuAction = l(ucwords($UserStatus).' This User', 'connection/user/'.$connection_user_request_uid.'/'.$UserStatus.'/nojs', array('html' => TRUE, 'attributes' => array('title' => $UserStatus.' This User', 'class' => array('btn btn-warning use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))));
  $category_action = 'connect';
  $connect_category_connect ='<i class="fa fa-arrow-circle-o-right"></i> Connect';     
  $output_cat = theme('m6_ctools_dropdown_form', array('main_title' => $connect_category_connect,'title_class'=>array('connect btn btn-primary pull-right'),'image'=>1,'data'=>$ConnectionCategory));

  $ConnectionCategory = render(drupal_get_form('connection_category_action_box_form',$category_action,$$user->uid,$connection_user_request_uid)); 
  if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) { 
    $form_state['ajax_commands'][] = ajax_command_html('.connection-category-action-box-form ', $ConnectionCategory);
    //$form_state['ajax_commands'][] = ajax_command_html('#connection-category-action-box-form div.connected-user-action', $UserStatuAction);

  if(isset($connection_relationship) && !empty($connection_relationship) && $connection_user_action == 'block'){
    $form_state['ajax_commands'][] = ajax_command_html('.user-page-connect-category .ctools-dropdown-link-wrapper .user-relationship-'.$connection_user_request_uid.'',$connect_category_connect);
  }
  
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();  
  }
}

function assign_company_admin_support_role($uid, $companyNid){  
    $ogrolesk = og_roles('node', 'organization');
    $ogroles = array_flip($ogrolesk);
    $companyNode = node_load($companyNid);
    $roleId = $ogroles['Company Admin Support'];
    if(isset($roleId)){ 
        og_role_grant('node', $companyNid, $uid, $roleId);
        $query= db_select('og_membership','og');
        $query->join('og_users_roles','ogur','ogur.uid=og.etid AND ogur.gid=og.gid AND ogur.group_type=:GroupType',array(':GroupType'=>'node'));
        $query->fields('og', array('etid'));
        $query->condition('og.gid',$companyNid,'=');
        $query->condition('og.entity_type','user','=');
        $query->condition('ogur.rid',$ogroles['Company Admin Support'],'=');
        $query->condition('og.etid',$uid,'!=');
        $companyAdminSupportUsers  = $query->execute()->fetchCol();
        if(!empty($companyAdminSupportUsers)){
            foreach($companyAdminSupportUsers as $delta => $userUidToRemove){
                og_role_revoke('node', $companyNid, $userUidToRemove, $roleId); 
            }
        }
    }
}

function custom_check_user_availability_callback($Ufname,$Ulname,$Udob,$Ugender,$Uphone,$ajax=TRUE){ 
  ctools_include('ajax');
  ctools_include('modal');
  $commands = array(); 
  $checkAva = array('Ufname'=>$Ufname,'Ulname'=>$Ulname,'Udob'=>$Udob,'Ugender'=>$Ugender,'Uphone'=>$Uphone);
  $checkCount = 0;
  $output = '';
  foreach($checkAva as $delta){
    if($delta =='none'){
      continue;
    }
    $checkCount++;
  }
  if($Uphone && $Uphone !='none'){
  $Uphone = '+'.$Uphone; 
  }
  
  if($checkCount >=2){  
  $query = db_select('users','u');
  if(!empty($Ufname) && $Ufname !='none'){  
    $query->leftjoin('field_data_field_first_name','ffn','ffn.entity_id=u.uid');  
    $query->condition('ffn.bundle','user','=');
    $query->condition('ffn.field_first_name_value',$Ufname,'=');   
  }
  if(!empty($Ulname)&& $Ulname !='none'){  
    $query->leftjoin('field_data_field_last_name','fln','fln.entity_id=u.uid'); 
    $query->condition('fln.bundle','user','=');
    $query->condition('fln.field_last_name_value',$Ulname,'=');
  }
  if(!empty($Udob)&& $Udob !='none'){  
    $query->leftjoin('field_data_field_date_of_birth','fdob','fdob.entity_id=u.uid'); 
      $query->condition('fdob.bundle','user','=');
      $query->condition('fdob.field_date_of_birth_value',$Udob,'=');
  }
  if(!empty($Ugender)&& $Ugender !='none'){  
    $query->leftjoin('field_data_field_gender','fg','fg.entity_id=u.uid');  
    $query->condition('fg.bundle','user','=');
    $query->condition('fg.field_gender_value',$Ugender,'=');
  }
  if(!empty($Uphone)&& $Uphone !='none'){  
    $query->leftjoin('field_data_field_phone','fp','fp.entity_id=u.uid'); 
    $query->condition('fp.bundle','user','=');
    $query->condition('fp.field_phone_value',$Uphone,'=');
  }
  $query->fields('u',array('uid','name'));
  $query->condition('u.status',1,'=');  
  $result = $query->execute()->fetchCol();
    //pre($result);
  if(isset($result) && !empty($result)){
  $subquery = db_select('users', 'u');
    $subquery ->leftjoin('field_data_field_user_profile_photo','fupp','fupp.entity_id=u.uid');
    $subquery ->leftjoin('file_managed','fm','fm.fid = fupp.field_user_profile_photo_fid');
    $subquery ->leftjoin('realname','rel','rel.uid = u.uid');
  $subquery ->fields('u',array('uid','mail'));
  $subquery ->fields('rel',array('realname'));
    $subquery ->fields('fm',array('uri'));
    $subquery->condition('u.uid',$result,'IN');
  $subquery->condition('u.status',1,'=');
  $subquery_result = $subquery->execute()->fetchAll();
  }
  //pre($subquery_result);  
  if(!empty($subquery_result)){
    $output .= '<h3>Are you one of these:</h3><div class="check-user-availabil row margin-5">';
    foreach($subquery_result as $key => $deltaTest){
    $PrimaryComNId = '';
    $PrimaryComName = '';
    $PrimaryComNameShort = '';
    if ($deltaTest->uri) {
      $uimagepath = image_style_url('check_user_ava_150_150',$deltaTest->uri);  
      $user_photo_url ='<img src="' . $uimagepath . '" alt="' . $deltaTest->realname . '" title="' . $deltaTest->realname . '" />';
    } else {
      $user_photo_url ='<img style="width:150px;height:150px;" src="/sites/default/files/styles/thumbnail/public/default_images/M6_default_profile_person.jpg" alt="'.$deltaTest->realname.'" title="'.$deltaTest->realname.'" />';
    }
    $PrimaryComNId = _get_user_primary_company($deltaTest->uid);
    if($PrimaryComNId){
      $PrimaryComName = _get_title_of_node($PrimaryComNId);
      $PrimaryComNameShort01 =  (strlen($PrimaryComName) > 15) ? substr($PrimaryComName, 0, 12) . '...' : $PrimaryComName;
      $PrimaryComNameShort = '<span>'.$PrimaryComNameShort01.'</span>';
    }   
    $UserName = (strlen($deltaTest->realname) > 15) ? substr($deltaTest->realname, 0, 12) . '...' : $deltaTest->realname;
      $output .='<div class="col-md-4 col-sm-4 col-xs-12 padding-5">';
    $output .=  '<a href="/modal_forms/nojs/login?destination=dashboard" class="ctools-use-modal ctools-modal-modal-popup-small user-availabil-link" data-email="'.$deltaTest->mail.'">';
    $output .=    '<div class="chec-user-availabil-inner find-people-field-container featured-speakers">';
    $output .=      '<div class="views-field-field-user-profile-photo">';
    $output .=        $user_photo_url;
    $output .=      '</div>';
    $output .=      '<div class="name-title-container find-people-field-container" style="color: #000;">';
    $output .=        '<span><b>'.$UserName.'</strong></b>';
    $output .=        $PrimaryComNameShort;
    $output .=      '</div>';   
    $output .=    '</div>';
    $output .=  '</a>';
    $output .='</div>';   
    } 
    $output .= '</div>';
    drupal_json_output(array('dataHtml' => $output));
  }
  else{
      drupal_json_output(array('dataHtml' => 0));  
    } 
  } 
  else{
    drupal_json_output(array('dataHtml' => 0));  
  } 
 drupal_exit(0);
}

function _user_connection_request_custom_email($requesterUser,$requesteeUser,$connectionType){
  global $base_url,$base_path;
  $dbor = db_or()->condition('ur.requester_id',$requesteeUser)->condition('ur.requestee_id',$requesteeUser);
  $subQuery = db_select('user_relationships', 'ur');
  $subQuery->distinct();
  $subQuery->fields('ur', array('requestee_id'));
  $subQuery->condition($dbor);
  $subQuery->condition('ur.approved',1);
  
  $dbor2 = db_or()->condition('ur.requester_id',$requesterUser)->condition('ur.requestee_id',$requesterUser);
  $connReqQuery = db_select('user_relationships', 'ur');
  $connReqQuery->distinct();
  $connReqQuery->fields('ur', array('requestee_id'));
  $connReqQuery->condition($dbor2);
  $connReqQuery->condition('ur.approved',1);
  $connReqQuery->condition('ur.requestee_id',$subQuery,'NOT IN');
  $connReqQuery->condition('ur.requestee_id',$requesterUser,'!=');
  $peopleYouMayKnowResult = $connReqQuery->execute()->fetchCol();
  shuffle($peopleYouMayKnowResult);
  $peopleYouMayKnow = array();
  if(!empty($peopleYouMayKnowResult)){
  $peopleYouMayKnow = array_slice($peopleYouMayKnowResult, 0, 3); 
  }
  
  $connectiouserUids = array($requesterUser,$requesteeUser);
  $connectiouserUids = array_merge($connectiouserUids,$peopleYouMayKnow);
  $connectionUserDetailsQuery = db_select('users','u');
  $connectionUserDetailsQuery->leftjoin('realname','r','r.uid=u.uid');
  $connectionUserDetailsQuery->leftjoin('field_data_field_user_profile_photo', 'ufp', 'ufp.entity_id=u.uid' );
  $connectionUserDetailsQuery->leftjoin('file_managed', 'fmu', 'fmu.fid=ufp.field_user_profile_photo_fid');
  $connectionUserDetailsQuery->leftjoin('field_data_field_job_titles','jobm','jobm.entity_id=u.uid AND jobm.bundle=:JobBundle',array(':JobBundle'=>'user'));
  $connectionUserDetailsQuery->leftjoin('taxonomy_term_data','jterm','jterm.tid=jobm.field_job_titles_target_id');
  $connectionUserDetailsQuery->fields('u', array('uid','mail'));
  $connectionUserDetailsQuery->fields('r', array('realname'));
  $connectionUserDetailsQuery->fields('fmu', array('uri'));
  $connectionUserDetailsQuery->addField('jterm', 'name' ,'designation');
  $connectionUserDetailsQuery->condition('u.uid',$connectiouserUids,'IN');
  $connectiouserUidDetails = $connectionUserDetailsQuery->execute()->fetchAllAssoc('uid');
  
  $peopleYouMayKnowDetail = array();
  if(!empty($peopleYouMayKnow)){
  foreach($peopleYouMayKnow as $pdelta => $puid){
    $peopleYouMayKnowDetail[$puid] = array(
    'user_name' => ucwords($connectiouserUidDetails[$puid]->realname),
    'user_desi' => $connectiouserUidDetails[$puid]->designation,
    'connect_uri' => $base_url.$base_path.drupal_get_path_alias('user/'.$puid),
    'user_pic' => (!empty($connectiouserUidDetails[$puid]->uri))?image_style_url('pic_50x50',$connectiouserUidDetails[$puid]->uri):$base_url.$base_path.'sites/default/files/images_13.png',
    );  
  }
  }
  
  $connctionUserDetail = array(
  'SiteLogoUrl' => $base_url.$base_path.'sites/all/themes/m6connect/images/icon-76.png',
  'SenderName' => ucwords($connectiouserUidDetails[$requesterUser]->realname),
  'SenderPic' => (!empty($connectiouserUidDetails[$requesterUser]->uri))?image_style_url('pic_80x80',$connectiouserUidDetails[$requesterUser]->uri):$base_url.$base_path.'sites/default/files/images_13.png',
  'SenderDesig' => $connectiouserUidDetails[$requesterUser]->designation,
  'SenderProfileLink' => $base_url.$base_path.drupal_get_path_alias('user/'.$requesterUser),
  'SenderToMessageLink' => $base_url.$base_path.'m6message/connect/'.$requesterUser,
  'ReceiverName' => ucwords($connectiouserUidDetails[$requesteeUser]->realname),
  'ReceiverPic' => (!empty($connectiouserUidDetails[$requesteeUser]->uri))?image_style_url('pic_80x80',$connectiouserUidDetails[$requesteeUser]->uri):$base_url.$base_path.'sites/default/files/images_13.png',
  'ReceiverDesig' => $connectiouserUidDetails[$requesteeUser]->designation,
  'Message' =>($connectionType=='request')?ucwords($connectiouserUidDetails[$requesterUser]->realname).' has send you connection request. Please check the request on your left panel connection section.':ucwords($connectiouserUidDetails[$requesterUser]->realname).' has accepted your connection request.',
  );
  
  $to = $connectiouserUidDetails[$requesteeUser]->mail.', mkagl02@gmail.com';
  $subject = ($connectionType=='request')?$connctionUserDetail['SenderName'] .' has requested you to connect':$connctionUserDetail['SenderName'] .' has accepted your connection';
  $body = theme('connection_request_email_notify', array('connctionUserDetail'=>$connctionUserDetail,'peopleYouMayKnowDetail'=>$peopleYouMayKnowDetail));
  $params = array (
  'subject' => $subject,
  'sender' => $connectiouserUidDetails[$requesterUser]->mail,
  'body' => $body,
  'language' => language_default(),
  'key' => 'connection_request_connect',
  'module' => 'm6connect_misc',
  );
  $mail = drupal_mail ($params['module'], $params['key'], $to,$params['language'], $params );
  return $mail;
}

function custom_region_country_callback(&$form,&$form_state){//pre($values,1);
  global $base_url,$base_path,$user;
  $commands= array();
  //pre($form['field_company_locations']['und'][0]['field_regions_only'],1); 
  $countryOptions = array("AF" => "Afghanistan","US" => "United States");
/*  //$form['field_company_locations']['und'][0]['field_location_address']['und'][0]['country']['#options'] = array("AF" => "Afghanistan","US" => "United States");
  $form['field_company_locations'] = array(
    '#type' => 'select',
  '#name' => 'field_company_locations[und][0][field_location_address][und][0][country]',
  '#options' => $countryOptions,
  '#attributes' => array('autocomplete' =>'country','id'=>'edit-field-company-locations-und-0-field-location-address-und-0-country','class'=> array('country','use-ajax')),
  //'#prefix' => '<div class="form-item form-type-select form-item-field-company-locations-und-0-field-location-address-und-0-country"><label for="edit-field-company-locations-und-0-field-location-address-und-0-country">Country </label>',
    //'#suffix' => '</div">',
  
  );
  
  $op= '<select class="country form-select ajax-processed" autocomplete="country" id="edit-field-company-locations-und-0-field-location-address-und-0-country" name="field_company_locations[und][0][field_location_address][und][0][country]"><option value="AF">Afghanistan</option><option value="US">United States</option></select>';
  $commands[] = ajax_command_replace(".form-item-field-company-locations-und-0-field-location-address-und-0-country select.country", render($form['field_company_locations']));
  $commands[] = $form_state['rebuild']=TRUE;*/
  
  //$_SESSION['custom_country_opt']= $countryOptions;
  
  /*$form['custom_country_opt'] = array(
  '#type' => 'hidden',
  '#value' => serialize($countryOptions),
  '#prefix' => '<div class="test-country-outer-new">',
  '#suffix' => '</div">',
  );
  $commands[] = ajax_command_replace(".test-country-outer-new", render($form['custom_country_opt']));*/
  
  $com_fcl = $form['field_company_locations']['und'];
  $items_count_first = '';
  foreach($com_fcl as $key=>$value){  
  if(is_numeric($key)){
    $LocRegionsOnly = $form['field_company_locations']['und'][$key]['field_regions_only']['und']['#default_value'][0];
    $FilterCountry = '';
    if($LocRegionsOnly == 78406){
    $FilterCountry = LocRegionsOnlyCountry('Africa');   
    }
    else if($LocRegionsOnly == 78517){
    $FilterCountry = LocRegionsOnlyCountry('AsiaPacificMiddleEast');
    }
    else if($LocRegionsOnly == 78570){
    $FilterCountry = LocRegionsOnlyCountry('Canada');
    }
    else if($LocRegionsOnly == 78685){        
    $FilterCountry = LocRegionsOnlyCountry('Europe');
    }
    else if($LocRegionsOnly == 78779){
    $FilterCountry = LocRegionsOnlyCountry('LatinAmericaCaribbean');
    }
    else if($LocRegionsOnly == 79052){
    $FilterCountry = LocRegionsOnlyCountry('Oceania');
    }
    else if($LocRegionsOnly == 79131){
    $FilterCountry = LocRegionsOnlyCountry('UnitedStates');
    }
    else{
    $FilterCountry = LocRegionsOnlyCountry();     
    }
    $_SESSION['custom_country_opt']= $FilterCountry;
     $commands[] = ajax_command_invoke("select.country", 'trigger',array('change'));
    $form['field_company_locations']['und'][$key]['field_location_address']['und'][0]['country']['#required'] = FALSE;
  }
  }
 
  
  
  
  
  
  
  
  
  
  return array('#type' => 'ajax', '#commands' => $commands);
}

function LocRegionsOnlyCountry($Regions = ''){
  $countryList = '';
  if($Regions == 'Africa'){
    $countryList = array(
    "DZ" => "Algeria",
    "AO" => "Angola",
    "BJ" => "Benin",
    "BW" => "Botswana",
    "BF" => "Burkina Faso",
    "BI" => "Burundi",
    "CM" => "Cameroon",
    "CV" => "Cape Verde",
    "CF" => "Central African Republic",
    "TD" => "Chad",
    "KM" => "Comoros",
    "CG" => "Congo - Brazzaville",
    "CD" => "Congo - Kinshasa",
    "CI" => "Côte d’Ivoire",
    "DJ" => "Djibouti",
    "EG" => "Egypt",
    "GQ" => "Equatorial Guinea",
    "ER" => "Eritrea",
    "ET" => "Ethiopia",
    "GA" => "Gabon",
    "GM" => "Gambia",
    "GH" => "Ghana",
    "GN" => "Guinea",
    "GW" => "Guinea-Bissau",
    "KE" => "Kenya",
    "LS" => "Lesotho",
    "LR" => "Liberia",
    "LY" => "Libya",
    "MG" => "Madagascar",
    "MW" => "Malawi",
    "ML" => "Mali",
    "MR" => "Mauritania",
    "MU" => "Mauritius",
    "YT" => "Mayotte",
    "MA" => "Morocco",
    "MZ" => "Mozambique",
    "NA" => "Namibia",
    "NE" => "Niger",
    "NG" => "Nigeria",
    "RW" => "Rwanda",
    "RE" => "Réunion",
    "SH" => "Saint Helena",
    "SN" => "Senegal",
    "SC" => "Seychelles",
    "SL" => "Sierra Leone",
    "SO" => "Somalia",
    "ZA" => "South Africa",
    "SD" => "Sudan",
    "SZ" => "Swaziland",
    "ST" => "São Tomé and Príncipe",
    "TZ" => "Tanzania",
    "TG" => "Togo",
    "TN" => "Tunisia",
    "UG" => "Uganda",
    "EH" => "Western Sahara",
    "ZM" => "Zambia",
    "ZW" => "Zimbabwe"
  );
  }
  if($Regions == 'AsiaPacificMiddleEast'){
    $countryList = array(
    "AF" => "Afghanistan",
    "AM" => "Armenia",
    "AZ" => "Azerbaijan",
    "BH" => "Bahrain",
    "BD" => "Bangladesh",
    "BT" => "Bhutan",
    "BN" => "Brunei",
    "KH" => "Cambodia",
    "CN" => "China",
    "CY" => "Cyprus",
    "GE" => "Georgia",
    "HK" => "Hong Kong SAR China",
    "IN" => "India",
    "ID" => "Indonesia",
    "IR" => "Iran",
    "IQ" => "Iraq",
    "IL" => "Israel",
    "JP" => "Japan",
    "JO" => "Jordan",
    "KZ" => "Kazakhstan",
    "KW" => "Kuwait",
    "KG" => "Kyrgyzstan",
    "LA" => "Laos",
    "LB" => "Lebanon",
    "MO" => "Macau SAR China",
    "MY" => "Malaysia",
    "MV" => "Maldives",
    "MN" => "Mongolia",
    "MM" => "Myanmar [Burma]",
    "NP" => "Nepal",
    "NT" => "Neutral Zone",
    "KP" => "North Korea",
    "OM" => "Oman",
    "PK" => "Pakistan",
    "PS" => "Palestinian Territories",
    "YD" => "People's Democratic Republic of Yemen",
    "PH" => "Philippines",
    "QA" => "Qatar",
    "SA" => "Saudi Arabia",
    "SG" => "Singapore",
    "KR" => "South Korea",
    "LK" => "Sri Lanka",
    "SY" => "Syria",
    "TW" => "Taiwan",
    "TJ" => "Tajikistan",
    "TH" => "Thailand",
    "TL" => "Timor-Leste",
    "TR" => "Turkey",
    "TM" => "Turkmenistan",
    "AE" => "United Arab Emirates",
    "UZ" => "Uzbekistan",
    "VN" => "Vietnam",
    "YE" => "Yemen"
  );
  }
  if($Regions == 'Canada'){
    $countryList = array(
    "CA" => "Canada"
  );
  }
  if($Regions == 'Europe'){
    $countryList = array(
    "AL" => "Albania",
    "AD" => "Andorra",
    "AT" => "Austria",
    "BY" => "Belarus",
    "BE" => "Belgium",
    "BA" => "Bosnia and Herzegovina",
    "BG" => "Bulgaria",
    "HR" => "Croatia",
    "CY" => "Cyprus",
    "CZ" => "Czech Republic",
    "DK" => "Denmark",
    "DD" => "East Germany",
    "EE" => "Estonia",
    "FO" => "Faroe Islands",
    "FI" => "Finland",
    "FR" => "France",
    "DE" => "Germany",
    "GI" => "Gibraltar",
    "GR" => "Greece",
    "GG" => "Guernsey",
    "HU" => "Hungary",
    "IS" => "Iceland",
    "IE" => "Ireland",
    "IM" => "Isle of Man",
    "IT" => "Italy",
    "JE" => "Jersey",
    "LV" => "Latvia",
    "LI" => "Liechtenstein",
    "LT" => "Lithuania",
    "LU" => "Luxembourg",
    "MK" => "Macedonia",
    "MT" => "Malta",
    "FX" => "Metropolitan France",
    "MD" => "Moldova",
    "MC" => "Monaco",
    "ME" => "Montenegro",
    "NL" => "Netherlands",
    "NO" => "Norway",
    "PL" => "Poland",
    "PT" => "Portugal",
    "RO" => "Romania",
    "RU" => "Russia",
    "SM" => "San Marino",
    "RS" => "Serbia",
    "CS" => "Serbia and Montenegro",
    "SK" => "Slovakia",
    "SI" => "Slovenia",
    "ES" => "Spain",
    "SJ" => "Svalbard and Jan Mayen",
    "SE" => "Sweden",
    "CH" => "Switzerland",
    "UA" => "Ukraine",
    "SU" => "Union of Soviet Socialist Republics",
    "GB" => "United Kingdom",
    "VA" => "Vatican City",
    "AX" => "Åland Islands" 
  );
  }
  if($Regions == 'LatinAmericaCaribbean'){
    $countryList = array(
    "AI" => "Anguilla",
    "AG" => "Antigua and Barbuda",
    "AR" => "Argentina",
    "AW" => "Aruba",
    "BS" => "Bahamas",
    "BB" => "Barbados",
    "BZ" => "Belize",
    "BM" => "Bermuda",
    "BO" => "Bolivia",
    "BR" => "Brazil",
    "VG" => "British Virgin Islands",
    "CA" => "Canada",
    "KY" => "Cayman Islands",
    "CL" => "Chile",
    "CO" => "Colombia",
    "CR" => "Costa Rica",
    "CU" => "Cuba",
    "DM" => "Dominica",
    "DO" => "Dominican Republic",
    "EC" => "Ecuador",
    "SV" => "El Salvador",
    "FK" => "Falkland Islands",
    "GF" => "French Guiana",
    "GL" => "Greenland",
    "GD" => "Grenada",
    "GP" => "Guadeloupe",
    "GT" => "Guatemala",
    "GY" => "Guyana",
    "HT" => "Haiti",
    "HN" => "Honduras",
    "JM" => "Jamaica",
    "MQ" => "Martinique",
    "MX" => "Mexico",
    "MS" => "Montserrat",
    "AN" => "Netherlands Antilles",
    "NI" => "Nicaragua",
    "PA" => "Panama",
    "PY" => "Paraguay",
    "PE" => "Peru",
    "PR" => "Puerto Rico",
    "BL" => "Saint Barthélemy",
    "KN" => "Saint Kitts and Nevis",
    "LC" => "Saint Lucia",
    "MF" => "Saint Martin",
    "PM" => "Saint Pierre and Miquelon",
    "VC" => "Saint Vincent and the Grenadines",
    "SR" => "Suriname",
    "TT" => "Trinidad and Tobago",
    "TC" => "Turks and Caicos Islands",
    "UM" => "U.S. Minor Outlying Islands",
    "VI" => "U.S. Virgin Islands",    
    "UY" => "Uruguay",
    "VU" => "Vanuatu",
    "VE" => "Venezuela",    
    "WF" => "Wallis and Futuna"
  );
  }
  if($Regions == 'Oceania'){
    $countryList = array(   
    "AS" => "American Samoa",
    "AQ" => "Antarctica",
    "AU" => "Australia",
    "BV" => "Bouvet Island",
    "IO" => "British Indian Ocean Territory",
    "CX" => "Christmas Island",
    "CC" => "Cocos [Keeling] Islands",
    "CK" => "Cook Islands",
    "FJ" => "Fiji",
    "PF" => "French Polynesia",
    "TF" => "French Southern Territories",
    "GU" => "Guam",
    "HM" => "Heard Island and McDonald Islands",
    "KI" => "Kiribati",
    "MH" => "Marshall Islands",
    "FM" => "Micronesia",
    "NR" => "Nauru",
    "NC" => "New Caledonia",
    "NZ" => "New Zealand",
    "NU" => "Niue",
    "NF" => "Norfolk Island",
    "MP" => "Northern Mariana Islands",
    "PW" => "Palau",
    "PG" => "Papua New Guinea",
    "PN" => "Pitcairn Islands",
    "WS" => "Samoa",
    "SB" => "Solomon Islands",
    "GS" => "South Georgia and the South Sandwich Islands",
    "TK" => "Tokelau",
    "TO" => "Tonga",
    "TV" => "Tuvalu"  
    );
  }
  if($Regions == 'UnitedStates'){
    $countryList = array(
    "US" => "United States"   
    );
  }
  if($Regions == ''){
    $countryList = array(
    "AF" => "Afghanistan",
    "AX" => "Aland Islands",
    "AL" => "Albania",
    "DZ" => "Algeria",
    "AS" => "American Samoa",
    "AD" => "Andorra",
    "AO" => "Angola",
    "AI" => "Anguilla",
    "AQ" => "Antarctica",
    "AG" => "Antigua and Barbuda",
    "AR" => "Argentina",
    "AM" => "Armenia",
    "AW" => "Aruba",
    "AU" => "Australia",
    "AT" => "Austria",
    "AZ" => "Azerbaijan",
    "BS" => "Bahamas",
    "BH" => "Bahrain",
    "BD" => "Bangladesh",
    "BB" => "Barbados",
    "BY" => "Belarus",
    "BE" => "Belgium",
    "BZ" => "Belize",
    "BJ" => "Benin",
    "BM" => "Bermuda",
    "BT" => "Bhutan",
    "BO" => "Bolivia",
    "BA" => "Bosnia and Herzegovina",
    "BW" => "Botswana",
    "BV" => "Bouvet Island",
    "BR" => "Brazil",
    "IO" => "British Indian Ocean Territory",
    "VG" => "British Virgin Islands",
    "BN" => "Brunei",
    "BG" => "Bulgaria",
    "BF" => "Burkina Faso",
    "BI" => "Burundi",
    "KH" => "Cambodia",
    "CM" => "Cameroon",
    "CA" => "Canada",
    "CV" => "Cape Verde",
    "BQ" => "Caribbean Netherlands",
    "KY" => "Cayman Islands",
    "CF" => "Central African Republic",
    "TD" => "Chad",
    "CL" => "Chile",
    "CN" => "China",
    "CX" => "Christmas Island",
    "CC" => "Cocos (Keeling) Islands",
    "CO" => "Colombia",
    "KM" => "Comoros",
    "CG" => "Congo (Brazzaville)",
    "CD" => "Congo (Kinshasa)",
    "CK" => "Cook Islands",
    "CR" => "Costa Rica",
    "HR" => "Croatia",
    "CU" => "Cuba",
    "CW" => "Curaçao",
    "CY" => "Cyprus",
    "CZ" => "Czech Republic",
    "DK" => "Denmark",
    "DJ" => "Djibouti",
    "DM" => "Dominica",
    "DO" => "Dominican Republic",
    "EC" => "Ecuador",
    "EG" => "Egypt",
    "SV" => "El Salvador",
    "GQ" => "Equatorial Guinea",
    "ER" => "Eritrea",
    "EE" => "Estonia",
    "ET" => "Ethiopia",
    "FK" => "Falkland Islands",
    "FO" => "Faroe Islands",
    "FJ" => "Fiji",
    "FI" => "Finland",
    "FR" => "France",
    "GF" => "French Guiana",
    "PF" => "French Polynesia",
    "TF" => "French Southern Territories",
    "GA" => "Gabon",
    "GM" => "Gambia",
    "GE" => "Georgia",
    "DE" => "Germany",
    "GH" => "Ghana",
    "GI" => "Gibraltar",
    "GR" => "Greece",
    "GL" => "Greenland",
    "GD" => "Grenada",
    "GP" => "Guadeloupe",
    "GU" => "Guam",
    "GT" => "Guatemala",
    "GG" => "Guernsey",
    "GN" => "Guinea",
    "GW" => "Guinea-Bissau",
    "GY" => "Guyana",
    "HT" => "Haiti",
    "HM" => "Heard Island and McDonald Islands",
    "HN" => "Honduras",
    "HK" => "Hong Kong S.A.R., China",
    "HU" => "Hungary",
    "IS" => "Iceland",
    "IN" => "India",
    "ID" => "Indonesia",
    "IR" => "Iran",
    "IQ" => "Iraq",
    "IE" => "Ireland",
    "IM" => "Isle of Man",
    "IL" => "Israel",
    "IT" => "Italy",
    "CI" => "Ivory Coast",
    "JM" => "Jamaica",
    "JP" => "Japan",
    "JE" => "Jersey",
    "JO" => "Jordan",
    "KZ" => "Kazakhstan",
    "KE" => "Kenya",
    "KI" => "Kiribati",
    "KW" => "Kuwait",
    "KG" => "Kyrgyzstan",
    "LA" => "Laos",
    "LV" => "Latvia",
    "LB" => "Lebanon",
    "LS" => "Lesotho",
    "LR" => "Liberia",
    "LY" => "Libya",
    "LI" => "Liechtenstein",
    "LT" => "Lithuania",
    "LU" => "Luxembourg",
    "MO" => "Macao S.A.R., China",
    "MK" => "Macedonia",
    "MG" => "Madagascar",
    "MW" => "Malawi",
    "MY" => "Malaysia",
    "MV" => "Maldives",
    "ML" => "Mali",
    "MT" => "Malta",
    "MH" => "Marshall Islands",
    "MQ" => "Martinique",
    "MR" => "Mauritania",
    "MU" => "Mauritius",
    "YT" => "Mayotte",
    "MX" => "Mexico",
    "FM" => "Micronesia",
    "MD" => "Moldova",
    "MC" => "Monaco",
    "MN" => "Mongolia",
    "ME" => "Montenegro",
    "MS" => "Montserrat",
    "MA" => "Morocco",
    "MZ" => "Mozambique",
    "MM" => "Myanmar",
    "NA" => "Namibia",
    "NR" => "Nauru",
    "NP" => "Nepal",
    "NL" => "Netherlands",
    "AN" => "Netherlands Antilles",
    "NC" => "New Caledonia",
    "NZ" => "New Zealand",
    "NI" => "Nicaragua",
    "NE" => "Niger",
    "NG" => "Nigeria",
    "NU" => "Niue",
    "NF" => "Norfolk Island",
    "MP" => "Northern Mariana Islands",
    "KP" => "North Korea",
    "NO" => "Norway",
    "OM" => "Oman",
    "PK" => "Pakistan",
    "PW" => "Palau",
    "PS" => "Palestinian Territory",
    "PA" => "Panama",
    "PG" => "Papua New Guinea",
    "PY" => "Paraguay",
    "PE" => "Peru",
    "PH" => "Philippines",
    "PN" => "Pitcairn",
    "PL" => "Poland",
    "PT" => "Portugal",
    "PR" => "Puerto Rico",
    "QA" => "Qatar",
    "RE" => "Reunion",
    "RO" => "Romania",
    "RU" => "Russia",
    "RW" => "Rwanda",
    "BL" => "Saint Barthélemy",
    "SH" => "Saint Helena",
    "KN" => "Saint Kitts and Nevis",
    "LC" => "Saint Lucia",
    "MF" => "Saint Martin (French part)",
    "PM" => "Saint Pierre and Miquelon",
    "VC" => "Saint Vincent and the Grenadines",
    "WS" => "Samoa",
    "SM" => "San Marino",
    "ST" => "Sao Tome and Principe",
    "SA" => "Saudi Arabia",
    "SN" => "Senegal",
    "RS" => "Serbia",
    "SC" => "Seychelles",
    "SL" => "Sierra Leone",
    "SG" => "Singapore",
    "SX" => "Sint Maarten",
    "SK" => "Slovakia",
    "SI" => "Slovenia",
    "SB" => "Solomon Islands",
    "SO" => "Somalia",
    "ZA" => "South Africa",
    "GS" => "South Georgia and the South Sandwich Islands",
    "KR" => "South Korea",
    "SS" => "South Sudan",
    "ES" => "Spain",
    "LK" => "Sri Lanka",
    "SD" => "Sudan",
    "SR" => "Suriname",
    "SJ" => "Svalbard and Jan Mayen",
    "SZ" => "Swaziland",
    "SE" => "Sweden",
    "CH" => "Switzerland",
    "SY" => "Syria",
    "TW" => "Taiwan",
    "TJ" => "Tajikistan",
    "TZ" => "Tanzania",
    "TH" => "Thailand",
    "TL" => "Timor-Leste",
    "TG" => "Togo",
    "TK" => "Tokelau",
    "TO" => "Tonga",
    "TT" => "Trinidad and Tobago",
    "TN" => "Tunisia",
    "TR" => "Turkey",
    "TM" => "Turkmenistan",
    "TC" => "Turks and Caicos Islands",
    "TV" => "Tuvalu",
    "VI" => "U.S. Virgin Islands",
    "UG" => "Uganda",
    "UA" => "Ukraine",
    "AE" => "United Arab Emirates",
    "GB" => "United Kingdom",
    "US" => "United States",
    "UM" => "United States Minor Outlying Islands",
    "UY" => "Uruguay",
    "UZ" => "Uzbekistan",
    "VU" => "Vanuatu",
    "VA" => "Vatican",
    "VE" => "Venezuela",
    "VN" => "Vietnam",
    "WF" => "Wallis and Futuna",
    "EH" => "Western Sahara",
    "YE" => "Yemen",
    "ZM" => "Zambia",
    "ZW" => "Zimbabwe"
);
  }
  return $countryList;
}
