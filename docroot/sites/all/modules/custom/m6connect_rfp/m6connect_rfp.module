<?php

function m6connect_rfp_permission() {
  return array(
    'm6connect_authenticate_user' => array(
      'title' => t('M6Connect Authenticate user'),
      'description' => t('Permission for authentication user'),
    ),
  );
}

/*
  function m6connect_rfp_cron() {
  _cron_invite_users_rfp_project();
  }
 */

function m6connect_rfp_node_presave($node) {
  if ($node->type == 'rfp') {
    if (isset($node->field_rfp_serial['und']) && !empty($node->field_rfp_serial['und'][0]['value'])) {
      $serial = str_pad($node->field_rfp_serial['und'][0]['value'], 4, '0', STR_PAD_LEFT);
      $node->field_reference_number['und'][0]['value'] = date('Y-md', $node->created) . '-' . $serial;
    }
	if (isset($node->forward_rfp_flag) && $node->forward_rfp_flag == 1) {
      $node->field_is_forwarded_rfp_submitted['und'][0]['value'] = 1;
    }
	if(isset($node->associated_project_nid) && !empty($node->associated_project_nid)){
	  $node->field_project = array('und'=>array(0=>array('target_id'=>$node->associated_project_nid)));
	}
	if(isset($node->associated_project_bidkey) && !empty($node->associated_project_bidkey)){		
	  $node->confidential_bid_key = $node->associated_project_bidkey;
	}	 
  }
  /*
   * Update extend due date according to extend Hrs.
   */
  if ($node->type == 'rfp') {
    if (isset($node->field_extend_by['und'][0]) && isset($node->field_extend_by['und'][0]['value']) && !empty($node->field_extend_by['und'][0]['value'])) {
      $extendby = $node->field_extend_by['und'][0]['value'];
	  $duedate = $node->field_due['und'][0]['value'];
	  $dstr = strtotime($duedate);
	  //$time= $dstr + (int)$h * 60*60 + (int)$m*60;
	  $time = $dstr + (int) $extendby * 60 * 60;
	  $extendeddate = date('Y-m-d H:i:s', $time);
	  $node->field_extend_due_date['und'][0]['value'] = $extendeddate;
	} 
	else {
      $duedate = $node->field_due['und'][0]['value'];
      $node->field_extend_due_date['und'][0]['value'] = $duedate;
    }
  }
}

function custom_rfp_build_after($form, &$form_state) {
  return $form;
}

function custom_rfp_form_popover_after_build($form, &$form_state) {
  $form['field_issued']['und'][0]['value']['date']['#title'] .='<span class="tooltip-main-custom">
															    <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
																  <span class="tooltip" data-tooltip-content="#tooltip_rfp_issueddate">&nbsp;</span>
																  <div class="tooltip_templates">
																    <span id="tooltip_rfp_issueddate">
																      <p>It is recommended to leave as default<br/> time.</p>
																    </span></div></i></span>';
																  
  $form['field_due']['und'][0]['value']['date']['#title'] .='<span class="tooltip-main-custom">
     														 <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        													 <span class="tooltip" data-tooltip-content="#tooltip_rfp_dueddate">&nbsp;</span>
        													  <div class="tooltip_templates"><span id="tooltip_rfp_dueddate">
															  <p>If using M6 Proposals, they cannot be <br/>submitted after this time unless an<br/> extension is made.</p></span></div></i></span>';
  $form['field_extend_by']['und'][0]['value']['#title'] .= '<span class="tooltip-main-custom"><i class="fa fa-question-circle custom-tooltip" aria-hidden="true"><span class="tooltip" data-tooltip-content="#tooltip_rfp_expectedby">&nbsp;</span>
  <div class="tooltip_templates">
          <span id="tooltip_rfp_expectedby">
           <p>This is a private feature bidders do not<br/> see this extension, but they can login<br/> and see the bid is available and not<br/> expired.</p>
         </span>
	    </div>
	 </i>
 </span>';
	
  $form['field_rfp_documents']['und'][0]['field_rfp_document']['und']['#title'] .='<span class="tooltip-main-custom padding-5">
							   <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
								<span class="tooltip" data-tooltip-content="#tooltip_rfp_documents">&nbsp;</span>
								  <div class="tooltip_templates">
									<span id="tooltip_rfp_documents">
										<p>Attach documents to send out with this<br/> RFP.</p>
									</span>
								  </div>
             </i></span>';
 $form['field_rfp_documents']['und'][0]['field_rfp_document_type']['und']['#title'].='<span class="tooltip-main-custom padding-5">
							   <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
								<span class="tooltip" data-tooltip-content="#tooltip_rfp_documenttype">&nbsp;</span>
								  <div class="tooltip_templates">
									<span id="tooltip_rfp_documenttype">
										<p>Select the type of documents you<br/> have attached.</p>
									</span>
								  </div>
             </i></span>';
	
	/*$form['field_rfp_documents']['und'][0]['field_rfp_comments']['und'][0]['value']['#field_prefix'] = '<span class="pull-right poptextarea" data-toggle="popover" data-trigger="manual" data-placement="top" data-content="Describe the documents here .This provides invitees more information about the documents you have uploaded."></span>';*/
	$form['field_rfp_documents']['und'][0]['field_rfp_comments']['und'][0]['value']['#title'].='<span class="tooltip-main-custom padding-5">
							   <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
								<span class="tooltip" data-tooltip-content="#tooltip_rfp_comments">&nbsp;</span>
								  <div class="tooltip_templates">
									<span id="tooltip_rfp_comments">
										<p>Describe the documents here .This<br/> provides invitees more information<br/> about the documents you have<br/> uploaded.</p>
									</span>
								  </div>
             </i></span>';
	
	
	$form['field_rfp_description']['und'][0]['value']['#title'] .= '<span class="tooltip-main-custom">
     <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        <span class="tooltip" data-tooltip-content="#tooltip_rfp_description">&nbsp;</span>
        <div class="tooltip_templates">
          <span id="tooltip_rfp_description">
           <p>Provide a description of the RFP or<br/> Invitation to Bid here.  This may<br/> include your front end documents and<br/> instructions to bidders.</p>
         </span>
	    </div>
	 </i>
 </span>';
	
	return $form;
}

function m6connect_rfp_form_rfp_node_form_alter(&$form,&$form_state){
  if (empty($form['nid']['#value'])) {
    // If this is a new node form.
    if (!empty($_GET['cm'])) {
      $cm_type = $_GET['cm'];
      $form['field_cm_type']['und'][0]['value']['#default_value'] = $cm_type;
      $form['field_cm_type']['und'][0]['#default_value'] = $cm_type;
    }
  }
  //title
  $form['#after_build'][] = 'custom_rfp_form_popover_after_build';
 
  $form['field_rfp_description']['und'][0]['#attributes']['class'][] = 'textarea-ckeditor-popover';
  $form['field_rfp_description']['#prefix'] = '<div class="complete_description_rfp">';
  $form['field_rfp_description']['#suffix'] = '</div>';
  
  
  $form['field_rfp_documents']['und'][0]['field_rfp_comments']['und'][0]['#attributes']['class'][] = 'textarea-ckeditor-popover-comments';
   //print "<pre>"; print_r($form); die;
   //kpr($form);
   
   // start new code for rfp popover //
  	$form['#prefix'] = '<div class="row margin-5"><div class="col-md-8 col-sm-8 padding-5 custom-rfp-popover-left">';
	     
	$form['#suffix'] = '</div><div class="col-md-4 col-sm-4 padding-5 custom-rfp-popover-right">     
				   <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-rfp-name">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">Provide a name that will display to contractors.</div>
                   </div>
				   <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-field-public">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">Share with the public and increase your bid coverage.</div>
                   </div>
				   <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-field-project">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">Link your RFP to a project to improve reporting.</div>
                  </div>
				  <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-estimated-cost">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">This field is for reporting only. Your cost in formal is not shared.</div>
                  </div>
				  <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-rfp-description">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">Provide a description of the RFP or Invitation to Bid here. This may include your front end documents and instructions to bidders.</div>
                  </div>
				   <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-issued-date">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">It is recommended to leave as default time.</div>
                  </div>
				   <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-due-date">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">If using M6 Proposals, they cannot be submitted after this time unless an extension is made.</div>
                  </div>
				  <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-expected-award">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">This is just an estimated award time-your company is not bound for this date.</div>
                  </div>
				  <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-expected-start">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">The anticipated date your company estimates the work can begin.</div>
                  </div>
				  <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-expected-end">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">The anticipated date your company estimates the work should be completed.</div>
                  </div>
				  <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-extend-hours">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">This is a private feature bidders do not see this extension, but they can login and see the bid is available and not expired.</div>
                  </div>
				  <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-attach-documents">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">Attach documents to send out with this RFP.</div>
                  </div>
				  <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-type-documents">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">Select the type of documents you have attached.</div>
                  </div>
				  <div class="popover popover-gray-cust right margin-bottom-25" id="rfp-pop-rfp-comments">
                       <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">Describe the documents here. This provides invitees more information about the documents you have uploaded.</div>
                  </div>
					
                			   
          </div>
     </div>';
   // end new code for rfp popover //
    $form['title']['#title'] .= '<span class="tooltip-main-custom padding-5">
							   <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
								<span class="tooltip" data-tooltip-content="#tooltip_rfp_title">&nbsp;</span>
								  <div class="tooltip_templates">
									<span id="tooltip_rfp_title">
										<p>Provide a name that will display to <br/>contractors.</p>
									</span>
								  </div>
                        </i></span>';
	
  $form['field_public']['und']['#title'] .= '<span class="tooltip-main-custom padding-5">
							   <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
								<span class="tooltip" data-tooltip-content="#tooltip_rfp_public">&nbsp;</span>
								  <div class="tooltip_templates">
									<span id="tooltip_rfp_public">
										<p>Share with the public and increase<br/> your bid coverage.</p>
									</span>
								  </div>
                        </i></span>';
  
  $form['field_project']['und']['#title'] .= '<span class="tooltip-main-custom padding-5">
							   <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
								<span class="tooltip" data-tooltip-content="#tooltip_rfp_project">&nbsp;</span>
								  <div class="tooltip_templates">
									<span id="tooltip_rfp_project">
										<p>Link your RFP to a project to improve <br/>reporting.</p>
									</span>
								  </div>
                        </i></span>';
  
  $form['field_estimated_cost']['und'][0]['value']['#title'] .= '<span class="tooltip-main-custom padding-5">
							   <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
								<span class="tooltip" data-tooltip-content="#tooltip_rfp_estimated_cost">&nbsp;</span>
								  <div class="tooltip_templates">
									<span id="tooltip_rfp_estimated_cost">
										<p>This field is for reporting only. Your<br/> cost in formal is not shared.</p>
									</span>
								  </div>
                        </i></span>';


}

function _get_invited_count_on_rfp_project($nid) {
    $count = 0;
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.entity_id=n.nid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->fields('ric', array('field_rfp_invite_comapnies_value'));
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
    $query->condition('n.nid', $nid, '=');
    $count = $query->execute()->rowCount();
    return $count;
}

function m6connect_rfp_form_alter(&$form, &$form_state, $form_id) { //pre($form_id);		
    //drupal_set_message($form_id);
	global $user;
    drupal_add_js(drupal_get_path('module', 'm6connect_rfp') . '/m6connect_rfp.js');				
    if ($form_id == 'rfp_node_form') { //pre($form);	  
	  $form['field_project']['und']['#ajax'] = array(
		'event' => 'change',
		'callback' => 'custom_bidkey_seton_assproject_callback',
      );
	  $form['field_project']['und']['#validate'] = TRUE;
	  $form['associated_project_nid'] = array(
	    '#type' => 'hidden',		
		'#attributes' => array('class'=> array('rfp_my_project_id')),
	  );
	  $form['associated_project_bidkey'] = array(
	    '#type' => 'hidden',
		'#attributes' => array('class'=> array('rfp_my_project_bidkey')),
	  );
	    /*if(empty($form_state['confidential_bid_key'])){
		  $form_state['confidential_bid_key'] =1;
		  if(empty($form['nid']['#value'])){
			$form_state['confidential_bid_key'] = _generate_m6connect_confidential_key($type='rfp',$form['uid']['#value'],$length=20);  
		  }else{
			$form_state['confidential_bid_key'] = db_select('m6connect_confidential_bids_keys','mcbk')->fields('mcbk',array('confid_value'))
			  ->condition('mcbk.entity_id',$form['nid']['#value'])->execute()->fetchField(); 
		  }
		}
	    $form['confidential-bid-key-container'] = array(
		  '#type' => 'container',
		  '#attributes' => array('class'=> array('confidential-bid-key-container-inner')),
		  '#states' => array(
		    'visible' => array(':input[name="field_create_confidential_bid[und]"]' => array('checked' => TRUE)),
		  ),
		  '#weight' => $form['field_create_confidential_bid']['#weight']+1,
		);
		
		$form['confidential-bid-key-container']['confidential-bid-key-markup'] = array(
		  '#type' => 'markup',
		  '#markup' => '<span class="confidential-bid-text" style="margin-left:2.4em;"><strong>Bid Key: </strong>'.$form_state['confidential_bid_key'].'</span>',
		);
		$form['#step_children']['confidential-bid-key-container'] = 'step_basic_information';
		$form['#group_children']['confidential-bid-key-container'] = 'group_confidential_bid';
		
		$form['confidential_bid_key'] = array(
		  '#type' => 'value',
		  '#value' => $form_state['confidential_bid_key'],
		);
		
		if(!empty($form['nid']['#value'])){
		  if($form['uid']['#value'] != $user->uid){
		    $form['field_create_confidential_bid']['#access'] = FALSE; 
			$form['confidential-bid-key-container']['#access'] = FALSE;
		  }
		}*/
				
        //$form['#after_build'][] = 'custom_rfp_build_after';
        global $rfp_active_tab;
        if (isset($form_state['input']) && is_array($form_state['input']) && (isset($form_state['input']['next']) || isset($form_state['input']['previous']))) {
            $rfp_active_tab = $form_state['storage']['step'];
        } else if (isset($_REQUEST['rfpstep']) && !empty($_REQUEST['rfpstep'])) {
            $form_state['storage']['step'] = $rfp_active_tab = $_REQUEST['rfpstep'];
        } else {
            $rfp_active_tab = $form_state['storage']['step'];
        }
        $form['attachment-popup'] = array(
            '#markup' => '',
            '#prefix' => '<div id="attachment-popup">',
            '#suffix' => '</div>',
        );
        $form['#step_children']['attachment-popup'] = 'step_rpf_documents';
        if ($form_state['storage']['step'] == 'step_rpf_documents') {
            $form['actions']['submit']['#attributes']['class'][] = 'custom-attach-document-submit';
            $form['attachment-popup']['#markup'] = '<div class="text-center"><strong>You currently have unsaved changes. You have uploaded a document however you have not saved the page. Would you like to save this change now?</strong></div>';
            drupal_add_library('system', 'ui.dialog');
            drupal_add_js(array('m6connect_rfp' => array('attachment_popup' => 1)), 'setting');
        }

        //Add Time zone in the TimeLine Date fields
        $form['#after_build'][] = 'custom_rfp_form_after_build';
        //Change Html code to Ascii Charactor in Project DropDown
        if (isset($form['field_project']['und']) && isset($form['field_project']['und']['#options']) &&
                count($form['field_project']['und']['#options']) > 1) {
            foreach ($form['field_project']['und']['#options'] as $key => $val) {
                if ($key == '_none') {
                    continue;
                }
                $form['field_project']['und']['#options'][$key] = html_entity_decode($val, ENT_QUOTES);
            }
        }


        if ($form_state['storage']['step'] == 'step_basic_information' || $form_state['storage']['step'] == 'step_timeline') {
            drupal_add_css('#edit-skip {display:none;}', $option['type'] = 'inline');
            drupal_add_css('#edit-draft {display:none;}', $option['type'] = 'inline');
        }
        if ($form_state['storage']['step'] == 'step_rfp_proposals') {
            drupal_add_css('#edit-delete {display:none;}', $option['type'] = 'inline');
        }
        if ($form_state['storage']['step'] == 'step_rpf_documents') {
            drupal_add_css('#edit-next {display:none;}', $option['type'] = 'inline');
            drupal_add_css('#edit-skip {display:none;}', $option['type'] = 'inline');
        }
		
		if ($form_state['storage']['step'] == 'step_basic_information'){
		  $form['#prefix'] = '<div class="cust-nform-req cust-nform-req-rfp"><span style="color:red;">* Indicates a Required Field</span></div>';
		}else{
		  $form['#prefix']='';
		}


     /*   $imgdesc = $form['field_rfp_logo']['und'][0]['#description']; //pre($imgdesc);
        $imgdescarr = explode('Allowed file types:', $imgdesc); //pre($imgdescarr);
        if (is_array($imgdescarr)) {
            $imsdescrp = $imgdescarr[0];
            $form['field_rfp_logo']['und'][0]['#description'] = $imsdescrp;
        }*/
        if (current_path() == 'node/add/rfp') {
            $form['actions']['submit']['#value'] = 'Save as Draft';
            //kpr($form);
        }
        //$form['#after_build'][] = 'rfp_nodeform_after_build';
        drupal_add_js('jQuery(document).ready(function(){ jQuery("#edit-field-project-und").before(`<div><span>If this RFP is a part of an existing project in the M6Connect system, please select that project name below. If the RFP is not associated with a project, please skip this field. To create a new project first please ' . l(t('click here'), 'node/add/project', array('attributes' => array('target' => 'blank'))) . '</span></div>`); });', 'inline');
        if (isset($form['field_project']['und']['#options'])) {
            $form['field_project']['und']['#options']['_none'] = 'Not associated with a project';
        }
        //$form['field_extend_due_date']['#disabled'] = TRUE;
        $form['field_extend_due_date']['#access'] = FALSE;
        $extdt = $form['field_extend_due_date']['und'][0]['#date_items']['value'];
        if (!empty($extdt)) {
            if (isset($form['nid']['#value']) && !empty($form['nid']['#value'])) {
                $nd = $form['nid']['#value'];
                $nod = node_load($nd);
                $display = array('settings' => array('format_type' => 'rfp_due_date'));
                $ext = field_view_field($entity_type = 'node', $nod, 'field_extend_due_date', $display);

                $form['field_extend_date_mrkup']['und'][0]['markup']['#markup'] = drupal_render($ext);
            }
        } else {
            $form['field_extend_date_mrkup']['und'][0]['markup']['#markup'] = '<b>Extended Due Date</b>';
        }
        if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
            $data = arg(1);
            $form['actions']['copy'] = array(
                '#type' => 'submit',
                '#value' => 'Copy',
                '#weight' => 99,
                '#submit' => array('custom_rfp_copy_submit'),
                    //'#attributes' => array('class'=>array('DocumentsWithRFP'),'data'=>array($data))
            );
        }
    }
    $rpfPagePath = array('rfps/sent', 'rfps/received', 'rfps/public', 'rfps/draft', 'rfps/bidding', 'rfps/expired', 'rfps/bid-received','rfps/all');
    if ($form_id == 'views_exposed_form' && in_array(current_path(), $rpfPagePath)) {
        //kpr($form);
        //$form['#info']['filter-title']['label']='';
        $form['#info']['filter-combine']['label'] = '';
        $form['#attributes']['class'][] = 'rpf-exposed-filter';
        //$form['title']['#attributes']['placeholder'] = 'Search...';
        //$form['title']['#title_display']= 'invisible';
        $form['combine']['#attributes']['placeholder'] = 'Search...';
        $form['combine']['#title_display'] = 'invisible';
        $form['sort_by']['#title_display'] = 'invisible';
        $form['sort_by']['#attributes']['class'][] = 'exposed_sort_by_select';
        $form['sort_by']['#attributes']['onchange'] = 'jQuery(".exposed_filter_submit_bt").click();';
        $form['submit']['#attributes']['class'][] = 'exposed_filter_submit_bt';
    }
    //Notify Others User About RFP update if node is published and any of invited on that RFP or Project.
    if (in_array($form_id, array('rfp_node_form', 'project_node_form')) && isset($form['nid']['#value']) && is_numeric($form['nid']['#value']) && $form['#node']->status == 1) {
        if (_get_invited_count_on_rfp_project($form['nid']['#value'])) {
            $form['actions']['submit']['#submit'][] = 'custom_rfp_project_submit_handler';
        }
    }
    if ($form_id == 'rfp_node_form' && $form_state['storage']['step'] === 'step_timeline' && current_path() == 'node/add/rfp') {
        $form['#validate'][] = 'custom_rfp_project_submit_validate';
    }
    if ($form_id == 'user_register_form') { //pre($form);
        //$lpath = drupal_lookup_path('alias', 'node/384');
        $lpath = 'content/website-service-agreement'; //pre($lpath,1);
        $link = l('Service Agreement', $lpath, array('attributes' => array('target' => 'blank')));

        $form['field_service_agreement']['und']['#title'] = t('I Agree to the terms outlined in this ' . $link . '.');
    }
    
	if (in_array($form_id , array('rfp_node_form','project_node_form'))) {
	  $step_group_fields = array(
		'rfp_node_form' => array('step_children'=>'step_basic_information','group_children'=>'group_confidential_bid'),
		'project_node_form' => array('step_children'=>'step_pro_summary','group_children'=>'group_confidential_bid2')
	  );
	  if(empty($form_state['confidential_bid_key'])){
		$form_state['confidential_bid_key'] =1;
		if(empty($form['nid']['#value'])){
		  $form_state['confidential_bid_key'] = _generate_m6connect_confidential_key($form['type']['#value'],$form['uid']['#value'],$length=7); 
		}else{
		  $form_state['confidential_bid_key'] = db_select('m6connect_confidential_bids_keys','mcbk')->fields('mcbk',array('confid_value'))
			->condition('mcbk.entity_id',$form['nid']['#value'])->execute()->fetchField(); 
		}
	  }
	  $form['confidential-bid-key-container'] = array(
		'#type' => 'container',
		'#attributes' => array('class'=> array('confidential-bid-key-container-inner')),
		'#states' => array(
		  'visible' => array(':input[name="field_create_confidential_bid[und]"]' => array('checked' => TRUE)),
		),
		'#weight' => $form['field_create_confidential_bid']['#weight']+1,
	  );
	  
	  $form['confidential-bid-key-container']['confidential-bid-key-markup'] = array(
		'#type' => 'markup',
		'#markup' => '<span class="confidential-bid-text" style="margin-left:2.4em;"><strong>Bid Key: </strong>'.$form_state['confidential_bid_key'].'</span>',
	  );
	  $form['#step_children']['confidential-bid-key-container'] = $step_group_fields[$form_id]['step_children'];
	  $form['#group_children']['confidential-bid-key-container'] = $step_group_fields[$form_id]['group_children'];
	  
	  $form['confidential_bid_key'] = array(
		'#type' => 'value',
		'#value' => $form_state['confidential_bid_key'],
	  );
			
	  if(!empty($form['nid']['#value'])){
		if($form['uid']['#value'] != $user->uid){
		  $form['field_create_confidential_bid']['#access'] = FALSE; 
		  $form['confidential-bid-key-container']['#access'] = FALSE;
		}
	  }
	}

  if ($form_id == 'my_proposal_node_form') {
    if (empty($form['nid']['#value'])) {
      // If this is a new node form.
      if (!empty($_GET['cm'])) {
        $cm_type = $_GET['cm'];
        $form['field_cm_type']['und'][0]['value']['#default_value'] = $cm_type;
        $form['field_cm_type']['und'][0]['#default_value'] = $cm_type;
      }
    }
  }
}

function custom_rfp_node_add_submit(&$form, &$form_state) {
/*	//pre($form_state['values']);
    if(isset($form_state['values']['associated_project_nid']) && !empty($form_state['values']['associated_project_nid']) && $form_state['values']['type'] == 'rfp'){
	  //$node->field_project = array('und'=>array(0=>array('target_id'=>$node->associated_project_nid)));
	  $form_state['values']['field_project'] = array('und'=>array(0=>array('target_id'=>$form_state['values']['associated_project_nid'])));
	}
	if(isset($form_state['values']['associated_project_bidkey']) && !empty($form_state['values']['associated_project_bidkey']) && $form_state['values']['type'] == 'rfp'){
	  //$node->field_project = array('und'=>array(0=>array('target_id'=>$node->associated_project_nid)));
	  $form_state['values']['confidential_bid_key'] = $form_state['values']['associated_project_bidkey'];
	}
	//pre($form_state['values'],1);*/
    $form_state['redirect'] = array('rfp-bid-packages/' . $form_state['nid'], array('query' => array('rfpstep' => 'step_rfp_bid_package', 'action'=>'create')));
}

function custom_rfp_project_submit_validate(&$form, &$form_state) {

    if (isset($form_state['input']['field_due']['und'][0]['value']['date']) && isset($form_state['input']['field_due']['und'][0]['value']['time'])) {
        $date = str_replace('/', '/', $form_state['input']['field_due']['und'][0]['value']['date']);
        $input_time = strtotime($date . ' ' . $form_state['input']['field_due']['und'][0]['value']['time']);
        $timezone = drupal_get_user_timezone();
        $dateTime = new DateTime();
        $dateTime->setTimeZone(new DateTimeZone($timezone));
        $cuttent_time = $dateTime->getTimestamp();
        if ($input_time < $cuttent_time) {
            form_set_error('field_due', 'Due date and time not less then current date time');
        }
    }
}

function custom_rfp_form_after_build($form, &$form_state) {		
    $timezone = drupal_get_user_timezone();
    $dateTime = new DateTime();
    $dateTime->setTimeZone(new DateTimeZone($timezone));
    $timezone = $dateTime->format('T');
		
		$field_issued_title = (isset($form['field_issued']['und']) ? $form['field_issued']['und'][0]['#title'] : '');
		$field_due_title = (isset($form['field_due']['und']) ? $form['field_due']['und'][0]['#title'] : '');
		if (isset($form['field_issued']['und']) && isset($form['field_due']['und']) ){		
		  $form['field_issued']['und'][0]['value']['date']['#title'] = $field_issued_title.' '.$form['field_issued']['und'][0]['value']['date']['#title'];
		  $form['field_due']['und'][0]['value']['date']['#title'] = $field_due_title.' '.$form['field_due']['und'][0]['value']['date']['#title'];
		}
		
		//if ($timezone && isset($form['field_issued']['und'][0]['value']) && isset($form['field_issued']['und'][0]['value']['time'])) {
    if ($timezone && isset($form['field_issued']['und'][0]['value']) /* && isset($form['field_issued']['und'][0]['value']['ampm']) */) {
			
        //$form['field_issued']['und'][0]['value']['time']['#suffix'] = '<span class="node-date-timezone"><strong>' . $timezone . '</strong></span>';
	  if(empty($form['field_issued']['und'][0]['value']['ampm']['#suffix'])){
		$form['field_issued']['und'][0]['value']['ampm']['#suffix']='';  
	  }
      //$form['field_issued']['und'][0]['value']['ampm']['#suffix'] = '<span class="node-date-timezone"><strong>' . $timezone . '</strong><span data-toggle="popover" data-trigger="manual" data-placement="right" data-content="It is recommended to leave as default time."></span></span>'.$form['field_issued']['und'][0]['value']['ampm']['#suffix'];
		  
    }
    //if ($timezone && isset($form['field_due']['und'][0]['value']) && isset($form['field_due']['und'][0]['value']['time'])) {
    if ($timezone && isset($form['field_due']['und'][0]['value']) /* && isset($form['field_due']['und'][0]['value']['ampm']) */) {
        //$form['field_due']['und'][0]['value']['time']['#suffix'] = '<span class="node-date-timezone"><strong>' . $timezone . '</strong></span>';
        //$form['field_due']['und'][0]['value']['ampm']['#suffix'] = '<span class="node-date-timezone"><strong>' . $timezone . '</strong><span data-toggle="popover" data-trigger="manual" data-placement="right" data-content="If using M6 Proposals, they cannot be submitted after this time unless an extension is made."></span></span>';			
    }
    //$form['field_extend_due_date']['und']['#attributes']['disabled'] = 'disabled';
    //kpr($form);
    return $form;
}

function custom_rfp_project_submit_handler(&$form, &$form_state) {
    global $user;
    $values = $form_state['values'];
    //drupal_set_message('<pre>'..'</pre>');
    $_SESSION['updated_rfp_project'] = 1;
    if (isset($form_state['values']['forward_rfp_flag'])) {
        unset($_SESSION['updated_rfp_project']);
    }
    if (isset($_SESSION['updated_rfp_project']) && $_SESSION['updated_rfp_project'] == 1 && $values['type'] == 'project') {
        $nid = $values['nid'];
        $m6connect_notification_table_exist = db_table_exists('m6connect_notification');
        $sent_notification_datas = _get_invited_user_data_by_entity_id($nid);
        $arr = array();
        if ($m6connect_notification_table_exist) {
            foreach ($sent_notification_datas as $sent_notification_data) {
                if (is_numeric($sent_notification_data->field_rfp_company_nid_email_value)) {
                    if (!empty($sent_notification_data->field_co_invite_manager_uid_value)) {
                        $arr[] = $sent_notification_data->field_co_invite_manager_uid_value;
                        $addcomma_arr = implode(',', $arr);
                        $arr_datas = explode(',', $addcomma_arr);
                        foreach ($arr_datas as $arr_data) {
                            $m6connect_notification = array(
                                'type' => 'project',
                                'event' => 'update',
                                'entity_id' => $nid,
                                'company_nid' => $sent_notification_data->field_rfp_company_nid_email_value,
                                'message' => NULL,
                                'request_from' => $user->uid,
                                'request_to' => $arr_data,
                                'status' => 1,
                                'timestamp' => time(),
                            );
                            entity_save('m6connect_notification', (object) $m6connect_notification);
                        }
                    }
                } else {
                    $userOject = user_load_by_mail($sent_notification_data->field_rfp_company_nid_email_value);
                    $individualCmpNid = _get_individual_company_by_uid($userOject->uid);

                    $m6connect_notification = array(
                        'type' => 'project',
                        'event' => 'update',
                        'entity_id' => $nid,
                        'company_nid' => $individualCmpNid,
                        'message' => NULL,
                        'request_from' => $user->uid,
                        'request_to' => $userOject->uid,
                        'status' => 1,
                        'timestamp' => time(),
                    );
                    entity_save('m6connect_notification', (object) $m6connect_notification);
                }
            }
        }
    }
}

function custom_cancel_submit_hander_callback(&$form, &$form_state) {
    if (isset($form_state['values']['nid']) && !empty($form_state['values']['nid'])) {
        $path = drupal_lookup_path('alias', 'node/' . $form_state['values']['nid']);
        //$query =array('query'=> array('action'=> 'cancel'));
        if ($path) {
            drupal_goto($path);
        } else {
            drupal_goto('node/' . $form_state['values']['nid']);
        }
    }
}

function custom_rfp_submit_handler_callback(&$form, &$form_state) {
    if (isset($form_state['values']['nid']) && !empty($form_state['values']['nid'])) {
        drupal_goto('invite-companies/' . $form_state['values']['nid']);
    }
}

function rfp_nodeform_after_build($form, $form_state) {
    $myrfpstep = isset($_REQUEST ['rfpstep']) ? $_REQUEST ['rfpstep'] : '';
    if (!empty($myrfpstep)) {

        //$form_state['storage']['step'] = 'step_pro_supplier_diversity';
        $form_state['storage']['step'] = $myrfpstep;
        $rfp_active_tab = $form_state['storage']['step'];
    }
    if ($form_state['storage']['step'] == 'step_basic_information' || $form_state['storage']['step'] == 'step_timeline') {
        drupal_add_css('#edit-submit {display:none;}', $option['type'] = 'inline');
        drupal_add_css('#edit-skip {display:none;}', $option['type'] = 'inline');
        drupal_add_css('#edit-draft {display:none;}', $option['type'] = 'inline');
    }
    if ($form_state['storage']['step'] == 'step_rpf_documents') {
        drupal_add_css('#edit-next {display:none;}', $option['type'] = 'inline');
        $form['actions']['submit']['#value'] = 'Next';
    }
    return $form;
}

function m6connect_rfp_init() {
    global $user, $base_url;
    /*     * **  Start Bidder Feedback tab refresh should redirect to Bidder Feedback tab. *** */
    if (arg(0) == 'rfp-bid-feedback' && is_numeric(arg(1))) {
        $rfpNid = arg(1);
        $rfpjsvar = array('rfp_node_nid' => $rfpNid, 'rfp_feedback_active_tab' => '', 'edit_rfp_feedback' => 1);
        if (isset($_SESSION['rfp_node_feedback_active_tab_' . $rfpNid])) {
            $rfpjsvar['rfp_feedback_active_tab'] = $_SESSION['rfp_node_feedback_active_tab_' . $rfpNid];
            unset($_SESSION['rfp_node_feedback_active_tab_' . $rfpNid]);
        }
        drupal_add_js(array('m6connect_rfp' => $rfpjsvar), 'setting');
    }
    /*     * **  End Bidder Feedback tab refresh should redirect to Bidder Feedback tab. *** */
    $frontpage = variable_get('site_frontpage', 'node');
    if (current_path() == $frontpage) {
        drupal_add_library('system', 'ui.dialog');
    }
    if (isset($_SESSION['updated_rfp_project']) && $_SESSION['updated_rfp_project'] == 1) {
        drupal_add_js(array('m6connect_rfp' => array('updated_rfp_project' => 1)), 'setting');
        unset($_SESSION['updated_rfp_project']);
    }
    if (isset($_SESSION['rfp_invited_thankyou']) && $_SESSION['rfp_invited_thankyou'] == 1) {
        if (isset($_SESSION['NoOfInvitation']) && $_SESSION['NoOfInvitation'] != 0) {
            $InvitationSent = $_SESSION['NoOfInvitation'];
            drupal_add_js(array('m6connect_rfp' => array('NoOfInvitation' => $InvitationSent)), 'setting');
            unset($_SESSION['NoOfInvitation']);
        }
        drupal_add_js(array('m6connect_rfp' => array('invite_send_thanks' => 1)), 'setting');
        unset($_SESSION['rfp_invited_thankyou']);
    }
    if (current_path() == 'rfps/public' && $_REQUEST['access'] == 'denied' && isset($_SESSION['agreed_membership_payment_popup']) && is_numeric($_SESSION['agreed_membership_payment_popup'])) {
        drupal_add_js(array('m6connect_rfp' => array('agreed_membership_payment_popup_flag' => 1, 'agreed_membership_nid' => $_SESSION['agreed_membership_payment_popup'])), 'setting');
        unset($_SESSION['agreed_membership_payment_popup']);
    }

    if (isset($_SESSION['invite_later_js_popup']) && $_SESSION['invite_later_js_popup'] == 1) {
        drupal_add_js(array('m6connect_rfp' => array('later_js_popup' => 1)), 'setting');
        unset($_SESSION['invite_later_js_popup']);
    } else {
        drupal_add_js(array('m6connect_rfp' => array('later_js_popup' => 0)), 'setting');
    }

    /* if (arg(0) == 'rfps' && arg(1) == 'received') {
      if ($_SERVER["HTTP_REFERER"] != $base_url . '/rfps/sent' && $_SERVER["HTTP_REFERER"] != $base_url . '/rfps/public' && $_SERVER["HTTP_REFERER"] != $base_url . '/rfps/draft' && $_SERVER["HTTP_REFERER"] != $base_url . '/rfps/received' && $_SERVER["HTTP_REFERER"] != $base_url . '/rfps/bidding' && $_SERVER["HTTP_REFERER"] != $base_url . '/rfps/expired') {
      if (isset($_SESSION['last_rfp_selection']) && $_SESSION['last_rfp_selection'] != 'received') {
      drupal_goto($base_url . '/rfps/' . $_SESSION['last_rfp_selection']);
      }
      }
      $_SESSION['last_rfp_selection'] = 'received';
      }
      if (arg(0) == 'rfps' && arg(1) == 'sent') {
      $_SESSION['last_rfp_selection'] = 'sent';
      }
      if (arg(0) == 'rfps' && arg(1) == 'public') {
      $_SESSION['last_rfp_selection'] = 'public';
      }
      if (arg(0) == 'rfps' && arg(1) == 'draft') {
      $_SESSION['last_rfp_selection'] = 'draft';
      }
      if (arg(0) == 'rfps' && arg(1) == 'bidding') {
      $_SESSION['last_rfp_selection'] = 'bidding';
      }
      if (arg(0) == 'rfps' && arg(1) == 'expired') {
      $_SESSION['last_rfp_selection'] = 'expired';
      } */
}

function m6connect_rfp_node_view($node, $view_mode, $langcode) { //pre($_SERVER["HTTP_REFERER"]);
    global $base_url, $user;
    $nid = $node->nid;
    //Bidder Feedback tab refresh should redirect to Bidder Feedback tab.
    if ($view_mode == 'full' && $node->type == 'rfp') {
        $rfpjsvar = array('rfp_node_nid' => $node->nid, 'rfp_feedback_active_tab' => '');
        /* if(empty($_SERVER["HTTP_REFERER"])){
          $rfpjsvar['referer_empty'] = 1;
          } */
        if (isset($_SESSION['rfp_node_active_tab_' . $node->nid])) {
            $rfpjsvar['rfp_node_active_tab'] = $_SESSION['rfp_node_active_tab_' . $node->nid];
            unset($_SESSION['rfp_node_active_tab_' . $node->nid]);
        }
        if (isset($_SESSION['rfp_node_feedback_active_tab_' . $nid])) {
            $rfpjsvar['rfp_feedback_active_tab'] = $_SESSION['rfp_node_feedback_active_tab_' . $node->nid];
            unset($_SESSION['rfp_node_feedback_active_tab_' . $node->nid]);
        }
        drupal_add_js(array('m6connect_rfp' => $rfpjsvar), 'setting');
    }
    $url = $_SERVER["HTTP_REFERER"]; //pre($url);
    $cpath = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; //pre($cpath);
    $ur = explode('/', $url);
    $urpop = array_pop($ur); //pre($urpop,1);
    //drupal_set_message('<pre>'.print_r($urpop).'</pre>');
    //if ($view_mode == 'full' && $node->type == 'rfp' && ($_SERVER["HTTP_REFERER"] == $base_url.'/node/add/rfp' || $_SERVER["HTTP_REFERER"] == $base_url.'/node/'.$nid.'/'.$urpop)){
    if ($view_mode == 'full' && $node->type == 'rfp' && ($_SERVER["HTTP_REFERER"] == $base_url . '/node/add/rfp')) {
        //drupal_goto('invite-companies/' . $node->nid);
    }
    if ($view_mode == 'full' && $node->type == 'rfp') { //pre($_SERVER["HTTP_REFERER"]);
        $parsr = parse_url($_SERVER["HTTP_REFERER"], PHP_URL_QUERY);
        if (isset($_REQUEST['action']) && !empty($_REQUEST['action'])) {
            drupal_add_js('jQuery(document).ready(function(){ jQuery(".group-clarifications-info").data("horizontalTab").focus(); });', 'inline');
        } else if (!(isset($_SESSION['node-pub-upub']) && $_SESSION['node-pub-upub'] == 1) && !(isset($_SESSION['rfp-invite-trigger']) && $_SESSION['rfp-invite-trigger'] == 1) && (isset($_REQUEST['page']) || (!empty($parsr) && strpos($parsr, 'page=') !== FALSE) || isset($_REQUEST['favorite']) || (!empty($parsr) && strpos($parsr, 'favorite=') !== FALSE) || $url == $cpath || (isset($_REQUEST['co_name'])))) {
            //drupal_add_js('jQuery(document).ready(function(){ jQuery(".group-invited-companies").data("horizontalTab").focus(); });', 'inline');
            drupal_add_js(array('m6connect_rfp' => array('redirect_to_invite' => 1)), 'setting');
        } else if (isset($_SESSION['rfp-invite-trigger']) && $_SESSION['rfp-invite-trigger'] == 1) {
            unset($_SESSION['rfp-invite-trigger']);
        } else if (isset($_SESSION['node-pub-upub']) && $_SESSION['node-pub-upub'] == 1) {
            unset($_SESSION['node-pub-upub']);
        }

        $aditional_user = m6connect_projects_uids_from_list($node);
        $aditional_user[] = $node->uid;
        $cnodeUid = $node->uid;
        $companyusers = get_company_users_list_by_uid($cnodeUid);

        if ((!(array_key_exists(3, $user->roles)) || (array_key_exists(6, $user->roles)))) {
            if ((!in_array($user->uid, $companyusers))) {
                $data = field_info_instances("node", 'rfp'); //pre($data);
                foreach ($data as $fieldname => $fieldval) { //pre($fieldname);	
                    if (in_array($fieldname, array('field_extend_due_date', 'field_extend_by'))) {
                        $node->content[$fieldname]['#access'] = false;
                    }
                }
            }
        }
    }
}

function rfp_node_form_submit(&$form, &$form_state) {
    //if ($form_state['values']['status'] == 1) {
    //  $form['#redirect'] = 'invite-companies/'.$form_state[''];
    // }
}

function m6connect_rfp_node_insert($node) {//pre($node);
  if (in_array($node->type, array('rfp','project'))) {
	$confid_value='';
/*	if(isset($node->associated_project_nid) && !empty($node->associated_project_nid) && $node->type == 'rfp'){
	  $node->field_project = array('und'=>array(0=>array('target_id'=>$node->associated_project_nid)));
	}
	if(isset($node->associated_project_bidkey) && !empty($node->associated_project_bidkey) && $node->type == 'rfp'){
	  $confid_value = $node->associated_project_bidkey;	
	  $node->confidential_bid_key = $node->associated_project_bidkey;
	}
	else{*/
	  if(isset($node->confidential_bid_key) && !empty($node->confidential_bid_key)){
		$confid_value = $node->confidential_bid_key;	
	  }else{
		$confid_value = _generate_m6connect_confidential_key($type='rfp',$node->uid,$length=7);	
	  }
	//}
    db_insert('m6connect_confidential_bids_keys')->fields(array('entity_id'=>$node->nid,'confid_value'=>$confid_value))->execute();    
  }
  //pre($node,1);
}

function m6connect_rfp_node_update($node) {
    
}

/**
 * Implements hook_menu().
 */
function m6connect_rfp_menu() {
    global $user;
    $items = array();

    $items['invite-mail/cron'] = array(
        'title' => 'Inviting user on Cron',
        'page callback' => '_cron_invite_users_rfp_project',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['rfp/invite-companies'] = array(
        'title' => 'Invite Companies',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rfp_invite_companies_form'),
        'access callback' => '_is_m6_user_logged_in',
    );
    $items['rfp/forward/%'] = array(
        'title' => 'Forward RFP',
        'page callback' => 'create_copy_of_existing_rfp',
        'page arguments' => array(2),
        'access arguments' => array('m6connect_authenticate_user'),
            //'access callback' => TRUE,
    );

    $items['rfp-forward-by-mail/%'] = array(
        'title' => 'Forward RFP',
        'page callback' => 'rfp_forward_by_mail',
        'page arguments' => array(1),
        'access arguments' => array('m6connect_authenticate_user'),
            //'access callback' => TRUE,
    );

    $items['nodehide/%node'] = array(
        'title' => 'Unpublish Node',
        'page callback' => 'common_unpublish_node',
        'page arguments' => array(1),
        'access arguments' => array('m6connect_authenticate_user'),
        'type' => MENU_CALLBACK,
    );

    $items['nodeshow/%node'] = array(
        'title' => 'Publish Node',
        'page callback' => 'common_publish_node',
        'page arguments' => array(1),
        'access arguments' => array('m6connect_authenticate_user'),
        'type' => MENU_CALLBACK,
    );

    $items['custom-invite/%/%'] = array(
        'title' => 'Invitition Action',
        'page callback' => 'custom_invitation_callback',
        'page arguments' => array(1, 2),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['invite-companies/%'] = array(
        'title' => 'Find Companies',
        'page callback' => 'rfp_find_companies',
        'access arguments' => array('m6connect_authenticate_user'),
    );

    $items['invite-companies-project/%'] = array(
        'title' => 'Find Companies',
        'page callback' => 'rfp_find_companies_project',
        'access arguments' => array('m6connect_authenticate_user'),
    );

    $items['change-rfp-project-company-view/%'] = array(
        'title' => t('Company view Callback'),
        'page callback' => '_generate_rfp_project_company_view_by_ajax',
        'page arguments' => array(1),
        'access arguments' => array('m6connect_authenticate_user'),
        'type' => MENU_CALLBACK,
    );

    $items['remove-invited-company/%node/%'] = array(
        'title' => t('Remove Invited Company Callback'),
        'page callback' => 'remove_invited_company_callback',
        'page arguments' => array(1, 2),
        'access arguments' => array('m6connect_authenticate_user'),
        'type' => MENU_CALLBACK,
    );
    $items['clbrte-remove-invited-company/%node/%'] = array(
        'title' => t('Remove Invited Company Callback'),
        'page callback' => 'clbrte_remove_invited_company_callback',
        'page arguments' => array(1, 2),
        'access arguments' => array('m6connect_authenticate_user'),
        'type' => MENU_CALLBACK,
    );

    $items['test-me'] = array(
        'title' => 'Test RFP Clarification Form',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rfp_clearification_tab_form'),
        'access callback' => '_is_m6_user_logged_in',
    );

    $items['send-notification-update/%node'] = array(
        'page callback' => 'send_notification_rfp_project_update',
        'page arguments' => array(1),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['send-notification-update/ajax/%node'] = array(
        'page callback' => 'send_notification_rfp_project_update_ajax_submit',
        'page arguments' => array(2),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['test-form-me'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('node_update_dialog_open_form'),
        'access callback' => '_is_m6_user_logged_in',
    );



    //Menu Local Task
    /* $items['node/%node/invite-companies'] = array(
      'title' => 'Invite Companies',
      'page callback' => 'custom_rpf_invite_company_redirect',
      'page arguments' => array(1),
      'access callback' => 'custom_access_rpf_node_menu',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
      );
      $items['node/%node/clarification'] = array(
      'title' => 'Clarifications',
      'page callback' => 'custom_rpf_clarification',
      'page arguments' => array(1),
      'access callback' => 'custom_access_rpf_node_menu',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
      ); */

    $items['change-rfp-node-view/%'] = array(
        'title' => t('Company page view callback'),
        'page callback' => '_generate_company_node_view_by_ajax',
        'page arguments' => array(1),
        'access arguments' => array('m6connect_authenticate_user'),
        'type' => MENU_CALLBACK,
    );

    //*************** Bidder Feedback Tab Links Start ***************//

    $items['assign-bid-package/%ctools_js/%/%node'] = array(
        'page callback' => 'assign_bid_packages_callback',
        'page arguments' => array(1, 2, 3),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['rfp-bid-packages/%'] = array(
        'title' => 'Bid Packages',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rfp_add_bid_package_form', 1),
        'access callback' => 'rfp_tab_access_callback',
        'access arguments' => array(1),
    );

    $items['rfp-bid-feedback/%'] = array(
        'title' => 'Bid Feedbacks',
        'page callback' => 'rfp_bidder_feedback_content',
        'access callback' => 'rfp_tab_access_callback',
        'access arguments' => array(1),
    );

    $items['choose-bid-package/%ctools_js/%node'] = array(
        'page callback' => 'bidding_pakages_invitee_response_callback',
        'page arguments' => array(1, 2),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['remove-bid-package/%ctools_js/%node/%'] = array(
        'page callback' => 'remove_bid_package_callback',
        'page arguments' => array(1, 2, 3),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['remove-bidder-feedback-message/%/%ctools_js'] = array(
        'page callback' => 'remove_bidder_feedback_message_callback',
        'page arguments' => array(1, 2),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );


    $items['get-request-to-intent/%node/%'] = array(
        'page callback' => 'get_request_to_intent_form_callback',
        'page arguments' => array(1, 2),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['request-to-intent/%node/%'] = array(
        'page callback' => 'request_to_intent_callback',
        'page arguments' => array(1, 2),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    //Bidder Feedback tab refresh should redirect to Bidder Feedback tab.
    $items['set-rfp-active-tab/%'] = array(
        'page callback' => 'set_rfp_active_tab_callback',
        'page arguments' => array(1),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['remove/awarded/%ctools_js/%/rfp'] = array(
        'page callback' => 'remove_rfp_invited_callback',
        'page arguments' => array(2, 3),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    //**************** Bidder Feedback Tab Links End ****************//
    $items['copyrfp/%'] = array(
        'title' => 'Copy RFP',
        'page callback' => 'copy_rfp_node',
        'page arguments' => array(1),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['agreed-membership-payment/%node'] = array(
        'title' => 'Agreed Membership Payment',
        'page callback' => 'rfp_agreed_membership_payment_callback',
        'page arguments' => array(1),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    //********** Start RFP Award Fuctionality **********//
    $items['award-rfp/%ctools_js/%node'] = array(
        'page callback' => 'award_rfp_invited_user_callback',
        'page arguments' => array(1, 2),
        'access callback' => '_is_m6_user_logged_in',
		
        'type' => MENU_CALLBACK,
    );

    $items['rfp/ajax/action/award'] = array(
        'page callback' => 'rfp_send_preliminary_award_mail_callback',
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['rfp-accept-award/%node'] = array(
        'page callback' => 'award_rfp_accept_callback',
        'page arguments' => array(1),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );
    //********** End RFP Award Fuctionality **********//
    //********** End RFP Award Fuctionality **********//
    //**************** Bidder Feedback Tab Report ****************//
    $items['rfpfeedbackreport/%'] = array(
        'title' => 'Bidder Feedback Report',
        'page callback' => 'rfp_bidder_feedback_report',
        'page arguments' => array(1),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    $items['bidder-feed/%'] = array(
        'title' => 'Bidder Feedback',
        'page callback' => '_get_bidder_feed_back_content',
        'page arguments' => array(1),
        'access callback' => 'user_is_logged_in',
        'file' => 'rfp_bidder_feedback.inc',
        'file path' => drupal_get_path('module', 'm6connect_rfp') . '/includes',
        'type' => MENU_NORMAL_ITEM,
    );

    $items['load-bidder-feedback/%/%/%'] = array(
        'page callback' => 'get_bidder_feedback_rows_content_ajax',
        'page arguments' => array(1, 2, 3),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );
	
	$items['load-bidder-feedback2/%/%/%'] = array(
	  'page callback' => 'get_bidder_feedback_rows_content_ajax3',
	  'page arguments' => array(1, 2, 3),
	  'type' => MENU_CALLBACK,
	  'access arguments' => array('access content'),
	  //'delivery callback' => 'get_bidder_feedback_rows_content_ajax3',  // Magic goes here
	  'delivery callback' => 'ajax_deliver',
    );
    // callback for send sms to bidder from twilio
    $items['send-request-by-sms/%node/%field_collection_item'] = array(
        'page callback' => 'send_request_by_sms_callback',
        'page arguments' => array(1, 2),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );

    // callback for receive sms to bidder from twilio
    $items['receive-response-by-sms'] = array(
        'page callback' => 'receive_response_by_sms_callback',        
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );
	 //**************** proposal Feedback Report ****************//
	$items['proposalsummary/%'] = array(
        'title' => 'Proposal Summary Report',
        'page callback' => 'proposal_summary_report',
        'page arguments' => array(1),
        'access callback' => '_is_m6_user_logged_in',
        'type' => MENU_CALLBACK,
    );
	$items['rfp-proposal-report/%'] = array(
        'title' => 'Rfp proposal Report',
        'page callback' => 'rfp_proposal_summary_report',
        'page arguments' => array(1),
        'access callback' => '_is_m6_user_logged_in',
		'file' => 'rfp.proposal.inc',
		'file path' => drupal_get_path('module', 'm6connect_rfp') . '/includes',
		'type' => MENU_NORMAL_ITEM,
        //'type' => MENU_CALLBACK,
    );

    return $items;
}

function rfp_tab_access_callback($nid) {
    global $user;
    $node = node_load($nid);
    $accesstab = FALSE;
    $allowed_uids = m6connect_projects_uids_from_list($node);
    if (in_array($user->uid, $allowed_uids)) {
        $accesstab = TRUE;
    }

    if (isset($user->roles[3]) || isset($user->roles[6]) || $user->uid == $node->uid || $accesstab) {
        return TRUE;
    }
    return FALSE;
}

function rfp_forward_by_mail($rfp_id) {
    create_copy_of_existing_rfp($rfp_id, $ajax = FALSE);
}

function create_copy_of_existing_rfp($rfp_id, $ajax = TRUE) {
    global $user;
    $rfp_node = node_load($rfp_id);
    $allowedForwordResult = array_intersect(array_keys($user->roles), array(7, 8, 9));
    if ((count($allowedForwordResult) > 0) && (!is_project_rfps_accessible($rfp_node, $type = 'rfp'))) {
        unset($rfp_node->nid);
        unset($rfp_node->vid);
        unset($rfp_node->created);
        unset($rfp_node->changed);
        unset($rfp_node->revision_timestamp);
        unset($rfp_node->revision_uid);
        unset($rfp_node->field_project['und']);
        unset($rfp_node->field_rfp_serial['und']);
        unset($rfp_node->field_reference_number['und']);
        unset($rfp_node->field_rfp_invite_comapnies['und']);
        $rfp_node->is_new = 1;
        global $user;
        $type = 'rfp';
        $node = (object) array(
                    'uid' => $user->uid,
                    'name' => (isset($user->name) ? $user->name : ''),
                    'type' => $type,
                    'language' => LANGUAGE_NONE,
        );
        $rfp_node->title = isset($_REQUEST['title']) ? $_REQUEST['title'] : 'forwarded ' . $rfp_node->title;
        $rfp_node->field_parent_rfp_id['und'][0]['value'] = $rfp_id;
        $rfp_node->field_is_forwarded_rfp_submitted['und'][0]['value'] = 0;
        $rfp_node->uid = $node->uid;
        $rfp_node->name = $node->name;
        $rfp_node->type = $node->type;
        $rfp_node->status = 0;
        $rfp_node->language = $node->language;
        node_save($rfp_node);
        //$_SESSION['rfp_forwarded']
        $rfpEditPath = 'node/' . $rfp_node->nid . '/edit';
        if ($ajax) {
            echo '/' . $rfpEditPath . '/';
            die();
        } else {
            drupal_goto($rfpEditPath);
        }
    } else {
        if ($ajax) {
            //echo '/' . $rfpEditPath . '/';
            die();
        } else {
            drupal_access_denied();
            drupal_exit();
        }
    }
}

function m6connect_rfp_menu_local_tasks_alter(&$data, $router_item, $root_path) {
    global $user;
    //kpr($data);
    //!array_key_exists(3, $user->roles) &&
    if ($user->uid != 0 && (arg(0) == 'node' && is_numeric(arg(1)))) {
        $node = menu_get_object();
        if ($node->type == 'rfp') { //pre($data,1);
            if ($data['tabs'][0]['output'][0]['#link']['path'] == 'node/%/view') {
                //$data['tabs'][0]['output'][0]['#link']['title'] = t('');

                unset($data['tabs'][0]['output'][0]);
            }
            if ($data['tabs'][0]['output'][1]['#link']['path'] == 'node/%/edit') {
                //$data['tabs'][0]['output'][1]['#link']['title'] = t(''); 
                unset($data['tabs'][0]['output'][1]);
            }
        }
    }
}

function custom_access_rpf_node_menu($node) {
    global $user;
    if ($node->type == 'rfp' && $node->uid == $user->uid) {
        return TRUE;
    }
    return FALSE;
}

function rfp_find_companies($onlyComanyListing = FALSE) {
    global $company;
    drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery-ias.min.js');
    drupal_add_js(drupal_get_path('module', 'm6connect_rfp') . '/m6connect_rfp_custom.js');
    global $base_url, $user;
    assign_bid_package_ctools_popup_style();
    drupal_add_library('system', 'ui.draggable');
    drupal_add_library('system', 'ui.droppable');
    drupal_add_library('system', 'ui.sortable');
    drupal_add_library('system', 'ui.dialog');
    drupal_add_js(drupal_get_path('module', 'm6connect_company') . '/m6connect_bookmark.js');
	$companyFlag =0;
	if(user_is_logged_in()){
	  $companyFlag=1;
	}
    drupal_add_js(array('m6connect_company' => array('company' => $companyFlag)), 'setting');
    drupal_add_css('.bookmarkorganizer-rename-item-form input.form-submit{ display:none; }', 'inline');
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');

    /* if(isset($_SESSION['invitelater-'.arg(1)]) &&  $_SESSION['invitelater-'.arg(1)] == 1) {	  
      drupal_set_message("The companies that you have selected have been saved however, the invitations have not been sent at this time. You can complete the invitation process by clicking the “Send Invitations�? button below, once you are ready.");
      } */
    $invitedCompanies = array();
    $output = '';
    $current_node = '';
    if (!$onlyComanyListing) {
        $current_node = node_load(arg(1));
        $inid = arg(1);
        $inode = node_load($inid);

        //************************** Start New Look **************************//
        //Start Pending Invitations And Add Individuals by Email Form
        $output .= '<div class="rfp-invite-companies-form">';
        /* $output .= '<div class="invitation-mail-status"><label>Invitation Email Status:</label><div>';
          $output .= '<span class="invitation-mail-status-pending"><label>In queue:</label>';
          $output .= ($current_node->type == 'project')?_get_invite_email_count_for_project($inid,'queued'):_get_invite_email_counts($inid,'queued');
          $output .= '</span>';
          $output .= '<span class="invitation-mail-status-sent"><label>Emailed (Not viewed):</label>';
          $output .= ($current_node->type == 'project')?_get_invite_email_count_for_project($inid,'notviewed'):_get_invite_email_counts($inid,'notviewed');
          $output .= '</span>';
          $output .= '<span class="invitation-mail-status-view"><label>Emailed (Viewed):</label>';
          $output .= ($current_node->type == 'project')?_get_invite_email_count_for_project($inid,'viewed'):_get_invite_email_counts($inid,'viewed');
          $output .= '</span>';
          $output .= '<span class="invitation-mail-status-failed"><label>Undeliverable:</label>';
          $output .= ($current_node->type == 'project')?_get_invite_email_count_for_project($inid,'failed'):_get_invite_email_counts($inid,'failed');
          $output .= '</span>';
          $output .= '</div></div>'; */
        $output .= drupal_render(drupal_get_form('rfp_invite_companies_form', $inode->nid));
        $output .= '</div>';
        //End Pending Invitations And Add Individuals by Email Form
        //Start Invited Companies/Individuals
        //$output .= get_invited_companies_or_individuals_list($inode);
        //$invitedCompanies = get_invited_companies_or_individuals_list($inode,'InvitedList');
        //End Invited Companies/Individuals
        //*************************** End New Look ***************************//

        $output .= '<label class="find-companies-title">Find Companies</label>';

        $output .= '<div class="custom-companies-lists">';
        $output .= '<div class="row">';

        $output .= '<div class="cust-company-search-form col-md-3 col-sm-12 col-xs-12">';

        $favSpanText = '?favorite=1';
        $favChecked = '';
        if (isset($_REQUEST['favorite']) && $_REQUEST['favorite'] != '') {
            $favSpanText = '';
            $favChecked = 'checked="checked"';
        }

        // Shared Functionality
        $shareCheckbox = '';
        $companyAdminUid = '';
        $shareContent = '';
        $companyNid = '';
        $showCompanySahre = FALSE;
        $companyStates = get_company_og_user_status();
        $companyUid = $companyStates['company-uid'];
        $companyNid = $companyStates['company-nid'];
        //drupal_set_message('<pre>'.print_r($companyStates,1).'</pre>');
        if ($companyStates['company-admin']) {
            $shareChecked = ($companyStates['shared-checked']) ? 'checked="checked"' : '';
            $shareCheckbox = '<label class="checkbox-inline">
						   <input type="checkbox" value="' . $companyNid . '" name="share-favorite" class="share-favorite-checkbox" ' . $shareChecked . '/>Share
						 </label>';
        } else {
            $companyAdminUid = $companyStates['company-uid'];
            $showCompanySahre = $companyStates['company-share'];
            // Share Start
            if ($companyAdminUid && $showCompanySahre) {
                $shareContent = _generate_share_fav_block_content($companyAdminUid, $companyNid);
            }
            //Share End
        }
        // End Share Functionality
        //style="display:none;"
        $output .= '<div class="main-container-favorite non-company-page-favorite">
						  <label>Company Organizer</label>
						  <span class="sahre-company-nid" style="display:none;">' . $companyNid . '</span>
						<span class="sahre-company-uid" style="display:none;">' . $companyUid . '</span>
						  <div class="custom-favorite-container">
							  <div class="text-right clearfix"><div class="pull-left">' . $shareCheckbox . '
								<label class="checkbox-inline">
								 <input type="checkbox" value="1" name="show-favorite" class="show-favorite-checkbox" id="show-favorite-checkbox" ' . $favChecked . '/>Show Favorites</label></div><div class="pull-right">
								 <span class="show-favorite-checkbox-link-query" style="display:none;">' . $favSpanText . '</span>
								<a href="/bookmarkorganizer/add/folder/' . $user->uid . '" title="" class="action action-addfolder"><i class="fa fa-plus fa-2"></i> Add Folder</a></div>
							  </div>' . _generate_bookmark_fav_block_content() . $shareContent . '
						  </div>
					  </div><div id="dialog"></div>';
        $rfp_company_search_form = drupal_get_form('rfp_company_search_form');
        $output .= drupal_render($rfp_company_search_form);
        $output .= '</div>';
    } else {
        if ($_REQUEST['nid'] && !empty($_REQUEST['nid'])) {
            $inode = $current_node = node_load($_REQUEST['nid']);
            /* $items = field_get_items('node', $inode, 'field_rfp_invite_comapnies');
              foreach ($items as $item) {
              $fc = field_collection_field_get_entity($item);
              $inviteddata = (isset($fc->field_rfp_company_nid_email['und'])) ? $fc->field_rfp_company_nid_email['und'][0]['value'] : '';
              if (!empty($inviteddata) && is_numeric($inviteddata)) {
              $cnode = node_load($inviteddata);
              $invitedCompanies[] = $cnode->nid;
              }
              } */
        }
    }
    $co_name = isset($_REQUEST ['co_name']) ? $_REQUEST ['co_name'] : '';
    $co_filter = isset($_REQUEST ['co_filter']) ? $_REQUEST ['co_filter'] : '';
    $co_facilities = isset($_REQUEST ['co_facilities']) ? $_REQUEST ['co_facilities'] : '';
    $co_region = isset($_REQUEST ['co_region']) ? $_REQUEST ['co_region'] : '';
    $co_industries = isset($_REQUEST ['co_industries']) ? $_REQUEST ['co_industries'] : '';
    $co_pservices = isset($_REQUEST ['co_pservices']) ? $_REQUEST ['co_pservices'] : '';
    //$co_economic = isset($_REQUEST ['co_economic'] ) ? $_REQUEST ['co_economic'] : '';
    $co_diversity = isset($_REQUEST ['co_diversity']) ? $_REQUEST ['co_diversity'] : ''; //pre($pro_diversity);
    $co_div_arr = array(0);
    if (!empty($co_diversity)) {
        $co_div_arr = explode(',', $co_diversity); //pre($co_div_arr);
    }
    $co_div_arr = array_filter($co_div_arr);

    $type = array('organization');
    $counter = 0;
    $or = db_or();
    $query = db_select('node', 'n')->extend('PagerDefault')->element(5);
    $query->fields('n', array('nid'));
    $query->condition('type', $type, 'IN');

    //************************** Start (Not Show Company When they are Inctive) **************************/
    $ic_or = db_or();
    $query->leftJoin('field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid');
    $ic_or->condition('ic.field_company_inactive_value', 1, '!=')->condition('ic.field_company_inactive_value', NULL);
    $query->condition($ic_or);
    //*************************** End (Not Show Company When they are Inctive) ***************************/
    //************************** Start (Show Company When show company active) **************************/
    $query->leftJoin('field_data_field_show_company_in_search', 'isa', 'isa.entity_id = n.nid');
    $query->condition('isa.field_show_company_in_search_value', 1, '=');
    //*************************** End (Show Company When show company active) ***************************/
    //************************** Start (Not Show Company When they are not company type) **************************/
    $query->leftJoin('field_data_field_type_of_company', 'tc', 'tc.entity_id = n.nid');
    $query->condition('tc.field_type_of_company_value', 'company', '=');
    //*************************** End (Not Show Company When they are not company type) ***************************/

    if (!empty($co_name)) {
        $query->leftjoin('field_data_field_keywords', 'k', 'k.entity_id = n.nid');
        $query->leftjoin('field_data_field_description', 'd', 'd.entity_id = n.nid');
        $query->fields('k');
        $query->fields('d');

        $or->condition('title', '%' . db_like($co_name) . '%', 'LIKE');
        $or->condition('k.field_keywords_value', '%' . db_like($co_name) . '%', 'LIKE');
        $or->condition('d.field_description_value', '%' . db_like($co_name) . '%', 'LIKE');
        $query->condition($or);
    }
    if (!empty($co_facilities)) {
        $query->Join('field_data_field_facilities_construction', 'cf', 'cf.entity_id = n.nid');
        $query->fields('cf');
        //$query->condition('cf.field_facilities_construction_tid', $co_facilities, '=');	
        $co_facilities_tids = taxonomy_get_children_all($co_facilities);
        $fctids = array();
        if (!empty($co_facilities_tids)) {
            $rctids[] = $co_facilities;
            foreach ($co_facilities_tids as $fk => $fv) {
                $fctids[] = $fv->tid;
            }
        } else {
            $fctids[] = $co_facilities;
        }
        $query->condition('cf.field_facilities_construction_tid', $fctids, 'IN');
    }
    if (!empty($co_region)) {
        $query->Join('field_data_field_regions', 'cr', 'cr.entity_id = n.nid');
        $query->fields('cr');
        //$query->condition('cr.field_regions_tid', $co_region, '=');
        $region_or = db_or();
        $query->leftjoin('field_data_field_org_address', 'oa', 'oa.entity_id = n.nid');
        $region_term = taxonomy_term_load($co_region);
        $region_or->condition('oa.field_org_address_locality', db_like($region_term->name), 'LIKE');
        $co_region_tids = taxonomy_get_children_all($co_region);
        $rctids = array();
        if (!empty($co_region_tids)) {
            $rctids[] = $co_region;
            foreach ($co_region_tids as $rk => $rv) {
                $rctids[] = $rv->tid;
                $region_or->condition('oa.field_org_address_locality', db_like($rv->name), 'LIKE');
            }
        } else {
            $rctids[] = $co_region;
        }
        //$query->condition('cr.field_regions_tid', $rctids, 'IN');
        $region_or->condition('cr.field_regions_tid', $rctids, 'IN');
        $query->condition($region_or);
    }
    if (!empty($co_industries)) {
        $query->Join('field_data_field_industry_naicss', 'ci', 'ci.entity_id = n.nid');
        $query->fields('ci');
        //$query->condition('ci.field_industry_naicss_tid', $co_industries, '='); 
        $co_industries_tids = taxonomy_get_children_all($co_industries);
        $ictids = array();
        if (!empty($co_industries_tids)) {
            $ictids[] = $co_industries;
            foreach ($co_industries_tids as $ik => $iv) {
                $ictids[] = $iv->tid;
            }
        } else {
            $ictids[] = $co_industries;
        }
        $query->condition('ci.field_industry_naicss_tid', $ictids, 'IN');
    }
    if (!empty($co_pservices)) {
        $query->Join('field_data_field_products_service_unspsc', 'cp', 'cp.entity_id = n.nid');
        $query->fields('cp');
        //$query->condition('cp.field_products_service_unspsc_tid', $co_pservices, '='); 
        $co_pservices_tids = taxonomy_get_children_all($co_pservices);
        $sctids = array();
        if (!empty($co_pservices_tids)) {
            $sctids[] = $co_pservices;
            foreach ($co_pservices_tids as $sk => $sv) {
                $sctids[] = $sv->tid;
            }
        } else {
            $sctids[] = $co_pservices;
        }
        $query->condition('cp.field_products_service_unspsc_tid', $sctids, 'IN');
    }
    /* if(!empty($co_economic)){
      $query->Join('field_data_field_products_service_unspsc', 'cp', 'cp.entity_id = n.nid');
      $query->fields('cp');
      $query->condition('cp.field_products_service_unspsc_tid', $co_economic, '=');
      } */
    if ($co_div_arr) { //pre($pro_div_arr,1);
        $query->Join('field_data_field_diversity_credentials', 'dt', 'dt.entity_id = n.nid');
        $query->fields('dt');
        $query->condition('dt.field_diversity_credentials_target_id', $co_div_arr, 'IN');
    }

    //Favorites Filter Start
    $favoriteFolderID = '';
    $foldername = '';
    if (isset($_REQUEST['favorite']) && $_REQUEST['favorite'] != '') {
        $favoriteFolderID = trim($_REQUEST['favorite']);
        $item = bookmarkorganizer_get_item($favoriteFolderID);
        if ($item->type == 'node') {
            $query->condition('n.nid', array($item->content_id), 'IN');
        } else {
            //$foldername = $item->label;
            $foldername = ($item && is_object($item)) ? $item->label : 'My Favorites';
            $companyuid = '';
            if ($_REQUEST['cpmpany_uid'] && !empty($_REQUEST['cpmpany_uid'])) {
                $companyuid = trim($_REQUEST['cpmpany_uid']);
                $foldername = 'Shared Favorites';
            }
            $favnodeIds = get_favorites_nodes_by_folder_id($favoriteFolderID, $companyuid);
            if (is_array($favnodeIds) && count($favnodeIds) > 0) {
                $query->condition('n.nid', $favnodeIds, 'IN');
            } else {
                $query->condition('n.nid', array(0), 'IN');
            }
        }
    }
    //************************** Remove Own Company **************************/
    /*     * *** changed **** */
    //$currentCompanyNid = _get_user_company_nid();
    /* $currentCompanyNid = $company->nid;
      if (!empty($currentCompanyNid) && is_numeric($currentCompanyNid)) {
      //$query->condition('n.nid', array($currentCompanyNid), 'NOT IN');
      } */
    $currentCompanyNid = $company->nid;
    //************************************************************************/
    //End Favorites Filter
    $query->orderBy('created', 'DESC');
    $query->groupBy('n.nid');
    $query->limit(15); //Get Invited Company User Mapping (used in select List of company's users)7
    $result = $query->execute();
    drupal_add_js(array('m6connect_rfp' => array('current_node_type' => $current_node->type)), 'setting');

    //Get Invited Company User Mapping (used in select List of company's users)
    $invitedCompanyUserMapping = get_invited_companies_invitedusers_list($inode);

    ////////////////////////////////*********** Filter Selection Start************/////////////////////////
    if (!$onlyComanyListing) {
        $output .= '<div class="col-md-9 col-sm-12 col-xs-12 company-select-filter-list">';
    }
    $querystring = $_SERVER['QUERY_STRING'];
    if (!empty($co_name) || !empty($co_facilities) || !empty($co_region) || !empty($co_industries) || !empty($co_pservices) || !empty($co_div_arr) || (($favoriteFolderID != '') && $onlyComanyListing === FALSE)) {
        $output .= '<input type="hidden" class="site_base_url" value="' . $base_url . '">';
        $output .= '<label class="select-title">Your Selections:</label>';
        if ($favoriteFolderID != '') {  //$favoriteFolderID     $foldername
            $output .= '<span class="cust-selection-list cust-rfp-favorite-filter"><span class="sfilter-label">Favorite: <span class="sfilter-value">' . $foldername . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">favorite</span><span class="sfilter-val">' . $favoriteFolderID . '</span><span class="filter-qstr"></span></span></span>';
        }
        if (!empty($co_name)) {
            //$output .= l('Intersted',$base_url.'/projects'); 
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Name: <span class="sfilter-value">' . $co_name . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_name</span><span class="sfilter-val">' . $co_name . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if ($co_facilities) {
            $term = taxonomy_term_load($co_facilities);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">M6 Company Types: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_facilities</span><span class="sfilter-val">' . $co_facilities . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if (!empty($co_region)) {
            $term = taxonomy_term_load($co_region);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Region: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_region</span><span class="sfilter-val">' . $co_region . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if (!empty($co_industries)) {
            $term = taxonomy_term_load($co_industries);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Industry NAICS: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_industries</span><span class="sfilter-val">' . $co_industries . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }
        if (!empty($co_pservices)) {
            $term = taxonomy_term_load($co_pservices);
            $termname = $term->name;
            $output .= '<span class="cust-selection-list"><span class="sfilter-label">Products & Services UNSPSC: <span class="sfilter-value">' . $termname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_pservices</span><span class="sfilter-val">' . $co_pservices . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
        }

        if ($co_div_arr) { //pre($pro_div_arr);
            $output .= '<span class="cust-select-list-dives">Diversity Types:</span>';
            foreach ($co_div_arr as $k => $v) {
                if ($v != '_none') {
                    $dnod = node_load($v);
                    $dname = $dnod->title;
                    $output .= '<span class="cust-selection-list"><span class="sfilter-label"><span class="sfilter-value">' . $dname . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">co_diversity</span><span class="sfilter-val">' . $v . '</span><span class="filter-qstr">' . $querystring . '</span></span></span>';
                }
            }
        }
    }
    if (!$onlyComanyListing) {
        $output .= '</div>';
    }
    ////////////////////////////////*********** Filter Selection End *************/////////////////////////

    $output .= '<div id="cust-company-listings" class="col-md-9 col-sm-12 col-xs-12 pro-invite-co-scroll"><span class="current-node-nid" style="display:none;">' . $current_node->nid . '</span>
	            <span class="current-type" style="display:none;">' . $current_node->type . '</span>';
    $output .= '<div class="cust-slect-all-invite" style="display:none;"><input type="checkbox" name="select-all-invite-co"> Select All</div>';
	$poppover = 1;
    while ($record = $result->fetchAssoc()) {
        $node = node_load($nid = $record['nid'], $vid = NULL, $reset = FALSE);
        $desc = isset($node->field_description['und']['0']['value']) ? $node->field_description['und']['0']['value'] : '';
				
				$com_city = isset($node->field_org_address['und']['0']['locality']) ? $node->field_org_address['und']['0']['locality'] : '';
				$administrative_area = isset($node->field_org_address['und']['0']['administrative_area']) ? $node->field_org_address['und']['0']['administrative_area'] : '';				
				if(isset($node->field_org_address['und']) && !empty($node->field_org_address['und']['0']['administrative_area'])){
						$field = field_info_field('field_org_address');
						$instance = field_info_instance('node', 'field_org_address', 'organization');
						$address = addressfield_default_values($field,$instance);
						$handlers = array('address' => 'address',);
						$context = array('mode' => 'form');
						$data = addressfield_generate($address, $handlers, $context);					
						$com_state = $data['locality_block']['administrative_area']['#options'][$administrative_area];				
				}			

				$com_city_state = $com_city.', '.$com_state;
        $desc = strip_tags($desc);
        $length_body = strlen($desc);
        if ($length_body > 50) {
            $body = substr($desc, 0, 50) . '...';
        } else {
            $body = $desc;
        }

        $pimagepath = '';
        $pimgpath = (isset($node->field_logo['und']) && !empty($node->field_logo['und'][0]['uri'])) ? $node->field_logo['und'][0]['uri'] : 0;
        if ($pimgpath) {
            $pimagepath = image_style_url('thumbnail', $pimgpath);
            //$pimagepath = image_style_url('user_pic_32x32', $pimgpath);	
        }
        $fa = _get_company_region_address($node);
        $fa = (!empty($est)) ? '<i class="fa fa-map-marker"></i> ' . $fa : '';
        /* $fa = '';
          if(isset($node->field_org_address['und'][0])) {
          if(!empty($node->field_org_address['und'][0]['locality'])) {
          $fa .= $node->field_org_address['und'][0]['locality'];
          }
          if(!empty($node->field_org_address['und'][0]['administrative_area'])) {
          $fa .= ', '.$node->field_org_address['und'][0]['administrative_area'];
          }

          } */
        $est = '';
        if (isset($node->field_year_founded['und'])) {
            $est = $node->field_year_founded['und'][0]['value'];
        }
        $est = (!empty($est)) ? '<i class="fa fa-calendar"></i> Est. ' . $est : '';
        $arev = '';
        if (isset($node->field_annual_revenue['und'])) {
            $arev = $node->field_annual_revenue['und'][0]['value'];
        }

        if ($counter % 2 == 0) {
            $cls = 'even';
        } else {
            $cls = 'odd';
        }
        //pre($node);
        $output .='<div class="project-box odd project-dragable">';
        $output .='<div class="row">';
        if ($pimgpath) {
            $output .= '<div class="col-md-2 col-sm-2 col-xs-12 company-image text-center"><img src="' . $pimagepath . '" /></div>';
        } else {
            $output .= '<div class="col-md-2 col-sm-2 col-xs-12 company-image text-center"><i class="fa fa-fw fa-building"></i></div>';
        }
        //$current_node = node_load(arg(1));
        //if ($current_node->type == 'rfp') {
        //  $output .= '<div class="col-md-5 col-sm-5 col-xs-12 company-summary">';
        //} else {
        $output .= '<div class="col-md-6 col-sm-6 col-xs-12 company-summary">';
        //}
        $output .= '<h2>' . l($node->title, 'node/' . $node->nid, array('attributes' => array('class' => array('cust-proj-title'), 'target' => '_blank'))) . '</h2>';
        $output .='<span class="company-nid" style="display:none;">' . $node->nid . '</span>';
        $output .= '<div class="company-about">' . $body . '</div>';
				$output .= '<div class="company-city-state">' . $com_city_state . '</div>';

        //$output .= '<div class="company-meta"> <span><i class="fa fa-map-marker"></i> '.$fa.'</span> <span><i class="fa fa-calendar"></i> Est. '.$est.'</span> <span></i> '.$arev.'</span> </div>'; //<i class="fa fa-usd">
        $output .= '<div class="company-meta"> <span>' . $fa . '</span> <span>' . $est . '</span> <span></i> ' . $arev . '</span> </div>'; //<i class="fa fa-usd">
        $output .= '</div>';

        if ($current_node->type == 'rfp') {
            $inviteStyle = '';
            $addedStyle = 'style="display:none;"';
            $addedText = ' Added';
            /* if (in_array($node->nid, $invitedCompanies)) {
              $inviteStyle = 'style="display:none;"';
              $addedStyle = 'style="display:block;"';
              $addedText = ' Invited';
              } */
            $output .= '<div class="col-md-4 col-sm-4 col-xs-12 project-box-actions" id="nid-' . $node->nid . '">';

            if ($currentCompanyNid != $node->nid) {
      				if($poppover == 1) {
                      $output .='<span data-toggle="popover" data-trigger="hover" data-placement="top" data-content="Invite from existing companies and users.<br>Hold the CTRL key for multiple select and deselect."><div class="form-group"><a ' . $inviteStyle . ' href="/" class="invite-to-rfp btn btn-default" id="' . $node->nid . '"><i class="fa fa-envelope"></i> Invite to RFP</a><span class="btn btn-success added-to-rfp" ' . $addedStyle . '><i class="fa fa-ok"></i> ' . $addedText . '</span></div></span>';
      				}
      				else {
      				  $output .='<div class="form-group"><a ' . $inviteStyle . ' href="/" class="invite-to-rfp btn btn-default" id="' . $node->nid . '"><i class="fa fa-envelope"></i> Invite to RFP</a><span class="btn btn-success added-to-rfp" ' . $addedStyle . '><i class="fa fa-ok"></i> ' . $addedText . '</span></div>';
      				}
                $gmlist = og_get_group_members_properties($node, array(), 'members__' . OG_STATE_ACTIVE, 'node');
                $output .= '<select class="co_invite-manager" id="co_invite_manager_' . $node->nid . '" multiple="multiple">';
                $output .= '<option value="">Select Company Contact(s)</option>';
                $userUidNameMapping = _get_user_uid_name_mapping(array_values($gmlist));
                foreach ($userUidNameMapping as $invitedUid => $invitedName) {
                    $invitedText = (isset($invitedCompanyUserMapping[$node->nid][$invitedUid])) ? ' (Invited)' : '';
                    $output .= '<option value="' . $invitedUid . '" data="' . $invitedName . '">' . $invitedName . $invitedText . '</option>';
                }
                $output .= '</select>';  //</optgroup>
                $output .= '<span class="invite-proj-managerid invite-proj-managerid-' . $node->nid . '" style="display:none"></span>';
                $output .= '<span class="invite-proj-managername invite-proj-managername-' . $node->nid . '" style="display:none"></span>';
            }
            $output .= '</div>';
        } elseif ($current_node->type == 'project') {
            $inviteStyle = '';
            $addedStyle = 'style="display:none;"';
            $addedText = ' Added';
            /* if (in_array($node->nid, $invitedCompanies)) {
              $inviteStyle = 'style="display:none;"';
              $addedStyle = 'style="display:block;"';
              $addedText = ' Invited';
              } */
            //$output .= '<div class="col-md-4 col-sm-4 col-xs-12 project-box-actions text-right" id="nid-'.$node->nid.'"><a '.$inviteStyle.' href="/" class="invite-to-rfp btn btn-default" id="'.$node->nid.'"><i class="fa fa-envelope"></i> Invite to Project</a><span class="btn btn-success added-to-rfp" '.$addedStyle.'><i class="fa fa-ok"></i>'.$addedText.'</span></div>';

            $output .= '<div class="col-md-4 col-sm-4 col-xs-12 project-box-actions" id="nid-' . $node->nid . '">';
            if ($currentCompanyNid != $node->nid) {
                $output .= '<div class="form-group"><a ' . $inviteStyle . ' href="/" class="invite-to-rfp btn btn-default" id="' . $node->nid . '"><i class="fa fa-envelope"></i> Invite to Project</a><span class="btn btn-success added-to-rfp" ' . $addedStyle . '><i class="fa fa-ok"></i> ' . $addedText . '</span></div>';
                $gmlist = og_get_group_members_properties($node, array(), 'members__' . OG_STATE_ACTIVE, 'node');
                $output .= '<select class="co_invite-manager" id="co_invite_manager_' . $node->nid . '" multiple="multiple">';
                $output .= '<option value="">Select Company Contact(s)</option>'; //
                $userUidNameMapping = _get_user_uid_name_mapping(array_values($gmlist));
                foreach ($userUidNameMapping as $invitedUid => $invitedName) {
                    $invitedText = (isset($invitedCompanyUserMapping[$node->nid][$invitedUid])) ? ' (Invited)' : '';
                    $output .= '<option value="' . $invitedUid . '" data="' . $invitedName . '">' . $invitedName . $invitedText . '</option>';
                }
                $output .= '</select>';  //</optgroup>
                $output .= '<span class="invite-proj-managerid invite-proj-managerid-' . $node->nid . '" style="display:none"></span>';
                $output .= '<span class="invite-proj-managername invite-proj-managername-' . $node->nid . '" style="display:none"></span>';
            }
            $output .= '</div>';
        }
        /* $output .='<div class="col-sm-3 text-right">
          <div class="btn-group">
          <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">Connect</button>
          </div>
          </div>'; */
        /* $output .='<div class="col-sm-3 text-right">
          <div class="btn-group">
          <i class="fa fa-plus"></i> Invite Companies
          </div>
          </div>'; */


        $output .='</div>';
        $output .='</div>';
        $counter++;
		$poppover++;
    }
    $output .='<div class="clear"></div>';
    //$output .= theme('pager', array('tags' => NULL, 'element' => 5, 'parameters' => array('invitetab' => 1)));

    if ($counter < 1)
        $output .='<div Class="messages status">' . t('No Results available. Please try later.') . '</div>';

    $output .='</div>'; //<div class="col-md-8 col-sm-8 col-xs-12">
    if (!$onlyComanyListing) {
        $output .='</div>';
        $output .= '</div>';
    }

    $pro_inv_co_scroll = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('next')), 'element' => 5, 'interval' => 1, 'parameters' => array('invitetab' => 1)));

    if (isset($pro_inv_co_scroll)) {
        $output .= '<div class="nav1" style="display: none;">' . $pro_inv_co_scroll . '</div>';
    }
	 // end new div for popover rfp invite companies//
	 /*$output .= '</div>';
	 $output .= '<div class="col-md-4 col-sm-4 padding-5 custom-rfp-popover-right">	            
				<div class="popover popover-gray-cust right margin-bottom-25" id="custom-rfp-by-email">
				  <div class="arrow" style="top: 50%;"></div>
				  <div class="popover-content">Copy and paste form email, excel or type these in.</div>
				</div>

			  <div class="popover popover-gray-cust right margin-bottom-25" id="custom-rfp-pending-invitations">
				  <div class="arrow" style="top: 50%;"></div>
				  <div class="popover-content">These invitation have not been sent out. Select the "Send Invitations" button to send.</div>
			  </div>

			<div class="popover popover-gray-cust right margin-bottom-25" id="custom-rfp-companies-invite">
			  <div class="arrow" style="top: 50%;"></div>
			  <div class="popover-content">These companies have been invited already. To remove them from having access to the RFP,simply delete them by selecting the "X".</div>
			</div>

			<div class="popover popover-gray-cust right margin-bottom-25" id="custom-rfp-search-invite">
				<div class="arrow" style="top: 50%;"></div>
				<div class="popover-content">Search for companies to invite here.</div>
			</div>

			<div class="popover popover-gray-cust right margin-bottom-25" id="custom-rfp-add-emails">
				<div class="arrow" style="top: 50%;"></div>
				<div class="popover-content">Add Emails moves emails to Pending Invitations.<br>Send Invitations sends out Pending Invitations,<br>Resend Invitaions sends out all existing Invited Companies emails again.<br>Invite later saves the RFP as a Draft.<br>RFP Homes takes you to the RFP list page And Save as draft.</div>
			</div>

			<div class="popover popover-gray-cust right margin-bottom-25" id="custom-rfp-invite-rfp">
				<div class="arrow" style="top: 50%;"></div>
			  <div class="popover-content">Invite from existing companies and users.<br>Hold the CTRL key for multiple select and deselect.</div>
			</div>
	             </div>';
	 $output .= '</div>';*/
     // end new div for popover rfp invite companies//
    return $output;
}

function get_invited_companies_or_individuals_list($node) {
    $output = '';
    $invitedCompanies = array();
    $dfg = 1;
    $awardedFC = array();
    $assigned = array();
    $output .= '<div class="invited-co-list" rpnid="' . $node->nid . '">';
    //$output .= '<span data-toggle="popover" data-trigger="hover" data-placement="bottom" data-content="These companies have been invited already. To remove them from having access to the RFP,simply delete them by selecting the &quot;X&quot;."><label>' . t('Invited Companies/Individuals :') . '</label></span>';
	$output .= '<label>' . t('Invited Companies/Individuals :') . '<span class="tooltip-main-custom">
     <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        <span class="tooltip" data-tooltip-content="#tooltip_invited_companies">&nbsp;</span>
        <div class="tooltip_templates">
          <span id="tooltip_invited_companies">
           <p>These companies have been invited<br/> already. To remove them from having<br/> access to the RFP,simply delete them<br/> by selecting the &quot;X&quot;.</p>
         </span>
	    </div>
	 </i>
 </span></label>';
    $output .= '<div class="invited-companies-lists">';

    $query = db_select('field_data_field_rfp_invite_comapnies', 'ric');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->leftJoin('node', 'n', 'n.nid = rcne.field_rfp_company_nid_email_value');
    $query->fields('ric', array('field_rfp_invite_comapnies_value'));
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->fields('n', array('title'));
    $query->condition('ric.entity_id', $node->nid, '=');
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
    $result = $query->execute()->fetchAll();
    if ($result && !empty($result)) {
        if (db_table_exists('m6connect_rfp_invited_award') && $node->type == 'rfp') {
            $awardedFC = db_select('m6connect_rfp_invited_award', 'ma')->fields('ma', array('field_collection_item_id'))->condition('ma.entity_nid', $node->nid, '=')->condition('ma.status', 1, '=')->execute()->fetchCol();
        }
        if ($node->type == 'rfp') {
            $query2 = db_select('m6connect_bid_package_invitess', 'mbpi');
            $query2->join('m6connect_bid_packages', 'mbp', 'mbp.bid_package_id = mbpi.bid_package_id');
            $query2->fields('mbpi', array('rfp_invite_fc_itemid'));
            $query2->distinct();
            $query2->condition('mbp.entity_id', $node->nid, '=');
            $assigned = $query2->execute()->fetchCol();
        }
        foreach ($result as $delta => $resultObj) {
            $awardedClass = '';
            $CompanyName = '';
            $companyUsersName = array();
            $FCitemId = $resultObj->field_rfp_invite_comapnies_value;
            $inviteddata = $resultObj->field_rfp_company_nid_email_value;
            if (in_array($FCitemId, $awardedFC)) {
                $awardedClass = ' fc-awarded';
            }
            if (!empty($inviteddata) && is_numeric($inviteddata)) {
                $compMgrUids = explode(',', $resultObj->field_co_invite_manager_uid_value);
                $CompanyName = $resultObj->title;
                $invitedCompanies[] = $inviteddata;
                if (!empty($compMgrUids)) {
                    $companyUsersName = _get_user_uid_name_mapping(array_values($compMgrUids));
                }
                $output .= '<div id="invited-companies-done-' . $FCitemId . '" class="invited-companies-done company-registered clearfix">';
                $output .= '<div class="invited-companies-link-sec"><a href="javascript:void(0);" class="remove-invite-company' . $awardedClass . '" cnid="' . $inviteddata . '" itemid="' . $FCitemId . '">[X]</a>';
                $output .= '<span class="invited-companies-name">' . $CompanyName . '&nbsp;-&nbsp;' . implode(', ', $companyUsersName) . '</span></div>';
                if ($node->type == 'rfp') {
                    $assignBtnClass = (in_array($FCitemId, $assigned)) ? 'btn-success' : 'btn-primary';
					$assignBidTitle = (in_array($FCitemId, $assigned)) ? 'Already Assigned' : 'Assign to Bid Package(s)';
                    $output .= '<span class="add-assign-bid-btn"><a href="/assign-bid-package/nojs/' . $FCitemId . '/' . $node->nid . '" class="ctools-use-modal ctools-modal-assign-bid-package-popup-style"><input type="button" value="'.$assignBidTitle.'" class="btn ' . $assignBtnClass . ' assign-approval-type-btn-' . $FCitemId . '"></a></span>';
                }
                $output .= '</div>';
            } else {
                $output .= '<div id="invited-companies-done-' . $FCitemId . '" class="invited-companies-done company-not-registered clearfix">';
                $output .= '<div class="invited-companies-link-sec"><a href="javascript:void(0);" class="remove-invite-company' . $awardedClass . '" cnid="' . $inviteddata . '" itemid="' . $FCitemId . '">[X]</a>';
                $output .= '<span class="invited-companies-name">' . $inviteddata . '</span></div>';
                if ($node->type == 'rfp') {
                    $assignBtnClass = (in_array($FCitemId, $assigned)) ? 'btn-success' : 'btn-primary';
					$assignBidTitle = (in_array($FCitemId, $assigned)) ? 'Already Assigned' : 'Assign to Bid Package(s)';
                    $output .= '<span class="add-assign-bid-btn"><a href="/assign-bid-package/nojs/' . $FCitemId . '/' . $node->nid . '" class="ctools-use-modal ctools-modal-assign-bid-package-popup-style"><input type="button" value="'.$assignBidTitle.'" class="btn ' . $assignBtnClass . ' assign-approval-type-btn-' . $FCitemId . '"></a></span>';
                }
                $output .= '</div>';
            }
        }
    }
    $output .= '</div>';
    $output .= '</div>';
    return $output;
}

function get_invited_companies_invitedusers_list($node) {
    $companyUsersMapping = array();
    $query = db_select('field_data_field_rfp_invite_comapnies', 'ric');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->fields('ric', array('field_rfp_invite_comapnies_value'));
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->condition('ric.entity_id', $node->nid, '=');
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
    $result = $query->execute()->fetchAll();
    if ($result && !empty($result)) {
        foreach ($result as $delta => $resultObj) {
            $companyUsersName = array();
            $FCitemId = $resultObj->field_rfp_invite_comapnies_value;
            $inviteddata = $resultObj->field_rfp_company_nid_email_value;
            $usermapping = array();
            if (!empty($inviteddata) && is_numeric($inviteddata)) {
                $compMgrUids = explode(',', $resultObj->field_co_invite_manager_uid_value);
                if (!empty($compMgrUids)) {
                    $query3 = db_select('users', 'u');
                    $query3->leftjoin('realname', 'r', 'r.uid=u.uid');
                    $query3->fields('u', array('uid'));
                    $query3->fields('r', array('realname'));
                    $query3->condition('u.uid', array_values($compMgrUids), 'IN');
                    $usermapping = $query3->execute()->fetchAllKeyed(0, 1);
                }
                $companyUsersMapping[$inviteddata] = $usermapping;
            }
        }
    }
    return $companyUsersMapping;
}

function rfp_company_search_form($form, $form_state, $collaborate = false) {
    if ($collaborate) {
        $co_name = isset($_REQUEST ['co_name_clbrte']) ? $_REQUEST ['co_name_clbrte'] : '';
        $co_filter = isset($_REQUEST ['co_filter_clbrte']) ? $_REQUEST ['co_filter_clbrte'] : '';
        $co_facilities = isset($_REQUEST ['co_facilities_clbrte']) ? $_REQUEST ['co_facilities_clbrte'] : '';
        $co_region = isset($_REQUEST ['co_region_clbrte']) ? $_REQUEST ['co_region_clbrte'] : '';
        $co_industries = isset($_REQUEST ['co_industries_clbrte']) ? $_REQUEST ['co_industries_clbrte'] : '';
        $co_pservices = isset($_REQUEST ['co_pservices_clbrte']) ? $_REQUEST ['co_pservices_clbrte'] : '';
        //$co_economic = isset($_REQUEST ['co_economic'] ) ? $_REQUEST ['co_economic'] : '';
        $co_diversity = isset($_REQUEST ['co_diversity_clbrte']) ? $_REQUEST ['co_diversity_clbrte'] : ''; //pre($pro_diversity);
    } else {
        $co_name = isset($_REQUEST ['co_name']) ? $_REQUEST ['co_name'] : '';
        $co_filter = isset($_REQUEST ['co_filter']) ? $_REQUEST ['co_filter'] : '';
        $co_facilities = isset($_REQUEST ['co_facilities']) ? $_REQUEST ['co_facilities'] : '';
        $co_region = isset($_REQUEST ['co_region']) ? $_REQUEST ['co_region'] : '';
        $co_industries = isset($_REQUEST ['co_industries']) ? $_REQUEST ['co_industries'] : '';
        $co_pservices = isset($_REQUEST ['co_pservices']) ? $_REQUEST ['co_pservices'] : '';
        //$co_economic = isset($_REQUEST ['co_economic'] ) ? $_REQUEST ['co_economic'] : '';
        $co_diversity = isset($_REQUEST ['co_diversity']) ? $_REQUEST ['co_diversity'] : ''; //pre($pro_diversity);
    }
    $co_div_arr = array(0);
    if (!empty($co_diversity)) {
        $co_div_arr = explode(',', $co_diversity); //pre($co_div_arr);
    }

    $defaultFavorite = '';
    if (isset($_REQUEST['favorite']) && is_numeric($_REQUEST['favorite'])) {
        $defaultFavorite = $_REQUEST['favorite'];
    }
    if ($collaborate) {
        $InviteorCollab = 'collaboration';
    } else {
        $InviteorCollab = 'invite';
    }
    $form['invite_collaborate'] = array(
        '#type' => 'hidden',
        '#title' => 'Invite/collaborate',
        '#attributes' => array('class' => 'invite_clbrte_hidden'),
        '#value' => $InviteorCollab,
    );

    $form['favorite'] = array(
        '#type' => 'textfield',
        '#title' => 'Favorite Folder Id',
        '#title_display' => 'invisible',
        '#default_value' => $defaultFavorite,
        '#attributes' => array('style' => array('display:none;'), 'class' => array('company-favorite-folder-id')),
    );

    $form['co_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Search<span class="tooltip-main-custom">
     <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        <span class="tooltip" data-tooltip-content="#tooltip_search_companies">&nbsp;</span>
        <div class="tooltip_templates">
          <span id="tooltip_search_companies">
           <p>Search for companies to invite here.</p>
         </span>
	    </div>
	 </i>
 </span>'),
        //'#prefix'=>'<div class="row"><div class="col-md-6 cal-sm-6 col-xs-12">',
        '#default_value' => $co_name,
        '#attributes' => array('placeholder' => t('Title, Keywords, Company description')),
		//'#field_prefix' => '<span data-toggle="popover" data-trigger="manual" data-placement="top" data-content="Search for companies to invite here."></span>',
		/*'#prefix' => '<span class="tooltip-main-custom">
     <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        <span class="tooltip" data-tooltip-content="#tooltip_search_companies">&nbsp;</span>
        <div class="tooltip_templates">
          <span id="tooltip_search_companies">
           <p>Search for companies to invite here.</p>
         </span>
	    </div>
	 </i>',
		'#suffix' => '</span>',*/
    );
    /*
      $options = array('_none' => '', 'all' => 'All', 'connections' => 'Connections', 'sent' => 'Sent', 'received' => 'Received');
      $form['co_filter'] = array(
      '#type' => 'select',
      '#title' => 'Filter',
      '#options' => $options,
      );
     */
    // Load includes/common.inc from the hierarchical select module.
    module_load_include('inc', 'hierarchical_select', 'includes/common');

    // Load category based in vocabulary machine name
    $fvoc = 'facilities_construction';
    $fvocabulary = taxonomy_vocabulary_machine_name_load($fvoc);
    $form['co_facilities'] = array(
        '#title' => t('M6 Company Types'),
        '#type' => 'hierarchical_select',
        '#config' => array(
            'module' => 'hs_taxonomy',
            'params' => array(
                'vid' => (int) $fvocabulary->vid,
                'exclude_tid' => NULL,
                'root_term' => NULL,
                'entity_count_for_node_type' => NULL,
            ),
        ),
        '#default_value' => $co_facilities,
    );

    hierarchical_select_common_config_apply($form['co_facilities'], "taxonomy-$fvocabulary->vid");

    $element_info = element_info('hierarchical_select');
    $form['co_facilities']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));

    // Load category based in vocabulary machine name
    $voc = 'region';
    $vocabulary = taxonomy_vocabulary_machine_name_load($voc);
    $form['co_region'] = array(
        '#title' => t('Region'),
        '#type' => 'hierarchical_select',
        '#config' => array(
            'module' => 'hs_taxonomy',
            'params' => array(
                'vid' => (int) $vocabulary->vid,
                'exclude_tid' => NULL,
                'root_term' => NULL,
                'entity_count_for_node_type' => NULL,
            ),
        ),
        '#default_value' => $co_region,
            //'#suffix'=>'</div>',
    );

    hierarchical_select_common_config_apply($form['co_region'], "taxonomy-$vocabulary->vid");

    $element_info = element_info('hierarchical_select');
    $form['co_region']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));

    // Load category based in vocabulary machine name
    //$ivoc = 'industry_naics';
    //$ivocabulary = taxonomy_vocabulary_machine_name_load($ivoc);
    $ivocabulary = taxonomy_vocabulary_load(14);
    $form['co_industries'] = array(
        '#title' => t('Industry NAICS'),
        '#type' => 'hierarchical_select',
        '#config' => array(
            'module' => 'hs_taxonomy',
            'params' => array(
                'vid' => (int) $ivocabulary->vid,
                'exclude_tid' => NULL,
                'root_term' => NULL,
                'entity_count_for_node_type' => NULL,
            ),
        ),
        '#default_value' => $co_industries,
            //'#prefix'=>'<div class="col-md-6 cal-sm-6 col-xs-12">',
    );

    hierarchical_select_common_config_apply($form['co_industries'], "taxonomy-$ivocabulary->vid");

    $element_info = element_info('hierarchical_select');
    $form['co_industries']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));

    // Load category based in vocabulary machine name
    //$pvoc = 'products_services_unspsc';
    //$pvocabulary = taxonomy_vocabulary_machine_name_load($pvoc);
    $pvocabulary = taxonomy_vocabulary_load(13);
    $form['co_pservices'] = array(
        '#title' => t('Products & Services UNSPSC'),
        '#type' => 'hierarchical_select',
        '#config' => array(
            'module' => 'hs_taxonomy',
            'params' => array(
                'vid' => (int) $pvocabulary->vid,
                'exclude_tid' => NULL,
                'root_term' => NULL,
                'entity_count_for_node_type' => NULL,
            ),
        ),
        '#default_value' => $co_pservices,
    );

    hierarchical_select_common_config_apply($form['co_pservices'], "taxonomy-$pvocabulary->vid");

    $element_info = element_info('hierarchical_select');
    $form['co_pservices']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));

    /* // Load category based in vocabulary machine name
      $evoc = 'economic_inclusion';
      $evocabulary = taxonomy_vocabulary_machine_name_load($evoc);
      $form['co_economic'] =  array(
      '#title' => t('Economic Inclusion'),
      '#type'          => 'hierarchical_select',
      '#config'        => array(
      'module' => 'hs_taxonomy',
      'params' => array(
      'vid'                        => (int) $evocabulary->vid,
      'exclude_tid'                => NULL,
      'root_term'                  => NULL,
      'entity_count_for_node_type' => NULL,
      ),
      ),
      //'#default_value' => $tids,
      //'#suffix'=>'</div>',
      );

      hierarchical_select_common_config_apply( $form['co_economic'], "taxonomy-$evocabulary->vid");

      $element_info = element_info('hierarchical_select');
      $form['co_economic']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));
     */
    $dtype = array('diversity');
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'))
            ->condition('type', $dtype, 'IN')
            ->condition('status', '1');
    $result = $query->execute()->fetchAll();
    $diversityArr['_none'] = 'Select All';
    foreach ($result as $row) {
        $dnode = node_load($dnid = $row->nid, $vid = NULL, $reset = FALSE);
        $diversityArr[$dnid] = $dnode->title;
    } //pre($diversityArr); 

    $form['co_diversitytype'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Diversity Types'),
        '#options' => $diversityArr,
        //'#prefix' => '<div class="col-md-12 cal-sm-12 col-xs-12">',
        //'#suffix'=>'</div>',
        //'#multiple' => 1,
        '#default_value' => $co_div_arr,
    );

    $form['co_reset'] = array(
        '#type' => 'submit',
        '#value' => 'Reset',
        '#prefix' => '<div class="text-right">',
        '#attributes' => array('class' => array('btn', 'btn-primary'))
    );

    $form['co_submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'co-submit'))
    );

    return $form;
}

function rfp_company_search_form_validate($form, $form_state) {
    //pre($form_state,1);	
}

function rfp_company_search_form_submit($form, $form_state) {
    global $base_url;
    if ($form_state['values']['op'] == 'Reset') { //pre($_SERVER['QUERY_STRING']);
        //drupal_goto(current_path());
        //drupal_goto($base_url.'/invite-companies/'.arg(1));
        //$_SESSION['reset_on_invite'] = 1;
        $values = $form_state['values'];
        $cqstr = str_replace('q=', '', $_SERVER['QUERY_STRING']);
        $cpath = explode('/', $cqstr);
        $pathidetifier = $cpath[0]; //pre($form_state); pre($pathidetifier,1);
        if ($pathidetifier == 'node' || $pathidetifier == 'content' || $pathidetifier = 'project') {
            $InviteCollaborate = $values['invite_collaborate'];
            if ($InviteCollaborate == 'collaboration') {
                $path = $base_url . "/" . current_path() . "?favorite_clbrte=&co_name_clbrte=&co_filter_clbrte=&co_facilities_clbrte=&co_region_clbrte=&co_industries_clbrte=&co_pservices_clbrte=&co_diversity_clbrte=";
            } else {
                $path = $base_url . "/" . current_path() . "?favorite=&co_name=&co_filter=&co_facilities=&co_region=&co_industries=&co_pservices=&co_diversity=";
            }
        } else if ($pathidetifier == 'invite-companies') {
            $cistr = '';
            $cipath = explode('&', $cqstr);
            if (isset($cipath[1])) {
                $cistr = '?' . $cipath[1];
            }
            $path = $base_url . "/" . current_path() . $cistr;
        }
        drupal_goto($path);
    } else {
        $values = $form_state['values'];  //pre($values,1);
        $InviteCollaborate = $values['invite_collaborate'];
        if ($InviteCollaborate == '') {
            
        } else {
            $co_name = $values['co_name'];
            $co_filter = ''; //(!empty($values['co_name']))$values['co_name'];
            $co_facilities = isset($values['co_facilities'][0]['tid']) ? $values['co_facilities'][0]['tid'] : '';
            $co_region = isset($values['co_region'][0]['tid']) ? $values['co_region'][0]['tid'] : '';
            $co_industries = isset($values['co_industries'][0]['tid']) ? $values['co_industries'][0]['tid'] : '';
            $co_pservices = isset($values['co_pservices'][0]['tid']) ? $values['co_pservices'][0]['tid'] : '';
            //$co_economic = isset($values['co_economic'][0]['tid'])?$values['co_economic'][0]['tid']:'';
            $co_div = (!empty($values['co_diversitytype'])) ? $values['co_diversitytype'] : ''; //pre($pro_div);
            if (!empty($co_div)) {
                $co_div = array_filter($co_div);
                //$co_div2  = array_shift($co_div); //pre($pro_div,1);
                $co_diversity = implode(',', $co_div); //pre($pro_diversity,1);
            }

            $favoriteFilter = '';
            $co_favorite = trim($values['favorite']);
            if ($co_favorite != '' && is_numeric($co_favorite)) {
                $favoriteFilter = 'favorite=' . $co_favorite . '&';
            }

            /* $path = $base_url."/companies?co_name=".$co_name.'&co_filter='.$co_filter.'&co_facilities='.$co_facilities.'&co_region='.$co_region.'&co_industries='.$co_industries.'&co_pservices='.$co_pservices.'&co_economic='.$co_economic; */
            // $path = $base_url."/invite-companies/".arg(1)."?co_name=".$co_name.'&co_filter='.$co_filter.'&co_facilities='.$co_facilities.'&co_region='.$co_region.'&co_industries='.$co_industries.'&co_pservices='.$co_pservices.'&co_diversity='.$co_diversity;
            $path = $base_url . "/" . current_path() . "?" . $favoriteFilter . "co_name=" . $co_name . '&co_filter=' . $co_filter . '&co_facilities=' . $co_facilities . '&co_region=' . $co_region . '&co_industries=' . $co_industries . '&co_pservices=' . $co_pservices . '&co_diversity=' . $co_diversity;
        }
        drupal_goto($path);
    }
}

function rfp_invite_companies_form($form, &$form_state, $nodeNid) {
    drupal_add_js(array('m6connect_rfp' => array('custom_dialog_js' => 1)), 'setting');
    $form['companies_hidden'] = array(
        '#type' => 'hidden',
        '#title' => 'Companies',
        '#attributes' => array('class' => 'companies_hidden'),
    );
    $form['companies_manager_hidden'] = array(
        '#type' => 'hidden',
        '#title' => 'Company Project Manager',
        '#attributes' => array('class' => 'companies_manager_hidden'),
    );
    $form['invite_later_hidden'] = array(
        '#type' => 'hidden',
        '#title' => 'Company Invite Later',
        '#attributes' => array('class' => 'invite_later_hidden'),
    );
    $form['invite_nodeid_hidden'] = array(
        '#type' => 'hidden',
        '#title' => 'Company Invite Later',
        '#attributes' => array('class' => 'invite_nodeid_hidden'),
        '#value' => arg(1),
    );
    $form['invite_js_triggered'] = array(
        '#type' => 'hidden',
        '#title' => 'Js Click',
        '#attributes' => array('class' => 'invite_js_triggered'),
        '#value' => '0',
    );
    $form['reinvite_js_triggered'] = array(
        '#type' => 'hidden',
        '#title' => 'Js Click',
        '#attributes' => array('class' => 'reinvite_js_triggered'),
        '#value' => '0',
    );
    $form['invite_later_js_triggered'] = array(
        '#type' => 'hidden',
        '#title' => 'Invite later Js Click',
        '#attributes' => array('class' => 'invite_later_js_triggered'),
        '#value' => '0',
    );
    $form['companies_by_email'] = array(
        '#type' => 'textarea',
        //'#title' => t('<span data-toggle="popover" data-trigger="hover" data-placement="bottom" data-content="Copy and paste form email, excel or type these in.">Add Individuals by Email :</span>'),
		 '#title' => t('Add Individuals by Email :<span class="tooltip-main-custom">
     <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        <span class="tooltip" data-tooltip-content="#tooltip_rfpby_email">&nbsp;</span>
        <div class="tooltip_templates">
          <span id="tooltip_rfpby_email">
           <p>Copy and paste form email, excel or<br/> type these in.</p>
         </span>
	    </div>
	 </i>
 </span>'),
		
        '#resizable' => FALSE,
        //'#description' => '<b>Maximum number of invite at a time is 25</b>',
        '#prefix' => '<div class="row rfp-invite-companies-form-item"><div class="col-md-4 invite-companies-blocks">',
        '#suffix' => '</div>'
    );
    $form['companies'] = array(
        '#type' => 'markup',
        //'#markup' => '<div class="-invitees-title">Companies</div><div class="invitees-list"></div>',
        '#markup' => '<div class="-invitees-title">Pending Invitations :<span class="tooltip-main-custom">
     <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        <span class="tooltip" data-tooltip-content="#tooltip_pending_invitations">&nbsp;</span>
        <div class="tooltip_templates">
          <span id="tooltip_pending_invitations">
           <p>These invitation have not been sent<br/> out. Select the &quot;Send Invitations&quot;<br/> button to send.</p></span></div></i></span></div><div id="invitees-list-favorite-dropable" class="invitees-list"></div>',
        '#prefix' => '<div class="col-md-4 invite-companies-blocks">',
        '#suffix' => '</div>'
    );

    $currentNode = node_load(arg(1));

    //Start Invited Companies/Individuals
    $form['invited-companies'] = array(
        '#type' => 'markup',
        '#markup' => get_invited_companies_or_individuals_list($currentNode),
        '#prefix' => '<div class="col-md-4 invite-companies-blocks">',
        '#suffix' => '</div></div>'
    );
    $form['remove-invite-company-dialog'] = array(
        '#markup' => '',
        '#prefix' => '<div id="remove-invite-company-dialog">',
        '#suffix' => '</div>',
    );
    //End Invited Companies/Individuals



    if (strpos(current_path(), 'invite-companies/') !== FALSE) {
        $param = array();
        if ($currentNode->type == 'rfp') {
            $param = array('rfpstep' => 'step_rpf_documents');
        } else {
            $param = array('prostep' => 'step_pro_supplier_diversity');
        }
        $form['back-button'] = array(
            '#type' => 'markup',
            '#markup' => l('<input type="button" value="Back" class="btn btn-primary form-submit" alt ="Back", title ="Back" />', 'node/' . arg(1) . '/edit', array('html' => true, 'query' => $param, 'attributes' => array('class' => array('back-btn-link')))),
        );
    }

    $form['add_individual_by_email'] = array(
        '#type' => 'button',
        '#value' => 'Add Emails',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'add-individual-by-email'), 'alt' => array('Add Emails'), 'title' => array('Add Emails')),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Send Invitations',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'send-invitations-submit'), 'alt' => array('Send Invitations'), 'title' => array('Send Invitations')),
    );

    $form['resubmit'] = array(
        '#type' => 'submit',
        '#value' => 'Resend Invitations',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'resend-invitations-submit'), 'alt' => array('Resend Invitations'), 'title' => array('Resend Invitations')),
		'#prefix' => '<span data-toggle="popover" data-trigger="hover" data-placement="bottom" data-content="Add Emails moves emails to Pending Invitations.<br>Send Invitations sends out Pending Invitations,<br>Resend Invitaions sends out all existing Invited Companies emails again.<br>Invite later saves the RFP as a Draft.<br>RFP Homes takes you to the RFP list page And Save as draft.">',
		'#suffix' => '</span>',
    );
    $form['later'] = array(
        '#type' => 'submit',
        '#value' => 'Invite Later',
        '#attributes' => array('class' => array('btn', 'btn-primary', 'invite-later-submit'), 'alt' => array('Invite Later'), 'title' => array('Invite Later')),
    );
    $homeValue = ($currentNode->type == 'rfp') ? 'RFP Home' : 'Projects Home';
    $homePath = ($currentNode->type == 'rfp') ? 'rfps/received' : 'projects';
    $form['home-button'] = array(
        '#type' => 'markup',
        '#markup' => l('<input type="button" value="' . $homeValue . '" class="btn btn-primary form-submit" alt ="' . $homeValue . '", title ="' . $homeValue . '" />', $homePath, array('html' => true, 'attributes' => array('class' => array('home-btn-link')))),
    );
	
	
		
		
		/*$redirect = (isset($_SERVER['HTTP_REFERER'])?$_SERVER['HTTP_REFERER']:''); //pre($redirect);
		$pathexp = explode('node/', $redirect);
		$exp = $pathexp[1];
		$eexp =  explode('/', $exp);  //pre($eexp);
		if(!empty($eexp[0])) {
			if(is_numeric($eexp[0])) {
				$opertation = 'edit';	  
			} else {
			$opertation = 'add';  
			
			}
		} else {
			$opertation = 'edit'; 	  
		}*/
		
		 /*$form['delete-button-other'] = array(
      '#type' => 'markup',
      '#markup' => $opertation,
    );*/

		$NextUrlValue = ($currentNode->type == 'rfp') ? 'rfp-clarification' : 'project-interested-companies';
    $next_url_link = $NextUrlValue .'/'. arg(1);
		if(arg(0)=='invite-companies' && is_numeric(arg(1))){
			if($currentNode->type == 'project' ){
				if(isset($_REQUEST['action']) && $_REQUEST['action']=='create'){
					$form['next-button-project'] = array(
						'#type' => 'markup',
						'#markup' => l('<input type="button" value="Next" class="form-submit" alt ="Next" title ="Next" />', $next_url_link, array('html' => true, 'query' => array('action'=>'create'), 'attributes' => array('class' => array('next-btn-link')))),
					);
				
				}else{
					//$form['delete-button-project'] = array(
						//'#type' => 'markup',
						//'#markup' => l('<input type="submit" value="Delete" class="form-submit" alt ="Delete" title ="Delete" />', 'node/'.arg(1).'/delete', array('html' => true,  'attributes' => array('class' => array('delete-btn-link')))),
					//);
					$form['next-button-project'] = array(
						'#type' => 'markup',
						'#markup' => l('<input type="button" value="Next" class="form-submit" alt ="Next" title ="Next" />', 'project-collaboration/'.arg(1), array('html' => true, 'query' => array('prostep'=>'step_pro_collaboration'), 'attributes' => array('class' => array('next-btn-link')))),
					);
					
				}
				
			}
		
			if($currentNode->type == 'rfp' ){
				if(isset($_REQUEST['action']) && $_REQUEST['action']=='create'){
					$form['next-button-rfp'] = array(
							'#type' => 'markup',
							'#markup' => l('<input type="button" value="Next" class="btn btn-primary form-submit" alt ="Next", title ="Next" />', $next_url_link.'/inbox', array('html' => true, 'query' => array('action'=>'create'), 'attributes' => array('class' => array('next-btn-link')))),
					);	
				}else{
					$form['delete-button-rfp'] = array(
						'#type' => 'markup',
						'#markup' => l('<input type="submit" value="Delete" class="form-submit" alt ="Delete" title ="Delete" />', 'node/'.arg(1).'/delete', array('html' => true,  'attributes' => array('class' => array('delete-btn-link')))),
					);
					
				}
			}
			
		}
		
		



    $nodeTypeDialog = ($currentNode->type == 'rfp') ? 'RFP' : 'Project';
    $form['invite-confirm-dialog'] = array(
        '#markup' => '<div class="text-center"><strong>Are you sure you want to send out this ' . $nodeTypeDialog . '?</strong></div>',
        '#prefix' => '<div id="invite-confirm">',
        '#suffix' => '</div>',
    );

    $form['reinvite-confirm-dialog'] = array(
        '#markup' => '<div class="text-center"><strong>Are you sure you want to resend out this ' . $nodeTypeDialog . '?</strong></div>',
        '#prefix' => '<div id="reinvite-confirm">',
        '#suffix' => '</div>',
    );

    $form['invite-later-dialog'] = array(
        '#markup' => '<div class="text-center"><strong>Saved as Draft</strong></div>',
        '#prefix' => '<div id="invite-later-dialog">',
        '#suffix' => '</div>',
    );

    $form['co-persion-dialog'] = array(
        '#markup' => '<div class="co-persion-dialog-text text-center"><strong>Select Contact Person First.</strong></div>',
        '#prefix' => '<div id="co-persion-dialog">',
        '#suffix' => '</div>',
    );
	$form['invite-rfp-popup-dialog'] = array(
        '#markup' => '<div class="invite-rfp-popup-dialog-text"></div>',
        '#prefix' => '<div id="invite-rfp-popup-dialog">',
        '#suffix' => '</div>',
    );

    $form['company-already-invited'] = array(
        '#markup' => '<div class="company-already-invited-text text-center"></div>',
        '#prefix' => '<div id="company-already-invited">',
        '#suffix' => '</div>',
    );

    if ($currentNode->type == 'rfp' && $currentNode->status == 0) {
        drupal_add_js(array('m6connect_rfp' => array('thankyou_invited_rfp' => 1)), 'setting');
        $form['thnakyou-for-invited'] = array(
            '#markup' => '<div class="thnakyou-for-invited-text text-center" style="display:none;"><strong>thankyou.</strong></div>',
            '#prefix' => '<div id="thnakyou-for-invited">',
            '#suffix' => '</div>',
        );
    }

    $form['thnakyou-invited-dialog'] = array(
        '#markup' => '',
        '#prefix' => '<div id="dialog-thnakyou-invited">',
        '#suffix' => '</div>',
    );

    #dialog-thnakyou-invited
    $form['#validate'][] = 'valid_mail_validation_handler';

    return $form;
}

function valid_mail_validation_handler(&$form, &$form_state) {
    /* 	if ($form_state['values']['op'] == 'Send Invitations') {

      $mail_array = explode(',', $form_state['values']['companies_hidden']);
      foreach($mail_array as $row_mail){
      if(!is_numeric($row_mail)){
      if(!valid_email_address($row_mail)){
      form_set_error('', t('The email address not valid.'));
      }
      }
      }

      } */
}

function rfp_invite_companies_form_validate(&$form, &$form_state) { //pre($form_state,1);
    $nid = $form_state['values']['invite_nodeid_hidden'];
    if ($form_state['values']['op'] == 'Send Invitations' && $_SESSION['invitelater-' . $nid] != 1) {
        if (empty($form_state['values']['companies_hidden']) || $form_state['values']['companies_hidden'] == '') {
            form_set_error('', t('No Companies are selected for Inviting.'));
        }
    }
}

function rfp_invite_companies_form_submit(&$form, &$form_state) { //pre($form_state,1);
    global $user;
    global $base_url, $base_path;    
    $_SESSION['rfp-invite-trigger'] = 1;

    /* $user_groups = og_get_groups_by_user($user, 'node');
      foreach ($user_groups as $key => $value) {
      $user_company = node_load($value);
      }
      if (isset($user_company->field_logo['und']) && !empty($user_company->field_logo['und'][0]['uri'])) { //pre('hi');
      $pimagepath = image_style_url('thumbnail', $user_company->field_logo['und'][0]['uri']);
      } */

    $companies_array = explode(',', $form_state['values']['companies_hidden']);

    $co_manager_array = $form_state['values']['companies_manager_hidden'];
    $co_mngr_arr = array();
    if (!empty($co_manager_array)) {
      $co_manager_arr = explode(';', $co_manager_array);
      foreach ($co_manager_arr as $k => $v) {
        $cmngr = explode('_', $v);
        $co_mngr_arr[$cmngr[0]] = $cmngr[1];
      }
    }



    //drupal_set_message('<pre>'.print_r($form_state['values'],1).'</pre>');
    $company_emails = '';
    $current_node = node_load(arg(1));
    //pre($companies_array,1);
    //echo "<pre>";
    //print_r($rfp_node);
    // die;
    if ($current_node->type == 'rfp') {
        if ($form_state['values']['op'] == 'Invite Later') {
            $_SESSION['invite_later_js_popup'] = 1;
            $_SESSION['invitelater-' . arg(1)] = 1;
            drupal_set_message("The Companies that you have selected have been saved however, the invitations have not been sent at this time.");
        } else if ($form_state['values']['op'] == 'Resend Invitations') {
            $_SESSION['invitelater-' . arg(1)] = 0;
            $i = 0;
            $emptyCmpyMailto = '';
            $nodeUser = node_load($current_node->uid);
            $forwordbutton = '<input type="button" value="Forward RFP" style="color: #FFF; font-size:14px; background: #337ab7; padding: 6px 15px; cursor: pointer; text-shadow: none; box-shadow:none; border: 1px solid transparent; line-height: normal; display:inline-block; vertical-align: top;" />';
            $forwordLink = $base_url . $base_path . 'rfp-forward-by-mail/' . $current_node->nid;
            $mailAttr = _get_mail_variables($mailKey = 'rfp_mail___user_invite_rfp', $type = 'rfp', $current_node, $other = array());
            foreach ($current_node->field_rfp_invite_comapnies['und'] as $key => $value) {
                $rfpForwardLink = '';
                $item = field_collection_item_load($value);
                if (isset($item->field_rfp_company_nid_email['und']) && !empty($item->field_rfp_company_nid_email['und'][0]['value'])) {
                    $to = array();
                    $is_ok = 1;
                    $companyOwner = '';
					$companyOwnerFirstName = '';
                    $invited_companies = $item->field_rfp_company_nid_email['und'][0]['value'];
                    if (is_numeric($invited_companies)) {
                        $companyNode = node_load($invited_companies);
                        $cmpUsrObj = user_load($companyNode->uid);
                        $companyOwner = $companyNode->field_owner_name['und'][0]['value'];
						$companyOwnerFirstName = (isset($cmpUsrObj)?$cmpUsrObj->field_first_name['und'][0]['value']:'');
                        $allowedForwordResult = array_intersect(array_keys($cmpUsrObj->roles), array(7, 8, 9));
                        if (!empty($allowedForwordResult)) {
                            $rfpForwardLink = l($forwordbutton, $forwordLink, array('external' => TRUE, 'html' => TRUE));
                        }
                        $to[] = $cmpUsrObj->mail;
                    } else {
                        $to[] = $invited_companies;
                        $emailuser = user_load_by_mail($invited_companies);
                        if ($emailuser) {
                            $allowedForwordResult = array_intersect(array_keys($emailuser->roles), array(7, 8, 9));
                            if (!empty($allowedForwordResult)) {
                                $rfpForwardLink = l($forwordbutton, $forwordLink, array('external' => TRUE, 'html' => TRUE));
                            }
                        }
                        $companyOwner = $invited_companies;
						$companyOwnerFirstName = (isset($emailuser)?$emailuser->field_first_name['und'][0]['value']:'');
                    }
                    if (isset($item->field_co_invite_manager_uid['und']) && !empty($item->field_co_invite_manager_uid['und'][0]['value'])) {
                        $cmpMngr = explode(',', $item->field_co_invite_manager_uid['und'][0]['value']);
                        foreach ($cmpMngr as $cmpMngrindex => $cmpMngrUid) {
                            $cmpUserObj = user_load($cmpMngrUid);
                            $to[] = $cmpUserObj->mail;
                        }
                    }
                    $params = $mailAttr;
                    $replace = array('[RFP:InvitedCompanyOwnerName]' => $companyOwner, '[RFP:ForwordLink]' => $rfpForwardLink);
                    $params['body'] = str_replace(array_keys($replace), array_values($replace), $params['body']);
                    //drupal_set_message('')
                    $mail = drupal_mail($params['module'], $params['key'], implode(',', $to), $params['language'], $params, $nodeUser->mail);
                    if ($mail['result']) {
                        $mailAttr['bcc'] = '';
                        $i++;
                    } else {
                        $is_ok = 0;
                        drupal_set_message(implode(',', $to) . " is invalid or did not work.", 'error');
                    }
                }
            }
            if ($i) {
                drupal_set_message("You have successfully invited(" . $i . ")");
            }
            if ($current_node->status == 0) { // node published after sending invitation
                $current_node->status = 1;
            }
            node_save($current_node);
        } else if ($form_state['values']['op'] == 'Send Invitations') {
            $InvitationSent = 0;
						$invalid_mail = array();
            foreach ($companies_array as $delta => $invitedValue) {
								if (!is_numeric($invitedValue)) {
                    if (!valid_email_address($invitedValue)) {
                        $invalid_mail[] = $invitedValue;
                        continue;
                    }
                }
							
                $invitedCompanyNidsEmail = array();
                $invitedCompanyNidsEmail[$invitedValue] = '';
                if (isset($co_mngr_arr[$invitedValue]) && !empty($co_mngr_arr[$invitedValue])) {
                    $invitedCompanyNidsEmail[$invitedValue] = $co_mngr_arr[$invitedValue];
                    //////////////////////////
                    $managerIDs = $co_mngr_arr[$invitedValue];
                    $cmpMngr = explode(',', $managerIDs);
                    foreach ($cmpMngr as $cmpMngrindex => $cmpMngrUid) {
                        $InvitationSent++;
                    }
                    //////////////////////////
                } else {
                    $InvitationSent++;
                }
                
                $db_insert = array(
                    'bundle' => $current_node->type,
                    'entity_id' => $current_node->nid,
                    'invited_by' => $user->uid,
                    'emails' => serialize($invitedCompanyNidsEmail),
                    'invited_timestamp' => time(),
                    'send_mail_timestamp' => NULL,
                    'Status' => 0,
                );
                $returnedId = db_insert('invite_users_rfp_project')->fields($db_insert)->execute();
            }
					  if (!empty($invalid_mail)) {
                $invalid_rowmail = implode(',', $invalid_mail);
                drupal_set_message(t('invaild email: ' . $invalid_rowmail), 'error');
            }

            $_SESSION['invitelater-' . arg(1)] = 0;
            $is_new = 0;
            if ($current_node->status == 0) { // node published after sending invitation
                //drupal_add_js(array('m6connect_rfp' => array('NoOfInvitation' => $NoOfInvitation)), 'setting');
                //$_SESSION['rfp_invited_thankyou'] = 1;
                $current_node->status = 1;
                $is_new = 1;
            }
            node_save($current_node);
            if ($is_new) {
                $_SESSION['NoOfInvitation'] = $InvitationSent;
                $_SESSION['rfp_invited_thankyou'] = 1;
            }
        }
        //$form_state['redirect'] = array('node/' . arg(1));
    } elseif ($current_node->type == 'project') {
        $fdescp = '';
        if (isset($current_node->field_public_description['und']) && !empty($current_node->field_public_description['und'][0]['value'])) {
            $fdescp = $current_node->field_public_description['und'][0]['value'];
        }

        if ($form_state['values']['op'] == 'Invite Later') {
            $_SESSION['invite_later_js_popup'] = 1;
            $_SESSION['invitelater-' . arg(1)] = 1;
            drupal_set_message("The organizations that you have selected have been saved however, the invitations have not been sent at this time.");
            //You can complete the invitation process by clicking the “Send Invitations�? button below, once you are ready.	
        } else if ($form_state['values']['op'] == 'Resend Invitations') {
            $i = 0;
            $_SESSION['invitelater-' . arg(1)] = 0;
            $emptyCmpyMailto = '';
            $companyOwner = '';
            $nodeUser = node_load($current_node->uid);
            $mailAttr = _get_mail_variables($mailKey = 'project_mail___user_invite_project', $type = 'project', $current_node, $other = array());
            foreach ($current_node->field_rfp_invite_comapnies['und'] as $key => $value) {
                $item = field_collection_item_load($value);
                if (isset($item->field_rfp_company_nid_email['und']) && !empty($item->field_rfp_company_nid_email['und'][0]['value'])) {
                    $to = array();
                    $is_ok = 1;
                    $invited_companies = $item->field_rfp_company_nid_email['und'][0]['value'];
                    if (is_numeric($invited_companies)) {
                        $companyNode = node_load($invited_companies);
                        $cmpUsrObj = user_load($companyNode->uid);
                        $companyOwner = $companyNode->field_owner_name['und'][0]['value'];
                        $to[] = $cmpUsrObj->mail;
                    } else {
                        $to[] = $invited_companies;
                        $companyOwner = $invited_companies;
                    }
                    if (isset($item->field_co_invite_manager_uid['und']) && !empty($item->field_co_invite_manager_uid['und'][0]['value'])) {
                        $cmpMngr = explode(',', $item->field_co_invite_manager_uid['und'][0]['value']);
                        foreach ($cmpMngr as $cmpMngrindex => $cmpMngrUid) {
                            $cmpUserObj = user_load($cmpMngrUid);
                            $to[] = $cmpUserObj->mail;
                        }
                    }
                    $params = $mailAttr;
                    $replace = array('[PROJECT:InvitedCompanyOwnerName]' => $companyOwner,);
                    $params['body'] = str_replace(array_keys($replace), array_values($replace), $params['body']);
                    //drupal_set_message('<pre>'.print_r($params['body'],1).'</pre>');
                    $mail = drupal_mail($params['module'], $params['key'], implode(',', $to), $params['language'], $params, $nodeUser->mail);
                    if ($mail['result']) {
                        $mailAttr['bcc'] = '';
                        $i++;
                    } else {
                        $is_ok = 0;
                        drupal_set_message(implode(',', $to) . " is invalid or did not work.", 'error');
                    }
                }
            }
            if ($i) {
                drupal_set_message("You have successfully invited(" . $i . ")");
            }
            if ($current_node->status == 0) { // node published after sending invitation
                $current_node->status = 1;
            }
            node_save($current_node);
        } else if ($form_state['values']['op'] == 'Send Invitations') {
            /* $db_insert = array(
              'bundle'=> $current_node->type,
              'entity_id' => $current_node->nid,
              'invited_by'=>$user->uid,
              'emails' => serialize($invited_companies),
              'invited_timestamp'=> time(),
              'send_mail_timestamp'=> NULL,
              'Status' =>0,
              );
              $returnedId = db_insert('invite_users_rfp_project')->fields($db_insert)->execute(); */
            $invalid_mail = array();
            foreach ($companies_array as $key => $value) {
                if (!is_numeric($value)) {
                    if (!valid_email_address($value)) {
                        $invalid_mail[] = $value;
                        continue;
                    }
                }

                $invitedCompanyNidsEmail = array();
                $invitedCompanyNidsEmail[$value] = '';
                if (isset($co_mngr_arr[$value]) && !empty($co_mngr_arr[$value])) {
                    $invitedCompanyNidsEmail[$value] = $co_mngr_arr[$value];
                }                
                $db_insert = array(
                    'bundle' => $current_node->type,
                    'entity_id' => $current_node->nid,
                    'invited_by' => $user->uid,
                    'emails' => serialize($invitedCompanyNidsEmail),
                    'invited_timestamp' => time(),
                    'send_mail_timestamp' => NULL,
                    'Status' => 0,
                );
                $returnedId = db_insert('invite_users_rfp_project')->fields($db_insert)->execute();

                if (is_numeric($value)) {
                    $grp = node_load($value);
                    if ($grp->type == 'organization') {
                        $grpuid = $grp->uid;
                        $_SESSION['cust_invite_msg_' . $grpuid] = $value;
                    }
                }
            }
            if (!empty($invalid_mail)) {
                $invalid_rowmail = implode(',', $invalid_mail);
                drupal_set_message(t('invaild email: ' . $invalid_rowmail), 'error');
            }
            $_SESSION['invitelater-' . arg(1)] = 0;

            if ($current_node->status == 0) { // node published after sending invitation
                $current_node->status = 1;
            }
            node_save($current_node);
        }
        //drupal_goto('projects');
        //$form_state['redirect'] = array('node/' . arg(1));
    }
}

//Unpublish Any Node
function common_unpublish_node($node) {
    $node->status = 0;
    node_save($node);
    $_SESSION['node-pub-upub'] = 1;
    //$redirect = (isset($_SERVER['HTTP_REFERER'])?$_SERVER['HTTP_REFERER']:'');
    $redirect = 'node/' . $node->nid;
    drupal_goto($redirect);
}

//Publish Node
function common_publish_node($node) {
    $node->status = 1;
    node_save($node);
    $_SESSION['node-pub-upub'] = 1;
    //$redirect = (isset($_SERVER['HTTP_REFERER'])?$_SERVER['HTTP_REFERER']:'');
    $redirect = 'node/' . $node->nid;
    drupal_goto($redirect);
}

function custom_rpf_invite_company_redirect($node) {
    drupal_goto('invite-companies/' . $node->nid);
}

function custom_rpf_clarification($node) {
    return '';
}

function accept_invitation_callback($fieldCollectionId) {
    $fc_item = field_collection_item_load($fieldCollectionId);
    $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
    $fc_wrapper->field_rfp_invite_status->set(1);
    $fc_wrapper->field_invitation_action->set(1);
    $fc_wrapper->save();
    $redirect = (isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '');
    drupal_goto($redirect);
}

function withdraw_invitation_callback($fieldCollectionId) {
    $fc_item = field_collection_item_load($fieldCollectionId);
    $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
    $fc_wrapper->field_rfp_invite_status->set(1);
    $fc_wrapper->field_invitation_action->set(0);
    $fc_wrapper->save();
    $redirect = (isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '');
    drupal_goto($redirect);
}

function custom_invitation_callback($action, $fieldCollectionId) {
    drupal_set_message($action . '   ' . $fieldCollectionId);
    $fc_item = field_collection_item_load($fieldCollectionId);
    $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
    $fc_wrapper->field_rfp_invite_status->set(1);
    if ($action == 'accept') {
        $fc_wrapper->field_invitation_action->set(1);
    } else if ($action == 'withdraw') {
        $fc_wrapper->field_invitation_action->set(0);
    }
    $fc_wrapper->save();
    $redirect = (isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '');
    drupal_goto($redirect);
}

/*
  function get_favorites_nodes_by_folder_id($folderID){
  global $user;
  module_load_include($type='inc', $module='bookmarkorganizer', $name = 'bookmarkorganizer');
  $data = bookmarkorganizer_get_items($user->uid, $index=0, !variable_get('bookmarkorganizer_enable_folders'));
  $folderParents = array();
  $folderParents[] = $folderID;
  $inNids= array();
  foreach($data as $delta => $item){
  if(in_array($item->parent,$folderParents)){
  if($item->type=='folder'){
  $folderParents[] = $item->id;
  }else{
  $inNids[] = $item->content_id;
  }
  }
  }
  return $inNids;
  }
 */

function get_all_favorites_node_nids() {
    global $user;
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    $query = db_select('bookmarkorganizer_item', 'boi');
    $query->fields('boi', array('content_id'))
            ->condition('boi.uid', $user->uid)
            ->condition('boi.type', 'folder', '!=')
            ->orderBy('boi.weight', 'ASC');
    $result = $query->execute()->fetchCol();
    return $result;
}

function _generate_rfp_project_company_view_by_ajax($folderId) {
    global $base_url;
    $itemLabel = 'My Favorites';
    module_load_include($type = 'inc', $module = 'bookmarkorganizer', $name = 'bookmarkorganizer');
    $item = bookmarkorganizer_get_item($folderId);
    if ($item && is_object($item) && isset($item->label)) {
        $itemLabel = $item->label;
    } else {
        if (isset($_REQUEST['cpmpany_uid']) && !empty($_REQUEST['cpmpany_uid'])) {
            $itemLabel = 'Shared Favorites';
        }
    }

    drupal_json_output(array(
        'html' => rfp_find_companies(TRUE),
        'replacewith' => '#cust-company-listings',
        'folder_id' => $folderId,
        'folder_name' => $itemLabel,
        'filterreplacewith' => '.company-select-filter-list',
        'filterHtml' => '<div class="col-md-9 col-sm-12 col-xs-12 company-select-filter-list"><input type="hidden" class="site_base_url" value="' . $base_url . '"><label class="select-title">Your Selections:</label><span class="cust-selection-list cust-rfp-favorite-filter"><span class="sfilter-label">Favorite: <span class="sfilter-value">' . $itemLabel . '</span><i class="fa fa-times-circle"></i></span><span class="cust-selection-hidden-val" style="display:none;"><span class="sfilter-name">favorite</span><span class="sfilter-val">' . $folderId . '</span><span class="filter-qstr"></span></span></span></div>',
    ));
}

function m6connect_rfp_mail($key, &$message, $params) { //pre($message);pre($key);//pre($params,1);
    $message['body'][] = $params['body'];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    $message['subject'] = $params['subject'];
}

/**
 *  Check Current User'commany Invited For RFP.
 */
function is_rfp_invited_company($rfpNid, $type = 'rfp', $fromView = FALSE) {
    global $user;
    $companyNid = $_SESSION['company'];
    if ($companyNid && is_numeric($companyNid)) {
        /*         * ***Changed**** */
				$companyAdminRoleUsers = _get_company_users_by_og_roles($companyNid,'company admin');
        $isCompanyIndividual = is_company_individual_flag($companyNid);
        $companyMail = $user->mail;
        $query = db_select('node', 'n');
        $query->Join('field_data_field_rfp_invite_comapnies', 'ric', 'ric.entity_id=n.nid');
        $query->Join('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
        $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
        $query->leftJoin('field_data_field_invite_inbox_status', 'iis', 'ric.field_rfp_invite_comapnies_value = iis.entity_id');
        $query->fields('n', array('nid'));
        $query->condition('n.type', $type, '=');
        $query->condition('n.nid', $rfpNid, '=');
        /*         * ***Changed**** */
        /* $dbor = db_or()
          ->condition('rcne.field_rfp_company_nid_email_value', $companyNid, '=')
          ->condition('rcne.field_rfp_company_nid_email_value', $companyMail, '=');
          $query->condition($dbor);
          $query->where('(rcne.field_rfp_company_nid_email_value=:companyMail or (rcne.field_rfp_company_nid_email_value=:companyNid and FIND_IN_SET(:UserUid,rcimu.field_co_invite_manager_uid_value)>0))',array(':UserUid' => $user->uid,':companyMail'=>$user->mail,':companyNid'=>$companyNid)); */

        if ($fromView) {
            $query->condition('iis.field_invite_inbox_status_value', 1, '=');
        }
        if ($isCompanyIndividual) {
            $query->condition('rcne.field_rfp_company_nid_email_value', $companyMail, '=');
        } else { 
						//company admin work
					  if(in_array($user->uid,$companyAdminRoleUsers)){
							$company_emails = db_select('m6connect_og_membership_email', 'om')->fields('om', array('company_email'))->condition('om.entity_id', $companyNid, '=')->execute()->fetchCol();
								$company_emails = array_map('strtolower',$company_emails);
								$query->where('((rcne.field_rfp_company_nid_email_value IS NOT NULL) AND ((LOWER(rcne.field_rfp_company_nid_email_value) IN(:companyMail)) OR (rcne.field_rfp_company_nid_email_value=:companyNid)))',array(':companyMail'=>$company_emails,':companyNid'=>$companyNid));
						}else{
							$company_email = db_select('m6connect_og_membership_email', 'om')->fields('om', array('company_email'))->condition('om.entity_id', $companyNid, '=')->condition('om.user_uid', $user->uid, '=')->execute()->fetchColumn(0);
							if (!empty($company_email)) {
									$company_email = strtolower($company_email);
									$query->where('(LOWER(rcne.field_rfp_company_nid_email_value)=:companyMail or (rcne.field_rfp_company_nid_email_value=:companyNid and FIND_IN_SET(:UserUid,rcimu.field_co_invite_manager_uid_value)>0))', array(':UserUid' => $user->uid, ':companyMail' => $company_email, ':companyNid' => $companyNid));
							} else {
									$query->condition('rcne.field_rfp_company_nid_email_value', $companyNid, '=');
									$query->where('(FIND_IN_SET(:UserUid,rcimu.field_co_invite_manager_uid_value)>0)', array(':UserUid' => $user->uid));
							}
						}
        }


        $result = $query->execute()->fetchCol();
        if ($result && is_array($result) && !empty($result) && count($result) > 0) {
            return TRUE;
        }
        /*         * ******** Start Colbration user permission for rfps ********* */
        //$noderfp = node_load($rfpNid);
        //$adinistationl_user = m6connect_projects_uids_from_list($noderfp);
        /*         * ***Changed**** */
        //$NodeCmpNid = _get_company_nid_by_group_content($noderfp);
        //if (in_array($user->uid, $adinistationl_user) && $companyNid == $NodeCmpNid) {
        //    return true;
        //}
        /*         * ********* End Colbration user permission for rfps ********** */
    }
    return FALSE;
}

function is_project_rfps_accessible($rfpNode, $type = 'rfp') {
    global $user;
    /*     * ***Changed**** */
    $cmpNid = $_SESSION['company'];
    $NodeCmpNid = _get_company_nid_by_group_content($rfpNode);
		
    if (isset($user->roles[3]) || isset($user->roles[6]) || ($rfpNode->uid == $user->uid && $cmpNid == $NodeCmpNid)) {
        return FALSE;
    }
    if (isset($rfpNode->field_public) && isset($rfpNode->field_public['und']) && $rfpNode->field_public['und'][0]['value'] == 1) {

        return FALSE;
    }

    if (isset($rfpNode->field_project_public) && isset($rfpNode->field_project_public['und']) && $rfpNode->field_project_public['und'][0]['value'] == 1) {
        return FALSE;
    }
    return !is_rfp_invited_company($rfpNode->nid, $type);
}

function for_proposal_is_project_rfps_accessible($rfpNode, $type = 'rfp') {
    global $user;
    // die;
    /*if ($rfpNode->uid != $user->uid) {
        return FALSE;
    }*/
		if($rfpNode->status == 0){
			return TRUE;
		}
    if (isset($rfpNode->field_public) && isset($rfpNode->field_public['und']) && $rfpNode->field_public['und'][0]['value'] == 1) {

        return FALSE;
    }

    if (isset($rfpNode->field_project_public) && isset($rfpNode->field_project_public['und']) && $rfpNode->field_project_public['und'][0]['value'] == 1) {
        return FALSE;
    }

    //$bool =   (is_rfp_invited_company($rfpNode->nid))?'YES':'No';
    //drupal_set_message($rfpNode->nid .'====>'.$bool);
    return !is_rfp_invited_company($rfpNode->nid, $type);
}

function is_project_invite_accessible($rfpNode) {
    global $user;
    if (isset($user->roles[3]) || isset($user->roles[6])) {
        return TRUE;
    }
    if (isset($rfpNode->field_project_public['und']) && $rfpNode->field_project_public['und'][0]['value'] == 1) {
        return TRUE;
    }
    //$bool =  (is_rfp_invited_company($rfpNode->nid))?'YES':'No';
    //drupal_set_message($rfpNode->nid .'====>'.$bool);
    return is_rfp_invited_company($rfpNode->nid, 'project');
}

function _get_current_company_users($cmpUid = '') {
    global $user;
    global $company;
    $currUser = $user;
    if ($cmpUid != $user->uid) {
        $currUser = user_load($cmpUid);
    } else {
        $companyUsers = og_get_group_members_properties($company, array(), 'members__' . OG_STATE_ACTIVE, 'node');
        return $companyUsers;
    }
    $companyUsers = array();
    $user_groups = og_get_groups_by_user($currUser, 'node');
    if (is_array($user_groups) && count($user_groups) > 0) {
        $companyNids = array_values($user_groups);
        $companyNode = node_load($companyNids[0]);
        $companyUsers = og_get_group_members_properties($companyNode, array(), 'members__' . OG_STATE_ACTIVE, 'node');
    }
    return $companyUsers;
}

function _get_current_company_users_by_roles($cmpUid = '', $role = 3) {
    $company_user_list = _get_current_company_users($cmpUid);
    $user_by_role = array();
    foreach ($company_user_list as $k => $v) {
        $acc = user_load($v);
        if (in_array($role, array_keys($acc->roles))) {
            $user_by_role[] = $v;
        }
    }
    return $user_by_role;
}

function _get_user_company_nid($cmpUid = '') {
    global $user;
    global $company;
    $currUser = $user;
    if ($cmpUid) {
        $currUser = user_load($cmpUid);
    } else { // add else condition for existing user 
        return $company->nid;
    }
    $user_groups = og_get_groups_by_user($currUser, 'node');
    if (is_array($user_groups) && count($user_groups) > 0) {
        $companyNids = array_values($user_groups);
        return $companyNids[0];
    }
    return '';
}

function remove_invited_company_callback($node, $deleteItemId) {
    $return = array('msg' => 0);
    if ($deleteItemId && isset($node)) {
        if (isset($node->field_rfp_invite_comapnies['und']) && !empty($node->field_rfp_invite_comapnies['und'])) {
            foreach ($node->field_rfp_invite_comapnies['und'] as $delta => $item) {
                if ($item['value'] == $deleteItemId) {
                    unset($node->field_rfp_invite_comapnies['und'][$delta]);
                    $node->field_rfp_invite_comapnies['und'] = array_values($node->field_rfp_invite_comapnies['und']);
                    node_save($node);
                    entity_delete_multiple('field_collection_item', $deleteItemId);
                    $return = array('msg' => 1);
                    break;
                }
            }
        }
        if (db_table_exists('m6connect_rfp_invited_award')) {
            $awardedFC = db_update('m6connect_rfp_invited_award')->fields(array('status' => 0))->condition('entity_nid', $node->nid, '=')->condition('field_collection_item_id', $deleteItemId, '=')->execute();
        }
    }
    drupal_json_output($return);
    exit(0);
}

function m6connect_rfp_node_access($node, $op, $account) {
    global $user;
	
    if (is_object($node) && $node->type == 'rfp' && in_array($op, array('view'))) {
		if(!user_is_logged_in()){
		  return NODE_ACCESS_DENY;
		}
        $collbaratedUids = m6connect_projects_uids_from_list($node);
        $NodeCmpNid = _get_company_nid_by_group_content($node);
        $cmpNid = $_SESSION['company'];
        if (in_array($op, array('view'))) {
            if (!user_is_logged_in()) {
                return NODE_ACCESS_DENY;
            }
            $cmpcall = (in_array($user->uid, _get_company_users_by_group_content($node)) && $cmpNid == $NodeCmpNid);

            if (isset($user->roles[3]) || isset($user->roles[6]) || $cmpcall || in_array($user->uid, $collbaratedUids)) {
                if ($node->status == 1) {
                    return NODE_ACCESS_ALLOW;
                } else if (isset($user->roles[3]) || isset($user->roles[6]) || $user->uid == $node->uid) {
                    return NODE_ACCESS_ALLOW;
                }
            }
            if (!is_project_rfps_accessible($node)) {
                if ($node->status == 1) {
                    return NODE_ACCESS_ALLOW;
                }
            }
            return NODE_ACCESS_DENY;
        }
        if (in_array($op, array('update'))) {
            if ((in_array($user->uid, $collbaratedUids)) || ($node->uid == $account->uid && $cmpNid == $NodeCmpNid)) {
                return NODE_ACCESS_ALLOW;
            }
            return NODE_ACCESS_DENY;
        }
    }
    return NODE_ACCESS_IGNORE;
}

function _generate_company_node_view_by_ajax($nid) {
    global $base_url;
    //module_load_include($type='inc', $module='bookmarkorganizer', $name = 'bookmarkorganizer');
    //$item = bookmarkorganizer_get_item($folderId);
    $node = node_load($nid);
    $node_view = node_view($node);
    $rendered_node = drupal_render($node_view);

    drupal_json_output(array(
        'html' => $rendered_node,
        'replacewith' => '#cust-company-listings',
        'filterreplacewith' => '.company-select-filter-list',
        'filterHtml' => '',
    ));
}

function is_rfp_bidding_flagged($rfpNid, $type = 'rfp') {
    $flagObj = flag_get_flag('rfps_bidding');
    if ($flagObj->is_flagged($rfpNid)) {
        return TRUE;
    } else {
        return FALSE;
    }
}

function m6connect_rfp_user_insert(&$edit, $account, $category) { //pre('insert');pre($edit);pre($account,1);
    if (isset($account->field_user_company) && isset($account->field_user_company['und']) && !empty($account->field_user_company['und'][0]['target_id'])) {
        $param = array();
        $to = 'support@m6connect.com';
        $mailkey = 'admin_mail___user_request_join_company';
        $params = _get_mail_variables($mailkey, $type = 'admin', $account, $other = array('company_nid' => $account->field_user_company['und'][0]['target_id']));
        $return = drupal_mail($params['module'], $params['key'], $to, $params['language'], $params);
        $params['bcc'] = '';
    }
}

function send_notification_rfp_project_update($node) {
    // Get form
    $form = drupal_get_form('node_update_dialog_open_form', $node);
    // Render form
    $output = drupal_render($form);
    $ajax_action_submit = url("send-notification-update/ajax/" . $node->nid);
    // Send to javascript
    $json = array('html' => $output, 'data' => $form, 'path' => $ajax_action_submit);
    drupal_json_output($json);
    drupal_exit();
}

function node_update_dialog_open_form($form, &$form_state, $node) {
    $form['markup'] = array(
        '#markup' => '<div class="text-center"><strong>Would you like to send a notification of this update to the invited companies?</strong></div>'
    );
    /* $form['choose-notification-op'] = array(
      '#type' => 'radios',
      '#title' => 'Choose Option',
      '#options' => array('yes'=>'Yes', 'no'=> 'No'),
      '#attributes' => array('id'=> array('choose-send-notification')),
      ); */
    $form['message'] = array(
        '#title' => 'Message',
        '#type' => 'textarea',
        '#rows' => 3,
        '#required' => TRUE,
        '#prefix' => '<div class="choose-notification-message">',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('notification-message-text')),
            /* '#states' => array(
              'visible' => array(':input[name="choose-notification-op"]'=>array('value'=> 'yes' ))
              ), */
            //style="display:none;"
    );
    $form['node-nid'] = array(
        '#type' => 'hidden',
        '#value' => $node->nid,
    );
    $form['node-type'] = array(
        '#type' => 'hidden',
        '#value' => $node->type,
    );
    /* $form['button'] = array(
      '#type' => 'button',
      '#value' => t('Send'),
      '#attributes' => array('id' => 'send-notification-button'),
      '#states' => array(
      'visible' => array(':input[name="choose-notification-op"]'=>array('value'=> 'yes' ))
      ),
      );

      $form['cancel'] = array(
      '#type' => 'markup',
      '#markup' => l(t('Cancel'), 'javascript:void(0);', array('external'=> TRUE,'attributes' => array('id' => 'cancelButtonClass'))),
      ); */
    $form['#attributes'] = array('class' => 'send-notification-invited-companies-form');
    return $form;
}

function send_notification_rfp_project_update_ajax_submit($node) {
  global $base_url, $base_path, $user;
  $values = $_REQUEST;
  parse_str($values['values'], $output);
  $nodePath = drupal_lookup_path('alias', 'node/' . $node->nid);
  $nodePath = $base_url . $base_path . $nodePath;
  $companyPath = '';
  $NodeCompTitle = '';
  if ($NodeCompNid && is_numeric($NodeCompNid)) {
	  $NodeCompTitle = _get_title_of_node($NodeCompNid);
	  $companyPath = drupal_lookup_path('alias', 'node/' . $NodeCompNid);
	  $companyPath = $base_url . $base_path . $companyPath;
  }
  $replace = array(
	'[SIGNUP_LINK]' => '<a href="' . $base_url . $base_path . 'user/register">sign up</a>',
	'[COMPANY_LINK]' => '<a href="' . $companyPath . '">' . $NodeCompTitle . '</a>',
	'[UPDATE_MESSAGE]' => $output['message'],
	'[NODE_NAME]' => $node->title,
	'[NODE_LINK]' => '<a href="' . $nodePath . '">' . $node->title . '</a>',
  );
  
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.entity_id=n.nid');
  $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
  $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
  $query->leftJoin('m6connect_og_membership_email', 'ome', 'ome.entity_id = rcne.field_rfp_company_nid_email_value AND (FIND_IN_SET(ome.user_uid,rcimu.field_co_invite_manager_uid_value)>0)');
  $query->leftjoin('realname','rome','rome.uid=ome.user_uid');
  $query->leftJoin('m6connect_og_membership_email', 'emome', 'LOWER(TRIM(emome.company_email)) = LOWER(TRIM(rcne.field_rfp_company_nid_email_value))');
  $query->leftjoin('realname','remome','remome.uid=emome.user_uid');
  $query->distinct();
  $query->fields('n',array('type'));
  $query->fields('ric',array('field_rfp_invite_comapnies_value'));
  $query->fields('rcne',array('field_rfp_company_nid_email_value'));
  $query->fields('rcimu',array('field_co_invite_manager_uid_value'));
  $query->addExpression('IFNULL(ome.user_uid,emome.user_uid)','org_user_uid');
  $query->addExpression('IFNULL(LOWER(ome.company_email),IFNULL(LOWER(emome.company_email),LOWER(TRIM(rcne.field_rfp_company_nid_email_value))))','org_company_email');
  $query->addExpression('IFNULL(rome.realname,IFNULL(remome.realname,TRIM(rcne.field_rfp_company_nid_email_value)))','org_company_realname');
  $query->isNotNull('rcne.field_rfp_company_nid_email_value');
  $query->condition('n.type',array('rfp','project'),'IN');
  $query->condition('n.nid',$node->nid);
  $query->orderBy('ric.field_rfp_invite_comapnies_value');
  $result = $query->execute()->fetchAll();
  //pre($result,1);
  $insertFields = array();
  if($result && !empty($result)){
	$resultChunk = array_chunk ( $result , 99 );
	foreach($resultChunk as $index => $chunk){
	  $insertQuery = db_insert('invite_users_rfp_project')->fields(array('bundle', 'entity_id', 'invited_by','emails','fc_item_id','invited_timestamp','send_mail_timestamp','Status'));
	  foreach($chunk as $delta => $dataObj){
	    $insertData= array('replace'=>$replace,'dataobj'=>(array)$dataObj);
		$insert = array(
		  'bundle'=>'rfp_project_update',
		  'entity_id' => $node->nid,
		  'invited_by' => $node->uid,
		  'emails' => serialize($insertData),
		  'fc_item_id' =>NULL,
		  'invited_timestamp' => time(),
		  'send_mail_timestamp' =>NULL,
		  'Status' =>0,
	    );
	    $insertQuery->values($insert);
	  }
	  $insertQuery->execute();
	}
  }
  drupal_exit(0);	
}

function send_notification_rfp_project_update_ajax_submit2($node) {
    global $base_url, $base_path, $user;
    $m6connect_notification_table_exist = db_table_exists('m6connect_notification');
    $values = $_REQUEST;
    parse_str($values['values'], $output);
    $nodePath = drupal_lookup_path('alias', 'node/' . $node->nid);
    $nodePath = $base_url . $base_path . $nodePath;
    /*     * ***Changed**** */
    //$NodeCompNid = _get_user_company_nid($node->uid);
	
	$mailKey = ($node->type == 'rfp') ? 'rfp_mail___invite_user_rfp_updated' : 'project_mail___invite_user_project_updated';
    $paramsVals = _get_mail_variables($mailKey, $type = $node->type, $node, $other = array('update_message' => $output['message']));
	
    $NodeCompNid = _get_company_nid_by_group_content($node);
    $companyPath = '';
    $NodeCompTitle = '';
    if ($NodeCompNid && is_numeric($NodeCompNid)) {
        $NodeCompTitle = _get_title_of_node($NodeCompNid);
        $companyPath = drupal_lookup_path('alias', 'node/' . $NodeCompNid);
        $companyPath = $base_url . $base_path . $companyPath;
    }
    $return = array();
    $to = array();


    $mail_message = array(
        'rfp' => 'Hello [RFP:ReceiverName],<br/>An update has been made to the [NODE_NAME] RFP details in the M6Connect system. Please see the message below.<br/><br/><strong>Update Message:</strong> [UPDATE_MESSAGE]<br/><br/>Click the link below to view the updated RFP.<br/>[NODE_LINK]<br/><br/>The purpose of this Request for Proposal (RFP) is to solicit proposals from various candidate organizations, conduct a fair and extensive evaluation based on criteria listed herein, and select the candidate(s) who best meet our needs. If you are not an M6Connect user, you can [SIGNUP_LINK] for free.<br/><br/>Sincerely,<br/>[COMPANY_LINK]',
        'project' => 'Hello,<br/>An update has been made to the [NODE_NAME] Project details in the M6Connect system. Please see the message below.<br/><br/><strong>Update Message:</strong> [UPDATE_MESSAGE]<br/><br/>Click the link below to view the updated RFP.<br/>[NODE_LINK]<br/><br/>Sincerely,<br/>[COMPANY_LINK]',
    );

    $replace = array(
        '[SIGNUP_LINK]' => '<a href="' . $base_url . $base_path . 'user/register">sign up</a>',
        '[COMPANY_LINK]' => '<a href="' . $companyPath . '">' . $NodeCompTitle . '</a>',
        '[UPDATE_MESSAGE]' => $output['message'],
        '[NODE_NAME]' => $node->title,
        '[NODE_LINK]' => '<a href="' . $nodePath . '">' . $node->title . '</a>',
    );



    if (isset($node->field_rfp_invite_comapnies['und']) && count($node->field_rfp_invite_comapnies['und']) > 0) {
        foreach ($node->field_rfp_invite_comapnies['und'] as $delta => $item) {
            $fieldCollection = field_collection_item_load($item['value']);
            if ($fieldCollection && is_object($fieldCollection)) {
                if (isset($fieldCollection->field_rfp_company_nid_email['und'])) {
                    if (empty($fieldCollection->field_rfp_company_nid_email['und'][0]['value'])) {
                        continue;
                    }
                    $invitedUserOrComapany = $fieldCollection->field_rfp_company_nid_email['und'][0]['value'];
                    $invitedCompanyMembers = (isset($fieldCollection->field_co_invite_manager_uid['und']) && !empty($fieldCollection->field_co_invite_manager_uid['und'][0]['value'])) ? $fieldCollection->field_co_invite_manager_uid['und'][0]['value'] : '';
                    //$return['field_collection'][] = $fieldCollection;
                    $Companytitle = '';
                    $inviteUser = '';
                    if (is_numeric($invitedUserOrComapany)) {
                        $cmpNode = node_load($invitedUserOrComapany);
                        $inviteUser = user_load($cmpNode->uid);
						//$to[] = $inviteUser->realname;
                        //$to[] = $inviteUser->mail;
                    } else {
                        $to[] = $invitedUserOrComapany;
						$query = db_select('m6connect_og_membership_email','ome');
						$query->leftjoin('realname','r','r.uid=ome.user_uid');
						$query->fields('r', array('realname'));
						$query->condition('LOWER(ome.company_email)',strtolower($invitedUserOrComapany),'=');
						$userName = $query->execute()->fetchField();
						$userName = !empty($userName)?$userName:$invitedUserOrComapany;
						$params = $paramsVals;
						$replace = array('[RFP:ForwordLink]' => '','[RFP:ReceiverName]'=>$userName);
						$params['body'] = str_replace(array_keys($replace), array_values($replace), $params['body']);
						drupal_mail($params['module'], $params['key'], $invitedUserOrComapany, $params['language'], $params);
                    }
                    if ($invitedCompanyMembers) {
                        $invitedCompanyMembers = explode(',', $invitedCompanyMembers);
                        foreach ($invitedCompanyMembers as $index => $userUid) {
                            $inviteUser = user_load($userUid);
                            if (!in_array($inviteUser->mail, $to)) {
                                $to[] = $inviteUser->mail;
								$params = $paramsVals;
								$replace = array('[RFP:ForwordLink]' => '','[RFP:ReceiverName]'=>$inviteUser->realname);
								$params['body'] = str_replace(array_keys($replace), array_values($replace), $params['body']);
								drupal_mail($params['module'], $params['key'], $inviteUser->mail, $params['language'], $params);
                            }
                        }
                    }
                }
            }
        }
    }
    if (!empty($to)) {
        //$mailKey = ($node->type == 'rfp') ? 'rfp_mail___invite_user_rfp_updated' : 'project_mail___invite_user_project_updated';
        //$params = _get_mail_variables($mailKey, $type = $node->type, $node, $other = array('update_message' => $output['message']));
        //$replace = array('[RFP:InvitedCompanyOwnerName]' => $companyOwner,'[RFP:ForwordLink]'=>$rfpForwardLink);
        //$replace = array('[RFP:ForwordLink]' => '');
        //$params['body'] = str_replace(array_keys($replace), array_values($replace), $params['body']);
        //$return['ret_message'][] = drupal_mail($params['module'], $params['key'], implode(',', $to), $params['language'], $params);
        //$params['bcc'] = '';
        //$return['to'] = implode(',',$to);
    }
    //drupal_json_output($return);

    /*     * **********************noti************** */

    $sent_notification_datas = _get_invited_user_data_by_entity_id($node->nid);



    $arr = array();
    if ($m6connect_notification_table_exist) {
        foreach ($sent_notification_datas as $sent_notification_data) {
            if (is_numeric($sent_notification_data->field_rfp_company_nid_email_value)) {
                if (!empty($sent_notification_data->field_co_invite_manager_uid_value)) {
                    $arr[] = $sent_notification_data->field_co_invite_manager_uid_value;
                    $addcomma_arr = implode(',', $arr);
                    $arr_datas = explode(',', $addcomma_arr);
                    foreach ($arr_datas as $arr_data) {
                        $m6connect_notification = array(
                            'type' => 'rfp',
                            'event' => 'update',
                            'entity_id' => $node->nid,
                            'company_nid' => $sent_notification_data->field_rfp_company_nid_email_value,
                            'message' => $output['message'],
                            'request_from' => $user->uid,
                            'request_to' => $arr_data,
                            'status' => 1,
                            'timestamp' => time(),
                        );
                        entity_save('m6connect_notification', (object) $m6connect_notification);
                    }
                }
            } else {
                $userOject = user_load_by_mail($sent_notification_data->field_rfp_company_nid_email_value);
                $individualCmpNid = _get_individual_company_by_uid($userOject->uid);

                $m6connect_notification = array(
                    'type' => 'rfp',
                    'event' => 'update',
                    'entity_id' => $node->nid,
                    'company_nid' => $individualCmpNid,
                    'message' => $output['message'],
                    'request_from' => $user->uid,
                    'request_to' => $userOject->uid,
                    'status' => 1,
                    'timestamp' => time(),
                );
                entity_save('m6connect_notification', (object) $m6connect_notification);
            }
        }
    }





    /*     * **********************noti************** */




    drupal_exit();
}

function _get_invited_user_data_by_entity_id($entity_id) {

    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.entity_id=n.nid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->condition('n.nid', $entity_id, '=');
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
    $result = $query->execute()->fetchAll();

    return $result;
}

function clbrte_remove_invited_company_callback($node, $deleteItemId) {
    $return = array('msg' => 0);
    if ($deleteItemId && isset($node)) {
        if (isset($node->field_project_invite_comapnies['und']) && !empty($node->field_project_invite_comapnies['und'])) {
            foreach ($node->field_project_invite_comapnies['und'] as $delta => $item) {

                $fc = field_collection_field_get_entity($item);
                $collectionWrapper = entity_metadata_wrapper('field_collection_item', $fc);
                $return = array($fc->field_comapny_manager['und'][0]['value']);
                $memArr = explode(',', $fc->field_comapny_manager['und'][0]['value']);
                foreach ($memArr as $k => $vel) {
                    if ($vel == $deleteItemId) {
                        unset($memArr[$k]);
                    }
                }
                if (count($memArr) > 0) {
                   $collectionWrapper->field_comapny_manager->set(implode(',', $memArr));
                } else {
                    unset($node->field_project_invite_comapnies['und'][$delta]);
                    $node->field_project_invite_comapnies['und'] = array_values($node->field_project_invite_comapnies['und']);
                    node_save($node);
                    entity_delete_multiple('field_collection_item', $deleteItemId);
                    $return = array('msg' => 1);
                    break;
                }
                $collectionWrapper->save(TRUE);
                $return = array('msg' => 1);

//                if ($item['value'] == $deleteItemId) {
//                    unset($node->field_project_invite_comapnies['und'][$delta]);
//                    $node->field_project_invite_comapnies['und'] = array_values($node->field_project_invite_comapnies['und']);
//                    node_save($node);
//                    entity_delete_multiple('field_collection_item', $deleteItemId);
//                    $return = array('msg' => 1);
//                    break;
//                }
            }
        }
    }
    drupal_json_output($return);
    exit(0);
}

/*
 * This function checked the rfp passed due date
 */

function is_rfp_expired($rfpNid, $type = 'rfp') {
    $query = db_select('node', 'n');
    //$query->Join('field_data_field_due', 'd', 'd.entity_id=n.nid');
    $query->Join('field_data_field_extend_due_date', 'd', 'd.entity_id=n.nid');
    //$query->fields('d', array('field_due_value'))
    $query->fields('d', array('field_extend_due_date_value'))
            ->condition('n.type', $type, '=')
            ->condition('n.nid', $rfpNid, '=');
    $result = $query->execute()->fetchCol();
    if ($result && is_array($result) && !empty($result) && count($result) > 0) { //pre($result,1);
        foreach ($result as $k => $v) {
            $due = $v;
        }
        $duestamp = strtotime($due);
        $ctstamp = time();
        if ($duestamp < $ctstamp) {
            return TRUE;
        } else {
            return FALSE;
        }
    }
    return FALSE;
}

/*
 * This function check that RFP is public or not
 */

function is_rfp_public($nid) {
    $rfpNode = node_load($nid);
    if (isset($rfpNode->field_public['und']) && $rfpNode->field_public['und'][0]['value'] == 1) {
        return TRUE;
    }
    return FALSE;
}

/*
 * This function check that RFP is published or not
 */

function is_node_published($nid) {
    $rfpNode = node_load($nid);
    if ($rfpNode->status == 1) {
        return TRUE;
    }
    return FALSE;
}

function _is_rfp_project_already_invited_by_email($nodeNid, $companyMail) {
    $companyMail = strtolower($companyMail);
    $query = db_select('field_data_field_rfp_invite_comapnies', 'ric');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->condition('ric.entity_id', $nodeNid, '=');
    $query->where('(LOWER(rcne.field_rfp_company_nid_email_value)=:companyMail)', array(':companyMail' => $companyMail));
    return $query->execute()->rowCount();
}

function _cron_invite_users_rfp_project() {
  drupal_page_is_cacheable(FALSE);
    global $base_url, $base_path;
    $m6connect_common_module_exist = module_exists('m6connect_common');
    $m6connect_notification_table_exist = db_table_exists('m6connect_notification');
    $invitedCompanies = array();
    $return = array();
    $mailkeys = array('rfp' => 'rfp_mail___user_invite_rfp', 'project' => 'project_mail___user_invite_project');
    $result = db_select('invite_users_rfp_project', 'iurp')
                    ->fields('iurp')->condition('iurp.Status', 0)->range(0, 20)->execute()->fetchAll();
    if ($result && !empty($result)) {
        foreach ($result as $delta => $invitedObj) {
            $arg1 = $invitedObj->entity_id;
            $currentNode = node_load($invitedObj->entity_id);
            $mailSendBy = user_load($invitedObj->invited_by);
            $m6connect_notification = array('type' => $currentNode->type, 'entity_id' => $currentNode->nid, 'message' => NULL, 'request_from' => $invitedObj->invited_by, 'status' => 1, 'timestamp' => time());
            if (in_array($invitedObj->bundle, array('rfp', 'project'))) {
              //pre('in rfp project');
                $invitedCompanies = array();
                $forwordbutton = '<input type="button" value="Forward RFP" style="color: #FFF; font-size:14px; background: #337ab7; padding: 6px 15px; cursor: pointer; text-shadow: none; box-shadow:none; border: 1px solid transparent; line-height: normal; display:inline-block; vertical-align: top;" />';
                $forwordLink = $base_url . $base_path . 'rfp-forward-by-mail/' . $currentNode->nid;
                $mailAttr = _get_mail_variables($mailkeys[$currentNode->type], $currentNode->type, $currentNode, $other = array());
                $invitedCompanies = unserialize($invitedObj->emails);
                if ($invitedCompanies && !empty($invitedCompanies)) {
                    $NoOfInvitation = 0;
                    foreach ($invitedCompanies as $nidOrEmail => $managerIDs) {
                        $rfpForwardLink = $companyOwner = '';
                        $to = array();
                        $fieldCollectionId = '';
                        $nidOrEmail = trim($nidOrEmail);
                        if (empty($nidOrEmail)) {
                            continue;
                        }
                        //pre($nidOrEmail);
                        //      Start Insert Into Field Collection      //
                        // Updation for invite another user of company
                        if (is_numeric($nidOrEmail)) {
                            $fcolnid = get_fieldCollectionId_by_entityid($arg1, $nidOrEmail); 
                            if (!empty($fcolnid)) {
                                $alreadyinvited = get_inviteduser_by_fielccollectionid($fcolnid); 
                                $updateduids = $alreadyinvited . ',' . trim($managerIDs);
                                $fc_item = field_collection_item_load($fcolnid);
                                $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
                                $fc_wrapper->field_co_invite_manager_uid->set(trim($updateduids));
                                $fc_wrapper->save();

                                $fieldCollectionId = $fc_wrapper->getIdentifier();                               
                            } else {
                
                                $fc_item = entity_create('field_collection_item', array('field_name' => 'field_rfp_invite_comapnies'));
                                $fc_item->setHostEntity('node', $currentNode);
                                $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
                                $fc_wrapper->field_rfp_company_nid_email->set($nidOrEmail);
                                $fc_wrapper->field_rfp_invite_status->set(0);
                                if (!empty($managerIDs)) {
                                    $fc_wrapper->field_co_invite_manager_uid->set(trim($managerIDs));
                                }
                                $fc_wrapper->save(TRUE);
                                $fieldCollectionId = $fc_wrapper->getIdentifier();                                
                            }
                        } else {
                            if (_is_rfp_project_already_invited_by_email($currentNode->nid, $nidOrEmail) == 0) {
                                $fc_item = entity_create('field_collection_item', array('field_name' => 'field_rfp_invite_comapnies'));
                                $fc_item->setHostEntity('node', $currentNode);
                                $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
                                $fc_wrapper->field_rfp_company_nid_email->set($nidOrEmail);
                                $fc_wrapper->field_rfp_invite_status->set(0);
                                if (!empty($managerIDs)) {
                                    $fc_wrapper->field_co_invite_manager_uid->set(trim($managerIDs));
                                }
                                $fc_wrapper->save(TRUE);
                                $fieldCollectionId = $fc_wrapper->getIdentifier();                
                            }
                        }
                        //      End Insert Into Field Collection      //
                        //      Start Insert into Field collection if RFP associated with any project     //
                        if ($currentNode->type == 'rfp') {
                            if (isset($currentNode->field_project['und'][0]) && !empty($currentNode->field_project['und'][0]['target_id'])) {
                                $Related_Proj_Nid = $currentNode->field_project['und'][0]['target_id'];
                                $Related_Proj_Node = node_load($Related_Proj_Nid);
                                if (is_numeric($nidOrEmail)) {
                                    $pfcolnid = get_fieldCollectionId_by_entityid($Related_Proj_Nid, $nidOrEmail); 
                                    if (!empty($pfcolnid)) {
                                        $alreadyinvited = get_inviteduser_by_fielccollectionid($pfcolnid); 
                                        $updateduids = $alreadyinvited . ',' . trim($managerIDs);
                                        $fc_item = field_collection_item_load($pfcolnid);
                                        $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
                                        $fc_wrapper->field_co_invite_manager_uid->set(trim($updateduids));
                                        $fc_wrapper->save();                                        
                                    } else {
                                        $fcolnid = get_fieldCollectionId_by_entityid($arg1, $nidOrEmail);
                                        $updateduids = '';
                                        if (!empty($fcolnid)) {
                                            $alreadyinvited = get_inviteduser_by_fielccollectionid($fcolnid); 
                                            $updateduids = $alreadyinvited;
                                        } else {
                                            $updateduids = trim($managerIDs);
                                        }

                                        $fc_item = entity_create('field_collection_item', array('field_name' => 'field_rfp_invite_comapnies'));
                                        $fc_item->setHostEntity('node', $Related_Proj_Node);
                                        $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
                                        $fc_wrapper->field_rfp_company_nid_email->set($nidOrEmail);
                                        $fc_wrapper->field_rfp_invite_status->set(0);
                                        if (!empty($managerIDs)) {                                           
                                            $fc_wrapper->field_co_invite_manager_uid->set(trim($updateduids));
                                        }
                                        $fc_wrapper->save(TRUE);                                        
                                    }
                                } else {
                                    if (_is_rfp_project_already_invited_by_email($Related_Proj_Node->nid, $nidOrEmail) == 0) {
                                        $fc_item = entity_create('field_collection_item', array('field_name' => 'field_rfp_invite_comapnies'));
                                        $fc_item->setHostEntity('node', $Related_Proj_Node);
                                        $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
                                        $fc_wrapper->field_rfp_company_nid_email->set($nidOrEmail);
                                        $fc_wrapper->field_rfp_invite_status->set(0);
                                        if (!empty($managerIDs)) {
                                            $fc_wrapper->field_co_invite_manager_uid->set(trim($managerIDs));
                                        }
                                        $fc_wrapper->save(TRUE);
                                    }
                                }
                            } 
                        }
                        //      End Insert into Field collection if RFP associated with any project     //
                        //      Start Sending Email to Invited users      //
                        if (is_numeric($nidOrEmail)) {
                            $companyNode = node_load($nidOrEmail);
                            $companyOwner = $companyNode->field_owner_name['und'][0]['value'];
                            $cmpUsrObj = user_load($companyNode->uid);
              $companyOwnerFirstName = (isset($cmpUsrObj)?$cmpUsrObj->field_first_name['und'][0]['value']:'');
                            $allowedForwordResult = array_intersect(array_keys($cmpUsrObj->roles), array(7, 8, 9));
                            if (!empty($allowedForwordResult)) {
                                $rfpForwardLink = l($forwordbutton, $forwordLink, array('external' => TRUE, 'html' => TRUE));
                            }
                            
                            if (!empty($managerIDs)) {
                                $cmpMngr = explode(',', $managerIDs);
                                foreach ($cmpMngr as $cmpMngrindex => $cmpMngrUid) {                                    
                                    $cmpUserObj = user_load($cmpMngrUid);
                                    $to[] = $cmpUserObj->mail;
                                    $NoOfInvitation++;
                                    $notification = $m6connect_notification;
                                    $notification['event'] = 'invite';
                                    $notification['request_to'] = $cmpUserObj->uid;
                                    $notification['company_nid'] = $nidOrEmail;
                                    if ($m6connect_common_module_exist && $m6connect_notification_table_exist) {
                                       entity_save('m6connect_notification', (object) $notification);              
                                    }                                   
                                }
                            }
                        } else {
                            $to[] = $nidOrEmail;
                            $NoOfInvitation++;
                            $companyOwner = $nidOrEmail;
                            $notification = $m6connect_notification;
                            $notification['event'] = 'invite';
                            $notification['request_to'] = $nidOrEmail;
                            $notification['company_nid'] = 0;
                            $emailuser = user_load_by_mail($nidOrEmail);
                            if ($emailuser) {
                                $notification['request_to'] = $emailuser->uid;
                                $companyOwner = $emailuser->realname;
                $companyOwnerFirstName = (isset($emailuser)?$emailuser->field_first_name['und'][0]['value']:'');
                                $notification['company_nid'] = _get_individual_company_by_uid($emailuser->uid);
                                $allowedForwordResult = array_intersect(array_keys($emailuser->roles), array(7, 8, 9));
                                if (!empty($allowedForwordResult)) {
                                    $rfpForwardLink = l($forwordbutton, $forwordLink, array('external' => TRUE, 'html' => TRUE));
                                }
                            }
                            if ($m6connect_common_module_exist && $m6connect_notification_table_exist) {
                                entity_save('m6connect_notification', (object) $notification);
                            }
                        }
                        if (!empty($to)) {
                            $params = $mailAttr;
                            $replace = array(
                                'rfp' => array('[RFP:InvitedCompanyOwnerName]' => $companyOwner, '[RFP:ForwordLink]' => $rfpForwardLink, '[RFP:InvitedCompanyOwnerFirstName]' => trim((isset($companyOwnerFirstName)?$companyOwnerFirstName:'Hello'))),
                                'project' => array('[PROJECT:InvitedCompanyOwnerName]' => $companyOwner),
                            );            
                            $params['metadata'] = array(
                                'invite_id' => $invitedObj->id,
                                'entity_id' => $invitedObj->entity_id,
                                'request_from' => $invitedObj->invited_by,
                                'field_collection' => $fieldCollectionId,
                            );
                            $params['body'] = str_replace(array_keys($replace[$currentNode->type]), array_values($replace[$currentNode->type]), $params['body']);
                            $mail = drupal_mail($params['module'], $params['key'], implode(',', $to), $params['language'], $params, $mailSendBy->mail);
                            $return[] = array('invitedCompanies' => $invitedCompanies, 'param' => $params, 'sent' => $mail);
                        }
                        //         End Sending Email to Invited users       //
                    }
                }
                db_update('invite_users_rfp_project')->fields(array('send_mail_timestamp' => time(), 'Status' => 1,))->condition('id', $invitedObj->id, '=')->execute();

            } else if ($invitedObj->bundle == 'organization') {
              //pre('in organization');
                $datas = unserialize($invitedObj->emails);
                module_load_include('inc', 'invite', 'includes/invite.admin');
                if (count($datas) > 0) {
                    if (isset($datas['user']) && (int) $datas['user']) {
                        $users = user_load($datas['user']);
                        $invite_data = save_multiple_invites($users, $datas['site_name'], $datas['base_url'], $datas['expiry'], $datas['email'], $datas['special_message']);
                        send_multiple_invites($users, $invite_data, $datas['email']);
                        db_update('invite_users_rfp_project')->fields(array('send_mail_timestamp' => time(), 'Status' => 1,))->condition('id', $invitedObj->id, '=')->execute();
                    }
                }

            }else if ($invitedObj->bundle=='rfp_project_update') {
        $node = node_load($invitedObj->entity_id);
        $invitedCompanies = unserialize($invitedObj->emails);
        if(!empty($invitedCompanies)){
        $replace = $invitedCompanies['replace'];
        $dataObj = $invitedCompanies['dataobj'];
        $mailKey = ($node->type == 'rfp') ? 'rfp_mail___invite_user_rfp_updated' : 'project_mail___invite_user_project_updated';
        $params = _get_mail_variables($mailKey, $type = $node->type, $node, $other = array('update_message' => $replace['[UPDATE_MESSAGE]']));
        $replace = array('[RFP:InvitedCompanyOwnerName]' => $dataObj['org_company_realname']);
        $params['body'] = str_replace(array_keys($replace), array_values($replace), $params['body']);
        $ret_message = drupal_mail($params['module'], $params['key'], $dataObj['org_company_email'], $params['language'], $params);
        if(!empty($dataObj['field_rfp_company_nid_email_value']) && is_numeric($dataObj['org_user_uid'])){
          if(is_numeric($dataObj['field_rfp_company_nid_email_value'])){
          $m6connect_notification = array(
            'type' => $node->type,
            'event' => 'update',
            'entity_id' => $node->nid,
            'company_nid' => $dataObj['field_rfp_company_nid_email_value'],
            'message' => $replace['[UPDATE_MESSAGE]'],
            'request_from' => $node->uid,
            'request_to' => $dataObj['org_user_uid'],
            'status' => 1,
            'timestamp' => time(),
          );
          entity_save('m6connect_notification', (object) $m6connect_notification);  
          }else{
          $userDetail = _get_comapny_details_by_og_email($dataObj['org_company_email']);
          if(!empty($userDetail['entity_id'])){
            $m6connect_notification = array(
            'type' => $node->type,
            'event' => 'update',
            'entity_id' => $node->nid,
            'company_nid' => $userDetail['entity_id'],
            'message' => $replace['UPDATE_MESSAGE'],
            'request_from' => $node->uid,
            'request_to' => $dataObj['org_user_uid'],
            'status' => 1,
            'timestamp' => time(),
            );  
          }
          }
        }
        }
        db_update('invite_users_rfp_project')->fields(array('send_mail_timestamp' => time(), 'Status' => 1,))->condition('id', $invitedObj->id, '=')->execute();
      }
        }
    }
    //pre($return,1);
    //drupal_set_message('<pre>'.print_r($return,1).'</pre>');
}

/*
 * Get fieldcollection id by entityid
 */

function get_fieldCollectionId_by_entityid($cnodeid, $compnid) {
    $fcid = '';
    $query = db_select('node', 'n');
    $query->Join('field_data_field_rfp_invite_comapnies', 'ric', 'ric.entity_id=n.nid');
    $query->Join('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->fields('ric', array('field_rfp_invite_comapnies_value'))
            ->condition('n.nid', $cnodeid, '=')
            ->condition('rcne.field_rfp_company_nid_email_value', $compnid, '=');
    $result = $query->execute()->fetchCol();
    if ($result && is_array($result) && !empty($result) && count($result) > 0) {
        foreach ($result as $k => $f) {
            $fcid = $f;
        }
    }
    return $fcid;
}

/*
 * Get Inviteduseruid value by fieldcollection id
 */

function get_inviteduser_by_fielccollectionid($fcolnid) {
    $uids = '';
    $query = db_select('field_data_field_co_invite_manager_uid', 'imu');
    $query->fields('imu', array('field_co_invite_manager_uid_value'))
            ->condition('imu.entity_id', $fcolnid, '=');
    $result = $query->execute()->fetchCol();
    if ($result && is_array($result) && !empty($result) && count($result) > 0) {
        foreach ($result as $k => $f) {
            $uids = $f;
        }
    }
    return $uids;
}

function _get_user_uid_name_mapping($useruids) {
    $return = array();
    if (is_array($useruids) && !empty($useruids)) {
        $query = db_select('users', 'u');
        $query->leftjoin('realname', 'r', 'r.uid=u.uid');
        $query->fields('u', array('uid'));
        $query->fields('r', array('realname'));
        $query->condition('u.uid', array_values($useruids), 'IN');
        $return = $query->execute()->fetchAllKeyed(0, 1);
    }
    return $return;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////Start Bidder Feedback Work/////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function m6connect_rfp_theme() {
    $path = drupal_get_path('modules', 'm6connect_rfp');
    return array(
        'bidding_pakages_invitee_response_form' => array(
            'render element' => 'form',
        ),
        'feedback_table_rows' => array(
            'render element' => 'form',
        ),
		'rfp_proposal_summary_report' => array(
            'variables' => array('data' => array()),
            'template' => $path . '/includes/rfp-proposal-summary-report',
        ),
    );
}

/**
 * Implements hook_entity_info().
 */
function m6connect_rfp_entity_info() {
    $info = array();
    $info['bidder_feedback'] = array(
        'label' => t('Bidder Feedback'),
        'base table' => 'm6connect_rfp_bidder_feedback',
        'fieldable' => TRUE,
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'entity keys' => array(
            'id' => 'bidder_feedback_id',
            'label' => 'name',
        ),
        'bundles' => array(
            'bidder_feedback' => array(
                'label' => t('Bidder Feedback'),
            ),
        ),
    );
//     $info['statuses'] = array(
//        'label' => t('Statuses'),
//        'base table' => 'statuses',
//        'fieldable' => TRUE,
//        'controller class' => 'EntityAPIController',
//        'views controller class' => 'EntityDefaultViewsController',
//        'entity keys' => array(
//            'id' => 'sid',
//            'label' => 'The Status ID',
//        ),
//        'bundles' => array(
//            'statuses' => array(
//                'label' => t('Statuses'),
//            ),
//        ),
//    );
    $info['bidder_feedback_message'] = array(
        'label' => t('Bidder Feedback Message'),
        'base table' => 'm6connect_rfp_bidder_feedback_message',
        'fieldable' => TRUE,
        'controller class' => 'EntityAPIController',
        'entity keys' => array(
            'id' => 'message_id',
            'label' => 'name',
        ),
        'bundles' => array(
            'bidder_feedback_message' => array(
                'label' => t('Bidder Feedback Message'),
            ),
        ),
    );

    $info['bid_packages'] = array(
        'label' => t('Bid Packages'),
        'base table' => 'm6connect_bid_packages',
        'fieldable' => TRUE,
        'controller class' => 'EntityAPIController',
        'entity keys' => array(
            'id' => 'bid_package_id',
            'label' => 'name',
        ),
        'bundles' => array(
            'bid_packages' => array(
                'label' => t('Bid Packages'),
            ),
        ),
    );

    $info['bid_packages_invitee'] = array(
        'label' => t('Bid Packages Invitee'),
        'base table' => 'm6connect_bid_package_invitess',
        'fieldable' => TRUE,
        'controller class' => 'EntityAPIController',
        'entity keys' => array(
            'id' => 'bid_package_invites_id',
            'label' => 'name',
        ),
        'bundles' => array(
            'bid_packages_invitee' => array(
                'label' => t('Bid Packages Invitee'),
            ),
        ),
    );

    $info['bid_packages_interested'] = array(
        'label' => t('Bid Packages Interested'),
        'base table' => 'm6connect_bid_package_invitee_interested',
        'fieldable' => TRUE,
        'controller class' => 'EntityAPIController',
        'entity keys' => array(
            'id' => 'id',
            'label' => 'name',
        ),
        'bundles' => array(
            'bid_packages_interested' => array(
                'label' => t('Bid Packages Interested'),
            ),
        ),
    );

    $info['rfp_invite_awarded'] = array(
        'label' => t('RFP Invite Awarded'),
        'base table' => 'm6connect_rfp_invited_award',
        'fieldable' => TRUE,
        'controller class' => 'EntityAPIController',
        'entity keys' => array(
            'id' => 'id',
            'label' => 'name',
        ),
        'bundles' => array(
            'rfp_invite_awarded' => array(
                'label' => t('RFP Invite Awarded'),
            ),
        ),
    );
    return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function m6connect_rfp_entity_property_info_alter(&$info) {
    $info['bidder_feedback']['properties']['entity_id']['type'] = 'node';
    $info['bidder_feedback']['properties']['user_id']['type'] = 'user';
    $info['bidder_feedback']['properties']['rfp_invite_fc_itemid']['type'] = 'field_collection_item';
    $info['bidder_feedback_message']['properties']['timestamp']['type'] = 'date';
}

/**
 * Implements hook_entity_insert().
 */
function m6connect_rfp_entity_insert($entity, $type) {
    if ($type == 'field_collection_item' && isset($entity->field_name) && $entity->field_name == 'field_rfp_invite_comapnies') {
        $hostEntity = $entity->hostEntity();
        if (db_table_exists('m6connect_rfp_bidder_feedback') && db_table_exists('m6connect_rfp_bidder_feedback_message')) {
            if ($hostEntity->type == 'rfp') {
                $bidder_feedback = array(
                    'entity_id' => $hostEntity->nid,
                    'user_id' => $hostEntity->uid,
                    'rfp_invite_fc_itemid' => $entity->item_id,
                );
                $bidder_feedback = entity_save('bidder_feedback', (object) $bidder_feedback);
            }
        }
    }
}

/**
 * Implements hook_entity_delete().
 */
function m6connect_rfp_entity_delete($entity, $type) {
    if ($type == 'field_collection_item' && isset($entity->field_name) && $entity->field_name == 'field_rfp_invite_comapnies') {
        $hostEntity = $entity->hostEntity();
        if (db_table_exists('m6connect_rfp_bidder_feedback') && db_table_exists('m6connect_rfp_bidder_feedback_message')) {
            if ($hostEntity->type == 'rfp') {
                $query = db_update('m6connect_rfp_bidder_feedback');
                $query->fields(array('status' => 0))
                        ->condition('status', 1, '=')
                        ->condition('entity_id', $hostEntity->nid, '=')
                        ->condition('user_id', $hostEntity->uid, '=')
                        ->condition('rfp_invite_fc_itemid', $entity->item_id, '=')
                        ->execute();
            }
        }
    }
}

/**
 * Implements hook_block_info().
 */
function m6connect_rfp_block_info() {
    $blocks['rfp-bidder-feedback-content'] = array(
        'info' => t('RFP Bidder Feedback tab content'),
    );
    $blocks['rfp-bid-pakage-content'] = array(
        'info' => t('RFP Bid Package tab content'),
    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function m6connect_rfp_block_view($delta = '') {
    global $user;
    $node = node_load(arg(1));
    $collabarated_user = m6connect_projects_uids_from_list($node);
    $block = array();
    $content = '';
    switch ($delta) {
        case 'rfp-bidder-feedback-content':
            //if(isset($user->roles[3]) || isset($user->roles[6]) || ($user->uid == $node->uid) || in_array($user->uid,$collabarated_user)){
            if (($user->uid == $node->uid) || in_array($user->uid, $collabarated_user) || isset($user->roles[3])) {
                $content = rfp_bidder_feedback_content();
            } else if (!in_array($user->uid, $collabarated_user)) {
                $content = rfp_bidder_feedback_bidder_content($node);
            }
            $block['subject'] = t('');
            $block['content'] = $content;
						
            break;
        case 'rfp-bid-pakage-content':
            if (isset($user->roles[3]) || isset($user->roles[6]) || ($user->uid == $node->uid) || in_array($user->uid, $collabarated_user)) {
                $content = drupal_get_form('rfp_add_bid_package_form', arg(1), 'view');
            }
            $block['subject'] = t('');
            $block['content'] = $content;
            break;
    }
    return $block;
}

function rfp_bidder_feedback_bidder_content($node, $inside = '') {
    global $user;
    $bidderUser = 1;
    $html = '';
    if (empty($inside)) {
        $html .='<div class="bidder-tab-heading form-group">Indicate your Intent to Bid by selecting one or more of the indicators below.</div>';
    }
    //$node = node_load(arg(1));
    $bidPackages = get_bid_packages_listing($node->nid);
    if (empty($bidPackages)) {
        $bidPackages = array(0 => '');
    }
    $defaultValue = get_rfp_bidding_flags_status($node->nid, array($user->uid));
    $bidderFeedbackDetail = get_bidder_feedback_id_by_entity_id($node->nid, $user);
    $invitedPackageBy = array();
    if ($bidderFeedbackDetail && isset($bidderFeedbackDetail['rfp_invite_fc_itemid'])) {
        $invitedPackageBy = get_invited_user_bid_package_status($bidderFeedbackDetail['rfp_invite_fc_itemid']);
    }

    $invitedBidderPackage = get_invited_user_bid_package($node->nid);
    $bidderFeedbackId = isset($bidderFeedbackDetail['bidder_feedback_id']) ? $bidderFeedbackDetail['bidder_feedback_id'] : 0;
    $rfp_invite_fc_itemid = isset($bidderFeedbackDetail['rfp_invite_fc_itemid']) ? $bidderFeedbackDetail['rfp_invite_fc_itemid'] : 0;
    foreach ($bidPackages as $package_id => $packageName) {
        $isInvitedPackage = isset($invitedBidderPackage[$package_id]) ? 1 : 0;
        $interestShownByUser = (array_key_exists($package_id, $invitedPackageBy)) ? $invitedPackageBy[$package_id] : 0;
        $defaultBiddingStatus = (isset($defaultValue[$user->uid][$package_id])) ? $defaultValue[$user->uid][$package_id] : '';
        $md_sm_xs = ($inside == '') ? ' col-md-4 col-sm-4 col-xs-12' : ' col-md-12 col-sm-12 col-xs-12';
		$modal_class = ($inside == '') ? 'bid-user-package-status-bidder-modal' : 'bid-user-package-status-bidder-node';
        $titleCalss = $titleStyle = '';
        $packageNamePrint = $packageName;
        if ($isInvitedPackage) {
            //$packageNamePrint .= ' (INVITED)';
            $packageNamePrint .= ($interestShownByUser == 0) ? ' (INVITED)' : ' (Interest Shown)';
            $titleCalss = ' package-colored';
            $titleStyle = 'style="color:#205081;"';
        }
        $html .= '<div id="bid-user-package-status-bidder-' . $package_id . '" class="bid-user-package-status-bidder form-group '.$modal_class.'"><div class="row"><div class="bidding-section-bidder' . $md_sm_xs . '">';
        $html .= '<div class ="bid-package-option-title' . $titleCalss . '" ' . $titleStyle . '><strong>' . $packageNamePrint . '</strong></div>';
        if ($isInvitedPackage || (count($bidPackages)==1 && $package_id==0)) {
            $html .= drupal_render(drupal_get_form('bidder_feedback_forms_for_user', $node->nid, $package_id, $packageName, $defaultBiddingStatus, $isInvitedPackage, $inside));
            $html .= drupal_render(drupal_get_form('rfp_bidder_feedback_message_form', $bidderFeedbackId, $package_id, $bidderUser, $inside));
        } else {
            $html .= drupal_render(drupal_get_form('interested_in_bidding_form', $node->nid, $package_id, $rfp_invite_fc_itemid, $packageName, $defaultBiddingStatus, $bidderFeedbackId, $isInvitedPackage, $bidderUser, $inside));
        }
        $html .= '</div></div></div>';						
    }
    return $html;
}

function get_invited_user_bid_package_status($fcitemId) {
    if (!is_numeric($fcitemId)) {
        return array();
    }
    $query = db_select('m6connect_bid_package_invitess', 'mbpi');
    $query->fields('mbpi', array('bid_package_id', 'interested_by_user'));
    $query->condition('mbpi.rfp_invite_fc_itemid', $fcitemId, '=');
    $result = $query->execute()->fetchAllKeyed(0, 1);
    return $result;
}

function interested_in_bidding_form($form, &$form_state, $entity_id, $package_id, $fc_itemid, $packageName, $defaultBiddingStatus, $bidderFeedbackId, $isInvitedPackage, $bidderUser, $inside) {
    global $user;
    $form['interested_in_bidding'] = array(
        '#type' => 'checkbox',
        '#title' => 'Are you interested in bidding on this package?',
        '#return_value' => $fc_itemid,
        '#default_value' => 0,
        '#ajax' => array(
            'callback' => 'interested_in_bidding_checkbox_callback',
            'event' => 'change',
        )
    );
    $form['package_id'] = array(
        '#type' => 'value',
        '#value' => $package_id,
    );
    $form['entity_id'] = array(
        '#type' => 'value',
        '#value' => $entity_id,
    );
    $form['packageName'] = array(
        '#type' => 'value',
        '#value' => $packageName,
    );
    $form['defaultBiddingStatus'] = array(
        '#type' => 'value',
        '#value' => $defaultBiddingStatus,
    );
    $form['bidderFeedbackId'] = array(
        '#type' => 'value',
        '#value' => $bidderFeedbackId,
    );
    $form['isInvitedPackage'] = array(
        '#type' => 'value',
        '#value' => $isInvitedPackage,
    );
    $form['bidderUser'] = array(
        '#type' => 'value',
        '#value' => $bidderUser,
    );
    $form['inside'] = array(
        '#type' => 'value',
        '#value' => $inside,
    );

    return $form;
}

function interested_in_bidding_checkbox_callback($form, $form_state) {
    $commands = array();
    $values = $form_state['values'];
    if (db_table_exists('m6connect_bid_package_invitess') && !empty($values['interested_in_bidding']) && !empty($values['package_id'])) {
        $old_bid_package = get_bid_packages_invitess($values['interested_in_bidding']);
		$bid_packages_invitee = array(
            'rfp_invite_fc_itemid' => $values['interested_in_bidding'],
            'bid_package_id' => $values['package_id'],
            'interested_by_user' => 1,
        );
        entity_save('bid_packages_invitee', (object) $bid_packages_invitee);
		
		//Swift messgae to package
		if(empty($old_bid_package) && !empty($values['package_id'])){
          assign_rfp_unassigned_messages_to_packages($values['interested_in_bidding'],array($values['package_id']));
        }
		
        $output = '';
        $md_sm_xs = ($values['inside'] == '') ? ' col-md-4 col-sm-4 col-xs-12' : ' col-md-12 col-sm-12 col-xs-12';
        $packageNamePrint = $values['packageName'];
        $packageNamePrint .= ' (Interest Shown)';
        $titleCalss = ' package-colored';
        $titleStyle = 'style="color:#205081;"';
        $output .= '<div class="row"><div class="bidding-section-bidder' . $md_sm_xs . '">';
        $output .= '<div class ="bid-package-option-title' . $titleCalss . '" ' . $titleStyle . '><strong>' . $packageNamePrint . '</strong></div>';
        $output .= drupal_render(drupal_get_form('bidder_feedback_forms_for_user', $values['entity_id'], $values['package_id'], $values['packageName'], $values['defaultBiddingStatus'], $values['isInvitedPackage'], $values['inside']));
        $output .= drupal_render(drupal_get_form('rfp_bidder_feedback_message_form', $values['bidderFeedbackId'], $values['package_id'], $values['bidderUser'], $values['inside']));
        $output .= '</div></div>';
        $commands[] = ajax_command_html('#bid-user-package-status-bidder-'. $values['package_id'].'.bid-user-package-status-bidder-node',$output);
		$commands[] = ajax_command_html('#bid-user-package-status-bidder-'. $values['package_id'].'.bid-user-package-status-bidder-modal',$output);
    }
    return array('#type' => 'ajax', '#commands' => $commands);
}

function rfp_bidder_feedback_content() {
    global $user,$base_url;
	$elements = array();
    $elements['#attached']['library'] = array(
      array('system', 'drupal.ajax'),
	  array('system', 'ui.dialog'),
    );
	
	$elements['#attached']['js'] = array(
      drupal_get_path('module', 'm6connect_rfp') . '/m6connect_rfp_bidder_feedback.js',
    );
	
	
    //drupal_add_library('system', 'ui.dialog');

    drupal_add_js(array('m6connect_rfp' => array('request_intent_dialog' => 1,'entity_id'=>arg(1),'bidder_feedback_admin'=>1)), 'setting');
	
	
	
	
	/*$popoverm6notes = '';
	$popovermBidConfidence = '';
	if($bid_packages2){
		
	$popoverm6notes ='<div class="popover_m6notes"><span data-toggle="popover" data-trigger="manual" data-placement="top" data-content="These notes are private and cannot be seen by invited bidders. They can be seen by Company Administrators and those you have collaborated with."></span></div>';
	
	$popovermBidConfidence = '<span data-toggle="popover" data-trigger="manual" data-placement="top" data-content="Bid confidence is self assigned and invitees comment see you selections"></span>';
	}*/
	/*$table_header_company = '<span data-toggle="popover" data-trigger="hover" data-placement="top" data-content="If, Comapny name exits then the company has logged in to M6." data-original-title="" title="" >Company</span>'; 
	$table_header_M6Notes = '<span data-toggle="popover" data-trigger="hover" data-placement="bottom" data-content="These notes are private and cannot be seen by invited bidders. They can be seen by Company Administrators and those you have collaborated with." data-original-title="" title="">M6Notes</span>';
	$table_header_BidConfidence = '<span data-toggle="popover" data-trigger="hover" data-placement="top" data-content="Bid confidence is self assigned and invitees comment see you selections" data-original-title="" title="">Bid Confidence</span>';*/
	
	$table_header_company = 'Company<span class="tooltip-main-custom">
     <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        <span class="tooltip" data-tooltip-content="#tooltip_comapny_rfpbid_feedback">&nbsp;</span>
        <div class="tooltip_templates">
          <span id="tooltip_comapny_rfpbid_feedback">
           <p>If, Comapny name exits then the<br/> company has logged in to M6.</p>
         </span></div></i></span>'; 
		 
	$table_header_M6Notes = 'M6Notes<span class="tooltip-main-custom">
     <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        <span class="tooltip" data-tooltip-content="#tooltip_m6notes_rfpbid_feedback">&nbsp;</span>
        <div class="tooltip_templates">
          <span id="tooltip_m6notes_rfpbid_feedback">
           <p>These notes are private and cannot<br/> be seen by invited bidders. They can<br/> be seen by Company Administrators<br/> and those you have collaborated with.</p>
         </span></div></i></span>';
	
	$table_header_BidConfidence = 'Bid Confidence<span class="tooltip-main-custom">
     <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        <span class="tooltip" data-tooltip-content="#tooltip_bid_confidence_feedback">&nbsp;</span>
        <div class="tooltip_templates">
          <span id="tooltip_bid_confidence_feedback">
           <p>Bid confidence is self assigned and<br/> invitees comment see you selections.</p>
         </span></div></i></span>';
	
    $header = array($table_header_company, $table_header_M6Notes, $table_header_BidConfidence, 'Invitee', 'Phone#', 'Bidding', 'Not Bidding', 'Not Sure Yet');
	
	/*$header = array (
	  array (
	    'data' => 'Company',
		'class' => array (
		  'bid-feedback-company' 
		)
	  ),
	  array (
	    'data' => 'M6Notes',
		'class' => array (
		  'bid-feedback-m6notes' 
		)
	  ),
	  array (
	    'data' => 'Bid Confidence',
		'class' => array (
		  'bid-feedback-bid-confidence' 
		)
	  ),
	  array (
	    'data' => 'Invitee',
		'class' => array (
		  'text-left' 
		)
	  ),
	  array (
	    'data' => 'Phone#',
		'class' => array (
		  'text-left' 
		)
	  ),
	  array (
	    'data' => 'Bidding',
		'class' => array (
		  'text-left' 
		)
	  ),
	  array (
	    'data' => 'Not Bidding',
		'class' => array (
		  'text-left' 
		)
	  ),
	  array (
	    'data' => 'Not Sure Yet',
		'class' => array (
		  'text-left' 
		)
	  ),
    );*/
	
	
	$header1 = array('Company', 'M6Notes', 'Bid Confidence', 'Invitee', 'Phone#', 'Bidding', 'Not Bidding', 'Not Sure Yet');
    $node = node_load(arg(1));
    $bid_packages2 = $bid_packages = get_bid_packages_listing($node->nid);
    $BidPackagesexist = (!empty($bid_packages)) ? 1 : 0;
    $msgpackageStatus = ($BidPackagesexist) ? 2 : 0;
    $bid_packages += array(0 => 'Unassigned Bidder(s)');

    $allowed_uids = m6connect_projects_uids_from_list($node);
    if ($user->uid == $node->uid || array_key_exists(3, $user->roles) || in_array($user->uid, $allowed_uids)) {
        $elements['start'] = array(
            '#markup' => '<div class="cust-bidder-fb-content margin-bottom-10"><div id="cust-bidder-fb-lists" class="rfp-bidder-feedback-table" data-entity="'.$node->nid.'"><div class="bfeedback-report-btn form-group"><span class="report-btn btn btn-primary form-submit"><img src="'.$base_url.'/'.path_to_theme().'/images/icon-news2.png" /> PDF Report</span><input type="hidden" class="bidder-feedback-nid" value="' . $node->nid . '">' . l('<img src="'.$base_url.'/'.path_to_theme().'/images/icon-news2.png" /> Excel Report', 'rfpfeedbackreportxls/' . $node->nid, array('html' => true , 'attributes' => array('class' => array('report-btn', 'btn', 'btn-primary', 'form-submit')))) . '</div>'
        );
    } else {
        $elements['start'] = array(
            '#markup' => '<div class="cust-bidder-fb-content margin-bottom-10"><div id="cust-bidder-fb-lists">'
        );
    }
    if (!empty($bid_packages)) {
        //$info = get_bidder_feedback_table_data($node->nid, $bid_packages2 ,$msgpackageStatus);
        $info = get_bidder_feedback_table_data($node->nid, $startFrom = 0, $endTo = 1);
		$popover = 1;
        foreach ($bid_packages as $package_id => $package_name) {
            if ($BidPackagesexist) {
                $elements['bid_package_' . $package_id] = array(
                    '#type' => 'fieldset',
                    '#title' => $package_name,
                    '#collapsible' => TRUE,
                    '#collapsed' => TRUE,
                    '#attributes' => array('class' => array('collapsible', 'collapsed', 'bid-package-fieldset')),
                    '#attached' => array('js' => array('misc/form.js', 'misc/collapse.js')),
                );
            } else {
                $elements['bid_package_' . $package_id] = array(
                    '#type' => 'container',
                );
            }
            $rows = (isset($info[$package_id]['rows'])) ? $info[$package_id]['rows'] : array();
            $tableId = 'bidder-table-' . $node->nid . '-' . $package_id;
            $elements['bid_package_' . $package_id]['package-content'] = array(
                '#markup' => theme('table', array('header' => $popover== 1?$header:$header1, 'rows' => $rows, 'sticky'=> FALSE , 'empty' => 'No Bidder Feedback yet' ,'attributes' => array('id' => $tableId))),
                '#prefix' => '<div class="rfp-bidder-fb-section" id="rfp-bidder-fb-section_' . $package_id . '">',
                '#suffix' => '</div>',
            );
		$popover++;	// 
        }
    }
    $elements['end'] = array(
        '#markup' => '</div></div>'
    );
    $elements['request_to_intent_dialog'] = array(
        '#markup' => '',
        '#prefix' => '<div id="request_to_intent_dialog">',
        '#suffix' => '</div>',
    );
		
		if(arg(0)=='rfp-bid-feedback' && is_numeric(arg(1))){
			if(isset($_REQUEST['action']) && $_REQUEST['action']=='create'){
				
						$elements['back-button-rfp'] = array(
							'#type' => 'markup',
							'#markup' => l('<input type="submit" value="Back" class="form-submit" alt ="Back", title ="Back" />', 'rfp-clarification/'.arg(1).'/inbox', array('html' => true, 'query' => array('action'=>'create'), 'attributes' => array('class' => array('next-btn-link')))),
						);
				
						$elements['next-button-rfp'] = array(
						'#type' => 'markup',
						'#markup' => l('<input type="submit" value="Next" class="form-submit" alt ="Next", title ="Next" />', 'rfp-proposal/'.arg(1), array('html' => true, 'query' => array('action'=>'create'), 'attributes' => array('class' => array('next-btn-link')))),
					);
			}else{
						$elements['delete-button-rfp'] = array(
						'#type' => 'markup',
						'#markup' => l('<input type="submit" value="Delete" class="form-submit cancel-button" alt ="Delete" title ="Delete" />', 'node/'.arg(1).'/delete', array('html' => true,  'attributes' => array('class' => array('delete-btn-link')))),
					);
						
			}
		}

		
		
    return drupal_render($elements);
}

//function get_bidder_feedback_table_data($entity_id, $bid_packages2 ,$msgpackageStatus) {  


function get_bidder_feedback_table_data($entity_id, $startFrom, $endTo, $notFromAjax = TRUE) {
    $return = array();
    $query = db_select('m6connect_rfp_bidder_feedback', 'mrbf');
    //$query->Join('m6connect_bid_package_invitess', 'mbpi', 'mbpi.rfp_invite_fc_itemid=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('m6connect_bid_package_invitess', 'mbpi', 'mbpi.rfp_invite_fc_itemid=mrbf.rfp_invite_fc_itemid');
    //$query->leftJoin('m6connect_bid_packages', 'mbp', 'mbpi.bid_package_id=mbp.bid_package_id');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.field_rfp_invite_comapnies_value=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
	$query->distinct();
    $query->fields('mbpi', array('bid_package_invites_id'));
    $query->addExpression('IFNULL(mbpi.bid_package_id,0)', 'bid_package_id');
    $query->fields('mrbf', array('bidder_feedback_id', 'rfp_invite_fc_itemid', 'request_bid_intent_count'));
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->condition('mrbf.entity_id', $entity_id, '=');
    //$query->condition('mbp.status', 0, '!=');
    $query->condition('ric.entity_id', $entity_id, '=');
    $query->condition('mrbf.status', 1, '=');
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
    //$query->condition('mbpi.bid_package_id',$package_id,'=');
    //$query->orderBy('(bid_package_id=0),bid_package_id','ASC');	
	$query->orderBy('rcne.field_rfp_company_nid_email_value', 'ASC');
    $query->orderBy('mbpi.bid_package_id', 'ASC');
    $query->range($startFrom, $endTo);
    $result = $query->execute()->fetchAll();
    $invitedFieldCollectionpackageMapping = array();
    $companyNodeDetail = array();
    $userAllDetail = array();
    $masterUserDetailsinfo = array();
    $mastrMailLoadDetails = array();
    $managerUids = array();
    if ($result && !empty($result)) {	
	$rowcount = 0;	
        foreach ($result as $delta => $dataObj) {
            if (empty($dataObj->bid_package_id)) {
                $dataObj->bid_package_id = 0;
            }
            $companyNidorEmail = '';
            $invitedBidder = '';
            $CompanyNid = '';
            $companyInfo = '';
            $userDetailsinfo = array();
            $userphone = array();
            $userDetails = array();
            $bidStatus = array();
            $userbidding = array();
            $userNobidding = array();
            $userNoresponse = array();
            if (is_numeric($dataObj->field_rfp_company_nid_email_value)) {
                $CompanyNid = $dataObj->field_rfp_company_nid_email_value;
                $managerUids = explode(',', $dataObj->field_co_invite_manager_uid_value);
                $managerUids = array_filter(array_values($managerUids));
                $managerUids = array_unique(array_values($managerUids));
            } else if (in_array($dataObj->field_rfp_company_nid_email_value, array_keys($mastrMailLoadDetails))) {
                $mailField = $dataObj->field_rfp_company_nid_email_value;
                $managerUids = array($mastrMailLoadDetails[$mailField]['uid']);
                $CompanyNid = $mastrMailLoadDetails[$mailField]['CompanyNid'];
            } /*else if ($cmpuser = user_load_by_mail($dataObj->field_rfp_company_nid_email_value)) {
                $managerUids = array($cmpuser->uid);
                $userCompanyNid = _get_user_company_nid($cmpuser->uid);
                if ($userCompanyNid && is_numeric($userCompanyNid)) {
                    $CompanyNid = $userCompanyNid;
                }
                $mastrMailLoadDetails[$cmpuser->mail] = array('uid' => $cmpuser->uid, 'CompanyNid' => $CompanyNid);
            }*/
			else{
			  $company_mail = trim($dataObj->field_rfp_company_nid_email_value);
			  $emailUserDetail = _get_comapny_details_by_og_email($company_mail);
			  if($emailUserDetail && !empty($emailUserDetail)){
				 $managerUids = array($emailUserDetail['user_uid']);
                 $userCompanyNid = $emailUserDetail['entity_id'];
                 if ($userCompanyNid && is_numeric($userCompanyNid)) {
                    $CompanyNid = $userCompanyNid;
                 }
                 $mastrMailLoadDetails[$dataObj->field_rfp_company_nid_email_value] = array('uid' => $emailUserDetail['user_uid'], 'CompanyNid' => $CompanyNid);  
			  }
			}
			
			
			

            /* if(!empty($dataObj->bid_package_id)){
              $invitedFieldCollectionpackageMapping[$dataObj->rfp_invite_fc_itemid]['packages'][$dataObj->bid_package_id] = $bid_packages2[$dataObj->bid_package_id];
              $invitedFieldCollectionpackageMapping[$dataObj->rfp_invite_fc_itemid]['CompanyNid'] = $CompanyNid;
              $invitedFieldCollectionpackageMapping[$dataObj->rfp_invite_fc_itemid]['managerUids'] = $managerUids;
              $invitedFieldCollectionpackageMapping[$dataObj->rfp_invite_fc_itemid]['dataObj']= $dataObj;
              } */

            if ($dataObj->bid_package_id == 0 && !empty($bid_packages2)) {
                //get_non_assigned_bidder_feedback_table_data($entity_id,$bid_packages2,$dataObj,$CompanyNid,$companyNodeDetail,$managerUids,$return,$masterUserDetailsinfo);
                //continue;
            }
            if ($CompanyNid) {
                $companyNidorEmail = $CompanyNid;
                //drupal_set_message('<pre>'.print_r($CompanyNid).'</pre>');
                if (!isset($companyNodeDetail[$CompanyNid])) {
                    $CompanyNode = node_load($CompanyNid);
					$companyNodeDetail[$CompanyNode->nid] = array('nid' => $CompanyNode->nid, 'title' => '', 'image' => '');
					if($CompanyNode->field_type_of_company['und'][0]['value']=='company'){
                      $companyLogo = (isset($CompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $CompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                      $companyNodeDetail[$CompanyNode->nid] = array('nid' => $CompanyNode->nid, 'title' => $CompanyNode->title, 'image' => $companyLogo);
					}
                }

                $companyInfo = $companyNodeDetail[$CompanyNid];
				//print "<pre>"; print_r($companyInfo);
				
                $invitedBidder = $companyInfo['title'];
                if (!empty($managerUids)) {
                    $bidStatus = get_rfp_bidding_flags_status($entity_id, array_values($managerUids), $dataObj->bid_package_id);
					$masterUserDetailsinfo = array();
                    $userDetailsinfo = get_rfp_bid_feed_back_user_detail(array_values($managerUids), $masterUserDetailsinfo,$CompanyNid);
					
					//drupal_set_message('<pre>'.print_r($userDetailsinfo).'</pre>');
					 
                    $checked = array('bidding' => '', 'not_bidding' => '', 'not_sure' => '');
                    if (!empty($userDetailsinfo)) {
                        foreach ($userDetailsinfo as $delta => $userObj) {
							
				      // drupal_set_message('<pre>'.print_r($userDetailsinfo).'</pre>');
							$phoneNumberval = get_international_formatPhoneNumber($userObj['phone']);
                            $userDetails[] = '<div class="bidder-fb-invitee-name">' . $userObj['name'] . '</div><div class="bidder-fb-invitee-email bidder_feedback_blank">' . $userObj['mail'] . '</div>';
                            $userphone[] = '<div class="bidder_feedback_phone_section"><div class="bidder_feedback_phone">' . $phoneNumberval . '</div><div class="bidder_feedback_blank">&nbsp;</div></div>';

                            $checked = array(0 => '', 1 => '', 2 => '');
                            $defaultValue = (isset($bidStatus[$userObj['uid']][$dataObj->bid_package_id])) ? $bidStatus[$userObj['uid']][$dataObj->bid_package_id] : '';
                            if (isset($checked[$defaultValue])) {
                                $checked[$defaultValue] = 'checked="checked"';
                            }
                            $userbidding[] = ' <div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
	 <input type="checkbox" class="bidder_feedback_checkboxes" ' . $checked[1] . ' name="bidder_bidding" value="1" class="form-checkbox" disabled="disabled">
		</div> <div class="bidder_feedback_blank">&nbsp;</div></div>';
                            $userNobidding[] = '<div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
		  <input type="checkbox" class="bidder_feedback_checkboxes" ' . $checked[0] . ' name="bidder_no_bidding" value="1" class="form-checkbox" disabled="disabled"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
                            $userNoresponse[] = '<div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
		  <input type="checkbox" class="bidder_feedback_checkboxes" ' . $checked[2] . ' name="bidder_no_response" value="1" class="form-checkbox" disabled="disabled"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
                        }
                    }
                }
            } else {
                $companyNidorEmail = $dataObj->field_rfp_company_nid_email_value;
                $companyInfo = array('nid' => '', 'title' => '', 'image' => '');
                $invitedBidder = $dataObj->field_rfp_company_nid_email_value;
                $userphone[] = '<div class="bidder_feedback_phone_section"><div class="bidder_feedback_phone"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
                $userDetails[] = '<div class="bidder-fb-invitee-name">' . $dataObj->field_rfp_company_nid_email_value . '</div><div class="bidder-fb-invitee-email bidder_feedback_blank"></div>';
                $userbidding[] = ' <div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
   <input type="checkbox" class="bidder_feedback_checkboxes" name="bidder_bidding" value="1" class="form-checkbox" disabled="disabled">
      </div> <div class="bidder_feedback_blank">&nbsp;</div></div>';
                $userNobidding[] = '<div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
        <input type="checkbox" class="bidder_feedback_checkboxes" name="bidder_no_bidding" value="1" class="form-checkbox" disabled="disabled"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
                $userNoresponse[] = '<div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
        <input type="checkbox" class="bidder_feedback_checkboxes" name="bidder_no_response" value="1" class="form-checkbox" disabled="disabled"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
            }
			
			
            $companyTab = $companyInfo['title']. '<br/>' . $companyInfo['image'];
			$diversityImage ='';
			//$diversityCount = 0;
			if($companyInfo['nid'] && is_numeric($companyInfo['nid'])){
			  $diversityImage = get_diversity_image_by_comapny_nid($companyInfo['nid']);
			  $companyTab .= '<br />'.$diversityImage;
			}
            $m6notesTab = '';
            $bidder_feedback_message_form = drupal_get_form('rfp_bidder_feedback_message_form', $dataObj->bidder_feedback_id, $dataObj->bid_package_id, $bidderUser = 0, $inside = '', $msgpackageStatus);
			
			
            //if($notFromAjax){
            $bidder_feedback_message_form['add'] = ajax_pre_render_element($bidder_feedback_message_form['add']);

            $m6notesTab = drupal_render($bidder_feedback_message_form);
			
            //}else{
            /* $bidder_feedback_message_form['add'] = ajax_pre_render_element($bidder_feedback_message_form['add']);
              $build = array(
              'form' => $bidder_feedback_message_form,
              '#attached' => $bidder_feedback_message_form['add']['#attached'], // This will attach all needed JS behaviors onto the page
              );
              $m6notesTab= drupal_render($build).drupal_get_js(); */
            //}





            $inputButtonStyle = ($dataObj->request_bid_intent_count) ? 'style="background:#419641;"' : '';
            $spanNotificationStyle = ($dataObj->request_bid_intent_count) ? ' notification-count' : '';
            $request_bid_intent_count = ($dataObj->request_bid_intent_count) ? $dataObj->request_bid_intent_count : '';
            // clear user phone no ex - from (987) 654-3210 to 9876543210
            $userPhoneNo = implode('', $userphone);
            $mainPhoneNo = str_replace( array( '-', ' ', '(' , ')', '&nbsp;'), '', strip_tags($userPhoneNo));
			//$popDataOne = '';
			//$popDataTwo = '';
			
            $bidConfideceTab = drupal_render(drupal_get_form('rfp_bid_confidence_form', $dataObj->bidder_feedback_id)) . '<div class="request-bid-intent-link-section">' 

                . l('<input type="button" value="Request Bid Intent" ' . $inputButtonStyle . ' class="pop-linl-'.$rowcount.' form-submit request-bid-intent-link-button-' . $dataObj->rfp_invite_fc_itemid . ' margin-bottom-10" /><span class="request-bid-intent-link-count' . $spanNotificationStyle . '">' . $request_bid_intent_count . '</span>', 'javascript:void(0);', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('request-bid-intent-link', 'request-bid-intent-link-' . $dataObj->rfp_invite_fc_itemid), 'data-fc' => $dataObj->rfp_invite_fc_itemid, 'data-package' => $dataObj->bid_package_id, 'data-invited-bidder' => $invitedBidder, 'data-rfp' => $entity_id,'data-bidder-id'=>$dataObj->bidder_feedback_id))) 

                . l('<input type="button" value="Request By SMS" ' . $inputButtonStyle . ' class="form-submit request-by-sms-link-button-' . $dataObj->rfp_invite_fc_itemid . '" />', 'javascript:void(0);', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('request-by-sms-link', 'request-by-sms-link-' . $dataObj->rfp_invite_fc_itemid), 'data-fc' => $dataObj->rfp_invite_fc_itemid, 'data-package' => $dataObj->bid_package_id, 'data-invited-bidder' => $invitedBidder, 'data-rfp' => $entity_id,'data-bidder-id'=>$dataObj->bidder_feedback_id, 'data-bidder-phone' => $mainPhoneNo)))
            . '</div>';
            $inviteeTab = '<div class="bidder-fb-invitee-section">' . implode('</div><div class="bidder-fb-invitee-section">', $userDetails) . '</div>';
            $phoneTab = implode('', $userphone);
            $biddingTab = implode('', $userbidding);
            $notbiddingTab = implode('', $userNobidding);
            $notsurebiddingTab = implode('', $userNoresponse);
            $return[$dataObj->bid_package_id]['rows'][] = array(
                'data' => array(
                    array('data' => $companyTab, 'class' => array('views-field', 'views-field-php')),
                    array('data' => $m6notesTab, 'class' => array('views-field', 'views-field-php-2')),
                    array('data' => $bidConfideceTab, 'class' => array('views-field', 'views-field-php-3')),
                    array('data' => $inviteeTab, 'class' => array('views-field', 'views-field-php-8')),
                    array('data' => $phoneTab, 'class' => array('views-field', 'views-field-php-4')),
                    array('data' => $biddingTab, 'class' => array('views-field', 'views-field-php-5')),
                    array('data' => $notbiddingTab, 'class' => array('views-field', 'views-field-php-6')),
                    array('data' => $notsurebiddingTab, 'class' => array('views-field', 'views-field-php-7')),
                ),
                'companyNidorEmail' => $companyNidorEmail,
            );
        $popover++;
		$rowcount++;
		}
    }

    /* if(!empty($bid_packages2)){
      foreach($invitedFieldCollectionpackageMapping as $key_field_collection_id => $value_mapping){
      $notinvitedpackages = array_diff_assoc($bid_packages2,$value_mapping['packages']);
      if(!empty($notinvitedpackages)){
      $value_mapping['dataObj']->bid_package_id =0;
      get_non_assigned_bidder_feedback_table_data($entity_id,$notinvitedpackages,$value_mapping['dataObj'],$value_mapping['CompanyNid'],$companyNodeDetail,$value_mapping['managerUids'],$return,$masterUserDetailsinfo);
      }
      }
      } */
    // Sort Result By Comapny Nid or Email
    /* foreach ($return as $packageId => $item) {
      $keytoSort = array();
      foreach($item['rows'] as $dataIndex => $data){
      $keytoSort[$dataIndex] = $data['companyNidorEmail'];
      }
      array_multisort($keytoSort, SORT_ASC, $return[$packageId]['rows']);
      } */
    //Group Result Together
    /* foreach ($return as $packageId => $item) {
      $companyNidorEmail = '';
      $startingElementindex ='';
      $tableClass = 'custom-even';
      foreach($item['rows'] as $dataIndex => $data){
      if($companyNidorEmail!=$data['companyNidorEmail']){
      $companyNidorEmail = $data['companyNidorEmail'];
      $startingElementindex = $dataIndex;
      $return[$packageId]['rows'][$dataIndex]['data'][0]['rowspan']=1;
      $tableClass = ($tableClass=='custom-even')?'custom-odd':'custom-even';
      $return[$packageId]['rows'][$dataIndex]['class'][] = $tableClass;
      }else{
      if(is_numeric($startingElementindex)){
      $return[$packageId]['rows'][$startingElementindex]['data'][0]['rowspan'] +=1 ;
      $return[$packageId]['rows'][$dataIndex]['class'][] = $tableClass;
      unset($return[$packageId]['rows'][$dataIndex]['data'][0]);
      }
      }
      }
      } */
    return $return;
}

function get_non_assigned_bidder_feedback_table_data($entity_id, $bid_packages2, $dataObj, $CompanyNid, &$companyNodeDetail, $managerUids, &$return, &$masterUserDetailsinfo) {
    foreach ($bid_packages2 as $bidPackageId => $bidPackageName) {
        $invitedBidder = '';
        $companyNidorEmail = '';
        $companyInfo = '';
        $userDetailsinfo = array();
        $userphone = array();
        $userDetails = array();
        $bidStatus = array();
        $userbidding = array();
        $userNobidding = array();
        $userNoresponse = array();
        if ($CompanyNid) {
            $companyNidorEmail = $CompanyNid;
            if (!isset($companyNodeDetail[$CompanyNid])) {
                $CompanyNode = node_load($CompanyNid);
				$companyNodeDetail[$CompanyNode->nid] = array('nid' => $CompanyNode->nid, 'title' => '', 'image' => '');
				if($CompanyNode->field_type_of_company['und'][0]['value']=='company'){
                  $companyLogo = (isset($CompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $CompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                  $companyNodeDetail[$CompanyNode->nid] = array('nid'=>$CompanyNode->nid,'title'=>$CompanyNode->title,'image'=>$companyLogo);
				}
            }
            $companyInfo = $companyNodeDetail[$CompanyNid];
            $invitedBidder = $companyInfo['title'];
            if (!empty($managerUids)) {
                $bidStatus = get_rfp_bidding_flags_status($entity_id, array_values($managerUids), $bidPackageId);
				$masterUserDetailsinfo = array();
                $userDetailsinfo = get_rfp_bid_feed_back_user_detail(array_values($managerUids), $masterUserDetailsinfo,$CompanyNid);
                $checked = array('bidding' => '', 'not_bidding' => '', 'not_sure' => '');
                if (!empty($userDetailsinfo)) {
                    foreach ($userDetailsinfo as $delta => $userObj) {
                        $userDetails[] = '<div class="bidder-fb-invitee-name">' . $userObj['name'] . '</div><div class="bidder-fb-invitee-email bidder_feedback_blank">' . $userObj['mail'] . '</div>';
                        $userphone[] = '<div class="bidder_feedback_phone_section"><div class="bidder_feedback_phone">' . $userObj['phone'] . '</div><div class="bidder_feedback_blank">&nbsp;</div></div>';

                        $checked = array(0 => '', 1 => '', 2 => '');
                        $defaultValue = (isset($bidStatus[$userObj['uid']][$bidPackageId])) ? $bidStatus[$userObj['uid']][$bidPackageId] : '';
                        if (isset($checked[$defaultValue])) {
                            $checked[$defaultValue] = 'checked="checked"';
                        }
                        $userbidding[] = ' <div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
	<input type="checkbox" class="bidder_feedback_checkboxes" ' . $checked[1] . ' name="bidder_bidding" value="1" class="form-checkbox" disabled="disabled"></div> <div class="bidder_feedback_blank">&nbsp;</div></div>';
                        $userNobidding[] = '<div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
	<input type="checkbox" class="bidder_feedback_checkboxes" ' . $checked[0] . ' name="bidder_no_bidding" value="1" class="form-checkbox" disabled="disabled"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
                        $userNoresponse[] = '<div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
	<input type="checkbox" class="bidder_feedback_checkboxes" ' . $checked[2] . ' name="bidder_no_response" value="1" class="form-checkbox" disabled="disabled"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
                    }
                }
            }
        } else {
            $companyNidorEmail = $dataObj->field_rfp_company_nid_email_value;
            $companyInfo = array('nid' => '', 'title' => '', 'image' => '');
            $invitedBidder = $dataObj->field_rfp_company_nid_email_value;
            $userphone[] = '<div class="bidder_feedback_phone_section"><div class="bidder_feedback_phone"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
            $userDetails[] = '<div class="bidder-fb-invitee-name">' . $dataObj->field_rfp_company_nid_email_value . '</div><div class="bidder-fb-invitee-email bidder_feedback_blank"></div>';
            $userbidding[] = ' <div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
  <input type="checkbox" class="bidder_feedback_checkboxes" name="bidder_bidding" value="1" class="form-checkbox" disabled="disabled">
  </div> <div class="bidder_feedback_blank">&nbsp;</div></div>';
            $userNobidding[] = '<div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
  <input type="checkbox" class="bidder_feedback_checkboxes" name="bidder_no_bidding" value="1" class="form-checkbox" disabled="disabled"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
            $userNoresponse[] = '<div class="bidder_feedback_checkboxes_section "><div class="form-item form-type-checkbox">
  <input type="checkbox" class="bidder_feedback_checkboxes" name="bidder_no_response" value="1" class="form-checkbox" disabled="disabled"></div><div class="bidder_feedback_blank">&nbsp;</div></div>';
        }
        $companyTab = $companyInfo['title'] . '<br/>' . $companyInfo['image'];
        $m6notesTab = drupal_render(drupal_get_form('rfp_bidder_feedback_message_form', $dataObj->bidder_feedback_id, $bidPackageId, $bidderUser = 0, $inside = '', $msgpackageStatus));

        $inputButtonStyle = ($dataObj->request_bid_intent_count) ? 'style="background:#419641;"' : '';
        $spanNotificationStyle = ($dataObj->request_bid_intent_count) ? ' notification-count' : '';
        $request_bid_intent_count = ($dataObj->request_bid_intent_count) ? $dataObj->request_bid_intent_count : '';

        $bidConfideceTab = drupal_render(drupal_get_form('rfp_bid_confidence_form', $dataObj->bidder_feedback_id)) . '<div class="request-bid-intent-link-section">' . l('<input type="button" value="Request Bid Intent" ' . $inputButtonStyle . ' class="form-submit request-bid-intent-link-button-' . $dataObj->rfp_invite_fc_itemid . '" /><span class="request-bid-intent-link-count' . $spanNotificationStyle . '">' . $request_bid_intent_count . '</span>', 'javascript:void(0);', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('request-bid-intent-link', 'request-bid-intent-link-' . $dataObj->rfp_invite_fc_itemid), 'data-fc' => $dataObj->rfp_invite_fc_itemid, 'data-package' => $bidPackageId, 'data-invited-bidder' => $invitedBidder, 'data-rfp' => $entity_id))) . '</div>';
        $inviteeTab = '<div class="bidder-fb-invitee-section">' . implode('</div><div class="bidder-fb-invitee-section">', $userDetails) . '</div>';
        $phoneTab = implode('', $userphone);
        $biddingTab = implode('', $userbidding);
        $notbiddingTab = implode('', $userNobidding);
        $notsurebiddingTab = implode('', $userNoresponse);
        $return[$dataObj->bid_package_id]['rows'][$bidPackageId][] = array(
            'data' => array(
                array('data' => $companyTab, 'class' => array('views-field', 'views-field-php')),
                array('data' => $m6notesTab, 'class' => array('views-field', 'views-field-php-2')),
                array('data' => $bidConfideceTab, 'class' => array('views-field', 'views-field-php-3')),
                array('data' => $inviteeTab, 'class' => array('views-field', 'views-field-php-8')),
                array('data' => $phoneTab, 'class' => array('views-field', 'views-field-php-4')),
                array('data' => $biddingTab, 'class' => array('views-field', 'views-field-php-5')),
                array('data' => $notbiddingTab, 'class' => array('views-field', 'views-field-php-6')),
                array('data' => $notsurebiddingTab, 'class' => array('views-field', 'views-field-php-7')),
            ),
            'companyNidorEmail' => $companyNidorEmail,
        );
    }
}

function get_rfp_bid_feed_back_user_detail($managerUids, &$masterUserDetailsinfo, $companyNid) {
    $data = array();
    $return = array();
    $diffManagerUids = array_diff($managerUids, array_keys($masterUserDetailsinfo));
    if (!empty($diffManagerUids)) {
        //$query = db_select('users', 'u');
		$query = db_select( 'm6connect_og_membership_email', 'om' );
        $query->leftjoin('realname', 'r', 'r.uid=om.user_uid');
		$query->leftjoin('field_data_field_user_profile_photo', 'ph', 'ph.entity_id=om.user_uid AND ph.bundle=:Bundle', array(':Bundle'=>'user'));
		$query->leftjoin('file_managed','fm','fm.fid=ph.field_user_profile_photo_fid');
        $query->leftjoin('field_data_field_phone', 'p', 'p.entity_id=om.user_uid');
        $query->fields('om', array('user_uid', 'company_type','company_email'));
        $query->fields('r', array('realname'));
        $query->fields('p', array('field_phone_value'));
		$query->addField('fm','uri','user_uri');
		$query->addField('fm','filemime','user_filemime');
        //$query->condition('u.uid', $diffManagerUids, 'IN');
		$query->condition ( 'om.entity_id', $companyNid );
	    $query->condition ( 'om.user_uid', $diffManagerUids ,'IN');
        $result = $query->execute()->fetchAll();
		
		
        if (!empty($result)) {
            foreach ($result as $delta => $userObj) {
                $data[$userObj->user_uid] = array(
                    'uid' => $userObj->user_uid,
                    'mail' => $userObj->company_email,
                    'name' => $userObj->realname,
                    'phone' => $userObj->field_phone_value,
					'profile_uri' => $userObj->user_uri,
					'profile_filemime' => $userObj->user_filemime,
					'company_type' => $userObj->company_type
                );
            }
            $masterUserDetailsinfo = array_replace($masterUserDetailsinfo, $data);
        }
    }
    foreach ($managerUids as $delta => $uid) {
        $return[$uid] = $masterUserDetailsinfo[$uid];
    }
    return $return;
}

function get_status_bid_package_exist_for_invites($field_collection_id, $bid_package_id) {
    $result = db_select('m6connect_bid_package_invitess', 'mbpi')
                    ->fields('mbpi', array('bid_package_invites_id'))
                    ->condition('rfp_invite_fc_itemid', $field_collection_id, '=')
                    ->condition('bid_package_id', $bid_package_id, '=')
                    ->execute()->fetchCol();
    if ($result && !empty($result)) {
        return TRUE;
    }
    return FALSE;
}

function rfp_bidder_feedback_message_form($form, $form_state, $bidder_feedback_id, $bid_package_id, $bidderUser = 0, $inside = '', $msgpackageStatus = 1) {
    global $user;
    $form = array();
	$form['#attached']['library'] = array(
      array('system', 'drupal.ajax'),
	  array('system', 'jquery.form'),
    );
	
    $rfp_tellus = array(
        'Definitely bidding',
        'Need more time',
        'Don\'t think we will be considered',
        'Not a fair bid effort',
        'Job is too big',
        'Job is too small',
        'Not something we do',
        'Would like to but just too busy',
        'Too busy'
    );
    $js_settings = array('rfp_tellus' => json_encode($rfp_tellus));
    $form['#attributes'] = array('class' => array('rfp_bidder_feedback_message_form'), 'id' => 'rfp_bidder_feedback_message_form_' . $bidder_feedback_id);

    //$form['#attached']['library'][] = drupal_add_library('system', 'drupal.ajax');
    //$form['#attached']['library'][] = drupal_add_library('system', 'drupal.form');

    $form['message-list'] = array(
        '#markup' => get_bidder_feedback_message($bidder_feedback_id, $bid_package_id, $bidderUser, $msgpackageStatus),
        '#prefix' => '<div id="bidder_feedback_message_container_' . $bidder_feedback_id . '_' . $bid_package_id . '">',
        '#suffix' => '</div>',
    );
    $autocomplete_script_path = drupal_get_path('module', 'm6connect_rfp') . '/js/autocomplete_forbidderdeefback.js';
    $form['message'] = array(
        '#type' => 'textfield',
        '#title' => 'Message',
        '#title_display' => 'invisible',
        '#attributes' => array('placeholder' => 'Tell us about your bid intentions.', 'id' => 'bidder_feedback_message_' . $bidder_feedback_id . '_' . $bid_package_id, 'class' => array('bidder_feedback_message_msg', 'onkeypress' => array('if(event.keyCode==13){this.form.submit();}'))),
        '#attached' => array('library' => array(array('system', 'ui.autocomplete')),'js' => array($autocomplete_script_path)),
        '#prefix' => '<div>',
        '#suffix' => '</div>',
    );
	/*<script src="/' . $autocomplete_script_path . '" type="text/javascript"></script>*/
    $form['message']['#attached']['js'][] = array(
        'data' => array('m6connect_rfp' => $js_settings),
        'type' => 'setting'
    );

    $form['bidder_feedback_id'] = array(
        '#type' => 'value',
        '#value' => $bidder_feedback_id,
    );
    $form['bid_package_id'] = array(
        '#type' => 'value',
        '#value' => $bid_package_id,
    );
    $form['user_uid'] = array(
        '#type' => 'value',
        '#value' => $user->uid,
    );
    $form['bidder_user'] = array(
        '#type' => 'value',
        '#value' => $bidderUser,
    );

    $form['bidder_inside'] = array(
        '#type' => 'value',
        '#value' => $inside,
    );
    $form['add_'.$bidder_feedback_id.'_'.$bid_package_id] = array(
        '#type' => 'submit',
		'#name' => 'add-'.REQUEST_TIME,
        '#value' => 'Add',
        '#attributes' => array('class' => array('add_new_bidder_feedback_message')),
        '#executes_submit_callback' => FALSE,
        '#limit_validation_errors' => array(),
        '#href' => '',
        '#ajax' => array(
            'callback' => 'add_new_bidder_feedback_message',
            'effect' => 'fade',
            'event' => 'click',
            'progress' => array('type' => 'none'),
        ),
        '#prefix' => '<div class="bidder-feedback-message-button">',
        '#suffix' => '</div>',
    );
    return $form;
}

function get_bidder_feedback_message($bidder_feedback_id, $bid_package_id, $bidderUser, $msgpackageStatus = 1) {
    ctools_include('ajax');
    ctools_include('modal');
    $output = '<div class="bidder-feedback-msg-list">';
    if (db_table_exists('m6connect_rfp_bidder_feedback') && db_table_exists('m6connect_rfp_bidder_feedback_message')) {
        $query = db_select('m6connect_rfp_bidder_feedback_message', 'bfm');
        $query->join('realname', 'r', 'r.uid=bfm.user_uid');
        $query->fields('bfm', array('message_id', 'message', 'timestamp', 'bidder_feedback_id','message_prefix'));
        $query->fields('r', array('realname'));
        $query->condition('bidder_feedback_id', $bidder_feedback_id, '=');
        //$query->condition('bid_package_id', $bid_package_id,'=');
        if ($bid_package_id == 0 && $msgpackageStatus == 0) {
            $query->condition('bid_package_id', 0, '=');
        } else {
            $query->condition('bid_package_id', $bid_package_id, '=');
        }
        $query->orderBy('timestamp', 'ASC');
        $result = $query->execute()->fetchAll();
        if ($result && !empty($result)) {
            foreach ($result as $delta => $msgObj) {
				
                $output .= '<div class="bidder-feedback-msg bidder-feedback-msg_' . $msgObj->message_id . ' clearfix">';
                $output .= '<div class="bidder-feedback-msg-attr pull-left">';
                $output .= '<span class="bidder-feedback-msg-time"><strong>' . date('m/d/Y h:i A', $msgObj->timestamp) . ' (' . $msgObj->realname . ') '.$msgObj->message_prefix.'</strong>- </span>';
                $output .= '<span class="bidder-feedback-msg-msg">' . $msgObj->message . '</span>';
                $output .= '</div>';
                if (!$bidderUser) {
                    $output .= '<div class="bidder-feedback-msg-delete pull-right">';
                    $output .= l('<i class="fa fa-times-circle"></i>', 'remove-bidder-feedback-message/' . $msgObj->message_id . '/nojs', array('html' => TRUE, 'attributes' => array('class' => array('bidder-feedback-msg-delete-link', 'use-ajax'))));
                    $output .= '</div>';
                }
                $output .= '</div>';
            }
        }
    }
    $output .= '</div>';
    return $output;
}

function remove_bidder_feedback_message_callback($messageId, $ajax = NULL) {
    ctools_include('ajax');
    $commands = array();
    if (db_table_exists('m6connect_rfp_bidder_feedback_message') && is_numeric($messageId)) {
        db_delete('m6connect_rfp_bidder_feedback_message')->condition('message_id', $messageId, '=')->execute();
        $commands[] = ajax_command_remove('.bidder-feedback-msg_' . $messageId);
    }
    print ajax_render($commands);
    exit;
}

function add_new_bidder_feedback_message($form, &$form_state) {

    $commands = array();
    $output = '';
    $message = trim($form_state['values']['message']);
    $bidder_user = $form_state['values']['bidder_user'];
    $bidder_inside = $form_state['values']['bidder_inside'];
    if (!empty($message) && is_numeric($form_state['values']['bidder_feedback_id']) && is_numeric($form_state['values']['bid_package_id'])) {
        $bidder_feedback_id = $form_state['values']['bidder_feedback_id'];
        $bid_package_id = $form_state['values']['bid_package_id'];
        if (db_table_exists('m6connect_rfp_bidder_feedback') && db_table_exists('m6connect_rfp_bidder_feedback_message')) {
            $bidder_feedback_message = array(
                'bidder_feedback_id' => $bidder_feedback_id,
                'bid_package_id' => $bid_package_id,
                'user_uid' => $form_state['values']['user_uid'],
                'message' => $form_state['values']['message'],
                'timestamp' => time(),
            );
            $bidder_feedback = entity_save('bidder_feedback_message', (object) $bidder_feedback_message);
            $m6connect_notification_table_exist = db_table_exists('m6connect_notification');
            if ($m6connect_notification_table_exist) {
                //
                //$bidfeedback_req_id = _get_company_users_by_group_content($hostEntity->nid);
                $bidder_feedback_current_id = $form_state['values']['bidder_feedback_id'];
                $bidder_feedback_noti = entity_load('bidder_feedback', array($bidder_feedback_id));
                $bidfeedback_noti_data = $bidder_feedback_noti[$bidder_feedback_id];
                //pre($bidfeedback_noti_data,1);
                $bidfeedback_com_id = _get_company_nid_by_group_content($bidfeedback_noti_data->entity_id);

                $m6connect_notification = array(
                    'type' => 'rfp',
                    'event' => 'bidder_feedback',
                    'entity_id' => $bidfeedback_noti_data->entity_id,
                    'company_nid' => $bidfeedback_com_id,
                    'message' => NULL,
                    'request_from' => $form_state['values']['user_uid'],
                    'request_to' => $bidfeedback_noti_data->user_id,
                    'status' => 1,
                    'timestamp' => time(),
                );
                if ($form_state['values']['user_uid'] != $bidfeedback_noti_data->user_id) {
                    entity_save('m6connect_notification', (object) $m6connect_notification);
                }
            }
        }
        $output = get_bidder_feedback_message($bidder_feedback_id, $bid_package_id, $bidder_user);
        $commands[] = ajax_command_invoke('#bidder_feedback_message_' . $bidder_feedback_id . '_' . $bid_package_id, 'val', array(''));
        $commands[] = ajax_command_html('#bidder_feedback_message_container_' . $bidder_feedback_id . '_' . $bid_package_id, $output);

        if ($bidder_inside == 'form') {
            $commands[] = ajax_command_invoke('.bidding_pakages_invitee_response #bidder_feedback_message_' . $bidder_feedback_id . '_' . $bid_package_id, 'val', array(''));
            $commands[] = ajax_command_html('.bidding_pakages_invitee_response #bidder_feedback_message_container_' . $bidder_feedback_id . '_' . $bid_package_id, $output);
        }
    }
    return array('#type' => 'ajax', '#commands' => $commands);
}

function rfp_bid_confidence_form($form, $form_state, $bidder_feedback_id = '') {
    $form = array();
    $default_value = '';
    $bidder_feedback = entity_load('bidder_feedback', array($bidder_feedback_id));
    if ($bidder_feedback && is_array($bidder_feedback) && isset($bidder_feedback[$bidder_feedback_id])) {
        $bidder_feedback = $bidder_feedback[$bidder_feedback_id];
        $default_value = $bidder_feedback->bid_confidence;
    }

    $form['#attributes'] = array('class' => array('rfp_bid_confidence_form', 'form-group'), 'id' => 'rfp_bid_confidence_form_' . $bidder_feedback_id);
    $options = array('' => '-- None --', 'High' => 'High', 'Medium' => 'Medium', 'Low' => 'Low','Bidding'=>'Bidding','Not Bidding'=>'Not Bidding');
	$uniqueId =uniqid(); 
    $form['bid_confidence_'.$bidder_feedback_id.'_'.$uniqueId] = array(
        '#type' => 'select',
        '#title' => t('Bid Confidence'),
        '#title_display' => 'invisible',
        '#options' => $options,
        '#default_value' => $default_value,
        '#ajax' => array(
            'event' => 'change',
            'callback' => 'change_rfp_bid_confidence',
        ),
    );
	$form['uniqueid'] = array(
        '#type' => 'value',
        '#value' => 'bid_confidence_'.$bidder_feedback_id.'_'.$uniqueId,
    );
    $form['bidder_feedback_id'] = array(
        '#type' => 'value',
        '#value' => $bidder_feedback_id,
    );
    return $form;
}

function change_rfp_bid_confidence($form, &$form_state) {
    $commands = array();
    if (!empty($form_state['values']['bidder_feedback_id'])) {
        $bidder_feedback_id = $form_state['values']['bidder_feedback_id'];
        $bidder_feedback = entity_load('bidder_feedback', array($bidder_feedback_id));
        if ($bidder_feedback && is_array($bidder_feedback) && isset($bidder_feedback[$bidder_feedback_id])) {
            $bidder_feedback = $bidder_feedback[$bidder_feedback_id];
			$uniqueId = $form_state['values']['uniqueid'];
            $bidder_feedback->bid_confidence = $form_state['values'][$uniqueId];
            $return = entity_save('bidder_feedback', $bidder_feedback);
        }
    }
    return array('#type' => 'ajax', '#commands' => $commands);
}

function rfp_add_bid_package_form($form, $form_state, $entity_id, $display = 'edit') {
    $form = array();
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();
    $container_title = 'Bid Packages';
    $form['#attributes'] = array('class' => array('rfp_add_bid_package_form'), 'id' => 'rfp_add_bid_package_form_' . $entity_id);
    // add here for popover for rfp
	$form['#prefix'] = '<div class="row margin-5"><div class="col-md-8 col-sm-8 padding-5 custom-bid-packages-popover-left">';
	     
	$form['#suffix'] = '</div><div class="col-md-4 col-sm-4 padding-5 custom-bid-packages-popover-right">
	                   <div class="popover popover-gray-cust right margin-bottom-25" id="custom-rfp-bid-package">
                      <div class="arrow" style="top: 50%;"></div>
                       <div class="popover-content">These bid package names allow you to assign bidders to the respective packages in the next tab.</div>
	                  </div>
                </div>';
					 
	// end here for popover for rfp 
    $form['bid_package_start'] = array(
        '#markup' => '<div class="bid-package-heading-title"><strong>Bid Packages</strong></div>',
        '#prefix' => '<div id="bid-package-heading">',
        '#suffix' => '</div>',
    );

    $form['bid_package_container'] = array(
        '#type' => 'container',
        '#prefix' => '<div id="bid_package_container" class="form-item bid_package_container">',
        '#suffix' => '</div>',
    );

    $form['bid_package_container']['bid_package_list'] = array(
        '#markup' => get_bid_packages_content($entity_id),
        '#prefix' => '<div class="row margin-5"><div class="col-md-10 padding-5"><div id="bid_package_list">',
        '#suffix' => '</div></div></div>',
    );

    if ($display == 'edit') {
        $form['bid_package_name'] = array(
            '#type' => 'textarea',
            '#title' => 'Add Bid Packages',
            '#title_display' => 'invisible',
            '#resizable' => FALSE,
            '#attributes' => array('placeholder' => 'Add Bid Package', 'id' => 'bid_package_name_' . $entity_id, 'class' => array('bid_package_name')),
            '#prefix' => '<div class="row margin-5 rfp_add_bid_package"><div class="col-md-10 padding-5"><label for="edit-bid-package-name">Add Bid Packages <span class="tooltip-main-custom">
     <i class="fa fa-question-circle custom-tooltip" aria-hidden="true">
        <span class="tooltip" data-tooltip-content="#tooltip_bid_package_names">&nbsp;</span>
        <div class="tooltip_templates">
          <span id="tooltip_bid_package_names">
           <p>These bid package names allow you<br/> to assign bidders to the respective<br/> packages in the next tab.</p>
         </span>
	    </div>
	 </i>
 </span></label><div>Enter the bid package names in the field below. Separate each bid package name on to a new line.</div>',
            //'#suffix' => '</div><span class="pull-right" data-toggle="popover" data-trigger="focus" data-placement="right" data-content="These bid package names allow you to assign bidders to the respective packages in the next tab."></span></div>',
			/*'#suffix' => '</div><div class="popover popover-gray-cust right margin-bottom-25" id="custom-pro-bid-package">
    <div class="arrow" style="top: 50%;"></div>
    <div class="popover-content">These bid package names allow you to assign bidders to the respective packages in the next tab.</div>
</div></div>',*/
       '#suffix' => '</div></div>',
        );

        $form['entity_id'] = array(
            '#type' => 'value',
            '#value' => $entity_id,
        );

        $form['state'] = array(
            '#type' => 'value',
            '#value' => $display,
        );

				if(isset($_REQUEST['action']) && $_REQUEST['action']=='create'){
					$param = array();        
          $param = array('rfpstep' => 'step_rpf_documents','action'=>'create');
       
					$form['back-button-2'] = array(
					'#type' => 'markup',
					'#markup' => l('<input type="button" value="Back" class="btn btn-primary form-submit" alt ="Back", title ="Back" />', 'node/' . arg(1) . '/edit', array('html' => true, 'query' => $param, 'attributes' => array('class' => array('back-btn-link')))),
       		 );
				
				}


        $form['add'] = array(
            '#type' => 'submit',
            '#value' => 'Add Bid Package(s)',
            '#attributes' => array('class' => array('add_new_bid_package_name')),
            '#executes_submit_callback' => FALSE,
            '#limit_validation_errors' => array(),
            '#href' => '',
            '#ajax' => array(
                'callback' => 'add_new_bid_package_name',
                'effect' => 'fade',
                'event' => 'click',
                'progress' => array(
                    'type' => 'throbber',
                    'message' => NULL,
                ),
            ),
        );

				if(isset($_REQUEST['action']) && $_REQUEST['action']=='create'){
					/*$form['next-button-project'] = array(
					'#type' => 'markup',
					'#markup' => l('<input type="submit" value="Next" class="form-submit" alt ="Next", title ="Next" />', 'invite-companies/'.arg(1), array('html' => true, 'query' => array('action'=>'create'), 'attributes' => array('class' => array('next-btn-link')))),
				);*/
				
								$form['next'] = array(
							'#type' => 'submit',
							'#value' => 'Next',
							'#submit' => array('rfp_goto_invite_tab_submit_handler'),
				);
				
				}else{
					$form['delete-button-rfp'] = array(
					'#type' => 'markup',
					'#markup' => l('<input type="submit" value="Delete" class="form-submit" alt ="Delete" title ="Delete" />', 'node/'.arg(1).'/delete', array('html' => true,  'attributes' => array('class' => array('delete-btn-link')))),
				);
					
				}
				
				
    }
    return $form;
}

function rfp_goto_invite_tab_submit_handler(&$form, &$form_state) {
    $query = array('query' => array('rfpstep' => 'step_rfp_invite_companies','action'=>'create'));
    if ($form_state['values']['state'] == 'add') {
        $query['query']['state'] = 'add';
    }
    drupal_goto('invite-companies/' . $form_state['values']['entity_id'], $query);
}

function get_bid_packages_content($entity_id) {
    $output = '';
    if (db_table_exists('m6connect_bid_packages')) {
        $query = db_select('m6connect_bid_packages', 'mbp');
        $query->fields('mbp', array('bid_package_id', 'entity_id', 'bid_package_name'))->condition('entity_id', $entity_id, '=')->condition('status', 1, '=');
        $result = $query->execute()->fetchAll();
        if ($result && !empty($result)) {
            foreach ($result as $delta => $packageinfo) {
                $output .= '<div id="bidder-package-name-' . $packageinfo->bid_package_id . '" class="bid-package-name-block bidder-package-name-' . $packageinfo->bid_package_id . '">';
                $output .= '<span class="bid-package-remove">' . l('[X]', 'remove-bid-package/nojs/' . $entity_id . '/' . $packageinfo->bid_package_id, array('attributes' => array('class' => array('use-ajax', 'remove-package-link')))) . '</span>';
                $output .= '<span class="bid-package-name-name">' . $packageinfo->bid_package_name . '</span>';
                $output .= '</div>';
            }
        }
    }
    $output .= '';
    return $output;
}

function get_bid_packages_listing($entity_id) {
    $output = array();
    if (db_table_exists('m6connect_bid_packages')) {
        $query = db_select('m6connect_bid_packages', 'mbp');
        $query->fields('mbp', array('bid_package_id', 'bid_package_name'))->condition('entity_id', $entity_id, '=')->condition('status', 1, '=');
        $result = $query->execute()->fetchAllKeyed(0, 1);
        if ($result && !empty($result)) {
            $output = $result;
        }
    }
    return $output;
}

function get_bid_packages_listing_options($entity_id) {
    $output = get_bid_packages_listing($entity_id);
    /* if(empty($output)){
      $output =array(''=> 'No Bid Package Available');
      } */
    return $output;
}

function get_bid_packages_invitess($field_collection_id) {
    $output = array();
    if (db_table_exists('m6connect_bid_package_invitess')) {
        $query = db_select('m6connect_bid_package_invitess', 'mbpi');
        $query->fields('mbpi', array('bid_package_id'))->condition('rfp_invite_fc_itemid', $field_collection_id, '=');
        $result = $query->execute()->fetchCol();
        if ($result && !empty($result)) {
            return $result;
        }
    }
    return $output;
}

function add_new_bid_package_name($form, &$form_state) {
    $commands = array();
    $inside = 0;
    if (db_table_exists('m6connect_bid_packages')) {
        if (isset($form_state['values']['entity_id']) && is_numeric($form_state['values']['entity_id'])) {
            if (!empty($form_state['values']['bid_package_name'])) {
                $bid_packages = explode(PHP_EOL, $form_state['values']['bid_package_name']);
                $bid_packages = array_filter(array_map('trim', $bid_packages));
                foreach ($bid_packages as $delta => $package_name) {
                    $bid_packages = array(
                        'entity_id' => $form_state['values']['entity_id'],
                        'bid_package_name' => $package_name,
                    );
                    entity_save('bid_packages', (object) $bid_packages);
                    $inside = 1;
                }
            }
        }
    }
    if ($inside) {
        $output = get_bid_packages_content($form_state['values']['entity_id']);
        $commands[] = ajax_command_html('#bid_package_list', $output);
    }
    $commands[] = ajax_command_invoke('#bid_package_name_' . $form_state['values']['entity_id'], 'val', array(''));
    return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Popup’s setings function.
 */
function assign_bid_package_ctools_popup_style() {
    static $delegationAdded = FALSE;
    if ($delegationAdded == FALSE) {
        $delegationAdded = TRUE;
        ctools_include('modal');
        ctools_include('ajax');
        ctools_modal_add_js();
        $assign_bid_package_popup_style = array(
            'assign-bid-package-popup-style' => array(
                'modalSize' => array(
                    'type' => 'fixed',
                    'width' => 530,
                    'height' => 'auto',
                ),
                'modalOptions' => array(
                    'opacity' => (float) 0.85,
                    'background-color' => '#000000',
                ),
                'closeText' => '',
                'loadingText' => '',
                'animation' => 'fadeIn',
                'modalTheme' => 'AssignBidPackagePopup',
                'animationSpeed' => 'fast',
            ),
        );
        drupal_add_js($assign_bid_package_popup_style, 'setting');
        ctools_add_js('m6connect_assign_bid_package_modal', 'm6connect_rfp');
    }
}

function assign_bid_packages_callback($ajax = NULL, $field_collection_id, $entity) {
    global $user;
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'field_collection_id' => $field_collection_id,
            'entity_id' => $entity->nid,
        );
        $output = ctools_modal_form_wrapper('assign_bid_packages_form', $form_state);
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        print ajax_render($output);
        drupal_exit();
    }
    return drupal_get_form('assign_bid_packages_form', $field_collection_id, $entity->nid);
}

function assign_bid_packages_form($form, $form_state, $field_collection_id = '', $entity_id = '') {
    $form = array();
    $cmpTitle = '';
    if (isset($form_state['field_collection_id']) && is_numeric($form_state['field_collection_id'])) {
        $field_collection_id = $form_state['field_collection_id'];
    }
    if (isset($form_state['entity_id']) && is_numeric($form_state['entity_id'])) {
        $entity_id = $form_state['entity_id'];
    }

    $field_collection = field_collection_item_load($field_collection_id);
    if (isset($field_collection->field_rfp_company_nid_email['und']) && !empty($field_collection->field_rfp_company_nid_email['und'][0]['value'])) {
        $nidOrEmail = $field_collection->field_rfp_company_nid_email['und'][0]['value'];
        if (is_numeric($nidOrEmail)) {
            $cmpNode = node_load($nidOrEmail);
            $cmpTitle = $cmpNode->title;
        } else if ($cmpuser = user_load_by_mail($nidOrEmail)) {
            $cmpNid = _get_user_company_nid($cmpuser->user);
            if ($cmpNid && is_numeric($cmpNid)) {
                $cmpNode = node_load($cmpNid);
                $cmpTitle = $cmpNode->title;
            } else {
                $cmpTitle = $nidOrEmail;
            }
        } else {
            $cmpTitle = $nidOrEmail;
        }
    }

    $form['#attributes'] = array('class' => array('assign_bid_packages_form'), 'id' => 'assign_bid_packages_form');
    $form['startup-text'] = array(
        '#markup' => '<div class="assign-bid-header-title"><h4>Assign to Bid Package(s) for ' . $cmpTitle . '</h4></div><div class="assign-bid-header-desc">Select All of the Bid Packages that this individual/Company is related too.</div>',
        '#prefix' => '<div class="assign-bid-header">',
        '#suffix' => '</div>',
    );

    $form['rfp_invite_fc_itemid'] = array(
        '#type' => 'value',
        '#value' => $field_collection_id,
    );

    $form['entity_id'] = array(
        '#type' => 'value',
        '#value' => $entity_id,
    );

    $form['bid_package'] = array(
        '#type' => 'select',
        '#title' => 'Bid Packages List',
        '#title_display' => 'invisible',
        '#options' => get_bid_packages_listing_options($entity_id),
        '#default_value' => get_bid_packages_invitess($field_collection_id),
        '#multiple' => TRUE,
        '#attributes' => array('class' => array('assign_bid_packages_list')),
    );

    $form['action_container'] = array(
        '#type' => 'container',
        '#prefix' => '<div id="action_container" class="action_container pull-right">',
        '#suffix' => '</div>',
    );

    $form['action_container']['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
        '#weight' => 10,
    );
    $form['action_container']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Assign Bid Packages'
    );
    return $form;
}

function assign_bid_packages_form_submit(&$form, &$form_state) {
    if (db_table_exists('m6connect_bid_package_invitess')) {
        $values = $form_state['values'];
        //echo '<pre>';
        //print_r($values);
        if ($values['rfp_invite_fc_itemid'] && is_numeric($values['rfp_invite_fc_itemid'])) {
            $old_bid_package = get_bid_packages_invitess($values['rfp_invite_fc_itemid']);
            //print_r($old_bid_package);
            //die;  5311
            $new_bid_pakages = $values['bid_package'];
            if (empty($new_bid_pakages)) {
                db_delete('m6connect_bid_package_invitess')->condition('rfp_invite_fc_itemid', $values['rfp_invite_fc_itemid'])->execute();
            } else {
                $fcItemFlag = 0;
                foreach ($new_bid_pakages as $delta => $bid_pakage_id) {
                    if (!in_array($bid_pakage_id, $old_bid_package)) {
                        $bid_packages_invitee = array(
                            'rfp_invite_fc_itemid' => $values['rfp_invite_fc_itemid'],
                            'bid_package_id' => $bid_pakage_id,
							'interested_by_user' => 0,
                        );
                        entity_save('bid_packages_invitee', (object) $bid_packages_invitee);
                        $fcItemFlag++;
                    }
                }
				if(empty($old_bid_package) && !empty($new_bid_pakages)){
				  assign_rfp_unassigned_messages_to_packages($values['rfp_invite_fc_itemid'],$new_bid_pakages);
				}
                if ($fcItemFlag) {
                    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
                        $form_state['ajax_commands'][] = ajax_command_invoke('.assign-approval-type-btn-' . $values['rfp_invite_fc_itemid'], 'removeClass', array('btn-primary'));
                        $form_state['ajax_commands'][] = ajax_command_invoke('.assign-approval-type-btn-' . $values['rfp_invite_fc_itemid'], 'addClass', array('btn-success'));
                    }
                }
                db_delete('m6connect_bid_package_invitess')
                        ->condition('bid_package_id', $new_bid_pakages, 'NOT IN')
                        ->condition('rfp_invite_fc_itemid', $values['rfp_invite_fc_itemid'], '=')
                        ->execute();
            }
        }
    }
    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
        $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    }
}

function get_rfp_bid_package_user_interested_in($entity_id) {
    global $user;
    $return = array();
    if (db_table_exists('m6connect_bid_package_invitee_interested')) {
        $return = db_select('m6connect_bid_package_invitee_interested', 'bpii')
                        ->fields('bpii', array('bid_package_id'))
                        ->condition('bpii.user_id', $user->uid, '=')
                        ->condition('bpii.entity_id', $entity_id, '=')
                        ->execute()->fetchCol();
    }
    return $return;
}

function bidding_pakages_invitee_response_callback($ajax = NULL, $entity) {
    global $user;
    /* if($ajax){
      ctools_include('ajax');
      ctools_include('modal');
      $form_state = array(
      'ajax' => TRUE,
      'entity_id'=>$entity->nid,
      );
      $output = ctools_modal_form_wrapper('bidding_pakages_invitee_response_form', $form_state);
      if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
      }
      print ajax_render($output);
      drupal_exit();
      }
      return drupal_get_form('bidding_pakages_invitee_response_form',$entity->nid); */
    $output = array();
    $content = rfp_bidder_feedback_bidder_content($entity, 'form');
    $html = '<div class="assign-bid-header"><div class="assign-bid-header-title"><h4>Bidder Feedback</h4></div></div>';
    $html .='<div class="bidder-tab-heading form-group">Indicate your Intent to Bid by selecting one or more of the indicators below.</div>';
    $html .= '<div class="bidding_pakages_invitee_response form-group">' . $content . '</div>';
    if ($ajax) {
        $html .= '<div id="action_container" class="action_container pull-right">' . l('<input type="button" class="cancel-button" value="Close" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('onclick' => 'jQuery("span.popups-close").click();'))) . '</div>';
        $output[] = ctools_modal_command_display(t('Bidder Feedback'), $html);
        print ajax_render($output);
        drupal_exit();
    }
    $path = drupal_lookup_path('alias', 'node/' . $entity->nid);
    $html .= '<div id="action_container" class="action_container pull-right">' . l('<input type="button" class="cancel-button" value="Close" />', $path, array('html' => TRUE)) . '</div>';
    return $html;
}

function bidding_pakages_invitee_response_form($form, &$form_state, $entity_id = '') {
    global $user;
    $form = array();
    $options = array(1 => 'Bidding', 0 => 'Not Bidding', 2 => 'Not Sure Yet');
    $form['#bidding_status'] = $options;
    $entity_id = (isset($form_state['entity_id']) && is_numeric($form_state['entity_id'])) ? $form_state['entity_id'] : $entity_id;
    $node = node_load($entity_id);
    $form['#attributes'] = array('class' => array('bidding_pakages_invitee_response_form'), 'id' => 'bidding_pakages_invitee_response_form');
    $form['heading-text'] = array(
        //'#markup'=> '<div class="assign-bid-header-title"><h4>Select Bid Package(s) interested In</h4></div>',
        '#markup' => '<div class="assign-bid-header-title"><h4>Bidder Feedback</h4></div>',
        '#prefix' => '<div class="assign-bid-header">',
        '#suffix' => '</div>',
    );

    $form['entity_id'] = array(
        '#type' => 'value',
        '#value' => $entity_id,
    );

    $form['user_id'] = array(
        '#type' => 'value',
        '#value' => $user->uid,
    );

    /* $packages = get_bid_packages_listing_options($entity_id);
      $defaultValue = get_rfp_bidding_flags_status($entity_id,array($user->uid));
      $form['#packages'] = $packages;
      $form['bid_package']['#tree'] = TRUE;
      if(!empty($packages)){
      foreach($packages as $packageId => $packageName){
      $form['bid_package'][$packageId] = array(
      '#type' => 'radios',
      '#options' => $options,
      //'#default_value' => '', //(isset($defaultValue[$user->uid][$packageId]))?$defaultValue[$user->uid][$packageId]:'',
      );
      if(isset($defaultValue[$user->uid][$packageId])){
      $form['bid_package'][$packageId]['#default_value'] = $defaultValue[$user->uid][$packageId];
      }
      }
      }else{
      $form['bid_package'][0] = array(
      '#type' => 'radios',
      '#options' => $options,
      //'#default_value' => (isset($defaultValue[$user->uid][0]))?$defaultValue[$user->uid][0]:'',
      );
      if(isset($defaultValue[$user->uid][0])){
      $form['bid_package'][0]['#default_value'] = $defaultValue[$user->uid][0];
      }
      } */

    /* $form['bidder_feedback_bidder']= array(
      //'#markup'=> rfp_bidder_feedback_bidder_content($node),
      '#type' => ''
      '#prefix'=> '<div class="bidder_feedback_bidder_response">',
      '#suffix'=> '</div>',
      ); */

    $form['action_container'] = array(
        '#type' => 'container',
        '#prefix' => '<div id="action_container" class="action_container pull-right">',
        '#suffix' => '</div>',
    );

    $form['action_container']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Save'
    );

    $form['action_container']['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('onclick' => 'jQuery("span.popups-close").click();'))),
        '#weight' => 10,
    );

    return $form;
}

function theme_bidding_pakages_invitee_response_form2($variables) {
    $form = $variables['form'];
    $options = $form['#bidding_status'];
    $packages = $form['#packages'];
    $output = drupal_render($form['heading-text']);
    $rows = array();
    $noPackageFlag = 0;
    $header = array();
    if (!empty($packages)) {
        $header[] = 'Package Name';
    } else {
        $noPackageFlag = 1;
        $packages = array(0 => 'No Packages');
    }
    foreach ($options as $key => $value) {
        $header[] = $value;
    }
    foreach ($packages as $packageId => $packageName) {
        $row = array();
        if ($noPackageFlag == 0) {
            $row[] = $packageName;
        }
        foreach ($options as $key => $value) {
            $form['bid_package'][$packageId][$key]['#title'] = '';
            $row[] = drupal_render($form['bid_package'][$packageId][$key]);
        }
        $rows[] = $row;
    }

    $output .= '<div class="bidding-pakages-invitee-response-table">' . theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Bid Pakage Available Yet.')) . '</div>';

    $output .= '<div class="bidding-pakages-invitee-response-table">' . drupal_render($table_element) . '</div>';
    $output .= drupal_render_children($form);
    return $output;
}

function bidding_pakages_invitee_response_form_submit(&$form, &$form_state) {
    $values = $form_state['values'];
    $flag = flag_get_flag('rfps_bidding');
    $bidFlag = 0;
    if (isset($values['entity_id']) && isset($values['user_id']) && is_numeric($values['entity_id']) && is_numeric($values['user_id'])) {
        if (db_table_exists('m6connect_bid_package_invitee_interested')) {
            if (isset($values['bid_package'])) {
                foreach ($values['bid_package'] as $packageId => $biddingState) {
                    $bidFlag = ($bidFlag != 1 && $biddingState == 1) ? 1 : $bidFlag;
                    $biddingState = (!is_numeric($biddingState)) ? '' : $biddingState;
                    if ($biddingState != '') {
                        $bid_packages_interested = array('entity_id' => $values['entity_id'], 'user_id' => $values['user_id'], 'bid_package_id' => $packageId);
                        $bid_packages_interested_fields = array('entity_id' => $values['entity_id'], 'user_id' => $values['user_id'], 'bid_package_id' => $packageId, 'bidding_status' => $biddingState);
                        db_merge('m6connect_bid_package_invitee_interested')->key($bid_packages_interested)->fields($bid_packages_interested_fields)->execute();
                    }
                }
            }
        }
    }
    if ($bidFlag) {
        if ($flag && !$flag->is_flagged($values['entity_id'])) {
            $flag->flag('flag', $values['entity_id']);
        }
        $form_state['ajax_commands'][] = ajax_command_invoke('.rfps-bidding-link-' . $values['entity_id'], 'removeClass', array('flag-action', 'unflag-action'));
        $form_state['ajax_commands'][] = ajax_command_invoke('.rfps-bidding-link-' . $values['entity_id'], 'addClass', array('unflag-action'));
    } else {
        if ($flag && $flag->is_flagged($values['entity_id'])) {
            $flag->flag('unflag', $values['entity_id']);
        }
        $form_state['ajax_commands'][] = ajax_command_invoke('.rfps-bidding-link-' . $values['entity_id'], 'removeClass', array('unflag-action', 'flag-action'));
        $form_state['ajax_commands'][] = ajax_command_invoke('.rfps-bidding-link-' . $values['entity_id'], 'addClass', array('flag-action'));
    }
    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
        $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    }
}

function create_rfp_biddind_flag_link($nodeNid) {  // call this fuction -> assign_bid_package_ctools_popup_style(); to show popup
    global $user, $company;
    //drupal_set_message(print_r($nodeNid,1));
    /*     * *** Changed **** */
    //$flag = flag_get_flag('rfps_bidding');
    //$biddingflagAction = ($flag && $flag->is_flagged($nodeNid)) ? 'unflag-action' : 'flag-action';
    $flagCount = is_rfp_bidding_flag_set($entityId);
    $biddingflagAction = ($flagCount > 0) ? 'unflag-action' : 'flag-action';
    $output = '<div class="rfp-bidding-flag-container flag-rfps-bidding">';

    $node = node_load($nodeNid);
    $nodeBelongToCurrentCompany = (is_numeric($company->nid) && $company->nid == _get_company_nid_by_group_content($node));
    $cmpcall = in_array($user->uid, _get_company_users_by_group_content($node));
    $cmpcall2 = in_array($user->uid, m6connect_projects_uids_from_list($node));
    if (!($cmpcall || $cmpcall2)) {
        $output .='<div class="cust-invite-btn custom-bookmark">' . flag_create_link('bookmarks', $nodeNid) . '</div>';
    }
    $output .='<div class="cust-invite-btn custom-favorite">' . flag_create_link('favourite', $nodeNid) . '</div>';
    $output .='<div class="cust-invite-btn custom-spam">' . flag_create_link('spam', $nodeNid) . '</div>';
    $output .= '<span class="flag-wrapper flag-rfps-bidding-' . $nodeNid . '">' . l('Intent To Bid', 'choose-bid-package/nojs/' . $nodeNid, array('attributes' => array('class' => array('ctools-use-modal', 'progress-disabled', 'ctools-modal-assign-bid-package-popup-style', 'rfps-bidding-link-' . $nodeNid, 'flag-remove', $biddingflagAction)))) . '</span>';
    $output .='</div>';
    return $output;
}

function get_rfp_bidding_flags_status($entity_id, $userids, $packageId = '') {
    $return = array();
    $output = array();
    $userids = array_values($userids);
    if (db_table_exists('m6connect_bid_package_invitee_interested') && !empty($userids)) {
        $query = db_select('m6connect_bid_package_invitee_interested', 'rbs')->fields('rbs', array('user_id', 'bid_package_id', 'bidding_status'))
                        ->condition('rbs.user_id', $userids, 'IN')->condition('rbs.entity_id', $entity_id, '=');
        if ($packageId) {
            $query->condition('rbs.bid_package_id', $packageId, '=');
        }
        $output = $query->execute()->fetchAll();
    }
    foreach ($output as $delta => $biddingObj) {
        $return[$biddingObj->user_id][$biddingObj->bid_package_id] = $biddingObj->bidding_status;
    }
    return $return;
}

function remove_bid_package_callback($ajax = NULL, $entity, $packageId) {
    if (db_table_exists('m6connect_bid_packages')) {
        db_update('m6connect_bid_packages')->fields(array('status' => 0))
                ->condition('entity_id', $entity->nid, '=')
                ->condition('bid_package_id', $packageId, '=')
                ->execute();
        //db_delete('m6connect_bid_packages')->condition('entity_id', $entity->nid, '=')->condition('bid_package_id', $packageId, '=')->execute();	
        db_delete('m6connect_bid_package_invitess')->condition('bid_package_id', $packageId, '=')->execute();
    }
    if ($ajax) {
        ctools_include('ajax');
        $commands = array();
        //$commands[] = ajax_command_replace('#bidder-package-name-'.$packageId,'');
        $commands = ajax_command_invoke(NULL, 'alert', array($packageId));
        $commands[] = ajax_command_remove('#bidder-package-name-' . $packageId);

        print ajax_render($commands);
        exit;
    }
}

function get_invitee_company_name_bid_package_by_entity($bidPackage) {
    $companyName = array();
    //db_select('m6connect_bid_package_invitess')
}

function award_bidding_pakages_company_form($form, &$form_state, $entity_id = 324) {
    global $user;
    $form = array();
    $form['#attributes'] = array('class' => array('award_bidding_pakages_company_form'), 'id' => 'award_bidding_pakages_company_form');
    $form['startup-text'] = array(
        '#markup' => '<div class="assign-bid-header-title"><h4>Send Notice of Award</h4></div><div class="assign-bid-header-desc">Companies you wish to Award the RFP to</div>',
        '#prefix' => '<div class="assign-bid-header">',
        '#suffix' => '</div>',
    );


    $form['entity_id'] = array(
        '#type' => 'value',
        '#value' => $entity_id,
    );

    $bidPackages = get_bid_packages_listing_options($entity_id);

    $form['bid_package'] = array(
        '#type' => 'select',
        '#title' => 'Bid Packages List',
        '#title_display' => 'invisible',
        '#options' => get_bid_packages_listing_options($entity_id),
        //'#default_value' => get_bid_packages_invitess($field_collection_id),
        '#multiple' => TRUE,
        '#attributes' => array('class' => array('assign_bid_packages_list')),
    );

    $form['action_container'] = array(
        '#type' => 'container',
        '#prefix' => '<div id="action_container" class="action_container pull-right">',
        '#suffix' => '</div>',
    );

    $form['action_container']['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
        '#weight' => 10,
    );
    $form['action_container']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Assign Bid Packages'
    );
    return $form;
}

function get_invited_user_bid_package($entity_id) {
    global $user;
    $query = db_select('m6connect_bid_packages', 'mbp');
    $query->leftJoin('m6connect_bid_package_invitess', 'mbpi', 'mbp.bid_package_id=mbpi.bid_package_id');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.field_rfp_invite_comapnies_value=mbpi.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->fields('mbp', array('bid_package_id', 'bid_package_name'));
    $query->condition('mbp.status', 1, '=');
    $query->condition('mbp.entity_id', $entity_id, '=');
    $query->condition('ric.entity_id', $entity_id, '=');
    $query->where('((rcne.field_rfp_company_nid_email_value=:companyMail) or (FIND_IN_SET(:UserUid,rcimu.field_co_invite_manager_uid_value)>0))', array(':UserUid' => $user->uid, ':companyMail' => $user->mail));
    $result = $query->execute()->fetchAllKeyed(0, 1);
    return $result;
}

function get_bidder_feedback_id_by_entity_id($entity_id, $user) {
    global $company;
	$isCompanyIndividual = is_company_individual_by_group($company);
	$return = array();
    $query = db_select('m6connect_rfp_bidder_feedback', 'mrbf');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.field_rfp_invite_comapnies_value=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->fields('mrbf', array('bidder_feedback_id', 'rfp_invite_fc_itemid'));
    $query->condition('mrbf.status', 1, '=');
    $query->condition('mrbf.entity_id', $entity_id, '=');
    $query->condition('ric.entity_id', $entity_id, '=');
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
	if($isCompanyIndividual){
	  $query->where('(LOWER(rcne.field_rfp_company_nid_email_value)=:companyMail)', array(':companyMail' => strtolower($user->mail)));
	}else{
	  $companyMail = _get_user_company_email($user->uid, $company->nid);
	  $query->where('((LOWER(rcne.field_rfp_company_nid_email_value)=:companyMail) or ((rcne.field_rfp_company_nid_email_value=:companyNid) AND (FIND_IN_SET(:UserUid,rcimu.field_co_invite_manager_uid_value)>0)))', array(':UserUid' => $user->uid, ':companyNid'=>$company->nid ,':companyMail' => strtolower($companyMail)));	
	}
    $query->range(0, 1);
    $result = $query->execute()->fetchAssoc(); //fetchAllKeyed(0,1);
    if ($result && !empty($result)) {
        $return = $result;
    }
    return $return;
}

function bidder_feedback_forms_for_user($form, &$form_state, $entity_id, $packageId, $packageName, $defaultBiddingStatus, $isInvitedPackage, $inside = '') {
    global $user, $company;
    //$biddingOptions = array(1 => 'Bidding');
    $biddingOptions = array(1 => 'Bidding', 0 => 'Not Bidding', 2 => 'Not Sure Yet');
    $titleCalss = '';
    $titleStyle = '';
    /* if ($isInvitedPackage) {
      $biddingOptions = array(1 => 'Bidding', 0 => 'Not Bidding', 2 => 'Not Sure Yet');
      $packageName .= ' (INVITED)';
      $titleCalss = ' package-colored';
      $titleStyle = 'style="color:#205081;"';
      } */
    $form['bid_package_id'] = array(
        '#type' => 'value',
        '#value' => $packageId,
    );

    $form['entity_id'] = array(
        '#type' => 'value',
        '#value' => $entity_id,
    );

    $form['user_id'] = array(
        '#type' => 'value',
        '#value' => $user->uid,
    );

    $form['company_nid'] = array(
        '#type' => 'value',
        '#value' => $company->nid,
    );

    $form['biding_status_value'] = array(
        '#type' => 'radios',
        '#options' => $biddingOptions,
        '#title' => $packageName,
        '#title_display' => 'invisible',
        //'#default_value'=> $defaultBiddingStatus,
        '#prefix' => '<div id="bidder-package-status-options_' . $packageId . '" class="bidder-package-status-options">', //<div class ="bid-package-option-title' . $titleCalss . '" ' . $titleStyle . '><strong>' . $packageName . '</strong></div>
        '#suffix' => '</div>',
        '#executes_submit_callback' => FALSE,
        '#limit_validation_errors' => array(),
        '#href' => '',
        '#ajax' => array(
            'callback' => 'change_bidding_status_callback',
            'event' => 'change',
            'progress' => array('type' => 'none'),
        ),
    );
    if (is_numeric($defaultBiddingStatus)) {
        $form['biding_status_value']['#default_value'] = $defaultBiddingStatus;
    }
    return $form;
}

function change_bidding_status_callback($form, &$form_status) {
    $commands = array();
    $values = $form_status['values'];
    if (isset($values['entity_id']) && isset($values['biding_status_value']) && isset($values['bid_package_id']) && isset($values['company_nid'])) {
        /* $flag = flag_get_flag('rfps_bidding');
          if ($values['biding_status_value'] == 1) {
          $flag->flag('flag', $values['entity_id']);
          } else if($flag && $flag->is_flagged($values['entity_id'])) {
          $flag->flag('unflag', $values['entity_id']);
          } */
        $cmpNid = (empty($values['company_nid'])) ? 0 : $values['company_nid'];
        $bid_packages_interested = array('entity_id' => $values['entity_id'], 'user_id' => $values['user_id'], 'company_nid' => $cmpNid, 'bid_package_id' => $values['bid_package_id']);
        $bid_packages_interested_fields = array('entity_id' => $values['entity_id'], 'user_id' => $values['user_id'], 'company_nid' => $cmpNid, 'bid_package_id' => $values['bid_package_id'], 'bidding_status' => $values['biding_status_value']);
        db_merge('m6connect_bid_package_invitee_interested')->key($bid_packages_interested)->fields($bid_packages_interested_fields)->execute();
    }
    return array('#type' => 'ajax', '#commands' => $commands);
}

function get_request_to_intent_form_callback($RfpNode, $fcitemID) {
    $invitedBidder = isset($_REQUEST['invited-bidder']) ? $_REQUEST['invited-bidder'] : '';
		$packageId = isset($_REQUEST['package_id']) ? $_REQUEST['package_id'] : 0;
		$bidder_id = isset($_REQUEST['bidder_id']) ? $_REQUEST['bidder_id'] : 0;
    $form = drupal_get_form('request_bid_intent_dialog_form', $RfpNode->nid, $fcitemID, $invitedBidder,$packageId,$bidder_id);
    $output = drupal_render($form);
    $ajax_action_submit = url("request-to-intent/" . $RfpNode->nid . '/' . $fcitemID);
    $json = array('html' => $output, 'data' => $form, 'path' => $ajax_action_submit);
    drupal_json_output($json);
    drupal_exit();
}

function request_bid_intent_dialog_form($form, &$form_state, $nodeNid, $fcitemId, $invitedBidder,$package_id,$bidder_id) {
    $form['#attributes'] = array('class' => array('request_bid_intent_dialog_form'));
    $form['markup'] = array(
        '#markup' => '<div class="text-center"><strong>Would you like to send an Intent to Bid Request to ' . $invitedBidder . '? By selecting OK an email will be sent to this bidder requesting them to login to M6 and indicate their Intent to Bid on this RFP.<span class="data-fc-item-id" style="display:none;">' . $fcitemId . '</span><span class="data-rfp-id" style="display:none;">' . $nodeNid . '</span></strong></div>'
    );
    $form['message'] = array(
        '#title' => 'Message',
        '#type' => 'textarea',
        '#rows' => 3,
        '#required' => TRUE,
        '#prefix' => '<div class="request-bid-intent-message">',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('request-bid-intent-message-text')),
    );

    $form['node-nid'] = array(
        '#type' => 'hidden',
        '#value' => $nodeNid,
    );
    $form['fc-itemid'] = array(
        '#type' => 'hidden',
        '#value' => $fcitemId,
    );
		$form['package_id'] = array(
        '#type' => 'hidden',
        '#value' => $package_id,
    );
		$form['bidder_id'] = array(
        '#type' => 'hidden',
        '#value' => $bidder_id,
    );
    return $form;
}

function request_to_intent_callback($rfpNode, $field_CollectionId) {
    global $user, $base_path, $base_url;
	$m6connect_rfp_bidder_feedback_message = db_table_exists('m6connect_rfp_bidder_feedback_message');
    $return = array();
	$replacewith = array();
    $values = $_REQUEST;
    $mail_flag = 0;
    $request_bid_intent_count = 0;
    parse_str($values['values'], $output);
    $query = db_select('node', 'n');
    $query->leftJoin('realname', 'r', 'r.uid=n.uid');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.entity_id=n.nid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->leftJoin('m6connect_rfp_bidder_feedback', 'mrbf', 'mrbf.rfp_invite_fc_itemid=ric.field_rfp_invite_comapnies_value');
    $query->fields('n', array('nid', 'title'));
    $query->fields('r', array('realname'));
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->fields('mrbf', array('request_bid_intent_count'));
    $query->condition('n.nid', $rfpNode->nid, '=');
    $query->condition('ric.field_rfp_invite_comapnies_value', $field_CollectionId, '=');
    $result = $query->execute()->fetchObject();
    if ($result && is_object($result)) {
        $request_bid_intent_count = $result->request_bid_intent_count;
        $RfpCompanyNid = _get_user_company_nid($rfpNode->uid);
        $rfpCmpNodeTitle = '';
        if ($RfpCompanyNid && is_numeric($RfpCompanyNid)) {
            $rfpCmpNodeTitle = _get_title_of_node($RfpCompanyNid);
        }
        $rfpath = drupal_lookup_path('alias', 'node/' . $rfpNode->nid);
        $rfpath = l($rfpNode->title, $base_url . $base_path . $rfpath, array('external' => TRUE));
        $paramstemp = array(
            'subject' => '[RFP:SenderCompanyname] Bid Intent Request for [RFP:Name] RFP',
            'body' => '<p>[InvitedBidder:FirstName],</p><p>Please sign into M6Connect and update your Intent to Bid information.  It can be found in the RFP under the <span style="color:#337ab7;"><strong>Bidder Feedback</strong></span> tab.</p><p><strong>Update Message:</strong>[InvitedBidder:UpdateMessage]</p><p>Click the link below to view the updated RFP.<br />[RFP:Link]</p><p>Thank you so much for your attention to this RFP and letting us know whether you intend to bid or not.</p><p>Sincerely,<br />[RFP:SenderName]<br />[RFP:SenderCompanyname]</p>',
            'sender' => $user->mail,
            'language' => language_default(),
            'module' => 'm6connect_misc',
            'key' => 'rfp_mail___request_to_intent_notify',
            'build' => TRUE,
        );
        $mgruids = array();
        $mapping = array();
        if (is_numeric($result->field_rfp_company_nid_email_value)) {
            $mgruids = explode(',', $result->field_co_invite_manager_uid_value);
        } else if ($invited = user_load_by_mail($result->field_rfp_company_nid_email_value)) {
            $mgruids = array($invited->uid);
        }
        if (!empty($mgruids)) {
            $query = db_select('users', 'u');
            $query->leftJoin('field_data_field_first_name', 'fn', 'fn.entity_id=u.uid');
            $query->fields('u', array('mail'));
            $query->fields('fn', array('field_first_name_value'));
            $query->condition('u.uid', array_values($mgruids), 'IN');
            $mapping = $query->execute()->fetchAllKeyed(0, 1);
        } else {
            $mapping[$result->field_rfp_company_nid_email_value] = $result->field_rfp_company_nid_email_value;
        }
        $replace = array(
            '[RFP:SenderCompanyname]' => $rfpCmpNodeTitle,
            '[RFP:Name]' => $rfpNode->title,
            '[InvitedBidder:FirstName]' => '',
            '[InvitedBidder:UpdateMessage]' => $output['message'],
            '[RFP:Link]' => $rfpath,
            '[RFP:SenderName]' => $result->realname,
        );
				
				
        $tempdr = '';
        foreach ($mapping as $userMail => $firstName) {
            $tempMessage = $replace;
            $tempMessage['[InvitedBidder:FirstName]'] = $firstName;
            $params = $paramstemp;
            $params['subject'] = str_replace(array_keys($tempMessage), array_values($tempMessage), $paramstemp['subject']);
            $params['body'] = str_replace(array_keys($tempMessage), array_values($tempMessage), $paramstemp['body']);
            $tempdr = drupal_mail($params['module'], $params['key'], $userMail, $params['language'], $params);
						
						
            if (isset($tempdr['send']) && $tempdr['send'] == 1) {
                $mail_flag++;
            }
        }
        if ($mail_flag) {
            $request_bid_intent_count++;
            db_update('m6connect_rfp_bidder_feedback')->fields(array('request_bid_intent_count' => $request_bid_intent_count))->condition('rfp_invite_fc_itemid', $field_CollectionId, '=')->execute();
						
        }
				
		if ($m6connect_rfp_bidder_feedback_message) {
		  db_insert('m6connect_rfp_bidder_feedback_message')->fields(array(
				  'bidder_feedback_id' => $output['bidder_id'],
				  'bid_package_id' => $output['package_id'],
				  'user_uid' => $user->uid,
				  'message' => $output['message'],
				  'message_prefix' => 'Request Bid Intent',
				  'timestamp' => time(),
		  ))->execute();
		  $messageOutput = get_bidder_feedback_message($output['bidder_id'], $output['package_id'], $bidder_user=1);
		  if(!empty($messageOutput)){
		    $replacewith = array(
			  'selector'=>'#bidder_feedback_message_container_'.$output['bidder_id'].'_'.$output['package_id'],
			  'html' => $messageOutput,
			);
		  }
		}
    }
    //drupal_set_message('<pre>'.print_r($result,1).'</pre>');
    drupal_json_output(array('status' => 1, 'intent_bid_count' => $request_bid_intent_count,'replacemessage'=>$replacewith));
    drupal_exit(0);
}

//Bidder Feedback tab refresh should redirect to Bidder Feedback tab.
function set_rfp_active_tab_callback($nid) {
    if (isset($_REQUEST['pos'])) {
        $_SESSION['rfp_node_active_tab_' . $nid] = $_REQUEST['pos'];
    }
    if (isset($_REQUEST['feedbacktab'])) {
        $_SESSION['rfp_node_feedback_active_tab_' . $nid] = $_REQUEST['feedbacktab'];
    }
    drupal_exit(0);
}

function is_rfp_bidding_flag_set($entityId) {
    global $user;
    $query = db_select('m6connect_bid_package_invitee_interested', 'mbpii');
    $query->fields('mbpii', array('id'));
    $query->condition('mbpii.bidding_status', 1, '=');
    $query->condition('mbpii.entity_id', $entityId, '=');
    $query->condition('mbpii.user_id', $user->uid, '=');
    $isBidding = $query->execute()->rowCount();
    return $isBidding;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////End Bidder Feedback Work//////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * copy rfp node into new rfp node
 */
function copy_rfp_node($frpnid, $projectnid = NULL) { //pre('copy1',1);
    $account = $GLOBALS['user'];
    $original_node = node_load($frpnid); //pre($original_node);
    $is_documents = $fids = 0;
    if (isset($original_node->nid)) {
        
    }
    $node = clone $original_node; //pre($node,1);

    $node->nid = NULL;
    $node->vid = NULL;
    $node->tnid = NULL;
    $node->log = NULL;
    // Also handle modules that attach a UUID to the node.
    $node->uuid = NULL;
    $node->vuuid = NULL;

    // Anyonmymous users don't have a name.
    // @see: drupal_anonymous_user().
    $node->name = isset($account->name) ? $account->name : NULL;
    $node->uid = $account->uid;

    $node->created = NULL;
    /*
      $node->menu = clone_node_clone_menu_link($original_node);
      if (isset($node->book['mlid'])) {
      $node->book['mlid'] = NULL;
      $node->book['has_children'] = 0;
      }
     */
    $node->path = NULL;
    $node->status = 0;
    //$node->files = array();
    unset($node->field_rfp_serial['und']);
    unset($node->field_reference_number['und']);

    $node->title = t('Copy !title', array('!title' => $node->title));

    // Add an extra property as a flag.
//  $node->clone_from_original_nid = $original_node->nid;
    /*
      if (variable_get('clone_reset_'. $node->type, FALSE)) {
      $node_options = variable_get('node_options_'. $node->type, array('status', 'promote'));
      // Fill in the default values.
      foreach (array('status', 'moderate', 'promote', 'sticky', 'revision') as $key) {
      // Cast to int since that's how they need to be saved to the DB.
      $node->$key = (int) in_array($key, $node_options);
      }
      }
     */

    /*
     * copy logo field
     */
    if (isset($node->field_rfp_logo['und']) && isset($node->field_rfp_logo['und'][0]['fid']) && !empty($node->field_rfp_logo['und'][0]['fid'])) {
        //$is_logo = 1;	
        //$fids = $node->field_rfp_logo['und'][0]['fid'];
        //unset($node->field_rfp_logo['und']); 
        $fids = $node->field_rfp_logo['und'][0]['fid']; //pre($fids);	
        $result = file_load_multiple(array($fids)); //pre($result);
        if (is_array($result) && !empty($result)) {
            foreach ($result as $delta => $fileObj) {
                $filname = $fileObj->filename; //pre($filname);
                /* $uri = $fileObj->uri; pre($uri);
                  $fpath = str_replace('/'.$filname,'',$uri);//pre($fpath);
                  $fpatharr = explode('/',$fpath);//pre($fpatharr);
                  $fp = array_pop($fpatharr);//pre($fp);pre($fpatharr);
                  $fullfilepath = implode('/',$fpatharr);//pre($fullfilepath); */
                $objFile = file_copy($fileObj, $destination = 'private://' . $filname, $replace = FILE_EXISTS_RENAME);
                if ($objFile) { //pre($objFile);
                    unset($node->field_rfp_logo['und']);
                    $node->field_rfp_logo['und'][0] = (array) $objFile;
                }
            }
        } //pre('hi',1);
    }

    /*
     * Update Documents file field
     */
    $DocFielCollid = array();
    if (isset($node->field_rfp_documents['und']) && isset($node->field_rfp_documents['und'][0]['value']) && !empty($node->field_rfp_documents['und'][0]['value'])) {
        $is_documents = 1;
        foreach ($node->field_rfp_documents['und'] as $delta => $item) {
            $DocFielCollid[] = field_collection_item_load($item['value']);
        }
        unset($node->field_rfp_documents['und']);
    }


/////////////////////////////// File field copy start //////////////////////////////////
/////////////////////////////// File field copy end //////////////////////////////////

    if ($projectnid) {
        $node->field_project['und'][0]['target_id'] = $projectnid;
    }

    node_save($node);
    $nodeID = $node->nid;
    $newnode = node_load($nodeID);

    /*
     * Copy document field collection
     */

    /* if($is_documents){
      $items = field_get_items('node', $original_node, 'field_rfp_documents');
      foreach ($items as $item) {
      $fieldCollection = field_collection_field_get_entity($item); //pre($fieldCollection);

      $fc_item = entity_create('field_collection_item', array('field_name' => 'field_rfp_documents'));
      $fc_item->setHostEntity('node', $newnode);
      $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);

      if (isset($fieldCollection->field_rfp_document_type['und']) && !empty($fieldCollection->field_rfp_document_type['und'])) {
      $doctype =  $fieldCollection->field_rfp_document_type['und'][0]['value'];
      $fc_wrapper->field_rfp_document_type->set($doctype);
      }

      if (isset($fieldCollection->field_rfp_comments['und']) && !empty($fieldCollection->field_rfp_comments['und'])) {
      $comments =  $fieldCollection->field_rfp_comments['und'][0]['value'];
      $fc_wrapper->field_rfp_comments->set($comments);
      }

      if (isset($fieldCollection->field_rfp_document['und']) && !empty($fieldCollection->field_rfp_document['und'])) {
      $fileobjects = array();
      foreach ($fieldCollection->field_rfp_document['und'] as $index => $fileArr) {
      //$file = file_load($fileArr['fid']);
      //file_move($file, $destination = $file_location, $replace = FILE_EXISTS_RENAME);
      //////////////////////////////////////////////////
      $fids = $fileArr['fid'];
      $result = file_load_multiple(array($fids)); //pre($result);
      if(is_array($result) && !empty($result)){
      foreach($result as $delta => $fileObj) {
      $filname = $fileObj->filename;//pre($filname);
      $objFile = file_copy($fileObj, $destination = 'private://'.$filname, $replace = FILE_EXISTS_RENAME);
      if($objFile){ //pre($objFile);
      //unset($node->field_rfp_logo['und']);
      //$node->field_rfp_logo['und'][0] = (array)$objFile;
      $fileobjects[] = (array)$objFile;
      }
      }
      }
      ////////////////////////////////
      }
      //$fc_wrapper->field_rfp_document->set($fileobjects);
      }
      $fc_wrapper->save(TRUE);
      $fieldCollectionId=$fc_wrapper->getIdentifier();
      node_save($newnode);
      }
      //pre('fdsf',1);
      } */


    if (!$projectnid) {
        $rfpPath = 'node/' . $nodeID;
        drupal_goto($rfpPath);
    }
    /* if(isset($_REQUEST['documentsalso']) && !empty($_REQUEST['documentsalso'])){ 
      echo $nodeID;
      } */
}

function custom_rfp_copy_submit(&$form, &$form_state) { //pre($form,1);
    if (isset($form['nid']) && isset($form['nid']['#value']) && !empty($form['nid']['#value'])) {
        $rfpnid = $form['nid']['#value'];
        $redirect = 'copyrfp/' . $rfpnid;
        drupal_goto($redirect);
    }
}

function check_rfp_is_awarded($nid) {
    $awarded = 0;
    $query = db_select('node', 'n');
    $query->Join('field_data_field_submit_proposal_in_respons', 'rid', 'rid.entity_id=n.nid');
    $query->Join('field_data_field_choose_from_the_options_li', 'op', 'op.entity_id=n.nid');
    $query->Join('proposal_award', 'pa', 'pa.node_id=n.nid');
    $query->fields('n', array('nid'))
            //->condition('rid.field_submit_proposal_in_respons_target_id', $nid, '=')
            ->condition('op.field_choose_from_the_options_li_value', 'Submit Proposal in Response to a RFP', '=')
            ->condition('pa.node_id', $nid, '=');
    $result = $query->execute()->fetchAll();
    foreach ($result as $row) {
        $awarded = 1;
    }
    return $awarded;
}

/* * ******** Start RFP Center Menmbership Popup Work ********* */

function rfp_agreed_membership_payment_callback($node) {
    /*     * *** Changed **** */
    global $user, $company;
    $hide_popup = (isset($_REQUEST['hide_popup']) && $_REQUEST['hide_popup']) ? 1 : 0;
    /*     * *** Changed **** */
    //if (db_table_exists('m6connect_rfp_agreed_membership_payment')) {
    //$keys = array('uid' => $user->uid, 'entity_id' => $node->nid);
    //$fields = array('uid' => $user->uid, 'entity_id' => $node->nid, 'timestamp' => REQUEST_TIME, 'hide_popup' => $hide_popup);
    if (db_table_exists('m6connect_rfp_agreed_membership_payment') && $company->nid) {
        $keys = array('uid' => $user->uid, 'entity_id' => $node->nid, 'company_nid' => $company->nid);
        $fields = array('uid' => $user->uid, 'entity_id' => $node->nid, 'company_nid' => $company->nid, 'timestamp' => REQUEST_TIME, 'hide_popup' => $hide_popup);
        db_merge('m6connect_rfp_agreed_membership_payment')->key($keys)->fields($fields)->execute();
        $_SESSION['rfp_access_' . $node->nid . '_' . $user->uid] = 1;
    }
    drupal_json_output(array('status' => 1, 'path' => '/' . drupal_lookup_path('alias', 'node/' . $node->nid)));
    drupal_exit(0);
}

/* * ******** End RFP Center Menmbership Popup Work ********* */

/* * ******** Start RFP Award Fuctionality ********* */

function award_rfp_invited_popup_style() {
    static $delegationAdded = FALSE;
    if ($delegationAdded == FALSE) {
        $delegationAdded = TRUE;
        ctools_include('modal');
        ctools_include('ajax');
        ctools_modal_add_js();
        $award_rfp_invited_popup_style = array(
            'award-rfp-invited-popup-style' => array(
                'modalSize' => array(
                    'type' => 'fixed',
                    'width' => 530,
                    'height' => 'auto',
                ),
                'modalOptions' => array(
                    'opacity' => (float) 0.85,
                    'background-color' => '#000000',
                ),
                'closeText' => '',
                'loadingText' => '',
                'animation' => 'fadeIn',
                'modalTheme' => 'AwardRFPInvited',
                'animationSpeed' => 'fast',
            ),
        );
        drupal_add_js($award_rfp_invited_popup_style, 'setting');
        ctools_add_js('m6connect_custom_popup_modal', 'm6connect_rfp');
    }
}

function get_award_rfp_invited_user_option($entity_id) {
    $entityNode = node_load($entity_id);
    $options = array();
    $optionmeta = array();
    $awardedData = array();
    $awardedFC = array();
    if (db_table_exists('m6connect_rfp_invited_award')) {
        $awardedFC = db_select('m6connect_rfp_invited_award', 'ma')->fields('ma', array('field_collection_item_id'))->condition('ma.entity_nid', $entity_id, '=')->condition('ma.status', 1, '=')->execute()->fetchCol();
    }
    if (isset($entityNode->field_rfp_invite_comapnies['und']) && !empty($entityNode->field_rfp_invite_comapnies['und'])) {
        foreach ($entityNode->field_rfp_invite_comapnies['und'] as $delta => $item) {
            $fc = field_collection_item_load($item['value']);
            $inviteddata = (isset($fc->field_rfp_company_nid_email['und'])) ? trim($fc->field_rfp_company_nid_email['und'][0]['value']) : '';
            if (!empty($inviteddata)) {
                if (is_numeric($inviteddata)) {
                    $cmpNode = node_load($inviteddata);
                    $compMgr = isset($fc->field_co_invite_manager_uid['und']) ? explode(',', $fc->field_co_invite_manager_uid['und'][0]['value']) : array();
                    $companyLogo = (isset($cmpNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'pic_20x20', 'path' => $cmpNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                    $compMgr = array_filter(array_map('trim', $compMgr));
                    $mgrName = array();
                    foreach ($compMgr as $index => $cmpUid) {
                        $mgrName[] = _get_user_full_name($cmpUid);
                    }
                    if (!empty($mgrName)) {
                        if (!in_array($fc->item_id, $awardedFC)) {
                            $key_val = $fc->item_id . '::' . $cmpNode->nid;
                            $key_val_value = $cmpNode->title . ' (' . implode(',', $mgrName) . ')';
                            $options[$key_val] = $key_val_value;
                            $optionmeta[$key_val] = '<span class="invitee-lising-section"><span class="livitess-listing-image">' . $companyLogo . '</span><span>' . $key_val_value . '</span></span>';
                        } else {
                            $awardedData[] = $companyLogo . $cmpNode->title . ' (' . implode(',', $mgrName) . ')';
                        }
                    }
                } else {
                    $mgrMail = trim($fc->field_rfp_company_nid_email['und'][0]['value']);
                    $cmpUserNid = '';
                    $companyTitle = '';
                    $companyLogo = '';
                    $companyUserName = $fc->field_rfp_company_nid_email['und'][0]['value'];
                    if ($mailUser = user_load_by_mail($mgrMail)) {
                        $companyUserName = $mailUser->realname;
                        if ($cmpUserNid = _get_user_company_nid($mailUser->uid)) {
                            $cmpUserNode = node_load($cmpUserNid);
                            $companyTitle = $cmpUserNode->title;
                            $companyLogo = (isset($cmpUserNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'pic_20x20', 'path' => $cmpUserNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                        }
                    }
                    if (!in_array($fc->item_id, $awardedFC)) {
                        $key_val = $fc->item_id . '::' . $mgrMail;
                        $options[$key_val] = $mgrMail;
                        if ($cmpUserNid) {
                            $optionmeta[$key_val] = '<span class="invitee-lising-section"><span class="livitess-listing-image">' . $companyLogo . '</span><span>' . $companyTitle . ' (' . $companyUserName . ')' . '</span></span>';
                        } else {
                            $optionmeta[$key_val] = '<span class="invitee-lising-section"><span class="livitess-listing-image">' . $companyLogo . '</span><span>' . $mgrMail . '</span></span>';
                        }
                    } else {
                        if ($cmpUserNid) {
                            $awardedData[] = $companyLogo . $companyTitle . ' (' . $mgrMail . ')';
                        } else {
                            $awardedData[] = $mgrMail;
                        }
                    }
                }
            }
        }
    }
    return array('options' => $options, 'awarded' => $awardedData, 'optionmeta' => $optionmeta);
}

function award_rfp_invited_user_callback($ajax = NULL, $entity) {
    global $user;
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');
        $form_state = array(
            'ajax' => TRUE,
            'entity_id' => $entity->nid,
        );
        $output = ctools_modal_form_wrapper('award_rfp_invited_user_form', $form_state);
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }
        print ajax_render($output);
        drupal_exit();
    }
    return drupal_get_form('award_rfp_invited_user_form', $entity->nid);
    drupal_goto('rfps/sent');
}

function award_rfp_invited_user_form($form, &$form_state, $entityId = '') {
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();
    $entityId = (empty($entityId)) ? $form_state['entity_id'] : $entityId;
    $form['#attributes'] = array('class' => array('award_rfp_invited_user_form'), 'id' => 'award_rfp_invited_user_form');
    $form['startup-text'] = array(
        '#markup' => '<div class="award-invited-user-title"><h4>Award Companies/Individuals for the RFP</h4></div>',
        '#prefix' => '<div class="award-invited-user-header">',
        '#suffix' => '</div>',
    );

    $form['entity_id'] = array(
        '#type' => 'value',
        '#value' => $entityId,
    );
    //$mapping = get_award_rfp_invited_user_option($entityId);
    //$awarded = $mapping['awarded'];
    //$options = $mapping['options'];
    //$optionsmeta = $mapping['optionmeta'];

    $bid_packages2 = $bid_packages = get_bid_packages_listing($entityId);
    $bid_packages += array(0 => 'Unassigned Bidder(s)');

    $ot_return = get_invited_award_data_options($entityId);
    $ot_optionMeta = $ot_return['optionmata'];
    $ot_awardMeta = $ot_return['awardmeta'];
    $form['start'] = array(
        '#markup' => '<div class="rfp-awarded-section">',
    );

    /*
      if (!empty($awarded)) {
      $form['awarded_companies'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="awared-rfp-invitess-listing">'.implode('</div><div class="awared-rfp-invitess-listing">', $awarded).'</div>',
      '#prefix' => '<div class="awarded_companies"><label>Awarded Companies/Individual</label><div class="awarded-companie-list">',
      '#suffix' => '</div></div>',
      );
      }

      if (!empty($options)) {
      $form['invited_companies'] = array(
      '#type' => 'checkboxes',
      '#title' => 'Select Companies/Individual to Award',
      '#title_display' => 'invisible',
      //'#options' => $options,
      '#options' => $optionsmeta,
      '#prefix' => '<div class="award-rfp-invited-user-option"><label>Select Companies/Individual to Award</label><div class="awarded-companie-list">',
      '#suffix' => '</div></div>',
      );
      } else {
      $form['invited_companies'] = array(
      '#type' => 'markup',
      '#markup' => '<strong>Companies/Individuals not invited yet.</strong>',
      '#prefix' => '<div class="award-rfp-invited-user-option">',
      '#suffix' => '</div>',
      );
      } */

    $bidPackageEmpty = (empty($bid_packages2)) ? 1 : 0;
    if (!empty($ot_awardMeta)) {
        $form['awarded_start'] = array('#markup' => '<div class="awarded_companies"><label>Awarded Companies/Individual</label><div class="awarded-companie-list">');
        foreach ($bid_packages as $bidpackageId => $bidpackageName) {
            if (isset($ot_awardMeta[$bidpackageId]) && !empty($ot_awardMeta[$bidpackageId])) {
                if ($bidPackageEmpty) {
                    $bidpackageName = '';
                }
                $companyawarded = $ot_awardMeta[$bidpackageId];
                $form['awarded_companies_' . $bidpackageId] = array(
                    '#type' => 'markup',
                    '#markup' => '<div class="awared-rfp-invitess-listing">' . implode('</div><div class="awared-rfp-invitess-listing">', $companyawarded) . '</div>',
                    '#prefix' => '<div class="awarded-package-name"><strong>' . $bidpackageName . '</strong></div>',
                );
            }
        }
        $form['awarded_end'] = array('#markup' => '</div></div>');
    }

    if (!empty($ot_optionMeta)) {
        $form['invited_start'] = array('#markup' => '<div class="award-rfp-invited-user-option"><label>Select Organizations/Individual to Award</label></div><div class="awarded-package-invited-section">');
        foreach ($bid_packages as $bidpackageId => $bidpackageName) {
            if (isset($ot_optionMeta[$bidpackageId]) && !empty($ot_optionMeta[$bidpackageId])) {
                $form['packages_award_fieldset_' . $bidpackageId] = array(
                    '#type' => 'fieldset',
                    '#title' => $bidpackageName,
                    '#collapsible' => TRUE,
                    '#collapsed' => TRUE,
                    '#prefix' => '<div class="awarded-package-invited-list">',
                    '#suffix' => '</div>',
                );
                $form['packages_award_fieldset_' . $bidpackageId]['packages_award_checkbox_' . $bidpackageId] = array(
                    '#type' => 'checkboxes',
                    '#title' => 'Select Companies/Individual to Award',
                    '#title_display' => 'invisible',
                    '#options' => $ot_optionMeta[$bidpackageId],
                    '#prefix' => '<div class="award-rfp-invited-user-option"><div class="awarded-companie-list">',
                    '#suffix' => '</div></div>',
                    '#parents' => array('invited_companies', $bidpackageId),
                );
            }
        }
        $form['invited_end'] = array('#markup' => '</div>');
    }

    $form['end'] = array(
        '#markup' => '</div>',
    );

    $form['action_container'] = array(
        '#type' => 'container',
        '#prefix' => '<div id="action_container" class="action_container pull-right">',
        '#suffix' => '</div>',
    );

    $form['action_container']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Award'
    );

    $form['action_container']['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('onclick' => 'jQuery("span.popups-close").click();'))),
    );

    return $form;
}

function award_rfp_invited_user_form_submit(&$form, &$form_state) {
    global $user, $base_url, $base_path;
    include_once(libraries_get_path('mpdf') . '/mpdf.php');
    $values = $form_state['values'];
    //echo '<pre>';
    //print_r($values);
    //die;
    $rfpNid = '';
    $rfpCmpTitle = '';
    $openAwardOfNoticeDailog = 0;
    if (!empty($values['entity_id']) && isset($values['invited_companies']) && !empty($values['invited_companies'])) {
        $rfpNid = $values['entity_id'];
        $rfpNode = node_load($values['entity_id']);
        $rfpUser = user_load($rfpNode->uid);
        $rfpCmpNid = _get_user_company_nid($rfpNode->uid);
        $rfpCmpTitle = '';
        $rfpCityState = '';
        if ($rfpCmpNid && is_numeric($rfpCmpNid)) {
            $rfpCmpNode = node_load($rfpCmpNid);
            $rfpCmpTitle = $rfpCmpNode->title;
        }
        foreach ($values['invited_companies'] as $delta => $data) {
            /* if (!empty($data)) {
              $openAwardOfNoticeDailog = 1;
              break;
              } */
            foreach ($data as $delta2 => $data2) {
                if (!empty($data2)) {
                    $openAwardOfNoticeDailog = 1;
                    break;
                }
            }
        }
    }
    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
        $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
        if ($openAwardOfNoticeDailog) {
            $form_state['ajax_commands'][] = array("command" => 'awardOfNoticeDailog', 'data_nid' => $rfpNid, 'rfpTitle' => $rfpNode->title, 'values' => serialize($values), 'awardingCompanyTitle' => $rfpCmpTitle);
        }
    }
}

function check_membership_user_by_nid_mail($nidOrMail) {
    if (is_numeric($nidOrMail)) {
        $cmpNode = node_load($nidOrMail);
        $cmpUser = user_load($cmpNode->uid);
        $ismembership = array_intersect(array_keys($cmpUser->roles), array(7, 8, 9));
        if (!empty($ismembership)) {
            return TRUE;
        }
    } else {
        $emailuser = user_load_by_mail($nidOrMail);
        if ($emailuser) {
            $companyNid = _get_user_company_nid($emailuser->uid);
            $ismembership = array_intersect(array_keys($emailuser->roles), array(7, 8, 9));
            if (!empty($ismembership)) {
                return TRUE;
            }
        }
    }
    return FALSE;
}

function get_user_mails_by_uids($uids) {
    $return = array();
    if (!empty($uids) && is_array($uids)) {
        $return = db_select('users', 'u')->fields('u', array('uid', 'mail'))->condition('u.uid', array_values($uids), 'IN')->execute()->fetchAllKeyed(0, 1);
    }
    return $return;
}

function rfp_send_preliminary_award_mail_callback() {
    global $user, $base_url, $base_path;
    include_once(libraries_get_path('mpdf') . '/mpdf.php');
    if (isset($_REQUEST['award_data']) && isset($_REQUEST['data_nid']) && !empty($_REQUEST['award_data']) && !empty($_REQUEST['data_nid'])) {
        $values = unserialize($_REQUEST['award_data']);
        $data_nid = $_REQUEST['data_nid'];
        $rfpNid = '';
        $rfpCmpTitle = '';
        if (!empty($values['entity_id']) && isset($values['invited_companies']) && !empty($values['invited_companies'])) {
            $rfpNid = $values['entity_id'];
            $rfpNode = node_load($values['entity_id']);
            $rfpUser = user_load($rfpNode->uid);
            /*             * *** Changed **** */
            //$rfpCmpNid = _get_user_company_nid($rfpNode->uid);
            $rfpCmpNid = _get_company_nid_by_group_content($rfpNode);
            $rfpCmpTitle = '';
            $rfpCityState = '';
            if ($rfpCmpNid && is_numeric($rfpCmpNid)) {
                $rfpCmpNode = node_load($rfpCmpNid);
                $rfpCmpTitle = $rfpCmpNode->title;
                /* if (isset($rfpCmpNode->field_org_address['und']) && !empty($rfpCmpNode->field_org_address['und'][0])) {
                  $rfpCityState = $rfpCmpNode->field_org_address['und'][0]['locality'] . ', ' . $rfpCmpNode->field_org_address['und'][0]['administrative_area'];
                  } */
            }
            if (isset($rfpNode->field_project['und']) && !empty($rfpNode->field_project['und'][0]['target_id'])) {
                $projectNode = node_load($rfpNode->field_project['und'][0]['target_id']);
                if (isset($projectNode->field_project_address_new['und']) && !empty($projectNode->field_project_address_new['und'][0])) {
                    $rfpCityState = $projectNode->field_project_address_new['und'][0]['locality'] . ', ' . $projectNode->field_project_address_new['und'][0]['administrative_area'];
                }
            }
            $invitedCompany = array();
            foreach ($values['invited_companies'] as $delta => $data) {
                foreach ($data as $deleta2 => $data2) {
                    if (empty($data2)) {
                        continue;
                    }
                    $invitedCompany[$deleta2] = $data2;
                }
            }
            //foreach ($values['invited_companies'] as $delta => $data) {
            foreach ($invitedCompany as $delta => $data) {
                if (empty($data)) {
                    continue;
                }
                $temp = explode('::', $data);
                $fieldCollectionItemId = $temp[0];
                $nidOrMail = $temp[1];
                $bid_package_id = $temp[2];

                $insert = $insertKey = array(
                    'entity_nid' => $values['entity_id'],
                    'user_uid' => $user->uid,
                    'field_collection_item_id' => $fieldCollectionItemId,
                    'bid_package_id' => $bid_package_id,
                    'company_nid' => (is_numeric($nidOrMail)) ? $nidOrMail : NULL,
                    'individual_mail' => (!is_numeric($nidOrMail)) ? $nidOrMail : NULL,
                    'status' => 1,
                    'timestamp' => time(),
                );

                //Check Membership of user
                $ismembership = array();
                $cmpNode = '';
                $mgrUidEmailmapping = array();
                $senderCompanyName = '';
                if (is_numeric($nidOrMail)) {
                    $cmpNode = node_load($nidOrMail);
                    $senderCompanyName = $cmpNode->title;
                    $cmpUser = user_load($cmpNode->uid);
                    //$ismembership = array_intersect(array_keys($cmpUser->roles), array(7, 8, 9));
                    $ismembership = array_intersect(array_keys($cmpUser->roles), array(8, 9));
                    $fc = field_collection_item_load($fieldCollectionItemId);
                    $compMgr = isset($fc->field_co_invite_manager_uid['und']) ? explode(',', $fc->field_co_invite_manager_uid['und'][0]['value']) : array();
                    $compMgr = array_filter(array_map('trim', $compMgr));
                    $mgrUidEmailmapping = get_user_mails_by_uids($compMgr);
                } else {
                    $senderCompanyName = $nidOrMail;
                    $emailuser = user_load_by_mail($nidOrMail);
                    if ($emailuser && is_object($emailuser)) {
                        //$ismembership = array_intersect(array_keys($emailuser->roles), array(7, 8, 9));
                        $ismembership = array_intersect(array_keys($emailuser->roles), array(8, 9));
                        $companyNid = _get_user_company_nid($emailuser->uid);
                        if ($companyNid && is_numeric($companyNid)) {
                            $cmpNode = node_load($companyNid);
                            $senderCompanyName = $cmpNode->title;
                            if (empty($ismembership) && $cmpNode->uid !== $emailuser->uid) {
                                $cmpUser = user_load($cmpNode->uid);
                                //$ismembership = array_intersect(array_keys($cmpUser->roles), array(7, 8, 9));
                                $ismembership = array_intersect(array_keys($cmpUser->roles), array(8, 9));
                            }
                        }
                        $mgrUidEmailmapping = array($emailuser->uid => $emailuser->mail);
                    } else {
                        $mgrUidEmailmapping = array(0 => $nidOrMail);
                        $ismembership = array();
                    }
                }

                //Insert Record in the table
                if (db_table_exists('m6connect_rfp_invited_award')) {
                    //$insert['membership_status'] = (empty($ismembership))?0:1;
                    $insert['membership_status'] = 0;
                    $insert['membership_award'] = $insert['timestamp'];
                    db_merge('m6connect_rfp_invited_award')->key($insertKey)->fields($insert)->execute();
                }

                $rfpNodePath = drupal_lookup_path('alias', 'node/' . $rfpNode->nid);
                $rfpNodePath2 = l('<span style="color:#d04437;">here</span>', $base_url . $base_path . $rfpNodePath, array('external' => true, 'html' => true));
                $imagePath = $base_url . $base_path . drupal_get_path('module', 'm6connect_misc') . '/images/';
                //$bgimgPath= (empty($ismembership))?'award_preliminary.png':'award_membership.png';
                $bgimgPath = 'award_preliminary.png';
                $m6logoForMail = 'm6-logo-rfp-award.png';
                $replace = array(
                    '[Proposal:bgImagePath]' => $imagePath . $bgimgPath,
                    //'[Proposal:bgImagePath]'=>'',
                    '[Proposal:RFPCompanyName]' => $rfpCmpTitle,
                    '[Proposal:SenderCompanyName]' => $senderCompanyName,
                    '[Proposal:Name]' => $rfpNode->title,
                    '[Proposal:Type]' => 'RFP',
                    '[Proposal:AwardDate]' => date('m-d-Y'),
                    '[Proposal:RFPCityState]' => $rfpCityState,
                    '[Proposal:m6LogoPath]' => $imagePath . 'proposal_mail_logo.png',
                    '[Proposal:RFPOwnerName]' => _get_user_full_name($rfpNode->uid),
                    '[Proposal:RFPFullLink]' => $rfpNodePath2,
                    '[Proposal:BidderFeedBackName]' => get_bid_package_name_by_id($bid_package_id),
                    '[Proposal:M6LogoRFPAward]' => $imagePath . $m6logoForMail,
                );

                $message = '[Proposal:SenderCompanyName],<br/><br/>[Proposal:RFPOwnerName], from [Proposal:RFPCompanyName], has awarded RFP - [Proposal:Name].<p>You need to login and navigate to the respective RFP, then click the green Action button and in the dropdown select Accept Award.</p><p>In order to receive your Notice of Award, you must login and ensure your company has a current Gold Membership and accept the award.</p><p>Click [Proposal:RFPFullLink] to view the RFP and accept the award.</p><p>Congratulations,<br/><img src="[Proposal:M6LogoRFPAward]"/><br/>M6Connect Corporation<br/></p>';

                $params = array(
                    'subject' => 'M6Connect - Notice of Pending Award for ' . $rfpNode->title,
                    'body' => str_replace(array_keys($replace), array_values($replace), $message),
                    'sender' => $user->mail,
                    'bcc' => $rfpUser->mail,
                    'language' => language_default(),
                    'module' => 'm6connect_misc',
                    'key' => 'rfp_mail___awarded_proposal_notify',
                    'build' => TRUE,
                    'bcc' => 'support@m6connect.com',
                );
                $to = array_values($mgrUidEmailmapping);
                if (!empty($to) && !empty($params['body'])) {
                    $mpdf = new mPDF('c');
                    $mpdf->WriteHTML(theme('proposal_awareded_mail_content', array('replace' => $replace)));
                    $file_content = $mpdf->Output('', 'S');
                    $params['attachments'][] = array(
                        'filecontent' => $file_content,
                        'filename' => 'Notice of Award.pdf',
                        'filemime' => 'application/pdf',
                    );
                    $return = drupal_mail($params['module'], $params['key'], implode(',', $to), $params['language'], $params);
                }
            }
        }
    }
    drupal_json_output(array('status' => 1));
    drupal_exit(0);
}

/* * ********* End RFP Award Fuctionality ********** */

function check_rfp_user_ajax_2($node, $ajax, $free) {
    global $user;
    $dbor = db_or();
    $entity_nids = array();
    $status = array('status' => 0);

    $collabarate_users = m6connect_projects_uids_from_list($node);
    $companyusers = get_company_users_list_by_uid($node->uid);
    $nodeAceessByuUserRoles = array_intersect(array_keys($user->roles), array(3, 6, 7, 8, 9, 14));
    if (($user->uid == $node->uid) || in_array($user->uid, $companyusers) || in_array($user->uid, $collabarate_users) || !empty($nodeAceessByuUserRoles) || (isset($_SESSION['rfp_access_' . $node->nid . '_' . $user->uid]) && $_SESSION['rfp_access_' . $node->nid . '_' . $user->uid])) {
        $status['status'] = 1;
    }
    if (db_table_exists('m6connect_rfp_agreed_membership_payment')) {
        $agreed = db_select('m6connect_rfp_agreed_membership_payment', 'ramp')->fields('ramp', array('id'))->condition('ramp.uid', $user->uid, '=')->condition('ramp.entity_id', $node->nid, '=')->condition('ramp.hide_popup', 1, '=')->execute()->fetchColumn(0);
        if ($agreed) {
            $status['status'] = 1;
        }
    }
    if ($status['status'] != 1) {
        $cmpNid = _get_user_company_nid($node->uid);
        if ($cmpNid && is_numeric($cmpNid)) {
            $entity_nids[] = $cmpNid;

            $projectNid = (isset($node->field_project['und']) && !empty($node->field_project['und'][0]['target_id'])) ? $node->field_project['und'][0]['target_id'] : '';

            if ($projectNid && is_numeric($projectNid)) {
                $entity_nids[] = $projectNid;
            }
            if (!empty($entity_nids)) {
                $query = db_select('node', 'n');
                $query->join('field_data_field_available_for_free', 'aff', 'aff.entity_id = n.nid');
                $query->fields('n', array('nid'));
//$query->condition('n.type', array('organization', 'project'), 'IN');
                $query->condition('n.type', array('organization'), 'IN');
                $query->condition('aff.field_available_for_free_value', 1, '=');
//************************** Start (Not Show Company When they are Inctive) **************************/
//$ic_or = db_or();
//$query->leftJoin('field_data_field_company_inactive', 'ic', 'ic.entity_id = n.nid');
//$ic_or->condition('ic.field_company_inactive_value', 1, '!=')->condition('ic.field_company_inactive_value', NULL);
//$query->condition($ic_or);
//*************************** End (Not Show Company When they are Inctive) ***************************/

                $query->condition('aff.entity_id', $entity_nids, 'IN');
                $result = $query->execute()->fetchCol();
                if ($result && is_array($result) && !empty($result) && count($result) > 0) {
                    $status['status'] = 1;
                }

//////////////////////////////// for new Available free field on project /////////////////////////////
                $query2 = db_select('node', 'pn');
                $query2->join('field_data_field_available_for_free_proj', 'paff', 'paff.entity_id = pn.nid');
                $query2->fields('pn', array('nid'));
                $query2->condition('pn.type', array('project'), 'IN');
                $query2->condition('paff.field_available_for_free_proj_value', '1', '=');
                $query2->condition('paff.entity_id', $entity_nids, 'IN');
                $result2 = $query2->execute()->fetchCol();
                if ($result2 && is_array($result2) && !empty($result2) && count($result2) > 0) {
                    $status['status'] = 1;
                } //pre($status['status']);
////////////////////////////////
            }
        }
        if ($status['status'] != 1) {

            $usercmpNid = _get_user_company_nid($user->uid);
            if ($usercmpNid && is_numeric($usercmpNid)) {
                $usercmpNode = node_load($usercmpNid);
                $usercmpAdminUser = user_load($usercmpNode->uid);
                if (isset($usercmpAdminUser->roles[7]) || isset($usercmpAdminUser->roles[8]) || isset($usercmpAdminUser->roles[9]) || isset($usercmpAdminUser->roles[14])) {
                    $status['status'] = 1;
                }
            }
        }
    }
    if ($ajax == FALSE) {
        return $status['status'];
    }
    drupal_json_output($status);
    drupal_exit(0);
}

/* * *********************************************************************************** */
/* * ********************** Start Bidder Feedback Report Section *********************** */
/* * *********************************************************************************** */

function rfp_bidder_feedback_report($nid) { 
  //ini_set('max_execution_time', 600);
  //set_time_limit(0);
  global $user, $base_url, $base_path;
  
  $node = node_load($nid);
  $content = theme('rfp_bidder_feedback_report_content', array('node' => $node));
  //theme('status_messages');	
  //print $content;
  //drupal_exit(0);

  $RfpName = $node->title;
  $date = date('m/d/Y',time());
  $gid = _get_company_nid_by_group_content($node); 
  $Sendercompany = node_load($gid);	
  $SendercompanyName = $Sendercompany->title;
  $cimagepath = '';
  $cimgpath = (isset($Sendercompany->field_logo['und']) && !empty($Sendercompany->field_logo['und'][0]['uri'])) ? $Sendercompany->field_logo['und'][0]['uri'] : 0; //pre($Sendercompany->field_logo['und']);
  if ($cimgpath) {
    //$cimagepath = image_style_url('thumbnail', $cimgpath);
	
	$fids = $Sendercompany->field_logo['und'][0]['fid']; //pre($fids);	
    $result = file_load_multiple(array($fids)); //pre($result);
    if (is_array($result) && !empty($result)) {
      foreach ($result as $delta => $fileObj) {
        $filname = $fileObj->filename; //pre($filname);
        $objFile = file_copy($fileObj, $destination = 'public://' . $filname, $replace = FILE_EXISTS_RENAME);
        if ($objFile) { //pre($objFile);
          $newimgobj = (array) $objFile;
		  $newcimgpath = $newimgobj['uri'];
		  $cimagepath = image_style_url('pic_85x85', $newcimgpath);
		  $objFile->status = 0;
		  file_save($objFile);
        }
      }
    }
	
  } //pre($cimagepath);
  
  if(!empty($cimagepath)){  
     $ComLogo ='<img src="'.$cimagepath.'" alt="company logo">';  
  }else{
	$ComLogo = '<strong>'.$SendercompanyName.'</strong>';
  }
  
	if(isset($node->field_project['und'][0]) && !empty($node->field_project['und'][0]['target_id'])) {
		  
    $Related_Proj_Nid = $node->field_project['und'][0]['target_id'];
    $Related_Proj_Node = node_load($Related_Proj_Nid); 
	$Related_Proj_Name = $Related_Proj_Node->title;
	}
		
	
    include_once(libraries_get_path('mpdf') . '/mpdf.php');
    $mpdf = new mPDF('c');
	
	$mpdf->SetHTMLHeader('<div class="page_header" style="padding:10px; background: #eee;"><table class="full" style="border:none; margin-bottom:0px;"><tr><td style="width:25%;">'.$ComLogo.'</td><td style="width:50%; vertical-align:top; text-align:center;"><h2 style="margin:0;">Bidder Feedback Report</h2><h3 style="margin:0;"><strong>'.$RfpName.'</strong></h3></td><td style="width:25%;">&nbsp;</td></tr></table><table style="margin-bottom:0px;"><tr><td style="width:50%;"><strong>Project: </strong>'.$Related_Proj_Name.'</td><td style="width:50%; text-align:right;"><strong>Report Date: </strong>'.$date.'</td></tr></table></div>');

	$mpdf->SetHTMLFooter('<table width="100%" style="vertical-align: bottom; font-size: 10pt; margin:60px 0 0 0px;"><tr><td width="33%"><img style="width:150px;" src="'.$base_url.'/sites/all/themes/m6connect/images/bidder_report_footer.png" alt="logo"/></td>
<td width="33%" align="center" style="font-style: normal;">{PAGENO}/{nbpg}</td>
<td width="33%" align="right"><span style="font-style: normal;">Print Date:{DATE j/m/Y}</span></td></tr></table>');

$mpdf->SetHTMLFooter('<table width="100%" style="vertical-align: bottom; font-size: 10pt; margin:60px 0 0 0px;"><tr><td width="33%"><img style="width:150px;" src="'.$base_url.'/sites/all/themes/m6connect/images/bidder_report_footer.png" alt="logo"/></td>
<td width="33%" align="center" style="font-style: normal;">{PAGENO}/{nbpg}</td>
<td width="33%" align="right"><span style="font-style: normal;">Print Date:{DATE j/m/Y}</span></td></tr></table>', 'E');  
    //$mpdf->setAutoBottomMargin = 'stretch';
	//$mpdf->setAutoTopMargin = 'stretch';
    $mpdf->WriteHTML($content);
    //$file_content = $mpdf->Output('','S');
    $file_content = $mpdf->Output('report.pdf', 'I');
	
}

function get_invited_companies_or_individuals_list_for_bfeedback_report($node) {
    $output = '';
    $invitedCompanies = $return = array();
    $dfg = 1;
    $awardedFC = array();
    $assigned = array();

    $query = db_select('field_data_field_rfp_invite_comapnies', 'ric');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->leftJoin('node', 'n', 'n.nid = rcne.field_rfp_company_nid_email_value');
    $query->fields('ric', array('field_rfp_invite_comapnies_value'));
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->fields('n', array('title'));
    $query->condition('ric.entity_id', $node->nid, '=');
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
    $result = $query->execute()->fetchAll();
    if ($result && !empty($result)) {
        foreach ($result as $delta => $resultObj) {
            $awardedClass = '';
            $CompanyName = '';
            $companyUsersName = array();
            $FCitemId = $resultObj->field_rfp_invite_comapnies_value;
            $inviteddata = $resultObj->field_rfp_company_nid_email_value;
            if (!empty($inviteddata) && is_numeric($inviteddata)) {
                $compMgrUids = explode(',', $resultObj->field_co_invite_manager_uid_value);
                $cnode = node_load($inviteddata);
                $CompanyName = $resultObj->title;
                $invitedCompanies[] = $inviteddata;
                if (!empty($compMgrUids)) {
                    $companyUsersName = _get_user_uid_name_mapping(array_values($compMgrUids));
                }
                foreach ($companyUsersName as $k => $InvitedCoUser) {
                    $output .= '<span class="invited-companies-user"><span class="Invited-user">' . $InvitedCoUser . '</span><span class="invited-companies">&nbsp;(' . $CompanyName . '),&nbsp;</span></span>';
                    $return[] = $InvitedCoUser . '&nbsp;(' . $CompanyName . ')';
                }
            } else {
                $output .= '<span class="invited-companies-user"><span class="Invited-user">' . $inviteddata . ',&nbsp;</span></span>';
                $return[] = $inviteddata . '&nbsp;';
            }
        }
    }
    //return $output;
    return $return;
}

function get_bidder_feedback_content_data($nid) {
    $output = '';
    $pkgnames = array();
    $node = node_load($nid);
    $bid_packages = get_bid_packages_listing($node->nid);
    $BidPackagesexist = (!empty($bid_packages)) ? 1 : 0;
    $msgpackageStatus = ($BidPackagesexist) ? 2 : 0;
    $bid_packages += array(0 => 'Unassigned Bidder(s)');
    return $bid_packages;
}

///////////////start here for bidder pdf/////////////////

function get_bidder_feedback_table_data_for_report($entity_id, $msgpackageStatus,$diverseCompany = 0) {
    $output = '';

    $return = $returnoutput = $Diversereturneddata = array();
    $query = db_select('m6connect_rfp_bidder_feedback', 'mrbf');
    //$query->Join('m6connect_bid_package_invitess', 'mbpi', 'mbpi.rfp_invite_fc_itemid=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('m6connect_bid_package_invitess', 'mbpi', 'mbpi.rfp_invite_fc_itemid=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.field_rfp_invite_comapnies_value=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->fields('mbpi', array('bid_package_id', 'bid_package_invites_id'));
    $query->fields('mrbf', array('bidder_feedback_id', 'rfp_invite_fc_itemid', 'request_bid_intent_count'));
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->condition('mrbf.entity_id', $entity_id, '=');
    $query->condition('ric.entity_id', $entity_id, '=');
    $query->condition('mrbf.status', 1, '=');
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
    //$query->condition('mbpi.bid_package_id',$package_id,'=');
    $query->orderBy('mbpi.bid_package_id', 'ASC');
    $result = $query->execute()->fetchAll();

    $companyNodeDetail = array();
    $userAllDetail = array();
    $masterUserDetailsinfo = array();
    $managerUids = array();
    $DiversePackege = array();
    if ($result && !empty($result)) {
        $i = 0;
        foreach ($result as $delta => $dataObj) {
            if (empty($dataObj->bid_package_id)) {
                $dataObj->bid_package_id = 0;
            }
            /*             * ***** report ******** */
            $returneddata = $rowdata = $notes = $diversenotes = $Diversereturneddata = $dtids = array();

            $invitedBidder = '';
            $CompanyNid = '';
            $companyInfo = '';
            $userDetailsinfo = array();
            $userphone = array();
            $userDetails = array();
            $bidStatus = array();
            $userbidding = array();
            $userNobidding = array();
            $userNoresponse = array();
            if (is_numeric($dataObj->field_rfp_company_nid_email_value)) {
                $CompanyNid = $dataObj->field_rfp_company_nid_email_value;
                $managerUids = explode(',', $dataObj->field_co_invite_manager_uid_value);
                $managerUids = array_filter(array_values($managerUids));
                $managerUids = array_unique(array_values($managerUids));
            }else if (in_array($dataObj->field_rfp_company_nid_email_value, array_keys($mastrMailLoadDetails))) {
                $mailField = $dataObj->field_rfp_company_nid_email_value;
                $managerUids = array($mastrMailLoadDetails[$mailField]['uid']);
                $CompanyNid = $mastrMailLoadDetails[$mailField]['CompanyNid'];
				
		    }else{
			  $company_mail = trim($dataObj->field_rfp_company_nid_email_value);
			  $emailUserDetail = _get_comapny_details_by_og_email($company_mail);
			  if($emailUserDetail && !empty($emailUserDetail)){
				 $managerUids = array($emailUserDetail['user_uid']);
                 $userCompanyNid = $emailUserDetail['entity_id'];
                 if ($userCompanyNid && is_numeric($userCompanyNid)) {
                    $CompanyNid = $userCompanyNid;
                 }
                 $mastrMailLoadDetails[$dataObj->field_rfp_company_nid_email_value] = array('uid' => $emailUserDetail['user_uid'], 'CompanyNid' => $CompanyNid);  
			  }
			}
			
			$companyInfo = array('nid' => '', 'title' => '', 'image' => '','diversity_image'=>'');
            if ($CompanyNid) {
                if (!isset($companyNodeDetail[$CompanyNid])) {
                    $CompanyNode = node_load($CompanyNid);
					$companyLogo='';
					$CompanyTitle = '';
					if($CompanyNode->field_type_of_company['und'][0]['value']=='company'){
					  $CompanyTitle = $CompanyNode->title; 
				      $cimagepath = $CompImagePath = $CompImageExt = '';
	                   $cimgpath = (isset ( $CompanyNode->field_logo ['und'] ) && ! empty ($CompanyNode->field_logo ['und'] [0] ['uri'] )) ? $CompanyNode->field_logo ['und'] [0] ['uri'] : 0;
	
	      if($cimgpath){ 
				 	$imgdetails = image_get_info($cimgpath ); // pre($imgdetails);
				 	$CompImageExt = $imgdetails ['extension'];
					$fids = $CompanyNode->field_logo['und'][0]['fid']; //pre($fids);	
    				$result = file_load_multiple(array($fids)); //pre($result);
    			if (is_array($result) && !empty($result)) {
				
     					foreach ($result as $delta => $fileObj) {
					 
       						$filname = $fileObj->filename; //pre($filname);
        					$objFile = file_copy($fileObj, $destination = 'public://'. $filname, $replace = FILE_EXISTS_RENAME);
       		 					if ($objFile) { //pre($objFile);
          							$newimgobj = (array) $objFile;
		  							$newcimgpath = $newimgobj['uri'];
		  							$companyLogo = image_style_url('pic_40x40', $newcimgpath);
									//echo $companyLogo; 
		  							$objFile->status = 0;
		  							file_save($objFile);
        						}
      					}
   			 	}
		  }
					}
					           
					$diversityImage = get_diversity_image_by_comapny_nid($CompanyNode->nid);
                    $companyNodeDetail[$CompanyNode->nid] = array('nid' => $CompanyNode->nid, 'title' => $CompanyTitle, 'image' => $companyLogo,'diversity_image'=>$diversityImage,'company_type'=>$CompanyNode->field_type_of_company['und'][0]['value']);
                }
                $companyInfo = $companyNodeDetail[$CompanyNid];
				//pre($companyInfo);
                $invitedBidder = $companyInfo['title'];
                if (!empty($managerUids)) {
                    $bidStatus = get_rfp_bidding_flags_status($entity_id, array_values($managerUids), $dataObj->bid_package_id);
					
                    $userDetailsinfo = get_rfp_bid_feed_back_user_detail(array_values($managerUids), $masterUserDetailsinfo,$CompanyNid);
                    $checked = array('bidding' => '', 'not_bidding' => '', 'not_sure' => '');
                    if (!empty($userDetailsinfo)) {
                        foreach ($userDetailsinfo as $delta => $userObj) { //pre($userObj,1);
						
						  //drupal_set_message('<pre>'.print_r($userDetailsinfo).'</pre>');
						  
                            $checked = array(0 => '', 1 => '', 2 => '');
                            $defaultValue = (isset($bidStatus[$userObj['uid']][$dataObj->bid_package_id])) ? $bidStatus[$userObj['uid']][$dataObj->bid_package_id] : '';
                            if (isset($checked[$defaultValue])) {
                                $checked[$defaultValue] = 'checked="checked"';
                            }
                            $userphone = $userObj['phone'];
                            $newuserDetails1 = $userObj['name'];
                            $newuserDetails2 = $userObj['mail'];
                        }
						
                        /****** get data ****** */ 
                        $returneddata['companyName'] = $companyInfo['title'];
						$returneddata['companyNid'] = $companyInfo['nid'];
						$returneddata['companyImages'] = $companyInfo['diversity_image'];
                        $returneddata['companyLogo'] = $companyInfo['image'];
                        $returneddata['InviteeName'] = $newuserDetails1;
                        $returneddata['InviteeMail'] = $newuserDetails2;
                        $returneddata['InviteePhone'] = $userphone;
                        $returneddata['Checked'] = $checked;
						$returneddata['company_type'] = $companyInfo['company_type'];
						$returneddata['CompImageExt']=  $CompImageExt; 
						$returneddata['allUserDetailInvitee'] = $userDetailsinfo;
                    }
                }            
            } else {
                $companyInfo = array('nid' => '', 'title' => '', 'image' => '','diversity_image'=>'');
                $invitedBidder = $dataObj->field_rfp_company_nid_email_value;
                $newuserDetails1 = $dataObj->field_rfp_company_nid_email_value;
                $userphone = '';

                /******get data *******/
                $returneddata['companyName'] = '';
                $returneddata['companyLogo'] = '';
				$returneddata['companyNid'] = '';
				$returneddata['companyImages'] = '';
                $returneddata['InviteeName'] = '';
                $returneddata['InviteeMail'] = $dataObj->field_rfp_company_nid_email_value;
                $returneddata['InviteePhone'] = $userphone;
                $returneddata['Checked'] = '';
				$returneddata['allUserDetailInvitee'] = '';
				$returneddata['company_type'] = '';
				$returneddata['CompImageExt'] = '';
				$returneddata['allUserDetailInvitee']= array(
				  $dataObj->field_rfp_company_nid_email_value =>
				array('uid'=>0,'mail'=>'','name'=>$dataObj->field_rfp_company_nid_email_value,'phone'=>'','profile_uri'=>'','profile_filemime'=>'','company_type'=>'')
				);
				
            }
			$notes = get_bidder_feedback_message_for_report($dataObj->bidder_feedback_id, $dataObj->bid_package_id, $bidderUser = 0, $msgpackageStatus);
		    $returneddata['notes'] = $notes;
		    $returneddata['request_bid_intent_count'] = $Diversereturneddata['request_bid_intent_count'] = $dataObj->request_bid_intent_count;
		    if ($diverseCompany) {
			  $Diversereturneddata['notes'] = $diversenotes;
			  $returnoutput[$dataObj->bid_package_id]['rows'][] = $Diversereturneddata;
		    } else {
			  $returnoutput[$dataObj->bid_package_id]['rows'][] = $returneddata;
		    }
        }
      }
    return $returnoutput;
}


////////// end here new code ///////////


/////////// Old code for bidder feedback /////////

function get_bidder_feedback_table_data_for_report11111($entity_id, $msgpackageStatus, $diverseCompany = 0) {
    $output = '';

    $return = $returnoutput = $Diversereturneddata = array();
    $query = db_select('m6connect_rfp_bidder_feedback', 'mrbf');
    //$query->Join('m6connect_bid_package_invitess', 'mbpi', 'mbpi.rfp_invite_fc_itemid=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('m6connect_bid_package_invitess', 'mbpi', 'mbpi.rfp_invite_fc_itemid=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.field_rfp_invite_comapnies_value=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->fields('mbpi', array('bid_package_id', 'bid_package_invites_id'));
    $query->fields('mrbf', array('bidder_feedback_id', 'rfp_invite_fc_itemid', 'request_bid_intent_count'));
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->condition('mrbf.entity_id', $entity_id, '=');
    $query->condition('ric.entity_id', $entity_id, '=');
    $query->condition('mrbf.status', 1, '=');
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
    //$query->condition('mbpi.bid_package_id',$package_id,'=');
    $query->orderBy('mbpi.bid_package_id', 'ASC');
    $result = $query->execute()->fetchAll();

    $companyNodeDetail = array();
    $userAllDetail = array();
    $masterUserDetailsinfo = array();
    $managerUids = array();
    $DiversePackege = array();
    if ($result && !empty($result)) {
        $output .= '<tr>
              <td><table>';
        $i = 0;
        foreach ($result as $delta => $dataObj) { //pre($dataObj); 
            if (empty($dataObj->bid_package_id)) {
                $dataObj->bid_package_id = 0;
            }
            /*             * ***** report ******** */
            $returneddata = $rowdata = $notes = $diversenotes = $Diversereturneddata = $dtids = array();

            $invitedBidder = '';
            $CompanyNid = '';
            $companyInfo = '';
            $userDetailsinfo = array();
            $userphone = array();
            $userDetails = array();
            $bidStatus = array();
            $userbidding = array();
            $userNobidding = array();
            $userNoresponse = array();
            if (is_numeric($dataObj->field_rfp_company_nid_email_value)) {
                $CompanyNid = $dataObj->field_rfp_company_nid_email_value;
                $managerUids = explode(',', $dataObj->field_co_invite_manager_uid_value);
                $managerUids = array_filter(array_values($managerUids));
                $managerUids = array_unique(array_values($managerUids));
            } else if ($cmpuser = user_load_by_mail($dataObj->field_rfp_company_nid_email_value)) {
                $managerUids = array($cmpuser->uid);
                $userCompanyNid = _get_user_company_nid($cmpuser->uid);
                if ($userCompanyNid && is_numeric($userCompanyNid)) {
                    $CompanyNid = $userCompanyNid;
                }
            }

            if ($CompanyNid) {
                //drupal_set_message('<pre>'.print_r($companyNodeDetail,1).'</pre>');
                if (!isset($companyNodeDetail[$CompanyNid])) {
                    $CompanyNode = node_load($CompanyNid);
                    $companyLogo = (isset($CompanyNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $CompanyNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                    $companyNodeDetail[$CompanyNode->nid] = array('nid' => $CompanyNode->nid, 'title' => $CompanyNode->title, 'image' => $companyLogo);
                }
                $companyInfo = $companyNodeDetail[$CompanyNid];
                $invitedBidder = $companyInfo['title'];
                if (!empty($managerUids)) {
                    $bidStatus = get_rfp_bidding_flags_status($entity_id, array_values($managerUids), $dataObj->bid_package_id);
                    $userDetailsinfo = get_rfp_bid_feed_back_user_detail(array_values($managerUids), $masterUserDetailsinfo);
                    $checked = array('bidding' => '', 'not_bidding' => '', 'not_sure' => '');
                    if (!empty($userDetailsinfo)) {
                        foreach ($userDetailsinfo as $delta => $userObj) { //pre($userObj,1);
                            $checked = array(0 => '', 1 => '', 2 => '');
                            $defaultValue = (isset($bidStatus[$userObj['uid']][$dataObj->bid_package_id])) ? $bidStatus[$userObj['uid']][$dataObj->bid_package_id] : '';
                            if (isset($checked[$defaultValue])) {
                                $checked[$defaultValue] = 'checked="checked"';
                            }
                            $userphone = $userObj['phone'];

                            $newuserDetails1 = $userObj['name'];
                            $newuserDetails2 = $userObj['mail'];
                        }


                        /*                         * ****get data ****** */
						if($CompanyNode->nid && is_numeric($CompanyNode->nid)){  
    					$diversityImage = '';            
						$diversityImage = get_diversity_image_by_comapny_nid($CompanyNode->nid);
   						}
                        $returneddata['companyName'] = $CompanyNode->title;
						$returneddata['companyNid'] = $CompanyNode->nid;
						$returneddata['companyImages'] = $diversityImage;
                        $returneddata['companyLogo'] = $companyLogo;
                        $returneddata['InviteeName'] = $newuserDetails1;
                        $returneddata['InviteeMail'] = $newuserDetails2;
                        $returneddata['InviteePhone'] = $userphone;
                        $returneddata['Checked'] = $checked;

                        if ($diverseCompany) {
                            if (isset($CompanyNode->field_diversity_credentials['und']) && isset($CompanyNode->field_diversity_credentials['und'][0]['target_id']) && !empty($CompanyNode->field_diversity_credentials['und'][0]['target_id'])) {

                                $DiversePackege[] = $dataObj->bid_package_id;
								$Diversereturneddata['companyNid'] = $CompanyNode->nid;
						        $Diversereturneddata['companyImages'] = $diversityImage;
                                $Diversereturneddata['IsDiversePkg'] = $DiversePackege;
                                $Diversereturneddata['IsDiverseCompany'] = 1;
                                $Diversereturneddata['companyName'] = $CompanyNode->title;
                                $Diversereturneddata['companyLogo'] = $companyLogo;
                                $Diversereturneddata['InviteeName'] = $newuserDetails1;
                                $Diversereturneddata['InviteeMail'] = $newuserDetails2;
                                $Diversereturneddata['InviteePhone'] = $userphone;
                                $Diversereturneddata['Checked'] = $checked;
                                foreach ($CompanyNode->field_diversity_credentials['und'] as $d => $dtid) {
                                    $dtids[] = $dtid['target_id'];
                                }
                                $Diversereturneddata['dtids'] = $dtids;
                            }
                        }
                    }
                }
                /////////////////////
                if ($diverseCompany) {
                    if (isset($CompanyNode->field_diversity_credentials['und']) && isset($CompanyNode->field_diversity_credentials['und'][0]['target_id']) && !empty($CompanyNode->field_diversity_credentials['und'][0]['target_id'])) {
                        $diversenotes = get_bidder_feedback_message_for_report($dataObj->bidder_feedback_id, $dataObj->bid_package_id, $bidderUser = 0, $msgpackageStatus);
                        $Diversereturneddata['notes'] = $diversenotes;
                    }
                }
                /////////////////////
            } else {
                $companyInfo = array('nid' => '', 'title' => '', 'image' => '');
                $invitedBidder = $dataObj->field_rfp_company_nid_email_value;
                $newuserDetails1 = $dataObj->field_rfp_company_nid_email_value;
                $userphone = '';

                /*                 * ****get data ****** */
                $returneddata['companyName'] = '';
                $returneddata['companyLogo'] = '';
				$returneddata['companyNid'] = '';
				$returneddata['companyImages'] = '';
                $returneddata['InviteeName'] = $dataObj->field_rfp_company_nid_email_value;
                $returneddata['InviteeMail'] = '';
                $returneddata['InviteePhone'] = $userphone;
                $returneddata['Checked'] = '';
            }

            $notes = get_bidder_feedback_message_for_report($dataObj->bidder_feedback_id, $dataObj->bid_package_id, $bidderUser = 0, $msgpackageStatus);
            $returneddata['notes'] = $notes;
            $returneddata['request_bid_intent_count'] = $Diversereturneddata['request_bid_intent_count'] = $dataObj->request_bid_intent_count;
            if ($diverseCompany) {
                $Diversereturneddata['notes'] = $diversenotes;
                $returnoutput[$dataObj->bid_package_id]['rows'][] = $Diversereturneddata;
            } else {
                $returnoutput[$dataObj->bid_package_id]['rows'][] = $returneddata;
            }

            $companyTab = $companyInfo['title'] . '<br/>' . $companyInfo['image'];
            $m6notesTab = drupal_render(drupal_get_form('rfp_bidder_feedback_message_form', $dataObj->bidder_feedback_id, $dataObj->bid_package_id, $bidderUser = 0, $inside = '', $msgpackageStatus));
            $bidConfideceTab = drupal_render(drupal_get_form('rfp_bid_confidence_form', $dataObj->bidder_feedback_id)) . '<div class="request-bid-intent-link-section">' . l('<input type="button" class="request-bid-intent-link-button' . $dataObj->rfp_invite_fc_itemid . '" value="Request Bid Intent" class="form-submit" />', 'javascript:void(0);', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('request-bid-intent-link', 'request-bid-intent-link-' . $dataObj->rfp_invite_fc_itemid), 'data-fc' => $dataObj->rfp_invite_fc_itemid, 'data-package' => $dataObj->bid_package_id, 'data-invited-bidder' => $invitedBidder, 'data-rfp' => $entity_id))) . '</div>';
            $inviteeTab = '<div class="bidder-fb-invitee-section">' . implode('</div><div class="bidder-fb-invitee-section">', $userDetails) . '</div>';
            $phoneTab = implode('', $userphone);
            $biddingTab = implode('', $userbidding);
            ;
            $notbiddingTab = implode('', $userNobidding);
            ;
            $notsurebiddingTab = implode('', $userNoresponse);
            ;
            $return[$dataObj->bid_package_id]['rows'][] = array(
                'data' => array(
                    array('data' => $companyTab, 'class' => array('views-field', 'views-field-php')),
                    array('data' => $m6notesTab, 'class' => array('views-field', 'views-field-php-2')),
                    array('data' => $bidConfideceTab, 'class' => array('views-field', 'views-field-php-3')),
                    array('data' => $inviteeTab, 'class' => array('views-field', 'views-field-php-8')),
                    array('data' => $phoneTab, 'class' => array('views-field', 'views-field-php-4')),
                    array('data' => $biddingTab, 'class' => array('views-field', 'views-field-php-5')),
                    array('data' => $notbiddingTab, 'class' => array('views-field', 'views-field-php-6')),
                    array('data' => $notsurebiddingTab, 'class' => array('views-field', 'views-field-php-7')),
                ),
            );

            $m6notesTabdata = get_bidder_feedback_message_for_report($dataObj->bidder_feedback_id, $dataObj->bid_package_id, $bidderUser = 0, $msgpackageStatus);
            if ($i % 2 == 0) {
                $oddevencla = 'even';
            } else {
                $oddevencla = 'odd';
            }
            $output .= '<tr class="' . $oddevencla . '">
                    <td><table>
                        <tr>
                          <td>' . $companyInfo['title'] . '</td>
                          <td>' . $newuserDetails1 . '<br>
                            ' . $newuserDetails2 . '</td>
                          <td>' . $userphone . '</td>
                          <td><input type="checkbox" checked value=""></td>
                          <td><input type="checkbox" checked value=""></td>
                          <td><input type="checkbox" checked value=""></td>
                        </tr>';
            if (!empty($m6notesTabdata)) {
                foreach ($m6notesTabdata as $kn => $notes) {
                    $output .=' <tr>
                          <td colspan="2">&nbsp;</td>
                          <td colspan="4" style="text-align:center;">' . $notes . '</td>
                        </tr>';
                }
            }
            $output .='              </table>
                     </td>
                  </tr>';
            $i++;
        }
        $output .= '</table></td></tr>';
    }
    //return $return; 
    return $returnoutput;
}


/////////////////// end here ///////////////////
function get_bidder_feedback_message_for_report($bidder_feedback_id, $bid_package_id, $bidderUser, $msgpackageStatus = 1) {
    $msg = array();
    if (db_table_exists('m6connect_rfp_bidder_feedback') && db_table_exists('m6connect_rfp_bidder_feedback_message')) {
        $query = db_select('m6connect_rfp_bidder_feedback_message', 'bfm');
        $query->join('realname', 'r', 'r.uid=bfm.user_uid');
        $query->fields('bfm', array('message_id', 'message', 'timestamp', 'bidder_feedback_id'));
        $query->fields('r', array('realname'));
        $query->condition('bidder_feedback_id', $bidder_feedback_id, '=');
        //$query->condition('bid_package_id', $bid_package_id,'=');
        if ($bid_package_id == 0 && $msgpackageStatus == 0) {
            $query->condition('bid_package_id', 0, '=');
        } else {
            $query->condition('bid_package_id', $bid_package_id, '=');
        }
        $query->orderBy('timestamp', 'ASC');
        $result = $query->execute()->fetchAll();
        if ($result && !empty($result)) {
            foreach ($result as $delta => $msgObj) {
                $msg[] = $msgObj->message;
            }
        }
    }
    $output = $msg;
    return $output;
}

/* * *********************************************************************************** */
/* * *********************** End Bidder Feedback Report Section ************************ */
/* * *********************************************************************************** */

/*
 * function get email status of invitation sent on rfp and project
 */

function _get_invite_email_status_count($nid, $type = 'queue') {
    $count = 0;
    $query = db_select('invite_users_rfp_project', 'iu');
    $query->fields('iu', array('entity_id', 'emails', 'status'))
            ->condition('iu.entity_id', $nid, '=');
    if ($type == 'queue') {
        $query->condition('iu.status', '0', '=');
    } else if ($type == 'sent') {
        $query->condition('iu.status', '1', '=');
    }
    $result = $query->execute()->fetchAll();
    if ($result && is_array($result) && !empty($result) && count($result) > 0) {
        $emails = array();
        foreach ($result as $var => $val) { //pre($val);
            $emails = unserialize($val->emails);   //pre($emails); 
            $mailkey = array_keys($emails);
            if (is_numeric($mailkey)) {
                $uids = explode(',', $emails);
                foreach ($uids as $k => $v) {
                    $count++;
                }
            } else {
                $count++;
            }
        }
    }
    return $count;
}

/* function m6connect_rfp_user_update(&$edit, $account, $category) {	
  //Checking User roles updated
  $currentRole = array_keys($account->roles);
  $previousRole = array_keys($account->original->roles);
  $roleUpdated = array_diff($currentRole,$previousRole);
  $cureentRoleUpdated = array_intersect($currentRole,$roleUpdated);
  $update_rfp_award_and_mail_when_role = array_intersect($cureentRoleUpdated,array(8,9));
  if(!empty($update_rfp_award_and_mail_when_role)){
  drupal_register_shutdown_function('update_rfp_award_merbership', $account);
  //drupal_register_shutdown_function('update_proposal_award_merbership', $account);
  }
  } */

function drup_msg($message) {
    drupal_set_message('<pre>' . print_r($message, 1) . '</pre>');
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

function get_award_rfp_image_for_listing($entity_id) {
    global $user, $base_url;
    $companyNid = _get_user_company_nid($user->uid);
    if ($companyNid && is_numeric($companyNid)) {
        $query = db_select('m6connect_rfp_invited_award', 'mria');
        $query->leftjoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.field_rfp_invite_comapnies_value=mria.field_collection_item_id');
        $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
        $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
        $query->distinct();
        $query->fields('mria', array('membership_status'));
        $query->condition('mria.entity_nid', $entity_id, '=');
        $query->where('(rcne.field_rfp_company_nid_email_value=:companyMail or (rcne.field_rfp_company_nid_email_value=:companyNid and FIND_IN_SET(:UserUid,rcimu.field_co_invite_manager_uid_value)>0))', array(':UserUid' => $user->uid, ':companyMail' => $user->mail, ':companyNid' => $companyNid));
        $result = $query->execute()->fetchCol();
        if ($result && !empty($result)) {
            if (in_array(0, $result)) {
                return '<span class="award-img">&nbsp;<img src="/sites/all/themes/m6connect/images/preliminaryAward20x20.jpg"></span>';
            } else {
                return '<span class="award-img">&nbsp;<img src="/sites/all/themes/m6connect/images/membershipAward20x20.jpg"></span>';
            }
        }
    }
    return '';
}

function is_user_has_gold_or_enterprice_role_access($cmpNid, $user) {
    $cmpNode = node_load($cmpNid);
    $userMembership = array_intersect(array_keys($user->roles), array(7, 9));
    if ($cmpNode->uid == $user->uid) {
        if (!empty($userMembership)) {
            return TRUE;
        }
    } else {
        $cmpAdmin = user_load($cmpNode->uid);
        $cmpMembership = array_intersect(array_keys($cmpAdmin->roles), array(7, 9));
        if (!empty($cmpMembership) || !empty($userMembership)) {
            return TRUE;
        }
    }
    return FALSE;
}

function is_user_has_rfp_preliminary_award_accept_access($entity_id) {
    global $user;
    $return = array('awarded' => 0, 'role_access' => 0);
    $companyNid = _get_user_company_nid($user->uid);
    if ($companyNid && is_numeric($companyNid)) {
        $return['role_access'] = is_user_has_gold_or_enterprice_role_access($companyNid, $user);
        $query = db_select('m6connect_rfp_invited_award', 'mria');
        $query->leftjoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.field_rfp_invite_comapnies_value=mria.field_collection_item_id');
        $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
        $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
        $query->fields('mria');
        $query->fields('rcne', array('field_rfp_company_nid_email_value'));
        $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
        $query->condition('mria.membership_status', '0', '=');
        $query->condition('mria.entity_nid', $entity_id, '=');
        $query->where('(rcne.field_rfp_company_nid_email_value=:companyMail or (rcne.field_rfp_company_nid_email_value=:companyNid and FIND_IN_SET(:UserUid,rcimu.field_co_invite_manager_uid_value)>0))', array(':UserUid' => $user->uid, ':companyMail' => $user->mail, ':companyNid' => $companyNid));
        $result = $query->execute()->fetchAll();
        if ($result && count($result) > 0) {
            $return['awarded'] = 1;
        }
    }
    return $return;
}

function award_rfp_accept_callback($RFPNode) {
    global $user;
    $companyNid = _get_user_company_nid($user->uid);
    if ($companyNid && is_numeric($companyNid) && is_user_has_gold_or_enterprice_role_access($companyNid, $user)) {
        update_rfp_award_merbership($RFPNode, $user);
    }
    drupal_goto($_REQUEST['destination']);
}

function update_rfp_award_merbership($node, $account) {
    $inFlag = 0;
    $companyNid = _get_user_company_nid($account->uid);
    $query = db_select('m6connect_rfp_invited_award', 'mria');
    $query->leftjoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.field_rfp_invite_comapnies_value=mria.field_collection_item_id');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->fields('mria');
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->condition('mria.membership_status', '0', '=');
    $query->condition('mria.entity_nid', $node->nid, '=');
    $query->where('(rcne.field_rfp_company_nid_email_value=:companyMail or (rcne.field_rfp_company_nid_email_value=:companyNid and FIND_IN_SET(:UserUid,rcimu.field_co_invite_manager_uid_value)>0))', array(':UserUid' => $account->uid, ':companyMail' => $account->mail, ':companyNid' => $companyNid));
    $result = $query->execute()->fetchAll();
    if ($result && !empty($result)) {
        foreach ($result as $index => $dataObj) {
            send_rfp_award_mambership_mail($dataObj, $account);
            $inFlag = 1;
        }
    }
    if ($inFlag) {
        drupal_set_message('Notice of Award has sent');
    }
    return $result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

function send_rfp_award_mambership_mail($dataObj, $account) {
    global $user, $base_url, $base_path;
    include_once(libraries_get_path('mpdf') . '/mpdf.php');
    $rfpNid = $dataObj->entity_nid;
    $rfpNode = node_load($dataObj->entity_nid);
    $rfpUser = user_load($rfpNode->uid);
    $rfpCmpNid = _get_company_nid_by_group_content($rfpNode);
    $rfpCmpTitle = '';
    $rfpCityState = '';
    if ($rfpCmpNid && is_numeric($rfpCmpNid)) {
        $rfpCmpNode = node_load($rfpCmpNid);
        $rfpCmpTitle = $rfpCmpNode->title;
        /* if (isset($rfpCmpNode->field_org_address['und']) && !empty($rfpCmpNode->field_org_address['und'][0])) {
          $rfpCityState = $rfpCmpNode->field_org_address['und'][0]['locality'] . ', ' . $rfpCmpNode->field_org_address['und'][0]['administrative_area'];
          } */
    }
    if (isset($rfpNode->field_project['und']) && !empty($rfpNode->field_project['und'][0]['target_id'])) {
        $projectNode = node_load($rfpNode->field_project['und'][0]['target_id']);
        if (isset($projectNode->field_project_address_new['und']) && !empty($projectNode->field_project_address_new['und'][0])) {
            $rfpCityState = $projectNode->field_project_address_new['und'][0]['locality'] . ', ' . $projectNode->field_project_address_new['und'][0]['administrative_area'];
        }
    }
    $cmpNode = '';
    $mgrUidEmailmapping = array();
    $senderCompanyName = '';
    if (is_numeric($dataObj->field_rfp_company_nid_email_value)) {
        $cmpNode = node_load($dataObj->field_rfp_company_nid_email_value);
        $senderCompanyName = $cmpNode->title;
        $cmpUser = user_load($cmpNode->uid);
        //$ismembership = array_intersect(array_keys($cmpUser->roles), array(7, 8, 9));
        $ismembership = array_intersect(array_keys($cmpUser->roles), array(8, 9));
        $compMgr = explode(',', $dataObj->field_co_invite_manager_uid_value);
        $compMgr = array_filter(array_map('trim', $compMgr));
        $mgrUidEmailmapping = get_user_mails_by_uids($compMgr);
    } else {
        $senderCompanyName = $dataObj->field_rfp_company_nid_email_value;
        $emailuser = user_load_by_mail($dataObj->field_rfp_company_nid_email_value);
        if ($emailuser && is_object($emailuser)) {
            //$ismembership = array_intersect(array_keys($emailuser->roles), array(7, 8, 9));
            $ismembership = array_intersect(array_keys($emailuser->roles), array(8, 9));
            $companyNid = _get_user_company_nid($emailuser->uid);
            if ($companyNid && is_numeric($companyNid)) {
                $cmpNode = node_load($companyNid);
                $senderCompanyName = $cmpNode->title;
                if (empty($ismembership) && $cmpNode->uid !== $emailuser->uid) {
                    $cmpUser = user_load($cmpNode->uid);
                    //$ismembership = array_intersect(array_keys($cmpUser->roles), array(7, 8, 9));
                    $ismembership = array_intersect(array_keys($cmpUser->roles), array(8, 9));
                }
            }
            $mgrUidEmailmapping = array($emailuser->uid => $emailuser->mail);
        } else {
            $mgrUidEmailmapping = array(0 => $dataObj->field_rfp_company_nid_email_value);
            $ismembership = array();
        }
    }

    $rfpNodePath = drupal_lookup_path('alias', 'node/' . $rfpNode->nid);
    $rfpNodePath2 = l('<span style="color:#d04437;">here</span>', $base_url . $base_path . $rfpNodePath, array('external' => true, 'html' => true));
    $imagePath = $base_url . $base_path . drupal_get_path('module', 'm6connect_misc') . '/images/';
    //$bgimgPath= (empty($ismembership))?'award_preliminary.png':'award_membership.png';
    $bgimgPath = 'award_membership.png';
    $m6logoForMail = 'm6-logo-rfp-award.png';
    $replace = array(
        '[Proposal:bgImagePath]' => $imagePath . $bgimgPath,
        '[Proposal:RFPCompanyName]' => $rfpCmpTitle,
        '[Proposal:SenderCompanyName]' => $senderCompanyName,
        '[Proposal:Name]' => $rfpNode->title,
        '[Proposal:Type]' => 'RFP',
        '[Proposal:AwardDate]' => date('m-d-Y'),
        '[Proposal:RFPCityState]' => $rfpCityState,
        '[Proposal:m6LogoPath]' => $imagePath . 'proposal_mail_logo.png',
        '[Proposal:RFPOwnerName]' => _get_user_full_name($rfpNode->uid),
        '[Proposal:RFPFullLink]' => $rfpNodePath2,
        '[Proposal:BidderFeedBackName]' => get_bid_package_name_by_id($dataObj->bid_package_id),
        '[Proposal:M6LogoRFPAward]' => $imagePath . $m6logoForMail,
    );
    $message = '[Proposal:SenderCompanyName],<br/><br/>[Proposal:RFPOwnerName], from [Proposal:RFPCompanyName], has awarded RFP - [Proposal:Name].<p>Click [Proposal:RFPFullLink] to view the RFP</p><p>Congratulations,<br/><img src="[Proposal:M6LogoRFPAward]"/><br/>M6Connect Corporation</p>';

    $params = array(
        'subject' => 'M6Connect - Notice of Award for ' . $rfpNode->title,
        'body' => str_replace(array_keys($replace), array_values($replace), $message),
        'sender' => $user->mail,
        'bcc' => $rfpUser->mail,
        'language' => language_default(),
        'module' => 'm6connect_misc',
        'key' => 'rfp_mail___awarded_proposal_notify',
        'build' => TRUE,
        'bcc' => 'support@m6connect.com',
    );
    $to = array_values($mgrUidEmailmapping);
    if (!empty($to) && !empty($params['body'])) {
        $mpdf = new mPDF('c');
        $mpdf->WriteHTML(theme('proposal_awareded_mail_content', array('replace' => $replace)));
        $file_content = $mpdf->Output('', 'S');
        $params['attachments'][] = array(
            'filecontent' => $file_content,
            'filename' => 'Notice of Award.pdf',
            'filemime' => 'application/pdf',
        );
        $mailResponse = drupal_mail($params['module'], $params['key'], implode(',', $to), $params['language'], $params);
        if ($mailResponse['send'] == 1) {
            $update = array('membership_award' => time(), 'membership_status' => 1);
            db_update('m6connect_rfp_invited_award')->fields($update)->condition('id', $dataObj->id, '=')->execute();
        }
    }
}

function get_invited_award_data_options($entity_id) {
    global $base_path;
    $optionmeta = array();
    $awardmeta = array();
    $awardedFC = array();
    $membershipmapping = array();
    $awadedIdMapping = array();
    $imagePath = $base_path . drupal_get_path('theme', 'm6connect') . '/images/';
    if (db_table_exists('m6connect_rfp_invited_award')) {
        $awarded = db_select('m6connect_rfp_invited_award', 'ma')->fields('ma', array('field_collection_item_id', 'bid_package_id', 'membership_status', 'id'))->condition('ma.entity_nid', $entity_id, '=')->condition('ma.status', 1, '=')->execute()->fetchAll();
        if ($awarded && !empty($awarded)) {
            foreach ($awarded as $awardDelta => $awardData) {
                $awardKey = $awardData->field_collection_item_id . '::' . $awardData->bid_package_id;
                $awardedFC[] = $awardKey;
                $awadedIdMapping[$awardKey] = $awardData->id;
                $membershipImage = ($awardData->membership_status) ? '/membershipAward20x20.jpg' : '/preliminaryAward20x20.jpg';
                $membershipmapping[$awardKey] = '<img src="' . $imagePath . $membershipImage . '" />';
            }
        }
    }


    //$bgimgPath= (empty($ismembership))?'award_preliminary.png':'award_membership.png';
    $query = db_select('m6connect_rfp_bidder_feedback', 'mrbf');
    $query->leftJoin('m6connect_bid_package_invitess', 'mbpi', 'mbpi.rfp_invite_fc_itemid=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.field_rfp_invite_comapnies_value=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->fields('mbpi', array('bid_package_id', 'bid_package_invites_id'));
    $query->fields('mrbf', array('bidder_feedback_id', 'rfp_invite_fc_itemid', 'request_bid_intent_count'));
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->condition('mrbf.entity_id', $entity_id, '=');
    $query->condition('ric.entity_id', $entity_id, '=');
    $query->condition('mrbf.status', 1, '=');
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
    $query->orderBy('mbpi.bid_package_id', 'ASC');
    $result = $query->execute()->fetchAll();
    foreach ($result as $index => $dataObj) {
        if (empty($dataObj->bid_package_id)) {
            $dataObj->bid_package_id = 0;
        }
        $inviteddata = trim($dataObj->field_rfp_company_nid_email_value);
        $invitedcmpMgr = trim($dataObj->field_co_invite_manager_uid_value);
        if (is_numeric($inviteddata)) {
            $cmpNode = node_load($inviteddata);
            $cmpTitle = $cmpNode->title;
            $companyLogo = (isset($cmpNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'pic_20x20', 'path' => $cmpNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
            $compMgr = explode(',', $invitedcmpMgr);
            $compMgr = array_filter(array_map('trim', $compMgr));
            $mgrNameMapping = array();
            $mgrNameMapping = _get_user_uid_name_mapping($compMgr);
            if (!empty($mgrNameMapping)) {
                $usersnames = array_values($mgrNameMapping);
                $key_val = $dataObj->rfp_invite_fc_itemid . '::' . $cmpNode->nid . '::' . $dataObj->bid_package_id;
                $key_val_value = $cmpTitle . ' (' . implode(',', $usersnames) . ')';
                $checkAwardedKey = $dataObj->rfp_invite_fc_itemid . '::' . $dataObj->bid_package_id;
                if (!in_array($checkAwardedKey, $awardedFC)) {
                    $optionmeta[$dataObj->bid_package_id][$key_val] = '<span class="invitee-lising-section"><span class="livitess-listing-image">' . $companyLogo . '</span><span>' . $key_val_value . '</span></span>';
                } else {
                    $removeAwardedId = $awadedIdMapping[$checkAwardedKey];
                    $awardmeta[$dataObj->bid_package_id][] = '<div id="invited-awarded-user-remove-' . $removeAwardedId . '" class="invited-awarded-user"><span>' . l('[X]', 'remove/awarded/nojs/' . $removeAwardedId . '/rfp', array('attributes' => array('class' => array('use-ajax', 'removed-awarded-rfp-company')))) . '</span><span class="livitess-listing-image">' . $companyLogo . '</span><span class="livitess-listing-image">' . $key_val_value . '</span><span class="invited-awarded-membership-logo">' . $membershipmapping[$checkAwardedKey] . '</span></div>';
                }
            }
        } else if ($cmpuser = user_load_by_mail($inviteddata)) {
            $cmpUserNid = '';
            $companyTitle = '';
            $companyLogo = '';
            $usersnames = $cmpuser->realname;
            if ($cmpUserNid = _get_user_company_nid($cmpuser->uid)) {
                $cmpUserNode = node_load($cmpUserNid);
                $companyTitle = $cmpUserNode->title;
                $companyLogo = (isset($cmpUserNode->field_logo['und'])) ? theme('image_style', array('style_name' => 'pic_20x20', 'path' => $cmpUserNode->field_logo['und'][0]['uri'], 'getsize' => TRUE)) : '';
                $key_val = $dataObj->rfp_invite_fc_itemid . '::' . $inviteddata . '::' . $dataObj->bid_package_id;
                $key_val_value = $companyTitle . ' (' . $usersnames . ')';
                $checkAwardedKey = $dataObj->rfp_invite_fc_itemid . '::' . $dataObj->bid_package_id;
                if (!in_array($checkAwardedKey, $awardedFC)) {
                    $optionmeta[$dataObj->bid_package_id][$key_val] = '<span class="invitee-lising-section"><span class="livitess-listing-image">' . $companyLogo . '</span><span>' . $key_val_value . '</span></span>';
                } else {
                    $removeAwardedId = $awadedIdMapping[$checkAwardedKey];
                    $awardmeta[$dataObj->bid_package_id][] = '<div id="invited-awarded-user-remove-' . $removeAwardedId . '" class="invited-awarded-user"><span>' . l('[X]', 'remove/awarded/nojs/' . $removeAwardedId . '/rfp', array('attributes' => array('class' => array('use-ajax', 'removed-awarded-rfp-company')))) . '</span><span class="livitess-listing-image">' . $companyLogo . '</span><span class="livitess-listing-image">' . $key_val_value . '</span><span class="invited-awarded-membership-logo">' . $membershipmapping[$checkAwardedKey] . '</span></div>';
                }
            } else {
                $key_val = $dataObj->rfp_invite_fc_itemid . '::' . $inviteddata . '::' . $dataObj->bid_package_id;
                $key_val_value = $usersnames;
                $checkAwardedKey = $dataObj->rfp_invite_fc_itemid . '::' . $dataObj->bid_package_id;
                if (!in_array($checkAwardedKey, $awardedFC)) {
                    $optionmeta[$dataObj->bid_package_id][$key_val] = '<span class="invitee-lising-section"><span class="livitess-listing-image">' . $companyLogo . '</span><span>' . $key_val_value . '</span></span>';
                } else {
                    $removeAwardedId = $awadedIdMapping[$checkAwardedKey];
                    $awardmeta[$dataObj->bid_package_id][] = '<div id="invited-awarded-user-remove-' . $removeAwardedId . '" class="invited-awarded-user"><span>' . l('[X]', 'remove/awarded/nojs/' . $removeAwardedId . '/rfp', array('attributes' => array('class' => array('use-ajax', 'removed-awarded-rfp-company')))) . '</span><span class="livitess-listing-image">' . $companyLogo . '</span><span class="livitess-listing-image">' . $key_val_value . '</span><span class="invited-awarded-membership-logo">' . $membershipmapping[$checkAwardedKey] . '</span></div>';
                }
            }
        } else {
            $key_val = $dataObj->rfp_invite_fc_itemid . '::' . $inviteddata . '::' . $dataObj->bid_package_id;
            $key_val_value = $inviteddata;
            $checkAwardedKey = $dataObj->rfp_invite_fc_itemid . '::' . $dataObj->bid_package_id;
            if (!in_array($checkAwardedKey, $awardedFC)) {
                $optionmeta[$dataObj->bid_package_id][$key_val] = '<span class="invitee-lising-section"><span class="livitess-listing-image">' . $companyLogo . '</span><span>' . $key_val_value . '</span></span>';
            } else {
                $removeAwardedId = $awadedIdMapping[$checkAwardedKey];
                $awardmeta[$dataObj->bid_package_id][] = '<div id="invited-awarded-user-remove-' . $removeAwardedId . '" class="invited-awarded-user"><span>' . l('[X]', 'remove/awarded/nojs/' . $removeAwardedId . '/rfp', array('attributes' => array('class' => array('use-ajax', 'removed-awarded-rfp-company')))) . '</span><span class="livitess-listing-image"></span><span class="livitess-listing-image">' . $key_val_value . '</span><span class="invited-awarded-membership-logo">' . $membershipmapping[$checkAwardedKey] . '</span></div>';
                ;
            }
        }
    }
    return array('optionmata' => $optionmeta, 'awardmeta' => $awardmeta);
}

function remove_rfp_invited_callback($ajax = NULL, $removeAwardId) {
    db_delete('m6connect_rfp_invited_award')->condition('id', $removeAwardId, '=')->execute();
    if ($ajax) {
        ctools_include('ajax');
        $commands = array();
        $commands[] = ajax_command_remove('#invited-awarded-user-remove-' . $removeAwardId);
        print ajax_render($commands);
        exit;
    }
}

function get_bid_package_name_by_id($bid_package_id) {
    if ($bid_package_id == 0) {
        return '';
    } else {
        $bidPackageName = db_select('m6connect_bid_packages', 'mbp')->fields('mbp', array('bid_package_name'))->condition('mbp.bid_package_id', $bid_package_id, '=')->execute()->fetchColumn(0);
        if ($bidPackageName) {
            return $bidPackageName;
        } else {
            return '';
        }
    }
}

function node_expire_content_flag($nid) {
    global $user, $company;
    $node = node_load($nid);
    $nodeStatus = $node->status;
    $nodeBelongToCurrentCompany = (is_numeric($company->nid) && $company->nid == _get_company_nid_by_group_content($node));
    $isNodePublic = (isset($node->field_public['und']) && $node->field_public['und'][0]['value'] == 1) ? 1 : 0;
    $isNodeInvited = is_rfp_invited_company($row->nid);
    $nodeCompanyNid = _get_company_nid_by_group_content($node);
    $isNodeCollabarated = in_array($user->uid, m6connect_projects_uids_from_list($node));
    $nodeBelongToCurrentCompany = (is_numeric($company->nid) && ($company->nid == $nodeCompanyNid));
    if (is_rfp_expired($row->nid) && $nodeStatus) {
        if ($isNodePublic || $nodeBelongToCurrentCompany || $isNodeInvited || $isNodeCollabarated) {
            return FALSE;
        }
    }
    return TRUE;
}

function theme_feedback_table_rows($variables) {
    $output = '';
    $rows = $variables['rows'];
    // Format the table rows:
    if (count($rows)) {
        $flip = array('even' => 'odd', 'odd' => 'even');
        $class = 'even';
        foreach ($rows as $number => $row) {
            // Check if we're dealing with a simple or complex row
            if (isset($row['data'])) {
                $cells = $row['data'];
                $no_striping = isset($row['no_striping']) ? $row['no_striping'] : FALSE;

                // Set the attributes array and exclude 'data' and 'no_striping'.
                $attributes = $row;
                unset($attributes['data']);
                unset($attributes['no_striping']);
            } else {
                $cells = $row;
                $attributes = array();
                $no_striping = FALSE;
            }
            if (count($cells)) {
                // Add odd/even class
                if (!$no_striping) {
                    $class = $flip[$class];
                    $attributes['class'][] = $class;
                }

                // Build row
                $output .= ' <tr' . drupal_attributes($attributes) . '>';
                $i = 0;
                foreach ($cells as $cell) {
                    $cell = tablesort_cell($cell, $header, $ts, $i++);
                    $output .= _theme_table_cell($cell);
                }
                $output .= " </tr>\n";
            }
        }
    }
    return $output;
}

function test_bidder_feedback_content($entity_id) {
    $query = db_select('m6connect_rfp_bidder_feedback', 'mrbf');
    $query->leftJoin('m6connect_bid_package_invitess', 'mbpi', 'mbpi.rfp_invite_fc_itemid=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_invite_comapnies', 'ric', 'ric.field_rfp_invite_comapnies_value=mrbf.rfp_invite_fc_itemid');
    $query->leftJoin('field_data_field_rfp_company_nid_email', 'rcne', 'ric.field_rfp_invite_comapnies_value = rcne.entity_id');
    $query->leftJoin('field_data_field_co_invite_manager_uid', 'rcimu', 'ric.field_rfp_invite_comapnies_value = rcimu.entity_id');
    $query->fields('mbpi', array('bid_package_invites_id'));
    $query->addExpression('IFNULL(mbpi.bid_package_id,0)', 'bid_package_id');
    $query->fields('mrbf', array('bidder_feedback_id', 'rfp_invite_fc_itemid', 'request_bid_intent_count'));
    $query->fields('rcne', array('field_rfp_company_nid_email_value'));
    $query->fields('rcimu', array('field_co_invite_manager_uid_value'));
    $query->condition('mrbf.entity_id', $entity_id, '=');
    $query->condition('ric.entity_id', $entity_id, '=');
    $query->condition('mrbf.status', 1, '=');
    $query->isNotNull('rcne.field_rfp_company_nid_email_value');
    $query->orderBy('(bid_package_id=0),bid_package_id', 'ASC');
    //$query->orderBy('FIELD(bid_package_id,0),bid_package_id');
    $result = $query->execute()->fetchAll();
    //print_r($query->__toString());
    print_r($result);
    return $result;
    $rows = array(
        0 => array(
            'data' => array(
                array('data' => 'row1-col1', 'class' => array('row1-col1')),
                array('data' => 'row1-col2', 'class' => array('row1-col2')),
                array('data' => 'row1-col3', 'class' => array('row1-col3')),
                array('data' => 'row1-col4', 'class' => array('row1-col4')),
                array('data' => 'row1-col5', 'class' => array('row1-col5')),
            ),
        ),
        1 => array(
            'data' => array(
                array('data' => 'row2-col1', 'class' => array('row2-col1')),
                array('data' => 'row2-col2', 'class' => array('row2-col2')),
                array('data' => 'row2-col3', 'class' => array('row2-col3')),
                array('data' => 'row2-col4', 'class' => array('row2-col4')),
                array('data' => 'row2-col5', 'class' => array('row2-col5')),
            ),
        ),
        2 => array(
            'data' => array(
                array('data' => 'row3-col1', 'class' => array('row3-col1')),
                array('data' => 'row3-col2', 'class' => array('row3-col2')),
                array('data' => 'row3-col3', 'class' => array('row3-col3')),
                array('data' => 'row3-col4', 'class' => array('row3-col4')),
                array('data' => 'row3-col5', 'class' => array('row3-col5')),
            ),
        ),
    );
    $output = theme('feedback_table_rows', array('header' => array(), 'rows' => $rows));
}

function get_bidder_feedback_rows_content_ajax($entity_id, $startFrom, $endTo) {
    $rows = get_bidder_feedback_table_data($entity_id, $startFrom, $endTo, FALSE);
    $output = array();
    foreach ($rows as $packageId => $packageRows) {
        $temp = theme('feedback_table_rows', array('header' => array(), 'rows' => $packageRows['rows']));
        if ($temp) {
            if (isset($output['bidder-table-' . $entity_id . '-' . $packageId])) {
                $output['bidder-table-' . $entity_id . '-' . $packageId] .=$temp;
            } else {
                $output['bidder-table-' . $entity_id . '-' . $packageId] = $temp;
            }
        }
    }
    drupal_json_output(array('html' => (object) $output));
    drupal_exit(0);
    // return $output;	
}

function get_bidder_feedback_rows_content_ajax2($entity_id, $startFrom, $endTo) {
    $rows = get_bidder_feedback_table_data($entity_id, $startFrom, $endTo, FALSE);
    $output = array();
    foreach ($rows as $packageId => $packageRows) {
        $temp = theme('feedback_table_rows', array('header' => array(), 'rows' => $packageRows['rows']));
        if ($temp) {
            if (isset($output['bidder-table-' . $entity_id . '-' . $packageId])) {
                $output['bidder-table-' . $entity_id . '-' . $packageId] .=$temp;
            } else {
                $output['bidder-table-' . $entity_id . '-' . $packageId] = $temp;
            }
        }
    }
	return $output;
    //drupal_json_output(array('html' => (object) $output));
    //drupal_exit(0);
    // return $output;	
}

function get_bidder_feedback_rows_content_ajax3($entity_id, $startFrom, $endTo){
  $commands = array();
  //$commands[] =ajax_command_alert('hello');
  $rows = get_bidder_feedback_table_data($entity_id, $startFrom, $endTo, FALSE);
  $output = array();
  foreach ($rows as $packageId => $packageRows) {
	$temp = theme('feedback_table_rows', array('header' => array(), 'rows' => $packageRows['rows']));
	if ($temp) {
	  if (isset($output['bidder-table-' . $entity_id . '-' . $packageId])) {
	    $output['bidder-table-' . $entity_id . '-' . $packageId] .=$temp;
	  } else {
		$output['bidder-table-' . $entity_id . '-' . $packageId] = $temp;
	  }
	  //$commands[] =ajax_command_append('#bidder-table-' . $entity_id . '-' . $packageId.' tbody', $temp, $settings = NULL);
	}
  }
  $commands[] =array('command'=>'bidderFeedbackTableUpdate','tableData'=>(object)$output,'rowCount'=>count($output),'entity_id'=>$entity_id);
  //ajax_deliver(array('#type' => 'ajax','#commands' => $commands));
  return array('#type' => 'ajax','#commands'=>$commands);
}

function assign_rfp_unassigned_messages_to_packages($fcItemId,$packageIds){
  $isvalueInsertExist = 0;
  $query =  db_select('m6connect_rfp_bidder_feedback_message','bfm');
  $query->join('m6connect_rfp_bidder_feedback','mbf','mbf.bidder_feedback_id=bfm.bidder_feedback_id');
  $query->fields('bfm',array('user_uid','message','message_prefix','timestamp'));
  $query->fields('mbf',array('bidder_feedback_id'));
  $query->condition('mbf.rfp_invite_fc_itemid',$fcItemId,'=');
  $query->condition('bfm.bid_package_id',0,'=');
  $result = $query->execute()->fetchAll();
  if(!empty($result)){
	$insertmessages = db_insert('m6connect_rfp_bidder_feedback_message')
	  ->fields(array('bidder_feedback_id','bid_package_id','user_uid','message','message_prefix','timestamp'));
	foreach($result as $delta => $messageObj){
	  $messageValues = (array)$messageObj;
	  foreach($packageIds as $index => $packageId){
		$messageValues['bid_package_id'] = $packageId;
		$messageValues['message_prefix'] = empty($messageValues['message_prefix'])?NULL:$messageValues['message_prefix'];
		$insertmessages->values($messageValues);
		$isvalueInsertExist =1; 
	  }
	}
	if($isvalueInsertExist){
	  $insertmessages->execute();
	}
  }
}

// function for send sms to bidder via twilio
function send_request_by_sms_callback($RfpNode, $fcItem) {
    //echo $RfpId;echo '<br>';        
    $output = array();
    $sms_response = array();
    $phoneNums  = array();
    $managerUid = array();
    $invitedBidder = isset($_REQUEST['invited-bidder']) ? $_REQUEST['invited-bidder'] : '';
    $packageId = isset($_REQUEST['package_id']) ? $_REQUEST['package_id'] : 0;
    $bidder_id = isset($_REQUEST['bidder_id']) ? $_REQUEST['bidder_id'] : 0;
    //$phoneNo = isset($_REQUEST['phoneNo']) ? $_REQUEST['phoneNo'] : 0;
    // get all invitee phone numbers
    $nidEmail = (isset($fcItem->field_rfp_company_nid_email['und'][0]) && !empty($fcItem->field_rfp_company_nid_email['und'][0]['value']))?trim($fcItem->field_rfp_company_nid_email['und'][0]['value']):'';
    $managerUid = (isset($fcItem->field_co_invite_manager_uid['und']) && !empty($fcItem->field_co_invite_manager_uid['und'][0]['value']))?trim($fcItem->field_co_invite_manager_uid['und'][0]['value']):'';
    if(is_numeric($nidEmail))
    {
        $managerUid = explode(",", $managerUid);
    }
    else
    {
        $managerUid = db_select('m6connect_og_membership_email', 'e')
                ->fields('e', array('user_uid'))
                ->condition('e.company_email' , $nidEmail,'=')
                ->range(0,1)
                ->execute()
                ->fetchCol();
    }
    if(!empty($managerUid))
    {
        $phoneNums = db_select('field_data_field_phone', 'p')
                ->fields('p', array('field_phone_value'))
                ->condition('p.entity_id', $managerUid, 'IN')
                ->execute()
                ->fetchCol();

        $phoneNums = str_replace( array( '-', ' ', '(' , ')', '&nbsp;'), '', $phoneNums);
    }

    $packageName = db_select('m6connect_bid_packages', 'bp')
            ->fields('bp',array('bid_package_name'))
            ->condition('bid_package_id', $packageId, '=')
            ->execute()
            ->fetchColumn(0);


    $cNid = _get_company_nid_by_group_content($RfpNode);
    $cTitle = _get_title_of_node($cNid);
    
    // send sms on each numbers
    $phoneNums = array();
    //$phoneNums = array('4026516040');
    //$phoneNums = array('7737442845', '9314176491');
    if(!empty($phoneNums))
    {
        $message = 'M6Connect RFP Bid Intention Request:  '.$cTitle.' is counting on your bid.';
        $message .= 'Do you plan to bid on the '.$cTitle.' '.$RfpNode->title.' '.$packageName.' project?';
        $message .= "\n - Bidding?  Text back \"Yes\" \n - Not Bidding?  Text back \"No\" \n - Not Sure Yet?  Text back \"Not Sure\"";

        //$output = twilio_send('7737442845', $message, '+91');

        for ($i=0; $i < count($phoneNums); $i++) 
        { 
            $sms_response[] = m6connect_twilio_send($phoneNums[$i], $message, '+91');
            // get variable
            /*$id = 0;
            //variable_set('m6connect_send_sms_var', 0);
            $m6connect_send_sms_var = variable_get('m6connect_send_sms_var');
            $id = ++$m6connect_send_sms_var;
            variable_set('m6connect_send_sms_var', $id);
            */
            // insert data into database            
            $insert = db_insert('m6connect_twilio_send_sms')
                    ->fields(array(
                        'id' => $id,
                        'rfp_id' => $RfpNode->vid,
                        'package_id' => $packageId,
                        'fcitem_id' => $fcItem->item_id,
                        'bidder_id' => $bidder_id,
                        'phone_no' => $phoneNums[$i],
                        'sms_data' => drupal_json_encode($sms_response),
                        'created' => date("Y-m-d H:i:s"),
                        ))
                    ->execute();
        }
    }
    $output[] = array("invited-bidder" => $invitedBidder, "package_id" => $packageId, "bidder_id" => $bidder_id, 'rfp-id' => $RfpNode->vid, 'fc-id' => $fcItem->item_id, "phoneNo" => $phoneNums, "rfptitle" => $RfpNode->title, 'package_name' => $packageName, "company" => $cTitle, "sms-data" => $sms_response);
    
    drupal_json_output(array('html' => $output));
    drupal_exit(0);
}

//twilio sms send function customization

function m6connect_twilio_send($number, $message, $country = TWILIO_DEFAULT_COUNTRY_CODE, $media = NULL, $options = array()) {
  switch (variable_get('twilio_long_sms', TWILIO_SMS_LONG_MULTIPLE)) {
    case TWILIO_SMS_LONG_TRUNCATE:
      // Truncate the message to 160 characters.
      $message_truncated = substr($message, 0, 160);
      $response = m6connect_twilio_command('sendmsg', array(
        'country' => $country,
        'number' => $number,
        'message' => $message_truncated,
        'media' => $media,
        'options' => $options,
      ));
      break;

    case TWILIO_SMS_LONG_MULTIPLE:
      // Break up the message into 160 character chunks and send multiple.
      $iterator = ceil(strlen($message) / 160);
      for ($i = 0; $i < $iterator; $i++) {
        $sms = array(
          'country' => $country,
          'number' => $number,
          'message' => substr($message, $i * 160, 160),
          'options' => $options,
        );
        // Attach the media array only to the first message.
        if ($i === 0) {
          $sms['media'] = $media;
        }
        $response = m6connect_twilio_command('sendmsg', $sms);
      }
      break;
  }
  return $response;
}

// main function for send SMS from twilio

function m6connect_twilio_command($command = '', $data = array()) {
  // Try to load the library and check if that worked.
  if (($library = libraries_load(TWILIO_LIBRARY)) && !empty($library['loaded'])) {

    // Set our account_sid, auth_token, and number.
    $account_sid = variable_get('twilio_account', FALSE);
    $auth_token = variable_get('twilio_token', FALSE);
    $number = variable_get('twilio_number', FALSE);

    // If we don't have one of our twilio variables don't bother doing anything.
    if (!$account_sid || !$auth_token || !$number) {
      return FALSE;
    }

    // Twilio REST API version.
    $api_version = !empty($data['options']['api_version']) ? $data['options']['api_version'] : TWILIO_API_VERSION;

    switch ($api_version) {
      case '2010-04-01':
        switch ($command) {
          case 'sendmsg':
            // Instantiate a new Twilio Rest Client.
            $client = new Services_Twilio($account_sid, $auth_token);
            $sms = array(
              'To' => '+' . $data['country'] . $data['number'],
              'From' => $number,
              'Body' => $data['message'],
            );
            if (!empty($data['media'])) {
              $sms['MediaUrl'] = $data['media'];
            }
            try {
              $response = $client->account->messages->create($sms);
              //return TRUE;
              $data = array("sid" => $response->sid, "created" => $response->date_created, "to" => $response->to, "from" => $response->from, "status" => $response->status, "price" => $response->price, "price_unit" => $response->price_unit, "error_code" => $response->error_code, "error_msg" => $response->error_message);              
              return $data;
            }
            catch (Exception $e){
              watchdog('Twilio', $e->getMessage(), array(), WATCHDOG_ERROR);
              $link = l($e->getInfo(), $e->getInfo());
              $message = t('Twilio has returned the error: "@error". For more information visit the following link. !link', array('@error' => $e->getMessage(), '!link' => $link));
              drupal_set_message($message, 'error');
            }
            if (!empty($response->status) && $response->status == 'failed') {
              watchdog('Twilio', 'An unkown error occured during the HTTP request');
            }
            break;

          case 'validate':
            $validator = new Services_Twilio_RequestValidator($auth_token);
            $type = !empty($data['type']) ? $data['type'] : 'sms';
            $url = $GLOBALS['base_url'] . '/twilio/' . $type;
            $signature = $_SERVER["HTTP_X_TWILIO_SIGNATURE"];
            $post_vars = $_POST;
            if ($validator->validate($signature, $url, $post_vars)) {
              watchdog('Twilio', 'Incoming SMS message validated');
              return TRUE;
            }
            else {
              watchdog('Twilio', 'Incoming SMS could not be validated');
            }
            break;

        }
        break;

      case '2008-08-01':
        switch ($command) {
          case 'sendmsg':
            // Instantiate a new Twilio Rest Client.
            $client = new TwilioRestClient($account_sid, $auth_token);
            try {
              $response = $client->request("/$api_version/Accounts/$account_sid/SMS/Messages",
                "POST", array(
                  "To" => '+' . $data['country'] . $data['number'],
                  "From" => $number,
                  "Body" => $data['message'],
                )
              );
              return TRUE;
            }
            catch (Exception $e) {
              watchdog('Twilio', $e, array(), WATCHDOG_ERROR);
            }
            if ($response->IsError) {
              watchdog('Twilio', 'An error occured during the HTTP request: @error', array('@error' => $response->ErrorMessage));
            }
            break;

        }
        break;
    }
  }
  else {
    watchdog('Twilio', 'The twilio library was not loaded properly');
  }
  return FALSE;
}

// receive response from sms
function receive_response_by_sms_callback()
{
    include_once(libraries_get_path('twilio') . '/Services/Twilio.php');    
}
//**************** start proposal Feedback Report ****************//
function proposal_summary_report($nid){
	
	//echo $nid; die;
	 
	global $user, $base_url, $base_path;
    $node = node_load($nid);
	
 if(!empty($node->nid) && is_numeric($node->nid)){
		
	$proposal_submitted_for = $node->field_choose_from_the_options_li['und'][0]['value'];
 
	$submitedForContentNid = '';
	$submitedForContentNode = '';
	$submitedForContentType = '';
	$submittedToCompany ='';
$fieldmapping = array(
	'Submit Proposal in Response to a RFP'=> array('field'=>'field_submit_proposal_in_respons','type'=>'rfp'),
	'Submit Proposal in Response to a Project'=> array('field'=>'field_field_sub_proposal_pjt','type'=>'project'),
	'Submit Proposal to a company'=> array('field'=>'field_submit_proposal_to_company','type'=>'organization'),
);

if(array_key_exists($proposal_submitted_for,$fieldmapping)){
  if(isset($node->{$fieldmapping[$proposal_submitted_for]['field']}['und']) && !empty($node->{$fieldmapping[$proposal_submitted_for]['field']}['und'][0]['target_id'])){
    $submitedForContentNid = $node->{$fieldmapping[$proposal_submitted_for]['field']}['und'][0]['target_id'];
	$submitedForContentNode = node_load($submitedForContentNid);
	$submitedForContentType = $fieldmapping[$proposal_submitted_for]['type'];
	if($submitedForContentType == 'organization'){
	  $submittedToCompany = $submitedForContentNode;
	}else{
	  $submittedCompanyNid = _get_company_nid_by_group_content($submitedForContentNode);
	  if($submittedCompanyNid){
		$submittedToCompany = node_load($submittedCompanyNid);
		//print "<pre>"; print_r($submittedToCompany); die;
	  }
	}
  }
}
  //////////////// End Customer  Information ///////////////	
	
  $CompanyNid  = _get_company_nid_by_group_content($node);
  $node_by_com = node_load($CompanyNid);
	
  $cimagepath = '';
  $cimgpath = (isset($node_by_com->field_logo['und']) && !empty($node_by_com->field_logo['und'][0]['uri'])) ? $node_by_com->field_logo['und'][0]['uri'] : 0; 
  			if($cimgpath){
				$fids = $node_by_com->field_logo['und'][0]['fid']; 	
    			$result = file_load_multiple(array($fids)); 
    			if(is_array($result) && !empty($result)) {
      				foreach ($result as $delta => $fileObj) {
        				$filname = $fileObj->filename; 
        				$objFile = file_copy($fileObj, $destination = 'public://' . $filname, $replace = FILE_EXISTS_RENAME);
       		 			if ($objFile){
          				$newimgobj = (array) $objFile;
		  				$newcimgpath = $newimgobj['uri'];
		  				$cimagepath = image_style_url('pic_85x85', $newcimgpath);
		  				$objFile->status = 0;
		  				file_save($objFile);
        			  }
                  }
				}
         } 
	     
		 if(!empty($cimagepath)){	      
		  $companyLogo = '<img src="'.$cimagepath.'" alt="company logo"/>';  
		 }else{
	      $companyLogo= '<img style="width:85px;" src="'.$base_url.'/sites/all/themes/m6connect/images/default_company_profile.jpg"/>';  
         }
 }
	$content = theme('proposal_feedback_report_content', array('node' => $node));
	//print $content;
    include_once(libraries_get_path('mpdf') . '/mpdf.php');
    $mpdf = new mPDF('c');
	
	$mpdf->SetHTMLHeader('<div class="page_header" style="padding:10px; background: #eee;"><div style="margin-bottom:0px;"><table><tr><td style="width:230px;">'.$companyLogo.'</td>
<td style="width:450px; vertical-align:top;"><h1 style="text-align:center">'.$submitedForContentNode->title.'</h1></td></tr>
<tr><td colspan="2" style="width:230px; vertical-align:bottom;"><h2 style="margin:0;">'.$node_by_com->title.'</h2></td></tr></table></div></div>');
 
	$mpdf->SetHTMLFooter('<table width="100%" style="vertical-align: bottom; font-size: 10pt; margin:60px 0 0 0px;"><tr><td width="33%"><img style="width:150px;" src="'.$base_url.'/sites/all/themes/m6connect/images/bidder_report_footer.png" alt="logo"/></td>
<td width="33%" align="center" style="font-style: normal;">{PAGENO}/{nbpg}</td>
<td width="33%" align="right"><span style="font-style: normal;">Print Date:{DATE j-m-Y}</span></td></tr></table>');
$mpdf->SetHTMLFooter('<table width="100%" style="vertical-align: bottom; font-size: 10pt; margin:60px 0 0 0px;"><tr><td width="33%"><img style="width:15px;" src="'.$base_url.'/sites/all/themes/m6connect/images/bidder_report_footer.png" alt="logo"/></td>
<td width="33%" align="center" style="font-style: normal;">{PAGENO}/{nbpg}</td>
<td width="33%" align="right"><span style="font-style: normal;">Print Date:{DATE j-m-Y}</span></td></tr></table>', 'E'); 
    $mpdf->WriteHTML($content);
    $file_content = $mpdf->Output('report.pdf', 'I');	
}
//**************** end proposal Feedback Report ****************//

function custom_bidkey_seton_assproject_callback($form, &$form_state){
  $commands = array(); 
  //pre($form_state['values']['field_project']);
  //pre($form_state['values']);
  if(isset($form_state['values']['field_project']['und']) && !empty($form_state['values']['field_project']['und'][0]['target_id']) && is_numeric($form_state['values']['field_project']['und'][0]['target_id'])){
    $ProjectNid = $form_state['values']['field_project']['und'][0]['target_id'];
	$ProjectBidValue = '';
	$CreateBidkey = db_select('field_data_field_create_confidential_bid','fdfccb')
	  ->fields('fdfccb',array('field_create_confidential_bid_value'))
	  ->condition('fdfccb.entity_id',$ProjectNid)
	  ->condition('fdfccb.bundle','project')
	  ->execute()->fetchField();			
	if(isset($CreateBidkey) && !empty($CreateBidkey) && $CreateBidkey){
	  $BidKey = db_select('m6connect_confidential_bids_keys','mcbk')
	  ->fields('mcbk',array('confid_value'))
	  ->condition('mcbk.entity_id',$ProjectNid)
	  ->execute()->fetchField();
	  $ProjectBidValue = $BidKey;
	  $commands[] = ajax_command_invoke('input[name="field_create_confidential_bid[und]"]', 'removeAttr', array('checked'));			
	  $commands[]=ajax_command_invoke('input[name="field_create_confidential_bid[und]"]','attr',array('checked', 'true')); 
	  $commands[]=ajax_command_invoke('input[name="field_create_confidential_bid[und]"]','trigger', array('change'));	  
	  $commands[]=ajax_command_html('.confidential-bid-key-container-inner', array('<span class="confidential-bid-text" style="margin-left:2.4em;"><strong>Bid Key: </strong>'.$BidKey.'</span>'));	  
	  $commands[]=ajax_command_invoke('.rfp_my_project_id','val', array($ProjectNid));
	  $commands[]=ajax_command_invoke('.rfp_my_project_bidkey','val', array($BidKey));  
	}
	else{
	  $commands[]=ajax_command_invoke('.rfp_my_project_id','val', array($ProjectNid));
	  
	}
  }else{
    $GenBidKey = _generate_m6connect_confidential_key($form_state['values']['type'],$form_state['values']['uid'],$length=7);
    $commands[]=ajax_command_html('.confidential-bid-key-container-inner', array('<span class="confidential-bid-text" style="margin-left:2.4em;"><strong>Bid Key: </strong>'.$GenBidKey.'</span>'));
	$commands[]=ajax_command_invoke('.rfp_my_project_bidkey','val', array($BidKey));
  }
  return array('#type' => 'ajax','#commands' => $commands);
}